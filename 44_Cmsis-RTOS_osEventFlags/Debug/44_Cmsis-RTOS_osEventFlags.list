
44_Cmsis-RTOS_osEventFlags.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e60  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000200  08007fa0  08007fa0  00017fa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080081a0  080081a0  000181a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080081a8  080081a8  000181a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080081ac  080081ac  000181ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  20000004  080081b0  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001e48  20000078  08008224  00020078  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20001ec0  08008224  00021ec0  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 10 .debug_info   00026997  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004860  00000000  00000000  00046a3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002290  00000000  00000000  0004b2a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002108  00000000  00000000  0004d530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00005256  00000000  00000000  0004f638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000205a8  00000000  00000000  0005488e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000ee76e  00000000  00000000  00074e36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001635a4  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009664  00000000  00000000  001635f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000078 	.word	0x20000078
 800015c:	00000000 	.word	0x00000000
 8000160:	08007f88 	.word	0x08007f88

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000007c 	.word	0x2000007c
 800017c:	08007f88 	.word	0x08007f88

08000180 <__aeabi_uldivmod>:
 8000180:	b953      	cbnz	r3, 8000198 <__aeabi_uldivmod+0x18>
 8000182:	b94a      	cbnz	r2, 8000198 <__aeabi_uldivmod+0x18>
 8000184:	2900      	cmp	r1, #0
 8000186:	bf08      	it	eq
 8000188:	2800      	cmpeq	r0, #0
 800018a:	bf1c      	itt	ne
 800018c:	f04f 31ff 	movne.w	r1, #4294967295
 8000190:	f04f 30ff 	movne.w	r0, #4294967295
 8000194:	f000 b974 	b.w	8000480 <__aeabi_idiv0>
 8000198:	f1ad 0c08 	sub.w	ip, sp, #8
 800019c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001a0:	f000 f806 	bl	80001b0 <__udivmoddi4>
 80001a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001ac:	b004      	add	sp, #16
 80001ae:	4770      	bx	lr

080001b0 <__udivmoddi4>:
 80001b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b4:	9d08      	ldr	r5, [sp, #32]
 80001b6:	4604      	mov	r4, r0
 80001b8:	468e      	mov	lr, r1
 80001ba:	2b00      	cmp	r3, #0
 80001bc:	d14d      	bne.n	800025a <__udivmoddi4+0xaa>
 80001be:	428a      	cmp	r2, r1
 80001c0:	4694      	mov	ip, r2
 80001c2:	d969      	bls.n	8000298 <__udivmoddi4+0xe8>
 80001c4:	fab2 f282 	clz	r2, r2
 80001c8:	b152      	cbz	r2, 80001e0 <__udivmoddi4+0x30>
 80001ca:	fa01 f302 	lsl.w	r3, r1, r2
 80001ce:	f1c2 0120 	rsb	r1, r2, #32
 80001d2:	fa20 f101 	lsr.w	r1, r0, r1
 80001d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80001da:	ea41 0e03 	orr.w	lr, r1, r3
 80001de:	4094      	lsls	r4, r2
 80001e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80001e4:	0c21      	lsrs	r1, r4, #16
 80001e6:	fbbe f6f8 	udiv	r6, lr, r8
 80001ea:	fa1f f78c 	uxth.w	r7, ip
 80001ee:	fb08 e316 	mls	r3, r8, r6, lr
 80001f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80001f6:	fb06 f107 	mul.w	r1, r6, r7
 80001fa:	4299      	cmp	r1, r3
 80001fc:	d90a      	bls.n	8000214 <__udivmoddi4+0x64>
 80001fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000202:	f106 30ff 	add.w	r0, r6, #4294967295
 8000206:	f080 811f 	bcs.w	8000448 <__udivmoddi4+0x298>
 800020a:	4299      	cmp	r1, r3
 800020c:	f240 811c 	bls.w	8000448 <__udivmoddi4+0x298>
 8000210:	3e02      	subs	r6, #2
 8000212:	4463      	add	r3, ip
 8000214:	1a5b      	subs	r3, r3, r1
 8000216:	b2a4      	uxth	r4, r4
 8000218:	fbb3 f0f8 	udiv	r0, r3, r8
 800021c:	fb08 3310 	mls	r3, r8, r0, r3
 8000220:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000224:	fb00 f707 	mul.w	r7, r0, r7
 8000228:	42a7      	cmp	r7, r4
 800022a:	d90a      	bls.n	8000242 <__udivmoddi4+0x92>
 800022c:	eb1c 0404 	adds.w	r4, ip, r4
 8000230:	f100 33ff 	add.w	r3, r0, #4294967295
 8000234:	f080 810a 	bcs.w	800044c <__udivmoddi4+0x29c>
 8000238:	42a7      	cmp	r7, r4
 800023a:	f240 8107 	bls.w	800044c <__udivmoddi4+0x29c>
 800023e:	4464      	add	r4, ip
 8000240:	3802      	subs	r0, #2
 8000242:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000246:	1be4      	subs	r4, r4, r7
 8000248:	2600      	movs	r6, #0
 800024a:	b11d      	cbz	r5, 8000254 <__udivmoddi4+0xa4>
 800024c:	40d4      	lsrs	r4, r2
 800024e:	2300      	movs	r3, #0
 8000250:	e9c5 4300 	strd	r4, r3, [r5]
 8000254:	4631      	mov	r1, r6
 8000256:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800025a:	428b      	cmp	r3, r1
 800025c:	d909      	bls.n	8000272 <__udivmoddi4+0xc2>
 800025e:	2d00      	cmp	r5, #0
 8000260:	f000 80ef 	beq.w	8000442 <__udivmoddi4+0x292>
 8000264:	2600      	movs	r6, #0
 8000266:	e9c5 0100 	strd	r0, r1, [r5]
 800026a:	4630      	mov	r0, r6
 800026c:	4631      	mov	r1, r6
 800026e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000272:	fab3 f683 	clz	r6, r3
 8000276:	2e00      	cmp	r6, #0
 8000278:	d14a      	bne.n	8000310 <__udivmoddi4+0x160>
 800027a:	428b      	cmp	r3, r1
 800027c:	d302      	bcc.n	8000284 <__udivmoddi4+0xd4>
 800027e:	4282      	cmp	r2, r0
 8000280:	f200 80f9 	bhi.w	8000476 <__udivmoddi4+0x2c6>
 8000284:	1a84      	subs	r4, r0, r2
 8000286:	eb61 0303 	sbc.w	r3, r1, r3
 800028a:	2001      	movs	r0, #1
 800028c:	469e      	mov	lr, r3
 800028e:	2d00      	cmp	r5, #0
 8000290:	d0e0      	beq.n	8000254 <__udivmoddi4+0xa4>
 8000292:	e9c5 4e00 	strd	r4, lr, [r5]
 8000296:	e7dd      	b.n	8000254 <__udivmoddi4+0xa4>
 8000298:	b902      	cbnz	r2, 800029c <__udivmoddi4+0xec>
 800029a:	deff      	udf	#255	; 0xff
 800029c:	fab2 f282 	clz	r2, r2
 80002a0:	2a00      	cmp	r2, #0
 80002a2:	f040 8092 	bne.w	80003ca <__udivmoddi4+0x21a>
 80002a6:	eba1 010c 	sub.w	r1, r1, ip
 80002aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ae:	fa1f fe8c 	uxth.w	lr, ip
 80002b2:	2601      	movs	r6, #1
 80002b4:	0c20      	lsrs	r0, r4, #16
 80002b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80002ba:	fb07 1113 	mls	r1, r7, r3, r1
 80002be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80002c2:	fb0e f003 	mul.w	r0, lr, r3
 80002c6:	4288      	cmp	r0, r1
 80002c8:	d908      	bls.n	80002dc <__udivmoddi4+0x12c>
 80002ca:	eb1c 0101 	adds.w	r1, ip, r1
 80002ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0x12a>
 80002d4:	4288      	cmp	r0, r1
 80002d6:	f200 80cb 	bhi.w	8000470 <__udivmoddi4+0x2c0>
 80002da:	4643      	mov	r3, r8
 80002dc:	1a09      	subs	r1, r1, r0
 80002de:	b2a4      	uxth	r4, r4
 80002e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80002e4:	fb07 1110 	mls	r1, r7, r0, r1
 80002e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80002ec:	fb0e fe00 	mul.w	lr, lr, r0
 80002f0:	45a6      	cmp	lr, r4
 80002f2:	d908      	bls.n	8000306 <__udivmoddi4+0x156>
 80002f4:	eb1c 0404 	adds.w	r4, ip, r4
 80002f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80002fc:	d202      	bcs.n	8000304 <__udivmoddi4+0x154>
 80002fe:	45a6      	cmp	lr, r4
 8000300:	f200 80bb 	bhi.w	800047a <__udivmoddi4+0x2ca>
 8000304:	4608      	mov	r0, r1
 8000306:	eba4 040e 	sub.w	r4, r4, lr
 800030a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800030e:	e79c      	b.n	800024a <__udivmoddi4+0x9a>
 8000310:	f1c6 0720 	rsb	r7, r6, #32
 8000314:	40b3      	lsls	r3, r6
 8000316:	fa22 fc07 	lsr.w	ip, r2, r7
 800031a:	ea4c 0c03 	orr.w	ip, ip, r3
 800031e:	fa20 f407 	lsr.w	r4, r0, r7
 8000322:	fa01 f306 	lsl.w	r3, r1, r6
 8000326:	431c      	orrs	r4, r3
 8000328:	40f9      	lsrs	r1, r7
 800032a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800032e:	fa00 f306 	lsl.w	r3, r0, r6
 8000332:	fbb1 f8f9 	udiv	r8, r1, r9
 8000336:	0c20      	lsrs	r0, r4, #16
 8000338:	fa1f fe8c 	uxth.w	lr, ip
 800033c:	fb09 1118 	mls	r1, r9, r8, r1
 8000340:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000344:	fb08 f00e 	mul.w	r0, r8, lr
 8000348:	4288      	cmp	r0, r1
 800034a:	fa02 f206 	lsl.w	r2, r2, r6
 800034e:	d90b      	bls.n	8000368 <__udivmoddi4+0x1b8>
 8000350:	eb1c 0101 	adds.w	r1, ip, r1
 8000354:	f108 3aff 	add.w	sl, r8, #4294967295
 8000358:	f080 8088 	bcs.w	800046c <__udivmoddi4+0x2bc>
 800035c:	4288      	cmp	r0, r1
 800035e:	f240 8085 	bls.w	800046c <__udivmoddi4+0x2bc>
 8000362:	f1a8 0802 	sub.w	r8, r8, #2
 8000366:	4461      	add	r1, ip
 8000368:	1a09      	subs	r1, r1, r0
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000370:	fb09 1110 	mls	r1, r9, r0, r1
 8000374:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	458e      	cmp	lr, r1
 800037e:	d908      	bls.n	8000392 <__udivmoddi4+0x1e2>
 8000380:	eb1c 0101 	adds.w	r1, ip, r1
 8000384:	f100 34ff 	add.w	r4, r0, #4294967295
 8000388:	d26c      	bcs.n	8000464 <__udivmoddi4+0x2b4>
 800038a:	458e      	cmp	lr, r1
 800038c:	d96a      	bls.n	8000464 <__udivmoddi4+0x2b4>
 800038e:	3802      	subs	r0, #2
 8000390:	4461      	add	r1, ip
 8000392:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000396:	fba0 9402 	umull	r9, r4, r0, r2
 800039a:	eba1 010e 	sub.w	r1, r1, lr
 800039e:	42a1      	cmp	r1, r4
 80003a0:	46c8      	mov	r8, r9
 80003a2:	46a6      	mov	lr, r4
 80003a4:	d356      	bcc.n	8000454 <__udivmoddi4+0x2a4>
 80003a6:	d053      	beq.n	8000450 <__udivmoddi4+0x2a0>
 80003a8:	b15d      	cbz	r5, 80003c2 <__udivmoddi4+0x212>
 80003aa:	ebb3 0208 	subs.w	r2, r3, r8
 80003ae:	eb61 010e 	sbc.w	r1, r1, lr
 80003b2:	fa01 f707 	lsl.w	r7, r1, r7
 80003b6:	fa22 f306 	lsr.w	r3, r2, r6
 80003ba:	40f1      	lsrs	r1, r6
 80003bc:	431f      	orrs	r7, r3
 80003be:	e9c5 7100 	strd	r7, r1, [r5]
 80003c2:	2600      	movs	r6, #0
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	f1c2 0320 	rsb	r3, r2, #32
 80003ce:	40d8      	lsrs	r0, r3
 80003d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80003d4:	fa21 f303 	lsr.w	r3, r1, r3
 80003d8:	4091      	lsls	r1, r2
 80003da:	4301      	orrs	r1, r0
 80003dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e0:	fa1f fe8c 	uxth.w	lr, ip
 80003e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80003e8:	fb07 3610 	mls	r6, r7, r0, r3
 80003ec:	0c0b      	lsrs	r3, r1, #16
 80003ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80003f2:	fb00 f60e 	mul.w	r6, r0, lr
 80003f6:	429e      	cmp	r6, r3
 80003f8:	fa04 f402 	lsl.w	r4, r4, r2
 80003fc:	d908      	bls.n	8000410 <__udivmoddi4+0x260>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f100 38ff 	add.w	r8, r0, #4294967295
 8000406:	d22f      	bcs.n	8000468 <__udivmoddi4+0x2b8>
 8000408:	429e      	cmp	r6, r3
 800040a:	d92d      	bls.n	8000468 <__udivmoddi4+0x2b8>
 800040c:	3802      	subs	r0, #2
 800040e:	4463      	add	r3, ip
 8000410:	1b9b      	subs	r3, r3, r6
 8000412:	b289      	uxth	r1, r1
 8000414:	fbb3 f6f7 	udiv	r6, r3, r7
 8000418:	fb07 3316 	mls	r3, r7, r6, r3
 800041c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000420:	fb06 f30e 	mul.w	r3, r6, lr
 8000424:	428b      	cmp	r3, r1
 8000426:	d908      	bls.n	800043a <__udivmoddi4+0x28a>
 8000428:	eb1c 0101 	adds.w	r1, ip, r1
 800042c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000430:	d216      	bcs.n	8000460 <__udivmoddi4+0x2b0>
 8000432:	428b      	cmp	r3, r1
 8000434:	d914      	bls.n	8000460 <__udivmoddi4+0x2b0>
 8000436:	3e02      	subs	r6, #2
 8000438:	4461      	add	r1, ip
 800043a:	1ac9      	subs	r1, r1, r3
 800043c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000440:	e738      	b.n	80002b4 <__udivmoddi4+0x104>
 8000442:	462e      	mov	r6, r5
 8000444:	4628      	mov	r0, r5
 8000446:	e705      	b.n	8000254 <__udivmoddi4+0xa4>
 8000448:	4606      	mov	r6, r0
 800044a:	e6e3      	b.n	8000214 <__udivmoddi4+0x64>
 800044c:	4618      	mov	r0, r3
 800044e:	e6f8      	b.n	8000242 <__udivmoddi4+0x92>
 8000450:	454b      	cmp	r3, r9
 8000452:	d2a9      	bcs.n	80003a8 <__udivmoddi4+0x1f8>
 8000454:	ebb9 0802 	subs.w	r8, r9, r2
 8000458:	eb64 0e0c 	sbc.w	lr, r4, ip
 800045c:	3801      	subs	r0, #1
 800045e:	e7a3      	b.n	80003a8 <__udivmoddi4+0x1f8>
 8000460:	4646      	mov	r6, r8
 8000462:	e7ea      	b.n	800043a <__udivmoddi4+0x28a>
 8000464:	4620      	mov	r0, r4
 8000466:	e794      	b.n	8000392 <__udivmoddi4+0x1e2>
 8000468:	4640      	mov	r0, r8
 800046a:	e7d1      	b.n	8000410 <__udivmoddi4+0x260>
 800046c:	46d0      	mov	r8, sl
 800046e:	e77b      	b.n	8000368 <__udivmoddi4+0x1b8>
 8000470:	3b02      	subs	r3, #2
 8000472:	4461      	add	r1, ip
 8000474:	e732      	b.n	80002dc <__udivmoddi4+0x12c>
 8000476:	4630      	mov	r0, r6
 8000478:	e709      	b.n	800028e <__udivmoddi4+0xde>
 800047a:	4464      	add	r4, ip
 800047c:	3802      	subs	r0, #2
 800047e:	e742      	b.n	8000306 <__udivmoddi4+0x156>

08000480 <__aeabi_idiv0>:
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop

08000484 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000484:	b480      	push	{r7}
 8000486:	b083      	sub	sp, #12
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800048c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000490:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000494:	f023 0218 	bic.w	r2, r3, #24
 8000498:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	4313      	orrs	r3, r2
 80004a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80004a4:	bf00      	nop
 80004a6:	370c      	adds	r7, #12
 80004a8:	46bd      	mov	sp, r7
 80004aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ae:	4770      	bx	lr

080004b0 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004b0:	b480      	push	{r7}
 80004b2:	b085      	sub	sp, #20
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80004b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004bc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	4313      	orrs	r3, r2
 80004c6:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80004c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	4013      	ands	r3, r2
 80004d2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004d4:	68fb      	ldr	r3, [r7, #12]
}
 80004d6:	bf00      	nop
 80004d8:	3714      	adds	r7, #20
 80004da:	46bd      	mov	sp, r7
 80004dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e0:	4770      	bx	lr
	...

080004e4 <main>:
static const osEventFlagsAttr_t EventFlagAttr_LED = {
		.name = "LED_Events"
};

int main(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b0a4      	sub	sp, #144	; 0x90
 80004e8:	af00      	add	r7, sp, #0

  HAL_Init();
 80004ea:	f000 fcb5 	bl	8000e58 <HAL_Init>
  SystemClock_Config();
 80004ee:	f000 f949 	bl	8000784 <SystemClock_Config>
  MX_GPIO_Init();
 80004f2:	f000 fa31 	bl	8000958 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80004f6:	f000 f9bb 	bl	8000870 <MX_LPUART1_UART_Init>
  MX_USB_PCD_Init();
 80004fa:	f000 fa05 	bl	8000908 <MX_USB_PCD_Init>

  // Initialize the kernel
  osKernelInitialize();
 80004fe:	f003 ffb9 	bl	8004474 <osKernelInitialize>

  EventFlag_LED = osEventFlagsNew(&EventFlagAttr_LED);
 8000502:	4845      	ldr	r0, [pc, #276]	; (8000618 <main+0x134>)
 8000504:	f004 f96c 	bl	80047e0 <osEventFlagsNew>
 8000508:	4603      	mov	r3, r0
 800050a:	4a44      	ldr	r2, [pc, #272]	; (800061c <main+0x138>)
 800050c:	6013      	str	r3, [r2, #0]

  // Creating Timers
  timer_1_id = osTimerNew(Timer1_Callback, osTimerOnce, NULL, NULL);
 800050e:	2300      	movs	r3, #0
 8000510:	2200      	movs	r2, #0
 8000512:	2100      	movs	r1, #0
 8000514:	4842      	ldr	r0, [pc, #264]	; (8000620 <main+0x13c>)
 8000516:	f004 f8b9 	bl	800468c <osTimerNew>
 800051a:	4603      	mov	r3, r0
 800051c:	4a41      	ldr	r2, [pc, #260]	; (8000624 <main+0x140>)
 800051e:	6013      	str	r3, [r2, #0]
  timer_2_id = osTimerNew(Timer2_Callback, osTimerPeriodic, NULL, NULL);
 8000520:	2300      	movs	r3, #0
 8000522:	2200      	movs	r2, #0
 8000524:	2101      	movs	r1, #1
 8000526:	4840      	ldr	r0, [pc, #256]	; (8000628 <main+0x144>)
 8000528:	f004 f8b0 	bl	800468c <osTimerNew>
 800052c:	4603      	mov	r3, r0
 800052e:	4a3f      	ldr	r2, [pc, #252]	; (800062c <main+0x148>)
 8000530:	6013      	str	r3, [r2, #0]

  // Create Threads
  osThreadAttr_t greenThreadAttribs = {
 8000532:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000536:	2224      	movs	r2, #36	; 0x24
 8000538:	2100      	movs	r1, #0
 800053a:	4618      	mov	r0, r3
 800053c:	f007 fc5a 	bl	8007df4 <memset>
 8000540:	4b3b      	ldr	r3, [pc, #236]	; (8000630 <main+0x14c>)
 8000542:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000544:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000548:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800054c:	2318      	movs	r3, #24
 800054e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		  .name = "Green Task",
		  .stack_size = STACK_SIZE,
		  .priority	= osPriorityNormal
  };

  osThreadAttr_t redThreadAttribs = {
 8000552:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000556:	2224      	movs	r2, #36	; 0x24
 8000558:	2100      	movs	r1, #0
 800055a:	4618      	mov	r0, r3
 800055c:	f007 fc4a 	bl	8007df4 <memset>
 8000560:	4b34      	ldr	r3, [pc, #208]	; (8000634 <main+0x150>)
 8000562:	64bb      	str	r3, [r7, #72]	; 0x48
 8000564:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000568:	65fb      	str	r3, [r7, #92]	; 0x5c
 800056a:	2318      	movs	r3, #24
 800056c:	663b      	str	r3, [r7, #96]	; 0x60
		  .name = "Red Task",
		  .stack_size = STACK_SIZE,
		  .priority	= osPriorityNormal
  };

  osThreadAttr_t orangeThreadAttribs = {
 800056e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000572:	2224      	movs	r2, #36	; 0x24
 8000574:	2100      	movs	r1, #0
 8000576:	4618      	mov	r0, r3
 8000578:	f007 fc3c 	bl	8007df4 <memset>
 800057c:	4b2e      	ldr	r3, [pc, #184]	; (8000638 <main+0x154>)
 800057e:	627b      	str	r3, [r7, #36]	; 0x24
 8000580:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000584:	63bb      	str	r3, [r7, #56]	; 0x38
 8000586:	2318      	movs	r3, #24
 8000588:	63fb      	str	r3, [r7, #60]	; 0x3c
		  .name = "Orange Task",
		  .stack_size = STACK_SIZE,
		  .priority	= osPriorityNormal
  };

  osThreadAttr_t blueThreadAttribs = {
 800058a:	463b      	mov	r3, r7
 800058c:	2224      	movs	r2, #36	; 0x24
 800058e:	2100      	movs	r1, #0
 8000590:	4618      	mov	r0, r3
 8000592:	f007 fc2f 	bl	8007df4 <memset>
 8000596:	4b29      	ldr	r3, [pc, #164]	; (800063c <main+0x158>)
 8000598:	603b      	str	r3, [r7, #0]
 800059a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800059e:	617b      	str	r3, [r7, #20]
 80005a0:	2318      	movs	r3, #24
 80005a2:	61bb      	str	r3, [r7, #24]
		  .stack_size = STACK_SIZE,
		  .priority	= osPriorityNormal
  };

  // Created Threads
  green_id = osThreadNew(vGreenLedControllerTask, NULL, &greenThreadAttribs);
 80005a4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80005a8:	461a      	mov	r2, r3
 80005aa:	2100      	movs	r1, #0
 80005ac:	4824      	ldr	r0, [pc, #144]	; (8000640 <main+0x15c>)
 80005ae:	f003 ffab 	bl	8004508 <osThreadNew>
 80005b2:	4603      	mov	r3, r0
 80005b4:	4a23      	ldr	r2, [pc, #140]	; (8000644 <main+0x160>)
 80005b6:	6013      	str	r3, [r2, #0]
  red_id = osThreadNew(vRedLedControllerTask, NULL, &redThreadAttribs);
 80005b8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80005bc:	461a      	mov	r2, r3
 80005be:	2100      	movs	r1, #0
 80005c0:	4821      	ldr	r0, [pc, #132]	; (8000648 <main+0x164>)
 80005c2:	f003 ffa1 	bl	8004508 <osThreadNew>
 80005c6:	4603      	mov	r3, r0
 80005c8:	4a20      	ldr	r2, [pc, #128]	; (800064c <main+0x168>)
 80005ca:	6013      	str	r3, [r2, #0]
  orange_id = osThreadNew(vOrangeLedControllerTask, NULL, &orangeThreadAttribs);
 80005cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005d0:	461a      	mov	r2, r3
 80005d2:	2100      	movs	r1, #0
 80005d4:	481e      	ldr	r0, [pc, #120]	; (8000650 <main+0x16c>)
 80005d6:	f003 ff97 	bl	8004508 <osThreadNew>
 80005da:	4603      	mov	r3, r0
 80005dc:	4a1d      	ldr	r2, [pc, #116]	; (8000654 <main+0x170>)
 80005de:	6013      	str	r3, [r2, #0]
  blue_id = osThreadNew(vBlueLedControllerTask, NULL, &blueThreadAttribs);
 80005e0:	463b      	mov	r3, r7
 80005e2:	461a      	mov	r2, r3
 80005e4:	2100      	movs	r1, #0
 80005e6:	481c      	ldr	r0, [pc, #112]	; (8000658 <main+0x174>)
 80005e8:	f003 ff8e 	bl	8004508 <osThreadNew>
 80005ec:	4603      	mov	r3, r0
 80005ee:	4a1b      	ldr	r2, [pc, #108]	; (800065c <main+0x178>)
 80005f0:	6013      	str	r3, [r2, #0]

  uart_semaphore_id = osSemaphoreNew( 1, 1, &uartSemaphoreAttribs);
 80005f2:	4a1b      	ldr	r2, [pc, #108]	; (8000660 <main+0x17c>)
 80005f4:	2101      	movs	r1, #1
 80005f6:	2001      	movs	r0, #1
 80005f8:	f004 f9dc 	bl	80049b4 <osSemaphoreNew>
 80005fc:	4603      	mov	r3, r0
 80005fe:	4a19      	ldr	r2, [pc, #100]	; (8000664 <main+0x180>)
 8000600:	6013      	str	r3, [r2, #0]

  msg_queue_id = osMessageQueueNew(5, sizeof(uint16_t), &msgQueueAttribs);
 8000602:	4a19      	ldr	r2, [pc, #100]	; (8000668 <main+0x184>)
 8000604:	2102      	movs	r1, #2
 8000606:	2005      	movs	r0, #5
 8000608:	f004 fa5d 	bl	8004ac6 <osMessageQueueNew>
 800060c:	4603      	mov	r3, r0
 800060e:	4a17      	ldr	r2, [pc, #92]	; (800066c <main+0x188>)
 8000610:	6013      	str	r3, [r2, #0]

  osKernelStart();
 8000612:	f003 ff53 	bl	80044bc <osKernelStart>

  while (1)
 8000616:	e7fe      	b.n	8000616 <main+0x132>
 8000618:	08008068 	.word	0x08008068
 800061c:	20000454 	.word	0x20000454
 8000620:	0800073d 	.word	0x0800073d
 8000624:	20000444 	.word	0x20000444
 8000628:	08000761 	.word	0x08000761
 800062c:	20000448 	.word	0x20000448
 8000630:	08007fcc 	.word	0x08007fcc
 8000634:	08007fd8 	.word	0x08007fd8
 8000638:	08007fe4 	.word	0x08007fe4
 800063c:	08007ff0 	.word	0x08007ff0
 8000640:	08000671 	.word	0x08000671
 8000644:	20000438 	.word	0x20000438
 8000648:	08000691 	.word	0x08000691
 800064c:	20000434 	.word	0x20000434
 8000650:	080006c5 	.word	0x080006c5
 8000654:	20000440 	.word	0x20000440
 8000658:	080006e5 	.word	0x080006e5
 800065c:	2000043c 	.word	0x2000043c
 8000660:	08008040 	.word	0x08008040
 8000664:	2000044c 	.word	0x2000044c
 8000668:	08008050 	.word	0x08008050
 800066c:	20000450 	.word	0x20000450

08000670 <vGreenLedControllerTask>:
  }
  /* USER CODE END 3 */
}

void vGreenLedControllerTask(void *pvParameters)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
	while(1)
	{
		++Green_TaskProfiler;
 8000678:	4b04      	ldr	r3, [pc, #16]	; (800068c <vGreenLedControllerTask+0x1c>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	3301      	adds	r3, #1
 800067e:	4a03      	ldr	r2, [pc, #12]	; (800068c <vGreenLedControllerTask+0x1c>)
 8000680:	6013      	str	r3, [r2, #0]

		osDelay(100);
 8000682:	2064      	movs	r0, #100	; 0x64
 8000684:	f003 ffd2 	bl	800462c <osDelay>
		++Green_TaskProfiler;
 8000688:	e7f6      	b.n	8000678 <vGreenLedControllerTask+0x8>
 800068a:	bf00      	nop
 800068c:	20000424 	.word	0x20000424

08000690 <vRedLedControllerTask>:
	}
}

void vRedLedControllerTask(void *pvParameters)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b084      	sub	sp, #16
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
	uint16_t valueToSend[1] = {2050};
 8000698:	f640 0302 	movw	r3, #2050	; 0x802
 800069c:	81bb      	strh	r3, [r7, #12]

	while(1)
	{
		osEventFlagsSet(EventFlag_LED, 0x01);
 800069e:	4b07      	ldr	r3, [pc, #28]	; (80006bc <vRedLedControllerTask+0x2c>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	2101      	movs	r1, #1
 80006a4:	4618      	mov	r0, r3
 80006a6:	f004 f8db 	bl	8004860 <osEventFlagsSet>

		++Red_TaskProfiler;
 80006aa:	4b05      	ldr	r3, [pc, #20]	; (80006c0 <vRedLedControllerTask+0x30>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	3301      	adds	r3, #1
 80006b0:	4a03      	ldr	r2, [pc, #12]	; (80006c0 <vRedLedControllerTask+0x30>)
 80006b2:	6013      	str	r3, [r2, #0]

		osDelay(100);
 80006b4:	2064      	movs	r0, #100	; 0x64
 80006b6:	f003 ffb9 	bl	800462c <osDelay>
		osEventFlagsSet(EventFlag_LED, 0x01);
 80006ba:	e7f0      	b.n	800069e <vRedLedControllerTask+0xe>
 80006bc:	20000454 	.word	0x20000454
 80006c0:	20000420 	.word	0x20000420

080006c4 <vOrangeLedControllerTask>:
	}
}


void vOrangeLedControllerTask(void *pvParameters)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
	while(1)
	{
		++Orange_TaskProfiler;
 80006cc:	4b04      	ldr	r3, [pc, #16]	; (80006e0 <vOrangeLedControllerTask+0x1c>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	3301      	adds	r3, #1
 80006d2:	4a03      	ldr	r2, [pc, #12]	; (80006e0 <vOrangeLedControllerTask+0x1c>)
 80006d4:	6013      	str	r3, [r2, #0]

		osDelay(100);
 80006d6:	2064      	movs	r0, #100	; 0x64
 80006d8:	f003 ffa8 	bl	800462c <osDelay>
		++Orange_TaskProfiler;
 80006dc:	e7f6      	b.n	80006cc <vOrangeLedControllerTask+0x8>
 80006de:	bf00      	nop
 80006e0:	2000041c 	.word	0x2000041c

080006e4 <vBlueLedControllerTask>:
	}
}

void vBlueLedControllerTask(void *pvParameters)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]

	osTimerStart(timer_1_id, 5000);			// Set timer 1 period to 5000 ticks
 80006ec:	4b0f      	ldr	r3, [pc, #60]	; (800072c <vBlueLedControllerTask+0x48>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	f241 3188 	movw	r1, #5000	; 0x1388
 80006f4:	4618      	mov	r0, r3
 80006f6:	f004 f845 	bl	8004784 <osTimerStart>
	osTimerStart(timer_2_id, 1000);			// Set timer 2 period to 1000 ticks
 80006fa:	4b0d      	ldr	r3, [pc, #52]	; (8000730 <vBlueLedControllerTask+0x4c>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000702:	4618      	mov	r0, r3
 8000704:	f004 f83e 	bl	8004784 <osTimerStart>

	while(1)
	{
		osEventFlagsWait(EventFlag_LED, 0x01, osFlagsWaitAny, osWaitForever);
 8000708:	4b0a      	ldr	r3, [pc, #40]	; (8000734 <vBlueLedControllerTask+0x50>)
 800070a:	6818      	ldr	r0, [r3, #0]
 800070c:	f04f 33ff 	mov.w	r3, #4294967295
 8000710:	2200      	movs	r2, #0
 8000712:	2101      	movs	r1, #1
 8000714:	f004 f8e8 	bl	80048e8 <osEventFlagsWait>

		++Blue_TaskProfiler;
 8000718:	4b07      	ldr	r3, [pc, #28]	; (8000738 <vBlueLedControllerTask+0x54>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	3301      	adds	r3, #1
 800071e:	4a06      	ldr	r2, [pc, #24]	; (8000738 <vBlueLedControllerTask+0x54>)
 8000720:	6013      	str	r3, [r2, #0]

		osDelay(100);
 8000722:	2064      	movs	r0, #100	; 0x64
 8000724:	f003 ff82 	bl	800462c <osDelay>
		osEventFlagsWait(EventFlag_LED, 0x01, osFlagsWaitAny, osWaitForever);
 8000728:	e7ee      	b.n	8000708 <vBlueLedControllerTask+0x24>
 800072a:	bf00      	nop
 800072c:	20000444 	.word	0x20000444
 8000730:	20000448 	.word	0x20000448
 8000734:	20000454 	.word	0x20000454
 8000738:	20000428 	.word	0x20000428

0800073c <Timer1_Callback>:
	}
}

void Timer1_Callback(void *arg)
{
 800073c:	b480      	push	{r7}
 800073e:	b083      	sub	sp, #12
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
	timer_1_TaskProfiler++;
 8000744:	4b05      	ldr	r3, [pc, #20]	; (800075c <Timer1_Callback+0x20>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	3301      	adds	r3, #1
 800074a:	4a04      	ldr	r2, [pc, #16]	; (800075c <Timer1_Callback+0x20>)
 800074c:	6013      	str	r3, [r2, #0]
}
 800074e:	bf00      	nop
 8000750:	370c      	adds	r7, #12
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop
 800075c:	2000042c 	.word	0x2000042c

08000760 <Timer2_Callback>:

void Timer2_Callback(void *arg)
{
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
	timer_2_TaskProfiler++;
 8000768:	4b05      	ldr	r3, [pc, #20]	; (8000780 <Timer2_Callback+0x20>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	3301      	adds	r3, #1
 800076e:	4a04      	ldr	r2, [pc, #16]	; (8000780 <Timer2_Callback+0x20>)
 8000770:	6013      	str	r3, [r2, #0]
}
 8000772:	bf00      	nop
 8000774:	370c      	adds	r7, #12
 8000776:	46bd      	mov	sp, r7
 8000778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077c:	4770      	bx	lr
 800077e:	bf00      	nop
 8000780:	20000430 	.word	0x20000430

08000784 <SystemClock_Config>:

void SystemClock_Config(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b09a      	sub	sp, #104	; 0x68
 8000788:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800078a:	f107 0320 	add.w	r3, r7, #32
 800078e:	2248      	movs	r2, #72	; 0x48
 8000790:	2100      	movs	r1, #0
 8000792:	4618      	mov	r0, r3
 8000794:	f007 fb2e 	bl	8007df4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000798:	1d3b      	adds	r3, r7, #4
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
 800079e:	605a      	str	r2, [r3, #4]
 80007a0:	609a      	str	r2, [r3, #8]
 80007a2:	60da      	str	r2, [r3, #12]
 80007a4:	611a      	str	r2, [r3, #16]
 80007a6:	615a      	str	r2, [r3, #20]
 80007a8:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 80007aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007ae:	68db      	ldr	r3, [r3, #12]
 80007b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80007b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80007b8:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 80007ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007be:	68db      	ldr	r3, [r3, #12]
 80007c0:	f023 0303 	bic.w	r3, r3, #3
 80007c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80007c8:	f043 0301 	orr.w	r3, r3, #1
 80007cc:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80007ce:	f000 ff99 	bl	8001704 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80007d2:	2000      	movs	r0, #0
 80007d4:	f7ff fe56 	bl	8000484 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007d8:	4b24      	ldr	r3, [pc, #144]	; (800086c <SystemClock_Config+0xe8>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80007e0:	4a22      	ldr	r2, [pc, #136]	; (800086c <SystemClock_Config+0xe8>)
 80007e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007e6:	6013      	str	r3, [r2, #0]
 80007e8:	4b20      	ldr	r3, [pc, #128]	; (800086c <SystemClock_Config+0xe8>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80007f0:	603b      	str	r3, [r7, #0]
 80007f2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80007f4:	2327      	movs	r3, #39	; 0x27
 80007f6:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007fc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80007fe:	2301      	movs	r3, #1
 8000800:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000802:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000806:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000808:	2301      	movs	r3, #1
 800080a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800080c:	2340      	movs	r3, #64	; 0x40
 800080e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000810:	2300      	movs	r3, #0
 8000812:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000814:	2360      	movs	r3, #96	; 0x60
 8000816:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000818:	2300      	movs	r3, #0
 800081a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800081c:	f107 0320 	add.w	r3, r7, #32
 8000820:	4618      	mov	r0, r3
 8000822:	f001 fb61 	bl	8001ee8 <HAL_RCC_OscConfig>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800082c:	f000 f8fe 	bl	8000a2c <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000830:	236f      	movs	r3, #111	; 0x6f
 8000832:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000834:	2302      	movs	r3, #2
 8000836:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000838:	2300      	movs	r3, #0
 800083a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800083c:	2300      	movs	r3, #0
 800083e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000840:	2300      	movs	r3, #0
 8000842:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000844:	2300      	movs	r3, #0
 8000846:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000848:	2300      	movs	r3, #0
 800084a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800084c:	1d3b      	adds	r3, r7, #4
 800084e:	2101      	movs	r1, #1
 8000850:	4618      	mov	r0, r3
 8000852:	f001 febd 	bl	80025d0 <HAL_RCC_ClockConfig>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 800085c:	f000 f8e6 	bl	8000a2c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000860:	f002 fcaa 	bl	80031b8 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000864:	bf00      	nop
 8000866:	3768      	adds	r7, #104	; 0x68
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	58000400 	.word	0x58000400

08000870 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000874:	4b22      	ldr	r3, [pc, #136]	; (8000900 <MX_LPUART1_UART_Init+0x90>)
 8000876:	4a23      	ldr	r2, [pc, #140]	; (8000904 <MX_LPUART1_UART_Init+0x94>)
 8000878:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800087a:	4b21      	ldr	r3, [pc, #132]	; (8000900 <MX_LPUART1_UART_Init+0x90>)
 800087c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000880:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000882:	4b1f      	ldr	r3, [pc, #124]	; (8000900 <MX_LPUART1_UART_Init+0x90>)
 8000884:	2200      	movs	r2, #0
 8000886:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000888:	4b1d      	ldr	r3, [pc, #116]	; (8000900 <MX_LPUART1_UART_Init+0x90>)
 800088a:	2200      	movs	r2, #0
 800088c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800088e:	4b1c      	ldr	r3, [pc, #112]	; (8000900 <MX_LPUART1_UART_Init+0x90>)
 8000890:	2200      	movs	r2, #0
 8000892:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000894:	4b1a      	ldr	r3, [pc, #104]	; (8000900 <MX_LPUART1_UART_Init+0x90>)
 8000896:	220c      	movs	r2, #12
 8000898:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800089a:	4b19      	ldr	r3, [pc, #100]	; (8000900 <MX_LPUART1_UART_Init+0x90>)
 800089c:	2200      	movs	r2, #0
 800089e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008a0:	4b17      	ldr	r3, [pc, #92]	; (8000900 <MX_LPUART1_UART_Init+0x90>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008a6:	4b16      	ldr	r3, [pc, #88]	; (8000900 <MX_LPUART1_UART_Init+0x90>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008ac:	4b14      	ldr	r3, [pc, #80]	; (8000900 <MX_LPUART1_UART_Init+0x90>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80008b2:	4b13      	ldr	r3, [pc, #76]	; (8000900 <MX_LPUART1_UART_Init+0x90>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80008b8:	4811      	ldr	r0, [pc, #68]	; (8000900 <MX_LPUART1_UART_Init+0x90>)
 80008ba:	f003 f82d 	bl	8003918 <HAL_UART_Init>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 80008c4:	f000 f8b2 	bl	8000a2c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008c8:	2100      	movs	r1, #0
 80008ca:	480d      	ldr	r0, [pc, #52]	; (8000900 <MX_LPUART1_UART_Init+0x90>)
 80008cc:	f003 fc88 	bl	80041e0 <HAL_UARTEx_SetTxFifoThreshold>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 80008d6:	f000 f8a9 	bl	8000a2c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008da:	2100      	movs	r1, #0
 80008dc:	4808      	ldr	r0, [pc, #32]	; (8000900 <MX_LPUART1_UART_Init+0x90>)
 80008de:	f003 fcbd 	bl	800425c <HAL_UARTEx_SetRxFifoThreshold>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 80008e8:	f000 f8a0 	bl	8000a2c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80008ec:	4804      	ldr	r0, [pc, #16]	; (8000900 <MX_LPUART1_UART_Init+0x90>)
 80008ee:	f003 fc3e 	bl	800416e <HAL_UARTEx_DisableFifoMode>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 80008f8:	f000 f898 	bl	8000a2c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80008fc:	bf00      	nop
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	20000094 	.word	0x20000094
 8000904:	40008000 	.word	0x40008000

08000908 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 800090c:	4b10      	ldr	r3, [pc, #64]	; (8000950 <MX_USB_PCD_Init+0x48>)
 800090e:	4a11      	ldr	r2, [pc, #68]	; (8000954 <MX_USB_PCD_Init+0x4c>)
 8000910:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000912:	4b0f      	ldr	r3, [pc, #60]	; (8000950 <MX_USB_PCD_Init+0x48>)
 8000914:	2208      	movs	r2, #8
 8000916:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000918:	4b0d      	ldr	r3, [pc, #52]	; (8000950 <MX_USB_PCD_Init+0x48>)
 800091a:	2202      	movs	r2, #2
 800091c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800091e:	4b0c      	ldr	r3, [pc, #48]	; (8000950 <MX_USB_PCD_Init+0x48>)
 8000920:	2202      	movs	r2, #2
 8000922:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000924:	4b0a      	ldr	r3, [pc, #40]	; (8000950 <MX_USB_PCD_Init+0x48>)
 8000926:	2200      	movs	r2, #0
 8000928:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800092a:	4b09      	ldr	r3, [pc, #36]	; (8000950 <MX_USB_PCD_Init+0x48>)
 800092c:	2200      	movs	r2, #0
 800092e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000930:	4b07      	ldr	r3, [pc, #28]	; (8000950 <MX_USB_PCD_Init+0x48>)
 8000932:	2200      	movs	r2, #0
 8000934:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000936:	4b06      	ldr	r3, [pc, #24]	; (8000950 <MX_USB_PCD_Init+0x48>)
 8000938:	2200      	movs	r2, #0
 800093a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800093c:	4804      	ldr	r0, [pc, #16]	; (8000950 <MX_USB_PCD_Init+0x48>)
 800093e:	f000 fd3f 	bl	80013c0 <HAL_PCD_Init>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000948:	f000 f870 	bl	8000a2c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 800094c:	bf00      	nop
 800094e:	bd80      	pop	{r7, pc}
 8000950:	20000124 	.word	0x20000124
 8000954:	40006800 	.word	0x40006800

08000958 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b086      	sub	sp, #24
 800095c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800095e:	1d3b      	adds	r3, r7, #4
 8000960:	2200      	movs	r2, #0
 8000962:	601a      	str	r2, [r3, #0]
 8000964:	605a      	str	r2, [r3, #4]
 8000966:	609a      	str	r2, [r3, #8]
 8000968:	60da      	str	r2, [r3, #12]
 800096a:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800096c:	2004      	movs	r0, #4
 800096e:	f7ff fd9f 	bl	80004b0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000972:	2001      	movs	r0, #1
 8000974:	f7ff fd9c 	bl	80004b0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000978:	2002      	movs	r0, #2
 800097a:	f7ff fd99 	bl	80004b0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800097e:	2008      	movs	r0, #8
 8000980:	f7ff fd96 	bl	80004b0 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8000984:	2200      	movs	r2, #0
 8000986:	2123      	movs	r1, #35	; 0x23
 8000988:	481c      	ldr	r0, [pc, #112]	; (80009fc <MX_GPIO_Init+0xa4>)
 800098a:	f000 fd01 	bl	8001390 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800098e:	2310      	movs	r3, #16
 8000990:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000992:	2300      	movs	r3, #0
 8000994:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800099a:	1d3b      	adds	r3, r7, #4
 800099c:	4619      	mov	r1, r3
 800099e:	4818      	ldr	r0, [pc, #96]	; (8000a00 <MX_GPIO_Init+0xa8>)
 80009a0:	f000 fb86 	bl	80010b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 80009a4:	2323      	movs	r3, #35	; 0x23
 80009a6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a8:	2301      	movs	r3, #1
 80009aa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b0:	2300      	movs	r3, #0
 80009b2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009b4:	1d3b      	adds	r3, r7, #4
 80009b6:	4619      	mov	r1, r3
 80009b8:	4810      	ldr	r0, [pc, #64]	; (80009fc <MX_GPIO_Init+0xa4>)
 80009ba:	f000 fb79 	bl	80010b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 80009be:	2303      	movs	r3, #3
 80009c0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009c2:	2300      	movs	r3, #0
 80009c4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009ca:	1d3b      	adds	r3, r7, #4
 80009cc:	4619      	mov	r1, r3
 80009ce:	480d      	ldr	r0, [pc, #52]	; (8000a04 <MX_GPIO_Init+0xac>)
 80009d0:	f000 fb6e 	bl	80010b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80009d4:	23c0      	movs	r3, #192	; 0xc0
 80009d6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d8:	2302      	movs	r3, #2
 80009da:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009dc:	2301      	movs	r3, #1
 80009de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e0:	2300      	movs	r3, #0
 80009e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80009e4:	2307      	movs	r3, #7
 80009e6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009e8:	1d3b      	adds	r3, r7, #4
 80009ea:	4619      	mov	r1, r3
 80009ec:	4803      	ldr	r0, [pc, #12]	; (80009fc <MX_GPIO_Init+0xa4>)
 80009ee:	f000 fb5f 	bl	80010b0 <HAL_GPIO_Init>

}
 80009f2:	bf00      	nop
 80009f4:	3718      	adds	r7, #24
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	48000400 	.word	0x48000400
 8000a00:	48000800 	.word	0x48000800
 8000a04:	48000c00 	.word	0x48000c00

08000a08 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a04      	ldr	r2, [pc, #16]	; (8000a28 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d101      	bne.n	8000a1e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a1a:	f000 fa3d 	bl	8000e98 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	3708      	adds	r7, #8
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	40012c00 	.word	0x40012c00

08000a2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a30:	b672      	cpsid	i
}
 8000a32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a34:	e7fe      	b.n	8000a34 <Error_Handler+0x8>

08000a36 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000a36:	b480      	push	{r7}
 8000a38:	b085      	sub	sp, #20
 8000a3a:	af00      	add	r7, sp, #0
 8000a3c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000a3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a42:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000a44:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	4313      	orrs	r3, r2
 8000a4c:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000a4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a52:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	4013      	ands	r3, r2
 8000a58:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a5a:	68fb      	ldr	r3, [r7, #12]
}
 8000a5c:	bf00      	nop
 8000a5e:	3714      	adds	r7, #20
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr

08000a68 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b085      	sub	sp, #20
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000a70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a74:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000a76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	4313      	orrs	r3, r2
 8000a7e:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000a80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a84:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	4013      	ands	r3, r2
 8000a8a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a8c:	68fb      	ldr	r3, [r7, #12]
}
 8000a8e:	bf00      	nop
 8000a90:	3714      	adds	r7, #20
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr

08000a9a <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM2
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	b085      	sub	sp, #20
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8000aa2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000aa6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000aa8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	4313      	orrs	r3, r2
 8000ab0:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8000ab2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ab6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	4013      	ands	r3, r2
 8000abc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000abe:	68fb      	ldr	r3, [r7, #12]
}
 8000ac0:	bf00      	nop
 8000ac2:	3714      	adds	r7, #20
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr

08000acc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */
  PWR_PVDTypeDef sConfigPVD = {0};
 8000ad2:	463b      	mov	r3, r7
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
 8000ad8:	605a      	str	r2, [r3, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ada:	2200      	movs	r2, #0
 8000adc:	210f      	movs	r1, #15
 8000ade:	f06f 0001 	mvn.w	r0, #1
 8000ae2:	f000 fabd 	bl	8001060 <HAL_NVIC_SetPriority>

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_0;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	603b      	str	r3, [r7, #0]
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
 8000aea:	2300      	movs	r3, #0
 8000aec:	607b      	str	r3, [r7, #4]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 8000aee:	463b      	mov	r3, r7
 8000af0:	4618      	mov	r0, r3
 8000af2:	f000 fe17 	bl	8001724 <HAL_PWR_ConfigPVD>

  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 8000af6:	f000 fe57 	bl	80017a8 <HAL_PWR_EnablePVD>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000afa:	bf00      	nop
 8000afc:	3708      	adds	r7, #8
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
	...

08000b04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b09c      	sub	sp, #112	; 0x70
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]
 8000b1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b1c:	f107 030c 	add.w	r3, r7, #12
 8000b20:	2250      	movs	r2, #80	; 0x50
 8000b22:	2100      	movs	r1, #0
 8000b24:	4618      	mov	r0, r3
 8000b26:	f007 f965 	bl	8007df4 <memset>
  if(huart->Instance==LPUART1)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	4a16      	ldr	r2, [pc, #88]	; (8000b88 <HAL_UART_MspInit+0x84>)
 8000b30:	4293      	cmp	r3, r2
 8000b32:	d124      	bne.n	8000b7e <HAL_UART_MspInit+0x7a>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000b34:	2302      	movs	r3, #2
 8000b36:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b3c:	f107 030c 	add.w	r3, r7, #12
 8000b40:	4618      	mov	r0, r3
 8000b42:	f002 f9c3 	bl	8002ecc <HAL_RCCEx_PeriphCLKConfig>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b4c:	f7ff ff6e 	bl	8000a2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000b50:	2001      	movs	r0, #1
 8000b52:	f7ff ffa2 	bl	8000a9a <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b56:	2001      	movs	r0, #1
 8000b58:	f7ff ff6d 	bl	8000a36 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b5c:	230c      	movs	r3, #12
 8000b5e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b60:	2302      	movs	r3, #2
 8000b62:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000b6c:	2308      	movs	r3, #8
 8000b6e:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b70:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000b74:	4619      	mov	r1, r3
 8000b76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b7a:	f000 fa99 	bl	80010b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000b7e:	bf00      	nop
 8000b80:	3770      	adds	r7, #112	; 0x70
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	40008000 	.word	0x40008000

08000b8c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b09c      	sub	sp, #112	; 0x70
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b94:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000b98:	2200      	movs	r2, #0
 8000b9a:	601a      	str	r2, [r3, #0]
 8000b9c:	605a      	str	r2, [r3, #4]
 8000b9e:	609a      	str	r2, [r3, #8]
 8000ba0:	60da      	str	r2, [r3, #12]
 8000ba2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ba4:	f107 030c 	add.w	r3, r7, #12
 8000ba8:	2250      	movs	r2, #80	; 0x50
 8000baa:	2100      	movs	r1, #0
 8000bac:	4618      	mov	r0, r3
 8000bae:	f007 f921 	bl	8007df4 <memset>
  if(hpcd->Instance==USB)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4a1f      	ldr	r2, [pc, #124]	; (8000c34 <HAL_PCD_MspInit+0xa8>)
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	d136      	bne.n	8000c2a <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000bbc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bc0:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8000bc2:	2318      	movs	r3, #24
 8000bc4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8000bc6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000bca:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8000bcc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000bd0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8000bd2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000bd6:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8000bd8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000bdc:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000bde:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000be2:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000be4:	f107 030c 	add.w	r3, r7, #12
 8000be8:	4618      	mov	r0, r3
 8000bea:	f002 f96f 	bl	8002ecc <HAL_RCCEx_PeriphCLKConfig>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8000bf4:	f7ff ff1a 	bl	8000a2c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf8:	2001      	movs	r0, #1
 8000bfa:	f7ff ff1c 	bl	8000a36 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000bfe:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000c02:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c04:	2302      	movs	r3, #2
 8000c06:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000c10:	230a      	movs	r3, #10
 8000c12:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c14:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000c18:	4619      	mov	r1, r3
 8000c1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c1e:	f000 fa47 	bl	80010b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000c22:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000c26:	f7ff ff1f 	bl	8000a68 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000c2a:	bf00      	nop
 8000c2c:	3770      	adds	r7, #112	; 0x70
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40006800 	.word	0x40006800

08000c38 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b085      	sub	sp, #20
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000c40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c44:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000c46:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	4313      	orrs	r3, r2
 8000c4e:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000c50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c54:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	4013      	ands	r3, r2
 8000c5a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c5c:	68fb      	ldr	r3, [r7, #12]
}
 8000c5e:	bf00      	nop
 8000c60:	3714      	adds	r7, #20
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
	...

08000c6c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b08c      	sub	sp, #48	; 0x30
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000c74:	2300      	movs	r3, #0
 8000c76:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	6879      	ldr	r1, [r7, #4]
 8000c80:	2019      	movs	r0, #25
 8000c82:	f000 f9ed 	bl	8001060 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000c86:	2019      	movs	r0, #25
 8000c88:	f000 fa04 	bl	8001094 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000c8c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000c90:	f7ff ffd2 	bl	8000c38 <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c94:	f107 0208 	add.w	r2, r7, #8
 8000c98:	f107 030c 	add.w	r3, r7, #12
 8000c9c:	4611      	mov	r1, r2
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f001 fe82 	bl	80029a8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000ca4:	f001 fe6a 	bl	800297c <HAL_RCC_GetPCLK2Freq>
 8000ca8:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cac:	4a12      	ldr	r2, [pc, #72]	; (8000cf8 <HAL_InitTick+0x8c>)
 8000cae:	fba2 2303 	umull	r2, r3, r2, r3
 8000cb2:	0c9b      	lsrs	r3, r3, #18
 8000cb4:	3b01      	subs	r3, #1
 8000cb6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000cb8:	4b10      	ldr	r3, [pc, #64]	; (8000cfc <HAL_InitTick+0x90>)
 8000cba:	4a11      	ldr	r2, [pc, #68]	; (8000d00 <HAL_InitTick+0x94>)
 8000cbc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000cbe:	4b0f      	ldr	r3, [pc, #60]	; (8000cfc <HAL_InitTick+0x90>)
 8000cc0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000cc4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000cc6:	4a0d      	ldr	r2, [pc, #52]	; (8000cfc <HAL_InitTick+0x90>)
 8000cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cca:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000ccc:	4b0b      	ldr	r3, [pc, #44]	; (8000cfc <HAL_InitTick+0x90>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cd2:	4b0a      	ldr	r3, [pc, #40]	; (8000cfc <HAL_InitTick+0x90>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000cd8:	4808      	ldr	r0, [pc, #32]	; (8000cfc <HAL_InitTick+0x90>)
 8000cda:	f002 fb84 	bl	80033e6 <HAL_TIM_Base_Init>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d104      	bne.n	8000cee <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000ce4:	4805      	ldr	r0, [pc, #20]	; (8000cfc <HAL_InitTick+0x90>)
 8000ce6:	f002 fbdf 	bl	80034a8 <HAL_TIM_Base_Start_IT>
 8000cea:	4603      	mov	r3, r0
 8000cec:	e000      	b.n	8000cf0 <HAL_InitTick+0x84>
  }

  /* Return function status */
  return HAL_ERROR;
 8000cee:	2301      	movs	r3, #1
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	3730      	adds	r7, #48	; 0x30
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	431bde83 	.word	0x431bde83
 8000cfc:	20000458 	.word	0x20000458
 8000d00:	40012c00 	.word	0x40012c00

08000d04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d08:	e7fe      	b.n	8000d08 <NMI_Handler+0x4>

08000d0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d0e:	e7fe      	b.n	8000d0e <HardFault_Handler+0x4>

08000d10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d14:	e7fe      	b.n	8000d14 <MemManage_Handler+0x4>

08000d16 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d16:	b480      	push	{r7}
 8000d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d1a:	e7fe      	b.n	8000d1a <BusFault_Handler+0x4>

08000d1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d20:	e7fe      	b.n	8000d20 <UsageFault_Handler+0x4>

08000d22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d22:	b480      	push	{r7}
 8000d24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d26:	bf00      	nop
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr

08000d30 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d34:	4802      	ldr	r0, [pc, #8]	; (8000d40 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000d36:	f002 fc05 	bl	8003544 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	20000458 	.word	0x20000458

08000d44 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8000d48:	4b24      	ldr	r3, [pc, #144]	; (8000ddc <SystemInit+0x98>)
 8000d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d4e:	4a23      	ldr	r2, [pc, #140]	; (8000ddc <SystemInit+0x98>)
 8000d50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000d58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d62:	f043 0301 	orr.w	r3, r3, #1
 8000d66:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000d68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d6c:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000d70:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000d72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000d7c:	4b18      	ldr	r3, [pc, #96]	; (8000de0 <SystemInit+0x9c>)
 8000d7e:	4013      	ands	r3, r2
 8000d80:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000d82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000d8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d8e:	f023 0305 	bic.w	r3, r3, #5
 8000d92:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000d96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d9a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000d9e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000da2:	f023 0301 	bic.w	r3, r3, #1
 8000da6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000daa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dae:	4a0d      	ldr	r2, [pc, #52]	; (8000de4 <SystemInit+0xa0>)
 8000db0:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000db2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000db6:	4a0b      	ldr	r2, [pc, #44]	; (8000de4 <SystemInit+0xa0>)
 8000db8:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000dba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000dc4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dc8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000dca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dce:	2200      	movs	r2, #0
 8000dd0:	619a      	str	r2, [r3, #24]
}
 8000dd2:	bf00      	nop
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr
 8000ddc:	e000ed00 	.word	0xe000ed00
 8000de0:	faf6fefb 	.word	0xfaf6fefb
 8000de4:	22041000 	.word	0x22041000

08000de8 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000de8:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dea:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dec:	3304      	adds	r3, #4

08000dee <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dee:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000df0:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000df2:	d3f9      	bcc.n	8000de8 <CopyDataInit>
  bx lr
 8000df4:	4770      	bx	lr

08000df6 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000df6:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000df8:	3004      	adds	r0, #4

08000dfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000dfa:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000dfc:	d3fb      	bcc.n	8000df6 <FillZerobss>
  bx lr
 8000dfe:	4770      	bx	lr

08000e00 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e00:	480c      	ldr	r0, [pc, #48]	; (8000e34 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8000e02:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e04:	f7ff ff9e 	bl	8000d44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000e08:	480b      	ldr	r0, [pc, #44]	; (8000e38 <LoopForever+0x8>)
 8000e0a:	490c      	ldr	r1, [pc, #48]	; (8000e3c <LoopForever+0xc>)
 8000e0c:	4a0c      	ldr	r2, [pc, #48]	; (8000e40 <LoopForever+0x10>)
 8000e0e:	2300      	movs	r3, #0
 8000e10:	f7ff ffed 	bl	8000dee <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000e14:	480b      	ldr	r0, [pc, #44]	; (8000e44 <LoopForever+0x14>)
 8000e16:	490c      	ldr	r1, [pc, #48]	; (8000e48 <LoopForever+0x18>)
 8000e18:	2300      	movs	r3, #0
 8000e1a:	f7ff ffee 	bl	8000dfa <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000e1e:	480b      	ldr	r0, [pc, #44]	; (8000e4c <LoopForever+0x1c>)
 8000e20:	490b      	ldr	r1, [pc, #44]	; (8000e50 <LoopForever+0x20>)
 8000e22:	2300      	movs	r3, #0
 8000e24:	f7ff ffe9 	bl	8000dfa <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e28:	f006 ffb0 	bl	8007d8c <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8000e2c:	f7ff fb5a 	bl	80004e4 <main>

08000e30 <LoopForever>:

LoopForever:
  b LoopForever
 8000e30:	e7fe      	b.n	8000e30 <LoopForever>
 8000e32:	0000      	.short	0x0000
  ldr   r0, =_estack
 8000e34:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000e38:	20000004 	.word	0x20000004
 8000e3c:	20000078 	.word	0x20000078
 8000e40:	080081b0 	.word	0x080081b0
  INIT_BSS _sbss, _ebss
 8000e44:	20000078 	.word	0x20000078
 8000e48:	20001ec0 	.word	0x20001ec0
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000e4c:	20030000 	.word	0x20030000
 8000e50:	20030000 	.word	0x20030000

08000e54 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e54:	e7fe      	b.n	8000e54 <ADC1_IRQHandler>
	...

08000e58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e62:	4b0c      	ldr	r3, [pc, #48]	; (8000e94 <HAL_Init+0x3c>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4a0b      	ldr	r2, [pc, #44]	; (8000e94 <HAL_Init+0x3c>)
 8000e68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e6c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e6e:	2003      	movs	r0, #3
 8000e70:	f000 f8eb 	bl	800104a <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e74:	200f      	movs	r0, #15
 8000e76:	f7ff fef9 	bl	8000c6c <HAL_InitTick>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d002      	beq.n	8000e86 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000e80:	2301      	movs	r3, #1
 8000e82:	71fb      	strb	r3, [r7, #7]
 8000e84:	e001      	b.n	8000e8a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e86:	f7ff fe21 	bl	8000acc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e8a:	79fb      	ldrb	r3, [r7, #7]
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	3708      	adds	r7, #8
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	58004000 	.word	0x58004000

08000e98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e9c:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <HAL_IncTick+0x20>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <HAL_IncTick+0x24>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4413      	add	r3, r2
 8000ea8:	4a04      	ldr	r2, [pc, #16]	; (8000ebc <HAL_IncTick+0x24>)
 8000eaa:	6013      	str	r3, [r2, #0]
}
 8000eac:	bf00      	nop
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	2000000c 	.word	0x2000000c
 8000ebc:	200004a4 	.word	0x200004a4

08000ec0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ec4:	4b03      	ldr	r3, [pc, #12]	; (8000ed4 <HAL_GetTick+0x14>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	200004a4 	.word	0x200004a4

08000ed8 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8000edc:	4b03      	ldr	r3, [pc, #12]	; (8000eec <HAL_GetTickPrio+0x14>)
 8000ede:	681b      	ldr	r3, [r3, #0]
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	20000008 	.word	0x20000008

08000ef0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b085      	sub	sp, #20
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	f003 0307 	and.w	r3, r3, #7
 8000efe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f00:	4b0c      	ldr	r3, [pc, #48]	; (8000f34 <__NVIC_SetPriorityGrouping+0x44>)
 8000f02:	68db      	ldr	r3, [r3, #12]
 8000f04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f06:	68ba      	ldr	r2, [r7, #8]
 8000f08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f22:	4a04      	ldr	r2, [pc, #16]	; (8000f34 <__NVIC_SetPriorityGrouping+0x44>)
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	60d3      	str	r3, [r2, #12]
}
 8000f28:	bf00      	nop
 8000f2a:	3714      	adds	r7, #20
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr
 8000f34:	e000ed00 	.word	0xe000ed00

08000f38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f3c:	4b04      	ldr	r3, [pc, #16]	; (8000f50 <__NVIC_GetPriorityGrouping+0x18>)
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	0a1b      	lsrs	r3, r3, #8
 8000f42:	f003 0307 	and.w	r3, r3, #7
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr
 8000f50:	e000ed00 	.word	0xe000ed00

08000f54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	db0b      	blt.n	8000f7e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f66:	79fb      	ldrb	r3, [r7, #7]
 8000f68:	f003 021f 	and.w	r2, r3, #31
 8000f6c:	4907      	ldr	r1, [pc, #28]	; (8000f8c <__NVIC_EnableIRQ+0x38>)
 8000f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f72:	095b      	lsrs	r3, r3, #5
 8000f74:	2001      	movs	r0, #1
 8000f76:	fa00 f202 	lsl.w	r2, r0, r2
 8000f7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f7e:	bf00      	nop
 8000f80:	370c      	adds	r7, #12
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	e000e100 	.word	0xe000e100

08000f90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4603      	mov	r3, r0
 8000f98:	6039      	str	r1, [r7, #0]
 8000f9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	db0a      	blt.n	8000fba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	b2da      	uxtb	r2, r3
 8000fa8:	490c      	ldr	r1, [pc, #48]	; (8000fdc <__NVIC_SetPriority+0x4c>)
 8000faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fae:	0112      	lsls	r2, r2, #4
 8000fb0:	b2d2      	uxtb	r2, r2
 8000fb2:	440b      	add	r3, r1
 8000fb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fb8:	e00a      	b.n	8000fd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	b2da      	uxtb	r2, r3
 8000fbe:	4908      	ldr	r1, [pc, #32]	; (8000fe0 <__NVIC_SetPriority+0x50>)
 8000fc0:	79fb      	ldrb	r3, [r7, #7]
 8000fc2:	f003 030f 	and.w	r3, r3, #15
 8000fc6:	3b04      	subs	r3, #4
 8000fc8:	0112      	lsls	r2, r2, #4
 8000fca:	b2d2      	uxtb	r2, r2
 8000fcc:	440b      	add	r3, r1
 8000fce:	761a      	strb	r2, [r3, #24]
}
 8000fd0:	bf00      	nop
 8000fd2:	370c      	adds	r7, #12
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr
 8000fdc:	e000e100 	.word	0xe000e100
 8000fe0:	e000ed00 	.word	0xe000ed00

08000fe4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b089      	sub	sp, #36	; 0x24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	60f8      	str	r0, [r7, #12]
 8000fec:	60b9      	str	r1, [r7, #8]
 8000fee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	f003 0307 	and.w	r3, r3, #7
 8000ff6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	f1c3 0307 	rsb	r3, r3, #7
 8000ffe:	2b04      	cmp	r3, #4
 8001000:	bf28      	it	cs
 8001002:	2304      	movcs	r3, #4
 8001004:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	3304      	adds	r3, #4
 800100a:	2b06      	cmp	r3, #6
 800100c:	d902      	bls.n	8001014 <NVIC_EncodePriority+0x30>
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	3b03      	subs	r3, #3
 8001012:	e000      	b.n	8001016 <NVIC_EncodePriority+0x32>
 8001014:	2300      	movs	r3, #0
 8001016:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001018:	f04f 32ff 	mov.w	r2, #4294967295
 800101c:	69bb      	ldr	r3, [r7, #24]
 800101e:	fa02 f303 	lsl.w	r3, r2, r3
 8001022:	43da      	mvns	r2, r3
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	401a      	ands	r2, r3
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800102c:	f04f 31ff 	mov.w	r1, #4294967295
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	fa01 f303 	lsl.w	r3, r1, r3
 8001036:	43d9      	mvns	r1, r3
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800103c:	4313      	orrs	r3, r2
         );
}
 800103e:	4618      	mov	r0, r3
 8001040:	3724      	adds	r7, #36	; 0x24
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr

0800104a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800104a:	b580      	push	{r7, lr}
 800104c:	b082      	sub	sp, #8
 800104e:	af00      	add	r7, sp, #0
 8001050:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f7ff ff4c 	bl	8000ef0 <__NVIC_SetPriorityGrouping>
}
 8001058:	bf00      	nop
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}

08001060 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b086      	sub	sp, #24
 8001064:	af00      	add	r7, sp, #0
 8001066:	4603      	mov	r3, r0
 8001068:	60b9      	str	r1, [r7, #8]
 800106a:	607a      	str	r2, [r7, #4]
 800106c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800106e:	f7ff ff63 	bl	8000f38 <__NVIC_GetPriorityGrouping>
 8001072:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001074:	687a      	ldr	r2, [r7, #4]
 8001076:	68b9      	ldr	r1, [r7, #8]
 8001078:	6978      	ldr	r0, [r7, #20]
 800107a:	f7ff ffb3 	bl	8000fe4 <NVIC_EncodePriority>
 800107e:	4602      	mov	r2, r0
 8001080:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001084:	4611      	mov	r1, r2
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff ff82 	bl	8000f90 <__NVIC_SetPriority>
}
 800108c:	bf00      	nop
 800108e:	3718      	adds	r7, #24
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}

08001094 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	4603      	mov	r3, r0
 800109c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800109e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a2:	4618      	mov	r0, r3
 80010a4:	f7ff ff56 	bl	8000f54 <__NVIC_EnableIRQ>
}
 80010a8:	bf00      	nop
 80010aa:	3708      	adds	r7, #8
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b087      	sub	sp, #28
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010ba:	2300      	movs	r3, #0
 80010bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010be:	e14c      	b.n	800135a <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	2101      	movs	r1, #1
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	fa01 f303 	lsl.w	r3, r1, r3
 80010cc:	4013      	ands	r3, r2
 80010ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	f000 813e 	beq.w	8001354 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f003 0303 	and.w	r3, r3, #3
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d005      	beq.n	80010f0 <HAL_GPIO_Init+0x40>
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f003 0303 	and.w	r3, r3, #3
 80010ec:	2b02      	cmp	r3, #2
 80010ee:	d130      	bne.n	8001152 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	689b      	ldr	r3, [r3, #8]
 80010f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	005b      	lsls	r3, r3, #1
 80010fa:	2203      	movs	r2, #3
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	43db      	mvns	r3, r3
 8001102:	693a      	ldr	r2, [r7, #16]
 8001104:	4013      	ands	r3, r2
 8001106:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	68da      	ldr	r2, [r3, #12]
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	693a      	ldr	r2, [r7, #16]
 8001116:	4313      	orrs	r3, r2
 8001118:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	693a      	ldr	r2, [r7, #16]
 800111e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001126:	2201      	movs	r2, #1
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	fa02 f303 	lsl.w	r3, r2, r3
 800112e:	43db      	mvns	r3, r3
 8001130:	693a      	ldr	r2, [r7, #16]
 8001132:	4013      	ands	r3, r2
 8001134:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	091b      	lsrs	r3, r3, #4
 800113c:	f003 0201 	and.w	r2, r3, #1
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	fa02 f303 	lsl.w	r3, r2, r3
 8001146:	693a      	ldr	r2, [r7, #16]
 8001148:	4313      	orrs	r3, r2
 800114a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	693a      	ldr	r2, [r7, #16]
 8001150:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	f003 0303 	and.w	r3, r3, #3
 800115a:	2b03      	cmp	r3, #3
 800115c:	d017      	beq.n	800118e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	68db      	ldr	r3, [r3, #12]
 8001162:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	005b      	lsls	r3, r3, #1
 8001168:	2203      	movs	r2, #3
 800116a:	fa02 f303 	lsl.w	r3, r2, r3
 800116e:	43db      	mvns	r3, r3
 8001170:	693a      	ldr	r2, [r7, #16]
 8001172:	4013      	ands	r3, r2
 8001174:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	689a      	ldr	r2, [r3, #8]
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	fa02 f303 	lsl.w	r3, r2, r3
 8001182:	693a      	ldr	r2, [r7, #16]
 8001184:	4313      	orrs	r3, r2
 8001186:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	f003 0303 	and.w	r3, r3, #3
 8001196:	2b02      	cmp	r3, #2
 8001198:	d123      	bne.n	80011e2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	08da      	lsrs	r2, r3, #3
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	3208      	adds	r2, #8
 80011a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	f003 0307 	and.w	r3, r3, #7
 80011ae:	009b      	lsls	r3, r3, #2
 80011b0:	220f      	movs	r2, #15
 80011b2:	fa02 f303 	lsl.w	r3, r2, r3
 80011b6:	43db      	mvns	r3, r3
 80011b8:	693a      	ldr	r2, [r7, #16]
 80011ba:	4013      	ands	r3, r2
 80011bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	691a      	ldr	r2, [r3, #16]
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	f003 0307 	and.w	r3, r3, #7
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	fa02 f303 	lsl.w	r3, r2, r3
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	08da      	lsrs	r2, r3, #3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	3208      	adds	r2, #8
 80011dc:	6939      	ldr	r1, [r7, #16]
 80011de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	005b      	lsls	r3, r3, #1
 80011ec:	2203      	movs	r2, #3
 80011ee:	fa02 f303 	lsl.w	r3, r2, r3
 80011f2:	43db      	mvns	r3, r3
 80011f4:	693a      	ldr	r2, [r7, #16]
 80011f6:	4013      	ands	r3, r2
 80011f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	f003 0203 	and.w	r2, r3, #3
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	005b      	lsls	r3, r3, #1
 8001206:	fa02 f303 	lsl.w	r3, r2, r3
 800120a:	693a      	ldr	r2, [r7, #16]
 800120c:	4313      	orrs	r3, r2
 800120e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800121e:	2b00      	cmp	r3, #0
 8001220:	f000 8098 	beq.w	8001354 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001224:	4a54      	ldr	r2, [pc, #336]	; (8001378 <HAL_GPIO_Init+0x2c8>)
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	089b      	lsrs	r3, r3, #2
 800122a:	3302      	adds	r3, #2
 800122c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001230:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	f003 0303 	and.w	r3, r3, #3
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	220f      	movs	r2, #15
 800123c:	fa02 f303 	lsl.w	r3, r2, r3
 8001240:	43db      	mvns	r3, r3
 8001242:	693a      	ldr	r2, [r7, #16]
 8001244:	4013      	ands	r3, r2
 8001246:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800124e:	d019      	beq.n	8001284 <HAL_GPIO_Init+0x1d4>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	4a4a      	ldr	r2, [pc, #296]	; (800137c <HAL_GPIO_Init+0x2cc>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d013      	beq.n	8001280 <HAL_GPIO_Init+0x1d0>
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	4a49      	ldr	r2, [pc, #292]	; (8001380 <HAL_GPIO_Init+0x2d0>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d00d      	beq.n	800127c <HAL_GPIO_Init+0x1cc>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	4a48      	ldr	r2, [pc, #288]	; (8001384 <HAL_GPIO_Init+0x2d4>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d007      	beq.n	8001278 <HAL_GPIO_Init+0x1c8>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	4a47      	ldr	r2, [pc, #284]	; (8001388 <HAL_GPIO_Init+0x2d8>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d101      	bne.n	8001274 <HAL_GPIO_Init+0x1c4>
 8001270:	2304      	movs	r3, #4
 8001272:	e008      	b.n	8001286 <HAL_GPIO_Init+0x1d6>
 8001274:	2307      	movs	r3, #7
 8001276:	e006      	b.n	8001286 <HAL_GPIO_Init+0x1d6>
 8001278:	2303      	movs	r3, #3
 800127a:	e004      	b.n	8001286 <HAL_GPIO_Init+0x1d6>
 800127c:	2302      	movs	r3, #2
 800127e:	e002      	b.n	8001286 <HAL_GPIO_Init+0x1d6>
 8001280:	2301      	movs	r3, #1
 8001282:	e000      	b.n	8001286 <HAL_GPIO_Init+0x1d6>
 8001284:	2300      	movs	r3, #0
 8001286:	697a      	ldr	r2, [r7, #20]
 8001288:	f002 0203 	and.w	r2, r2, #3
 800128c:	0092      	lsls	r2, r2, #2
 800128e:	4093      	lsls	r3, r2
 8001290:	693a      	ldr	r2, [r7, #16]
 8001292:	4313      	orrs	r3, r2
 8001294:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001296:	4938      	ldr	r1, [pc, #224]	; (8001378 <HAL_GPIO_Init+0x2c8>)
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	089b      	lsrs	r3, r3, #2
 800129c:	3302      	adds	r3, #2
 800129e:	693a      	ldr	r2, [r7, #16]
 80012a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80012a4:	4b39      	ldr	r3, [pc, #228]	; (800138c <HAL_GPIO_Init+0x2dc>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	43db      	mvns	r3, r3
 80012ae:	693a      	ldr	r2, [r7, #16]
 80012b0:	4013      	ands	r3, r2
 80012b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d003      	beq.n	80012c8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80012c0:	693a      	ldr	r2, [r7, #16]
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80012c8:	4a30      	ldr	r2, [pc, #192]	; (800138c <HAL_GPIO_Init+0x2dc>)
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80012ce:	4b2f      	ldr	r3, [pc, #188]	; (800138c <HAL_GPIO_Init+0x2dc>)
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	43db      	mvns	r3, r3
 80012d8:	693a      	ldr	r2, [r7, #16]
 80012da:	4013      	ands	r3, r2
 80012dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d003      	beq.n	80012f2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80012f2:	4a26      	ldr	r2, [pc, #152]	; (800138c <HAL_GPIO_Init+0x2dc>)
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80012f8:	4b24      	ldr	r3, [pc, #144]	; (800138c <HAL_GPIO_Init+0x2dc>)
 80012fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80012fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	43db      	mvns	r3, r3
 8001304:	693a      	ldr	r2, [r7, #16]
 8001306:	4013      	ands	r3, r2
 8001308:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d003      	beq.n	800131e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8001316:	693a      	ldr	r2, [r7, #16]
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	4313      	orrs	r3, r2
 800131c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800131e:	4a1b      	ldr	r2, [pc, #108]	; (800138c <HAL_GPIO_Init+0x2dc>)
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8001326:	4b19      	ldr	r3, [pc, #100]	; (800138c <HAL_GPIO_Init+0x2dc>)
 8001328:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800132c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	43db      	mvns	r3, r3
 8001332:	693a      	ldr	r2, [r7, #16]
 8001334:	4013      	ands	r3, r2
 8001336:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001340:	2b00      	cmp	r3, #0
 8001342:	d003      	beq.n	800134c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001344:	693a      	ldr	r2, [r7, #16]
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	4313      	orrs	r3, r2
 800134a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800134c:	4a0f      	ldr	r2, [pc, #60]	; (800138c <HAL_GPIO_Init+0x2dc>)
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	3301      	adds	r3, #1
 8001358:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	fa22 f303 	lsr.w	r3, r2, r3
 8001364:	2b00      	cmp	r3, #0
 8001366:	f47f aeab 	bne.w	80010c0 <HAL_GPIO_Init+0x10>
  }
}
 800136a:	bf00      	nop
 800136c:	bf00      	nop
 800136e:	371c      	adds	r7, #28
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr
 8001378:	40010000 	.word	0x40010000
 800137c:	48000400 	.word	0x48000400
 8001380:	48000800 	.word	0x48000800
 8001384:	48000c00 	.word	0x48000c00
 8001388:	48001000 	.word	0x48001000
 800138c:	58000800 	.word	0x58000800

08001390 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	460b      	mov	r3, r1
 800139a:	807b      	strh	r3, [r7, #2]
 800139c:	4613      	mov	r3, r2
 800139e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013a0:	787b      	ldrb	r3, [r7, #1]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d003      	beq.n	80013ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013a6:	887a      	ldrh	r2, [r7, #2]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80013ac:	e002      	b.n	80013b4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013ae:	887a      	ldrh	r2, [r7, #2]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80013b4:	bf00      	nop
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr

080013c0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80013c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013c2:	b08b      	sub	sp, #44	; 0x2c
 80013c4:	af06      	add	r7, sp, #24
 80013c6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d101      	bne.n	80013d2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	e0dd      	b.n	800158e <HAL_PCD_Init+0x1ce>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	f893 32ad 	ldrb.w	r3, [r3, #685]	; 0x2ad
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d106      	bne.n	80013ec <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2200      	movs	r2, #0
 80013e2:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	f7ff fbd0 	bl	8000b8c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2203      	movs	r2, #3
 80013f0:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad

  /* DMA Not supported for FS instance, Force to Zero */
  hpcd->Init.dma_enable = 0U;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2200      	movs	r2, #0
 80013f8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4618      	mov	r0, r3
 8001400:	f002 ffb8 	bl	8004374 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001404:	2300      	movs	r3, #0
 8001406:	73fb      	strb	r3, [r7, #15]
 8001408:	e04d      	b.n	80014a6 <HAL_PCD_Init+0xe6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800140a:	7bfb      	ldrb	r3, [r7, #15]
 800140c:	6879      	ldr	r1, [r7, #4]
 800140e:	1c5a      	adds	r2, r3, #1
 8001410:	4613      	mov	r3, r2
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	4413      	add	r3, r2
 8001416:	00db      	lsls	r3, r3, #3
 8001418:	440b      	add	r3, r1
 800141a:	3305      	adds	r3, #5
 800141c:	2201      	movs	r2, #1
 800141e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001420:	7bfb      	ldrb	r3, [r7, #15]
 8001422:	6879      	ldr	r1, [r7, #4]
 8001424:	1c5a      	adds	r2, r3, #1
 8001426:	4613      	mov	r3, r2
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	4413      	add	r3, r2
 800142c:	00db      	lsls	r3, r3, #3
 800142e:	440b      	add	r3, r1
 8001430:	3304      	adds	r3, #4
 8001432:	7bfa      	ldrb	r2, [r7, #15]
 8001434:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001436:	7bfa      	ldrb	r2, [r7, #15]
 8001438:	7bfb      	ldrb	r3, [r7, #15]
 800143a:	b298      	uxth	r0, r3
 800143c:	6879      	ldr	r1, [r7, #4]
 800143e:	4613      	mov	r3, r2
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	4413      	add	r3, r2
 8001444:	00db      	lsls	r3, r3, #3
 8001446:	440b      	add	r3, r1
 8001448:	333a      	adds	r3, #58	; 0x3a
 800144a:	4602      	mov	r2, r0
 800144c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800144e:	7bfb      	ldrb	r3, [r7, #15]
 8001450:	6879      	ldr	r1, [r7, #4]
 8001452:	1c5a      	adds	r2, r3, #1
 8001454:	4613      	mov	r3, r2
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	4413      	add	r3, r2
 800145a:	00db      	lsls	r3, r3, #3
 800145c:	440b      	add	r3, r1
 800145e:	3307      	adds	r3, #7
 8001460:	2200      	movs	r2, #0
 8001462:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001464:	7bfa      	ldrb	r2, [r7, #15]
 8001466:	6879      	ldr	r1, [r7, #4]
 8001468:	4613      	mov	r3, r2
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	4413      	add	r3, r2
 800146e:	00db      	lsls	r3, r3, #3
 8001470:	440b      	add	r3, r1
 8001472:	333c      	adds	r3, #60	; 0x3c
 8001474:	2200      	movs	r2, #0
 8001476:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001478:	7bfa      	ldrb	r2, [r7, #15]
 800147a:	6879      	ldr	r1, [r7, #4]
 800147c:	4613      	mov	r3, r2
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	4413      	add	r3, r2
 8001482:	00db      	lsls	r3, r3, #3
 8001484:	440b      	add	r3, r1
 8001486:	3340      	adds	r3, #64	; 0x40
 8001488:	2200      	movs	r2, #0
 800148a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800148c:	7bfa      	ldrb	r2, [r7, #15]
 800148e:	6879      	ldr	r1, [r7, #4]
 8001490:	4613      	mov	r3, r2
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	4413      	add	r3, r2
 8001496:	00db      	lsls	r3, r3, #3
 8001498:	440b      	add	r3, r1
 800149a:	3344      	adds	r3, #68	; 0x44
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014a0:	7bfb      	ldrb	r3, [r7, #15]
 80014a2:	3301      	adds	r3, #1
 80014a4:	73fb      	strb	r3, [r7, #15]
 80014a6:	7bfa      	ldrb	r2, [r7, #15]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d3ac      	bcc.n	800140a <HAL_PCD_Init+0x4a>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014b0:	2300      	movs	r3, #0
 80014b2:	73fb      	strb	r3, [r7, #15]
 80014b4:	e044      	b.n	8001540 <HAL_PCD_Init+0x180>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80014b6:	7bfa      	ldrb	r2, [r7, #15]
 80014b8:	6879      	ldr	r1, [r7, #4]
 80014ba:	4613      	mov	r3, r2
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	4413      	add	r3, r2
 80014c0:	00db      	lsls	r3, r3, #3
 80014c2:	440b      	add	r3, r1
 80014c4:	f203 136d 	addw	r3, r3, #365	; 0x16d
 80014c8:	2200      	movs	r2, #0
 80014ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80014cc:	7bfa      	ldrb	r2, [r7, #15]
 80014ce:	6879      	ldr	r1, [r7, #4]
 80014d0:	4613      	mov	r3, r2
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	4413      	add	r3, r2
 80014d6:	00db      	lsls	r3, r3, #3
 80014d8:	440b      	add	r3, r1
 80014da:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80014de:	7bfa      	ldrb	r2, [r7, #15]
 80014e0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80014e2:	7bfa      	ldrb	r2, [r7, #15]
 80014e4:	6879      	ldr	r1, [r7, #4]
 80014e6:	4613      	mov	r3, r2
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	4413      	add	r3, r2
 80014ec:	00db      	lsls	r3, r3, #3
 80014ee:	440b      	add	r3, r1
 80014f0:	f203 136f 	addw	r3, r3, #367	; 0x16f
 80014f4:	2200      	movs	r2, #0
 80014f6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80014f8:	7bfa      	ldrb	r2, [r7, #15]
 80014fa:	6879      	ldr	r1, [r7, #4]
 80014fc:	4613      	mov	r3, r2
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	4413      	add	r3, r2
 8001502:	00db      	lsls	r3, r3, #3
 8001504:	440b      	add	r3, r1
 8001506:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800150a:	2200      	movs	r2, #0
 800150c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800150e:	7bfa      	ldrb	r2, [r7, #15]
 8001510:	6879      	ldr	r1, [r7, #4]
 8001512:	4613      	mov	r3, r2
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	4413      	add	r3, r2
 8001518:	00db      	lsls	r3, r3, #3
 800151a:	440b      	add	r3, r1
 800151c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001524:	7bfa      	ldrb	r2, [r7, #15]
 8001526:	6879      	ldr	r1, [r7, #4]
 8001528:	4613      	mov	r3, r2
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	4413      	add	r3, r2
 800152e:	00db      	lsls	r3, r3, #3
 8001530:	440b      	add	r3, r1
 8001532:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001536:	2200      	movs	r2, #0
 8001538:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800153a:	7bfb      	ldrb	r3, [r7, #15]
 800153c:	3301      	adds	r3, #1
 800153e:	73fb      	strb	r3, [r7, #15]
 8001540:	7bfa      	ldrb	r2, [r7, #15]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	429a      	cmp	r2, r3
 8001548:	d3b5      	bcc.n	80014b6 <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	603b      	str	r3, [r7, #0]
 8001550:	687e      	ldr	r6, [r7, #4]
 8001552:	466d      	mov	r5, sp
 8001554:	f106 0410 	add.w	r4, r6, #16
 8001558:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800155a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800155c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001560:	e885 0003 	stmia.w	r5, {r0, r1}
 8001564:	1d33      	adds	r3, r6, #4
 8001566:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001568:	6838      	ldr	r0, [r7, #0]
 800156a:	f002 ff1e 	bl	80043aa <USB_DevInit>

  hpcd->USB_Address = 0U;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2200      	movs	r2, #0
 8001572:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  hpcd->State = HAL_PCD_STATE_READY;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2201      	movs	r2, #1
 800157a:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	69db      	ldr	r3, [r3, #28]
 8001582:	2b01      	cmp	r3, #1
 8001584:	d102      	bne.n	800158c <HAL_PCD_Init+0x1cc>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f000 f805 	bl	8001596 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800158c:	2300      	movs	r3, #0
}
 800158e:	4618      	mov	r0, r3
 8001590:	3714      	adds	r7, #20
 8001592:	46bd      	mov	sp, r7
 8001594:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001596 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001596:	b480      	push	{r7}
 8001598:	b085      	sub	sp, #20
 800159a:	af00      	add	r7, sp, #0
 800159c:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2201      	movs	r2, #1
 80015a8:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
  hpcd->LPM_State = LPM_L0;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2200      	movs	r2, #0
 80015b0:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80015ba:	b29b      	uxth	r3, r3
 80015bc:	f043 0301 	orr.w	r3, r3, #1
 80015c0:	b29a      	uxth	r2, r3
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80015ce:	b29b      	uxth	r3, r3
 80015d0:	f043 0302 	orr.w	r3, r3, #2
 80015d4:	b29a      	uxth	r2, r3
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80015dc:	2300      	movs	r3, #0
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3714      	adds	r7, #20
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
	...

080015ec <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80015f4:	4b06      	ldr	r3, [pc, #24]	; (8001610 <LL_EXTI_EnableIT_0_31+0x24>)
 80015f6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80015fa:	4905      	ldr	r1, [pc, #20]	; (8001610 <LL_EXTI_EnableIT_0_31+0x24>)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	4313      	orrs	r3, r2
 8001600:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8001604:	bf00      	nop
 8001606:	370c      	adds	r7, #12
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr
 8001610:	58000800 	.word	0x58000800

08001614 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800161c:	4b07      	ldr	r3, [pc, #28]	; (800163c <LL_EXTI_DisableIT_0_31+0x28>)
 800161e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	43db      	mvns	r3, r3
 8001626:	4905      	ldr	r1, [pc, #20]	; (800163c <LL_EXTI_DisableIT_0_31+0x28>)
 8001628:	4013      	ands	r3, r2
 800162a:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 800162e:	bf00      	nop
 8001630:	370c      	adds	r7, #12
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	58000800 	.word	0x58000800

08001640 <LL_C2_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->C2IMR1, ExtiLine);
 8001648:	4b07      	ldr	r3, [pc, #28]	; (8001668 <LL_C2_EXTI_DisableIT_0_31+0x28>)
 800164a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	43db      	mvns	r3, r3
 8001652:	4905      	ldr	r1, [pc, #20]	; (8001668 <LL_C2_EXTI_DisableIT_0_31+0x28>)
 8001654:	4013      	ands	r3, r2
 8001656:	f8c1 30c0 	str.w	r3, [r1, #192]	; 0xc0
}
 800165a:	bf00      	nop
 800165c:	370c      	adds	r7, #12
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	58000800 	.word	0x58000800

0800166c <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8001674:	4b05      	ldr	r3, [pc, #20]	; (800168c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	4904      	ldr	r1, [pc, #16]	; (800168c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4313      	orrs	r3, r2
 800167e:	600b      	str	r3, [r1, #0]

}
 8001680:	bf00      	nop
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr
 800168c:	58000800 	.word	0x58000800

08001690 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8001698:	4b06      	ldr	r3, [pc, #24]	; (80016b4 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	43db      	mvns	r3, r3
 80016a0:	4904      	ldr	r1, [pc, #16]	; (80016b4 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80016a2:	4013      	ands	r3, r2
 80016a4:	600b      	str	r3, [r1, #0]

}
 80016a6:	bf00      	nop
 80016a8:	370c      	adds	r7, #12
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	58000800 	.word	0x58000800

080016b8 <LL_EXTI_EnableFallingTrig_0_31>:
  *         (*) value not defined in all devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80016c0:	4b05      	ldr	r3, [pc, #20]	; (80016d8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80016c2:	685a      	ldr	r2, [r3, #4]
 80016c4:	4904      	ldr	r1, [pc, #16]	; (80016d8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4313      	orrs	r3, r2
 80016ca:	604b      	str	r3, [r1, #4]
}
 80016cc:	bf00      	nop
 80016ce:	370c      	adds	r7, #12
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr
 80016d8:	58000800 	.word	0x58000800

080016dc <LL_EXTI_DisableFallingTrig_0_31>:
  *         (*) value not defined in all devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80016e4:	4b06      	ldr	r3, [pc, #24]	; (8001700 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80016e6:	685a      	ldr	r2, [r3, #4]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	43db      	mvns	r3, r3
 80016ec:	4904      	ldr	r1, [pc, #16]	; (8001700 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80016ee:	4013      	ands	r3, r2
 80016f0:	604b      	str	r3, [r1, #4]
}
 80016f2:	bf00      	nop
 80016f4:	370c      	adds	r7, #12
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	58000800 	.word	0x58000800

08001704 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001708:	4b05      	ldr	r3, [pc, #20]	; (8001720 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a04      	ldr	r2, [pc, #16]	; (8001720 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800170e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001712:	6013      	str	r3, [r2, #0]
}
 8001714:	bf00      	nop
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	58000400 	.word	0x58000400

08001724 <HAL_PWR_ConfigPVD>:
  *         (and optionally, to select CPU2 only (not both CPU1 and CPU2):
  *         "__HAL_PWR_PVD_EXTI_DISABLE_IT()").
  * @retval None
  */
HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS bits according to PVDLevel value */
  MODIFY_REG(PWR->CR2, PWR_CR2_PLS, sConfigPVD->PVDLevel);
 800172c:	4b1d      	ldr	r3, [pc, #116]	; (80017a4 <HAL_PWR_ConfigPVD+0x80>)
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f023 020e 	bic.w	r2, r3, #14
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	491a      	ldr	r1, [pc, #104]	; (80017a4 <HAL_PWR_ConfigPVD+0x80>)
 800173a:	4313      	orrs	r3, r2
 800173c:	604b      	str	r3, [r1, #4]
  
  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  
  /* Note: On STM32WB series, power PVD event is not available on AIEC lines   */
  /*       (only interruption is available through AIEC line 16).             */
  __HAL_PWR_PVD_EXTI_DISABLE_IT();      /*CPU1*/
 800173e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001742:	f7ff ff67 	bl	8001614 <LL_EXTI_DisableIT_0_31>
  __HAL_PWR_PVD_EXTIC2_DISABLE_IT();    /*CPU2*/
 8001746:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800174a:	f7ff ff79 	bl	8001640 <LL_C2_EXTI_DisableIT_0_31>
    
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 800174e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001752:	f7ff ffc3 	bl	80016dc <LL_EXTI_DisableFallingTrig_0_31>
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE(); 
 8001756:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800175a:	f7ff ff99 	bl	8001690 <LL_EXTI_DisableRisingTrig_0_31>

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001766:	2b00      	cmp	r3, #0
 8001768:	d003      	beq.n	8001772 <HAL_PWR_ConfigPVD+0x4e>
  {
    /* Set CPU1 as wakeup target */
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 800176a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800176e:	f7ff ff3d 	bl	80015ec <LL_EXTI_EnableIT_0_31>
  }
  
  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f003 0301 	and.w	r3, r3, #1
 800177a:	2b00      	cmp	r3, #0
 800177c:	d003      	beq.n	8001786 <HAL_PWR_ConfigPVD+0x62>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 800177e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001782:	f7ff ff73 	bl	800166c <LL_EXTI_EnableRisingTrig_0_31>
  }
  
  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	f003 0302 	and.w	r3, r3, #2
 800178e:	2b00      	cmp	r3, #0
 8001790:	d003      	beq.n	800179a <HAL_PWR_ConfigPVD+0x76>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 8001792:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001796:	f7ff ff8f 	bl	80016b8 <LL_EXTI_EnableFallingTrig_0_31>
  }

  return HAL_OK;
 800179a:	2300      	movs	r3, #0
}
 800179c:	4618      	mov	r0, r3
 800179e:	3708      	adds	r7, #8
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	58000400 	.word	0x58000400

080017a8 <HAL_PWR_EnablePVD>:
/**
  * @brief Enables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  /* Enable the power voltage detector */
  SET_BIT(PWR->CR2, PWR_CR2_PVDE);
 80017ac:	4b05      	ldr	r3, [pc, #20]	; (80017c4 <HAL_PWR_EnablePVD+0x1c>)
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	4a04      	ldr	r2, [pc, #16]	; (80017c4 <HAL_PWR_EnablePVD+0x1c>)
 80017b2:	f043 0301 	orr.w	r3, r3, #1
 80017b6:	6053      	str	r3, [r2, #4]
}
 80017b8:	bf00      	nop
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	58000400 	.word	0x58000400

080017c8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 80017cc:	4b04      	ldr	r3, [pc, #16]	; (80017e0 <HAL_PWREx_GetVoltageRange+0x18>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	58000400 	.word	0x58000400

080017e4 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80017e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80017f6:	d101      	bne.n	80017fc <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80017f8:	2301      	movs	r3, #1
 80017fa:	e000      	b.n	80017fe <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80017fc:	2300      	movs	r3, #0
}
 80017fe:	4618      	mov	r0, r3
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr

08001808 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800180c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001816:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800181a:	6013      	str	r3, [r2, #0]
}
 800181c:	bf00      	nop
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr

08001826 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8001826:	b480      	push	{r7}
 8001828:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800182a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001834:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001838:	6013      	str	r3, [r2, #0]
}
 800183a:	bf00      	nop
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr

08001844 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001848:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001852:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001856:	d101      	bne.n	800185c <LL_RCC_HSE_IsReady+0x18>
 8001858:	2301      	movs	r3, #1
 800185a:	e000      	b.n	800185e <LL_RCC_HSE_IsReady+0x1a>
 800185c:	2300      	movs	r3, #0
}
 800185e:	4618      	mov	r0, r3
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr

08001868 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800186c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001876:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800187a:	6013      	str	r3, [r2, #0]
}
 800187c:	bf00      	nop
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr

08001886 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8001886:	b480      	push	{r7}
 8001888:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800188a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001894:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001898:	6013      	str	r3, [r2, #0]
}
 800189a:	bf00      	nop
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr

080018a4 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80018a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018b6:	d101      	bne.n	80018bc <LL_RCC_HSI_IsReady+0x18>
 80018b8:	2301      	movs	r3, #1
 80018ba:	e000      	b.n	80018be <LL_RCC_HSI_IsReady+0x1a>
 80018bc:	2300      	movs	r3, #0
}
 80018be:	4618      	mov	r0, r3
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr

080018c8 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80018d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	061b      	lsls	r3, r3, #24
 80018de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018e2:	4313      	orrs	r3, r2
 80018e4:	604b      	str	r3, [r1, #4]
}
 80018e6:	bf00      	nop
 80018e8:	370c      	adds	r7, #12
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr

080018f2 <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 80018f2:	b480      	push	{r7}
 80018f4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80018f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001902:	f043 0301 	orr.w	r3, r3, #1
 8001906:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800190a:	bf00      	nop
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr

08001914 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001918:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800191c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001920:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001924:	f023 0301 	bic.w	r3, r3, #1
 8001928:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800192c:	bf00      	nop
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr

08001936 <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8001936:	b480      	push	{r7}
 8001938:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800193a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800193e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001942:	f003 0302 	and.w	r3, r3, #2
 8001946:	2b02      	cmp	r3, #2
 8001948:	d101      	bne.n	800194e <LL_RCC_HSI48_IsReady+0x18>
 800194a:	2301      	movs	r3, #1
 800194c:	e000      	b.n	8001950 <LL_RCC_HSI48_IsReady+0x1a>
 800194e:	2300      	movs	r3, #0
}
 8001950:	4618      	mov	r0, r3
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr

0800195a <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 800195a:	b480      	push	{r7}
 800195c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800195e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001962:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001966:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800196a:	f043 0301 	orr.w	r3, r3, #1
 800196e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001972:	bf00      	nop
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001980:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001984:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001988:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800198c:	f023 0301 	bic.w	r3, r3, #1
 8001990:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001994:	bf00      	nop
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr

0800199e <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 800199e:	b480      	push	{r7}
 80019a0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80019a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019ae:	f043 0304 	orr.w	r3, r3, #4
 80019b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80019b6:	bf00      	nop
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr

080019c0 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80019c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019d0:	f023 0304 	bic.w	r3, r3, #4
 80019d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80019d8:	bf00      	nop
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr

080019e2 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80019e2:	b480      	push	{r7}
 80019e4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80019e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019ee:	f003 0302 	and.w	r3, r3, #2
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d101      	bne.n	80019fa <LL_RCC_LSE_IsReady+0x18>
 80019f6:	2301      	movs	r3, #1
 80019f8:	e000      	b.n	80019fc <LL_RCC_LSE_IsReady+0x1a>
 80019fa:	2300      	movs	r3, #0
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr

08001a06 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8001a06:	b480      	push	{r7}
 8001a08:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001a0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a12:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a16:	f043 0301 	orr.w	r3, r3, #1
 8001a1a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001a1e:	bf00      	nop
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr

08001a28 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001a2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a34:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a38:	f023 0301 	bic.w	r3, r3, #1
 8001a3c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001a40:	bf00      	nop
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr

08001a4a <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8001a4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a56:	f003 0302 	and.w	r3, r3, #2
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d101      	bne.n	8001a62 <LL_RCC_LSI1_IsReady+0x18>
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e000      	b.n	8001a64 <LL_RCC_LSI1_IsReady+0x1a>
 8001a62:	2300      	movs	r3, #0
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr

08001a6e <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8001a6e:	b480      	push	{r7}
 8001a70:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001a72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a7a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a7e:	f043 0304 	orr.w	r3, r3, #4
 8001a82:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001a86:	bf00      	nop
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr

08001a90 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001a94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a9c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001aa0:	f023 0304 	bic.w	r3, r3, #4
 8001aa4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001aa8:	bf00      	nop
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr

08001ab2 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8001ab6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001aba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001abe:	f003 0308 	and.w	r3, r3, #8
 8001ac2:	2b08      	cmp	r3, #8
 8001ac4:	d101      	bne.n	8001aca <LL_RCC_LSI2_IsReady+0x18>
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e000      	b.n	8001acc <LL_RCC_LSI2_IsReady+0x1a>
 8001aca:	2300      	movs	r3, #0
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr

08001ad6 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	b083      	sub	sp, #12
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8001ade:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ae2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ae6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	021b      	lsls	r3, r3, #8
 8001aee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001af2:	4313      	orrs	r3, r2
 8001af4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8001af8:	bf00      	nop
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr

08001b04 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001b08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b12:	f043 0301 	orr.w	r3, r3, #1
 8001b16:	6013      	str	r3, [r2, #0]
}
 8001b18:	bf00      	nop
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr

08001b22 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001b22:	b480      	push	{r7}
 8001b24:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001b26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b30:	f023 0301 	bic.w	r3, r3, #1
 8001b34:	6013      	str	r3, [r2, #0]
}
 8001b36:	bf00      	nop
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr

08001b40 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001b44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0302 	and.w	r3, r3, #2
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	d101      	bne.n	8001b56 <LL_RCC_MSI_IsReady+0x16>
 8001b52:	2301      	movs	r3, #1
 8001b54:	e000      	b.n	8001b58 <LL_RCC_MSI_IsReady+0x18>
 8001b56:	2300      	movs	r3, #0
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr

08001b62 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8001b62:	b480      	push	{r7}
 8001b64:	b083      	sub	sp, #12
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8001b6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b74:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	600b      	str	r3, [r1, #0]
}
 8001b7e:	bf00      	nop
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr

08001b8a <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8001b8a:	b480      	push	{r7}
 8001b8c:	b083      	sub	sp, #12
 8001b8e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8001b90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b9a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2bb0      	cmp	r3, #176	; 0xb0
 8001ba0:	d901      	bls.n	8001ba6 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8001ba2:	23b0      	movs	r3, #176	; 0xb0
 8001ba4:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8001ba6:	687b      	ldr	r3, [r7, #4]
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr

08001bb4 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001bbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	021b      	lsls	r3, r3, #8
 8001bca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	604b      	str	r3, [r1, #4]
}
 8001bd2:	bf00      	nop
 8001bd4:	370c      	adds	r7, #12
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr

08001bde <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001bde:	b480      	push	{r7}
 8001be0:	b083      	sub	sp, #12
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001be6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	f023 0203 	bic.w	r2, r3, #3
 8001bf0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	608b      	str	r3, [r1, #8]
}
 8001bfa:	bf00      	nop
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr

08001c06 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001c06:	b480      	push	{r7}
 8001c08:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001c0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	f003 030c 	and.w	r3, r3, #12
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr

08001c1e <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001c1e:	b480      	push	{r7}
 8001c20:	b083      	sub	sp, #12
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001c26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c30:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	608b      	str	r3, [r1, #8]
}
 8001c3a:	bf00      	nop
 8001c3c:	370c      	adds	r7, #12
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr

08001c46 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001c46:	b480      	push	{r7}
 8001c48:	b083      	sub	sp, #12
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001c4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c52:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001c56:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c5a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4313      	orrs	r3, r2
 8001c62:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001c66:	bf00      	nop
 8001c68:	370c      	adds	r7, #12
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr

08001c72 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8001c72:	b480      	push	{r7}
 8001c74:	b083      	sub	sp, #12
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001c7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c7e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001c82:	f023 020f 	bic.w	r2, r3, #15
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	091b      	lsrs	r3, r3, #4
 8001c8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001c94:	bf00      	nop
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001ca8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001cb2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	608b      	str	r3, [r1, #8]
}
 8001cbc:	bf00      	nop
 8001cbe:	370c      	adds	r7, #12
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr

08001cc8 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001cd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001cda:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	608b      	str	r3, [r1, #8]
}
 8001ce4:	bf00      	nop
 8001ce6:	370c      	adds	r7, #12
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr

08001cf0 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001cf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr

08001d08 <LL_C2_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_C2_RCC_GetAHBPrescaler(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 8001d0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d10:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001d14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr

08001d22 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8001d22:	b480      	push	{r7}
 8001d24:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001d26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d2a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001d2e:	011b      	lsls	r3, r3, #4
 8001d30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr

08001d3e <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001d3e:	b480      	push	{r7}
 8001d40:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001d42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr

08001d56 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001d56:	b480      	push	{r7}
 8001d58:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001d5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr

08001d6e <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001d72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d7c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d80:	6013      	str	r3, [r2, #0]
}
 8001d82:	bf00      	nop
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr

08001d8c <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001d90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d9e:	6013      	str	r3, [r2, #0]
}
 8001da0:	bf00      	nop
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr

08001daa <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001daa:	b480      	push	{r7}
 8001dac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001dae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001db8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001dbc:	d101      	bne.n	8001dc2 <LL_RCC_PLL_IsReady+0x18>
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e000      	b.n	8001dc4 <LL_RCC_PLL_IsReady+0x1a>
 8001dc2:	2300      	movs	r3, #0
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr

08001dce <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001dd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	0a1b      	lsrs	r3, r3, #8
 8001dda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr

08001de8 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001dec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001df0:	68db      	ldr	r3, [r3, #12]
 8001df2:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr

08001e00 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001e04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr

08001e18 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001e1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e20:	68db      	ldr	r3, [r3, #12]
 8001e22:	f003 0303 	and.w	r3, r3, #3
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001e34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e42:	d101      	bne.n	8001e48 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001e44:	2301      	movs	r3, #1
 8001e46:	e000      	b.n	8001e4a <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001e48:	2300      	movs	r3, #0
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001e58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e5c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001e60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e64:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001e68:	d101      	bne.n	8001e6e <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e000      	b.n	8001e70 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8001e6e:	2300      	movs	r3, #0
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr

08001e7a <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001e7a:	b480      	push	{r7}
 8001e7c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001e7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e82:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001e86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e8e:	d101      	bne.n	8001e94 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001e90:	2301      	movs	r3, #1
 8001e92:	e000      	b.n	8001e96 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr

08001ea0 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001ea4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001eb2:	d101      	bne.n	8001eb8 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e000      	b.n	8001eba <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001eb8:	2300      	movs	r3, #0
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr

08001ec4 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001ec8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ed2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001ed6:	d101      	bne.n	8001edc <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e000      	b.n	8001ede <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001edc:	2300      	movs	r3, #0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr

08001ee8 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ee8:	b590      	push	{r4, r7, lr}
 8001eea:	b08d      	sub	sp, #52	; 0x34
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d101      	bne.n	8001efa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e363      	b.n	80025c2 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0320 	and.w	r3, r3, #32
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	f000 808d 	beq.w	8002022 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f08:	f7ff fe7d 	bl	8001c06 <LL_RCC_GetSysClkSource>
 8001f0c:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f0e:	f7ff ff83 	bl	8001e18 <LL_RCC_PLL_GetMainSource>
 8001f12:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d005      	beq.n	8001f26 <HAL_RCC_OscConfig+0x3e>
 8001f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f1c:	2b0c      	cmp	r3, #12
 8001f1e:	d147      	bne.n	8001fb0 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8001f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d144      	bne.n	8001fb0 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	69db      	ldr	r3, [r3, #28]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d101      	bne.n	8001f32 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e347      	b.n	80025c2 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8001f36:	f7ff fe28 	bl	8001b8a <LL_RCC_MSI_GetRange>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	429c      	cmp	r4, r3
 8001f3e:	d914      	bls.n	8001f6a <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f44:	4618      	mov	r0, r3
 8001f46:	f000 fd61 	bl	8002a0c <RCC_SetFlashLatencyFromMSIRange>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d001      	beq.n	8001f54 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	e336      	b.n	80025c2 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f7ff fe02 	bl	8001b62 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6a1b      	ldr	r3, [r3, #32]
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7ff fe26 	bl	8001bb4 <LL_RCC_MSI_SetCalibTrimming>
 8001f68:	e013      	b.n	8001f92 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7ff fdf7 	bl	8001b62 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6a1b      	ldr	r3, [r3, #32]
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7ff fe1b 	bl	8001bb4 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f82:	4618      	mov	r0, r3
 8001f84:	f000 fd42 	bl	8002a0c <RCC_SetFlashLatencyFromMSIRange>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e317      	b.n	80025c2 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001f92:	f000 fcc9 	bl	8002928 <HAL_RCC_GetHCLKFreq>
 8001f96:	4603      	mov	r3, r0
 8001f98:	4aa4      	ldr	r2, [pc, #656]	; (800222c <HAL_RCC_OscConfig+0x344>)
 8001f9a:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001f9c:	4ba4      	ldr	r3, [pc, #656]	; (8002230 <HAL_RCC_OscConfig+0x348>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f7fe fe63 	bl	8000c6c <HAL_InitTick>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d039      	beq.n	8002020 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e308      	b.n	80025c2 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	69db      	ldr	r3, [r3, #28]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d01e      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001fb8:	f7ff fda4 	bl	8001b04 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001fbc:	f7fe ff80 	bl	8000ec0 <HAL_GetTick>
 8001fc0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001fc2:	e008      	b.n	8001fd6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001fc4:	f7fe ff7c 	bl	8000ec0 <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	d901      	bls.n	8001fd6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e2f5      	b.n	80025c2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8001fd6:	f7ff fdb3 	bl	8001b40 <LL_RCC_MSI_IsReady>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d0f1      	beq.n	8001fc4 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7ff fdbc 	bl	8001b62 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6a1b      	ldr	r3, [r3, #32]
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7ff fde0 	bl	8001bb4 <LL_RCC_MSI_SetCalibTrimming>
 8001ff4:	e015      	b.n	8002022 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001ff6:	f7ff fd94 	bl	8001b22 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ffa:	f7fe ff61 	bl	8000ec0 <HAL_GetTick>
 8001ffe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002000:	e008      	b.n	8002014 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002002:	f7fe ff5d 	bl	8000ec0 <HAL_GetTick>
 8002006:	4602      	mov	r2, r0
 8002008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	2b02      	cmp	r3, #2
 800200e:	d901      	bls.n	8002014 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002010:	2303      	movs	r3, #3
 8002012:	e2d6      	b.n	80025c2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002014:	f7ff fd94 	bl	8001b40 <LL_RCC_MSI_IsReady>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d1f1      	bne.n	8002002 <HAL_RCC_OscConfig+0x11a>
 800201e:	e000      	b.n	8002022 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002020:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0301 	and.w	r3, r3, #1
 800202a:	2b00      	cmp	r3, #0
 800202c:	d047      	beq.n	80020be <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800202e:	f7ff fdea 	bl	8001c06 <LL_RCC_GetSysClkSource>
 8002032:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002034:	f7ff fef0 	bl	8001e18 <LL_RCC_PLL_GetMainSource>
 8002038:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800203a:	6a3b      	ldr	r3, [r7, #32]
 800203c:	2b08      	cmp	r3, #8
 800203e:	d005      	beq.n	800204c <HAL_RCC_OscConfig+0x164>
 8002040:	6a3b      	ldr	r3, [r7, #32]
 8002042:	2b0c      	cmp	r3, #12
 8002044:	d108      	bne.n	8002058 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	2b03      	cmp	r3, #3
 800204a:	d105      	bne.n	8002058 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d134      	bne.n	80020be <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e2b4      	b.n	80025c2 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002060:	d102      	bne.n	8002068 <HAL_RCC_OscConfig+0x180>
 8002062:	f7ff fbd1 	bl	8001808 <LL_RCC_HSE_Enable>
 8002066:	e001      	b.n	800206c <HAL_RCC_OscConfig+0x184>
 8002068:	f7ff fbdd 	bl	8001826 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d012      	beq.n	800209a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002074:	f7fe ff24 	bl	8000ec0 <HAL_GetTick>
 8002078:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800207a:	e008      	b.n	800208e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800207c:	f7fe ff20 	bl	8000ec0 <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	2b64      	cmp	r3, #100	; 0x64
 8002088:	d901      	bls.n	800208e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800208a:	2303      	movs	r3, #3
 800208c:	e299      	b.n	80025c2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800208e:	f7ff fbd9 	bl	8001844 <LL_RCC_HSE_IsReady>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d0f1      	beq.n	800207c <HAL_RCC_OscConfig+0x194>
 8002098:	e011      	b.n	80020be <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800209a:	f7fe ff11 	bl	8000ec0 <HAL_GetTick>
 800209e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80020a0:	e008      	b.n	80020b4 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020a2:	f7fe ff0d 	bl	8000ec0 <HAL_GetTick>
 80020a6:	4602      	mov	r2, r0
 80020a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020aa:	1ad3      	subs	r3, r2, r3
 80020ac:	2b64      	cmp	r3, #100	; 0x64
 80020ae:	d901      	bls.n	80020b4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80020b0:	2303      	movs	r3, #3
 80020b2:	e286      	b.n	80025c2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 80020b4:	f7ff fbc6 	bl	8001844 <LL_RCC_HSE_IsReady>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d1f1      	bne.n	80020a2 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0302 	and.w	r3, r3, #2
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d04c      	beq.n	8002164 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020ca:	f7ff fd9c 	bl	8001c06 <LL_RCC_GetSysClkSource>
 80020ce:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020d0:	f7ff fea2 	bl	8001e18 <LL_RCC_PLL_GetMainSource>
 80020d4:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	2b04      	cmp	r3, #4
 80020da:	d005      	beq.n	80020e8 <HAL_RCC_OscConfig+0x200>
 80020dc:	69bb      	ldr	r3, [r7, #24]
 80020de:	2b0c      	cmp	r3, #12
 80020e0:	d10e      	bne.n	8002100 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	2b02      	cmp	r3, #2
 80020e6:	d10b      	bne.n	8002100 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d101      	bne.n	80020f4 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e266      	b.n	80025c2 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	691b      	ldr	r3, [r3, #16]
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7ff fbe5 	bl	80018c8 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80020fe:	e031      	b.n	8002164 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d019      	beq.n	800213c <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002108:	f7ff fbae 	bl	8001868 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800210c:	f7fe fed8 	bl	8000ec0 <HAL_GetTick>
 8002110:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002112:	e008      	b.n	8002126 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002114:	f7fe fed4 	bl	8000ec0 <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	2b02      	cmp	r3, #2
 8002120:	d901      	bls.n	8002126 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e24d      	b.n	80025c2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002126:	f7ff fbbd 	bl	80018a4 <LL_RCC_HSI_IsReady>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d0f1      	beq.n	8002114 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	691b      	ldr	r3, [r3, #16]
 8002134:	4618      	mov	r0, r3
 8002136:	f7ff fbc7 	bl	80018c8 <LL_RCC_HSI_SetCalibTrimming>
 800213a:	e013      	b.n	8002164 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800213c:	f7ff fba3 	bl	8001886 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002140:	f7fe febe 	bl	8000ec0 <HAL_GetTick>
 8002144:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002146:	e008      	b.n	800215a <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002148:	f7fe feba 	bl	8000ec0 <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	2b02      	cmp	r3, #2
 8002154:	d901      	bls.n	800215a <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e233      	b.n	80025c2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800215a:	f7ff fba3 	bl	80018a4 <LL_RCC_HSI_IsReady>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d1f1      	bne.n	8002148 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0308 	and.w	r3, r3, #8
 800216c:	2b00      	cmp	r3, #0
 800216e:	d106      	bne.n	800217e <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002178:	2b00      	cmp	r3, #0
 800217a:	f000 80a3 	beq.w	80022c4 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	695b      	ldr	r3, [r3, #20]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d076      	beq.n	8002274 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0310 	and.w	r3, r3, #16
 800218e:	2b00      	cmp	r3, #0
 8002190:	d046      	beq.n	8002220 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8002192:	f7ff fc5a 	bl	8001a4a <LL_RCC_LSI1_IsReady>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d113      	bne.n	80021c4 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800219c:	f7ff fc33 	bl	8001a06 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80021a0:	f7fe fe8e 	bl	8000ec0 <HAL_GetTick>
 80021a4:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80021a6:	e008      	b.n	80021ba <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80021a8:	f7fe fe8a 	bl	8000ec0 <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d901      	bls.n	80021ba <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	e203      	b.n	80025c2 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80021ba:	f7ff fc46 	bl	8001a4a <LL_RCC_LSI1_IsReady>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d0f1      	beq.n	80021a8 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80021c4:	f7ff fc53 	bl	8001a6e <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021c8:	f7fe fe7a 	bl	8000ec0 <HAL_GetTick>
 80021cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80021ce:	e008      	b.n	80021e2 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80021d0:	f7fe fe76 	bl	8000ec0 <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	2b03      	cmp	r3, #3
 80021dc:	d901      	bls.n	80021e2 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e1ef      	b.n	80025c2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80021e2:	f7ff fc66 	bl	8001ab2 <LL_RCC_LSI2_IsReady>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d0f1      	beq.n	80021d0 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	699b      	ldr	r3, [r3, #24]
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7ff fc70 	bl	8001ad6 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80021f6:	f7ff fc17 	bl	8001a28 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021fa:	f7fe fe61 	bl	8000ec0 <HAL_GetTick>
 80021fe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002200:	e008      	b.n	8002214 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002202:	f7fe fe5d 	bl	8000ec0 <HAL_GetTick>
 8002206:	4602      	mov	r2, r0
 8002208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	2b02      	cmp	r3, #2
 800220e:	d901      	bls.n	8002214 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8002210:	2303      	movs	r3, #3
 8002212:	e1d6      	b.n	80025c2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002214:	f7ff fc19 	bl	8001a4a <LL_RCC_LSI1_IsReady>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d1f1      	bne.n	8002202 <HAL_RCC_OscConfig+0x31a>
 800221e:	e051      	b.n	80022c4 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8002220:	f7ff fbf1 	bl	8001a06 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002224:	f7fe fe4c 	bl	8000ec0 <HAL_GetTick>
 8002228:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800222a:	e00c      	b.n	8002246 <HAL_RCC_OscConfig+0x35e>
 800222c:	20000004 	.word	0x20000004
 8002230:	20000008 	.word	0x20000008
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002234:	f7fe fe44 	bl	8000ec0 <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	2b02      	cmp	r3, #2
 8002240:	d901      	bls.n	8002246 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002242:	2303      	movs	r3, #3
 8002244:	e1bd      	b.n	80025c2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002246:	f7ff fc00 	bl	8001a4a <LL_RCC_LSI1_IsReady>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d0f1      	beq.n	8002234 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8002250:	f7ff fc1e 	bl	8001a90 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002254:	e008      	b.n	8002268 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002256:	f7fe fe33 	bl	8000ec0 <HAL_GetTick>
 800225a:	4602      	mov	r2, r0
 800225c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	2b03      	cmp	r3, #3
 8002262:	d901      	bls.n	8002268 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8002264:	2303      	movs	r3, #3
 8002266:	e1ac      	b.n	80025c2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002268:	f7ff fc23 	bl	8001ab2 <LL_RCC_LSI2_IsReady>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d1f1      	bne.n	8002256 <HAL_RCC_OscConfig+0x36e>
 8002272:	e027      	b.n	80022c4 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8002274:	f7ff fc0c 	bl	8001a90 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002278:	f7fe fe22 	bl	8000ec0 <HAL_GetTick>
 800227c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800227e:	e008      	b.n	8002292 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002280:	f7fe fe1e 	bl	8000ec0 <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	2b03      	cmp	r3, #3
 800228c:	d901      	bls.n	8002292 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e197      	b.n	80025c2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002292:	f7ff fc0e 	bl	8001ab2 <LL_RCC_LSI2_IsReady>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d1f1      	bne.n	8002280 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800229c:	f7ff fbc4 	bl	8001a28 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022a0:	f7fe fe0e 	bl	8000ec0 <HAL_GetTick>
 80022a4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80022a6:	e008      	b.n	80022ba <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80022a8:	f7fe fe0a 	bl	8000ec0 <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d901      	bls.n	80022ba <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80022b6:	2303      	movs	r3, #3
 80022b8:	e183      	b.n	80025c2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80022ba:	f7ff fbc6 	bl	8001a4a <LL_RCC_LSI1_IsReady>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d1f1      	bne.n	80022a8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0304 	and.w	r3, r3, #4
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d05b      	beq.n	8002388 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022d0:	4ba7      	ldr	r3, [pc, #668]	; (8002570 <HAL_RCC_OscConfig+0x688>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d114      	bne.n	8002306 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80022dc:	f7ff fa12 	bl	8001704 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022e0:	f7fe fdee 	bl	8000ec0 <HAL_GetTick>
 80022e4:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022e6:	e008      	b.n	80022fa <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022e8:	f7fe fdea 	bl	8000ec0 <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	d901      	bls.n	80022fa <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e163      	b.n	80025c2 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022fa:	4b9d      	ldr	r3, [pc, #628]	; (8002570 <HAL_RCC_OscConfig+0x688>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002302:	2b00      	cmp	r3, #0
 8002304:	d0f0      	beq.n	80022e8 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	2b01      	cmp	r3, #1
 800230c:	d102      	bne.n	8002314 <HAL_RCC_OscConfig+0x42c>
 800230e:	f7ff fb24 	bl	800195a <LL_RCC_LSE_Enable>
 8002312:	e00c      	b.n	800232e <HAL_RCC_OscConfig+0x446>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	2b05      	cmp	r3, #5
 800231a:	d104      	bne.n	8002326 <HAL_RCC_OscConfig+0x43e>
 800231c:	f7ff fb3f 	bl	800199e <LL_RCC_LSE_EnableBypass>
 8002320:	f7ff fb1b 	bl	800195a <LL_RCC_LSE_Enable>
 8002324:	e003      	b.n	800232e <HAL_RCC_OscConfig+0x446>
 8002326:	f7ff fb29 	bl	800197c <LL_RCC_LSE_Disable>
 800232a:	f7ff fb49 	bl	80019c0 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d014      	beq.n	8002360 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002336:	f7fe fdc3 	bl	8000ec0 <HAL_GetTick>
 800233a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800233c:	e00a      	b.n	8002354 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800233e:	f7fe fdbf 	bl	8000ec0 <HAL_GetTick>
 8002342:	4602      	mov	r2, r0
 8002344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	f241 3288 	movw	r2, #5000	; 0x1388
 800234c:	4293      	cmp	r3, r2
 800234e:	d901      	bls.n	8002354 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8002350:	2303      	movs	r3, #3
 8002352:	e136      	b.n	80025c2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002354:	f7ff fb45 	bl	80019e2 <LL_RCC_LSE_IsReady>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d0ef      	beq.n	800233e <HAL_RCC_OscConfig+0x456>
 800235e:	e013      	b.n	8002388 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002360:	f7fe fdae 	bl	8000ec0 <HAL_GetTick>
 8002364:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002366:	e00a      	b.n	800237e <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002368:	f7fe fdaa 	bl	8000ec0 <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	f241 3288 	movw	r2, #5000	; 0x1388
 8002376:	4293      	cmp	r3, r2
 8002378:	d901      	bls.n	800237e <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	e121      	b.n	80025c2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800237e:	f7ff fb30 	bl	80019e2 <LL_RCC_LSE_IsReady>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d1ef      	bne.n	8002368 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002390:	2b00      	cmp	r3, #0
 8002392:	d02c      	beq.n	80023ee <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002398:	2b00      	cmp	r3, #0
 800239a:	d014      	beq.n	80023c6 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800239c:	f7ff faa9 	bl	80018f2 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023a0:	f7fe fd8e 	bl	8000ec0 <HAL_GetTick>
 80023a4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80023a6:	e008      	b.n	80023ba <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80023a8:	f7fe fd8a 	bl	8000ec0 <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d901      	bls.n	80023ba <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e103      	b.n	80025c2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80023ba:	f7ff fabc 	bl	8001936 <LL_RCC_HSI48_IsReady>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d0f1      	beq.n	80023a8 <HAL_RCC_OscConfig+0x4c0>
 80023c4:	e013      	b.n	80023ee <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80023c6:	f7ff faa5 	bl	8001914 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023ca:	f7fe fd79 	bl	8000ec0 <HAL_GetTick>
 80023ce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80023d0:	e008      	b.n	80023e4 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80023d2:	f7fe fd75 	bl	8000ec0 <HAL_GetTick>
 80023d6:	4602      	mov	r2, r0
 80023d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	2b02      	cmp	r3, #2
 80023de:	d901      	bls.n	80023e4 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 80023e0:	2303      	movs	r3, #3
 80023e2:	e0ee      	b.n	80025c2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80023e4:	f7ff faa7 	bl	8001936 <LL_RCC_HSI48_IsReady>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d1f1      	bne.n	80023d2 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	f000 80e4 	beq.w	80025c0 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023f8:	f7ff fc05 	bl	8001c06 <LL_RCC_GetSysClkSource>
 80023fc:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80023fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800240a:	2b02      	cmp	r3, #2
 800240c:	f040 80b4 	bne.w	8002578 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	f003 0203 	and.w	r2, r3, #3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241a:	429a      	cmp	r2, r3
 800241c:	d123      	bne.n	8002466 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002428:	429a      	cmp	r2, r3
 800242a:	d11c      	bne.n	8002466 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	0a1b      	lsrs	r3, r3, #8
 8002430:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002438:	429a      	cmp	r2, r3
 800243a:	d114      	bne.n	8002466 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002446:	429a      	cmp	r2, r3
 8002448:	d10d      	bne.n	8002466 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002454:	429a      	cmp	r2, r3
 8002456:	d106      	bne.n	8002466 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002462:	429a      	cmp	r2, r3
 8002464:	d05d      	beq.n	8002522 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	2b0c      	cmp	r3, #12
 800246a:	d058      	beq.n	800251e <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800246c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e0a1      	b.n	80025c2 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800247e:	f7ff fc85 	bl	8001d8c <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002482:	f7fe fd1d 	bl	8000ec0 <HAL_GetTick>
 8002486:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002488:	e008      	b.n	800249c <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800248a:	f7fe fd19 	bl	8000ec0 <HAL_GetTick>
 800248e:	4602      	mov	r2, r0
 8002490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	2b02      	cmp	r3, #2
 8002496:	d901      	bls.n	800249c <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8002498:	2303      	movs	r3, #3
 800249a:	e092      	b.n	80025c2 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800249c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d1ef      	bne.n	800248a <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024ae:	68da      	ldr	r2, [r3, #12]
 80024b0:	4b30      	ldr	r3, [pc, #192]	; (8002574 <HAL_RCC_OscConfig+0x68c>)
 80024b2:	4013      	ands	r3, r2
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80024bc:	4311      	orrs	r1, r2
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80024c2:	0212      	lsls	r2, r2, #8
 80024c4:	4311      	orrs	r1, r2
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80024ca:	4311      	orrs	r1, r2
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80024d0:	4311      	orrs	r1, r2
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80024d6:	430a      	orrs	r2, r1
 80024d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80024dc:	4313      	orrs	r3, r2
 80024de:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80024e0:	f7ff fc45 	bl	8001d6e <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80024e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024e8:	68db      	ldr	r3, [r3, #12]
 80024ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024f2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80024f4:	f7fe fce4 	bl	8000ec0 <HAL_GetTick>
 80024f8:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024fa:	e008      	b.n	800250e <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024fc:	f7fe fce0 	bl	8000ec0 <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	2b02      	cmp	r3, #2
 8002508:	d901      	bls.n	800250e <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e059      	b.n	80025c2 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800250e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d0ef      	beq.n	80024fc <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800251c:	e050      	b.n	80025c0 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e04f      	b.n	80025c2 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002522:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d147      	bne.n	80025c0 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002530:	f7ff fc1d 	bl	8001d6e <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002534:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800253e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002542:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002544:	f7fe fcbc 	bl	8000ec0 <HAL_GetTick>
 8002548:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800254a:	e008      	b.n	800255e <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800254c:	f7fe fcb8 	bl	8000ec0 <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	2b02      	cmp	r3, #2
 8002558:	d901      	bls.n	800255e <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e031      	b.n	80025c2 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800255e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002568:	2b00      	cmp	r3, #0
 800256a:	d0ef      	beq.n	800254c <HAL_RCC_OscConfig+0x664>
 800256c:	e028      	b.n	80025c0 <HAL_RCC_OscConfig+0x6d8>
 800256e:	bf00      	nop
 8002570:	58000400 	.word	0x58000400
 8002574:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	2b0c      	cmp	r3, #12
 800257c:	d01e      	beq.n	80025bc <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800257e:	f7ff fc05 	bl	8001d8c <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002582:	f7fe fc9d 	bl	8000ec0 <HAL_GetTick>
 8002586:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002588:	e008      	b.n	800259c <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800258a:	f7fe fc99 	bl	8000ec0 <HAL_GetTick>
 800258e:	4602      	mov	r2, r0
 8002590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	2b02      	cmp	r3, #2
 8002596:	d901      	bls.n	800259c <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8002598:	2303      	movs	r3, #3
 800259a:	e012      	b.n	80025c2 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800259c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d1ef      	bne.n	800258a <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80025aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025ae:	68da      	ldr	r2, [r3, #12]
 80025b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80025b4:	4b05      	ldr	r3, [pc, #20]	; (80025cc <HAL_RCC_OscConfig+0x6e4>)
 80025b6:	4013      	ands	r3, r2
 80025b8:	60cb      	str	r3, [r1, #12]
 80025ba:	e001      	b.n	80025c0 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e000      	b.n	80025c2 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 80025c0:	2300      	movs	r3, #0
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3734      	adds	r7, #52	; 0x34
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd90      	pop	{r4, r7, pc}
 80025ca:	bf00      	nop
 80025cc:	eefefffc 	.word	0xeefefffc

080025d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b084      	sub	sp, #16
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d101      	bne.n	80025e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e12d      	b.n	8002840 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025e4:	4b98      	ldr	r3, [pc, #608]	; (8002848 <HAL_RCC_ClockConfig+0x278>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0307 	and.w	r3, r3, #7
 80025ec:	683a      	ldr	r2, [r7, #0]
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d91b      	bls.n	800262a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025f2:	4b95      	ldr	r3, [pc, #596]	; (8002848 <HAL_RCC_ClockConfig+0x278>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f023 0207 	bic.w	r2, r3, #7
 80025fa:	4993      	ldr	r1, [pc, #588]	; (8002848 <HAL_RCC_ClockConfig+0x278>)
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	4313      	orrs	r3, r2
 8002600:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002602:	f7fe fc5d 	bl	8000ec0 <HAL_GetTick>
 8002606:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002608:	e008      	b.n	800261c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800260a:	f7fe fc59 	bl	8000ec0 <HAL_GetTick>
 800260e:	4602      	mov	r2, r0
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	2b02      	cmp	r3, #2
 8002616:	d901      	bls.n	800261c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002618:	2303      	movs	r3, #3
 800261a:	e111      	b.n	8002840 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800261c:	4b8a      	ldr	r3, [pc, #552]	; (8002848 <HAL_RCC_ClockConfig+0x278>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0307 	and.w	r3, r3, #7
 8002624:	683a      	ldr	r2, [r7, #0]
 8002626:	429a      	cmp	r2, r3
 8002628:	d1ef      	bne.n	800260a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0302 	and.w	r3, r3, #2
 8002632:	2b00      	cmp	r3, #0
 8002634:	d016      	beq.n	8002664 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	4618      	mov	r0, r3
 800263c:	f7ff faef 	bl	8001c1e <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002640:	f7fe fc3e 	bl	8000ec0 <HAL_GetTick>
 8002644:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002646:	e008      	b.n	800265a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002648:	f7fe fc3a 	bl	8000ec0 <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	2b02      	cmp	r3, #2
 8002654:	d901      	bls.n	800265a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e0f2      	b.n	8002840 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800265a:	f7ff fbe9 	bl	8001e30 <LL_RCC_IsActiveFlag_HPRE>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d0f1      	beq.n	8002648 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0320 	and.w	r3, r3, #32
 800266c:	2b00      	cmp	r3, #0
 800266e:	d016      	beq.n	800269e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	695b      	ldr	r3, [r3, #20]
 8002674:	4618      	mov	r0, r3
 8002676:	f7ff fae6 	bl	8001c46 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800267a:	f7fe fc21 	bl	8000ec0 <HAL_GetTick>
 800267e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002680:	e008      	b.n	8002694 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002682:	f7fe fc1d 	bl	8000ec0 <HAL_GetTick>
 8002686:	4602      	mov	r2, r0
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	2b02      	cmp	r3, #2
 800268e:	d901      	bls.n	8002694 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002690:	2303      	movs	r3, #3
 8002692:	e0d5      	b.n	8002840 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002694:	f7ff fbde 	bl	8001e54 <LL_RCC_IsActiveFlag_C2HPRE>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d0f1      	beq.n	8002682 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d016      	beq.n	80026d8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	699b      	ldr	r3, [r3, #24]
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7ff fadf 	bl	8001c72 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80026b4:	f7fe fc04 	bl	8000ec0 <HAL_GetTick>
 80026b8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80026ba:	e008      	b.n	80026ce <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80026bc:	f7fe fc00 	bl	8000ec0 <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d901      	bls.n	80026ce <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e0b8      	b.n	8002840 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80026ce:	f7ff fbd4 	bl	8001e7a <LL_RCC_IsActiveFlag_SHDHPRE>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d0f1      	beq.n	80026bc <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0304 	and.w	r3, r3, #4
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d016      	beq.n	8002712 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	4618      	mov	r0, r3
 80026ea:	f7ff fad9 	bl	8001ca0 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80026ee:	f7fe fbe7 	bl	8000ec0 <HAL_GetTick>
 80026f2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80026f4:	e008      	b.n	8002708 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80026f6:	f7fe fbe3 	bl	8000ec0 <HAL_GetTick>
 80026fa:	4602      	mov	r2, r0
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	2b02      	cmp	r3, #2
 8002702:	d901      	bls.n	8002708 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002704:	2303      	movs	r3, #3
 8002706:	e09b      	b.n	8002840 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002708:	f7ff fbca 	bl	8001ea0 <LL_RCC_IsActiveFlag_PPRE1>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d0f1      	beq.n	80026f6 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0308 	and.w	r3, r3, #8
 800271a:	2b00      	cmp	r3, #0
 800271c:	d017      	beq.n	800274e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	691b      	ldr	r3, [r3, #16]
 8002722:	00db      	lsls	r3, r3, #3
 8002724:	4618      	mov	r0, r3
 8002726:	f7ff facf 	bl	8001cc8 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800272a:	f7fe fbc9 	bl	8000ec0 <HAL_GetTick>
 800272e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002730:	e008      	b.n	8002744 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002732:	f7fe fbc5 	bl	8000ec0 <HAL_GetTick>
 8002736:	4602      	mov	r2, r0
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	2b02      	cmp	r3, #2
 800273e:	d901      	bls.n	8002744 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002740:	2303      	movs	r3, #3
 8002742:	e07d      	b.n	8002840 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002744:	f7ff fbbe 	bl	8001ec4 <LL_RCC_IsActiveFlag_PPRE2>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d0f1      	beq.n	8002732 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0301 	and.w	r3, r3, #1
 8002756:	2b00      	cmp	r3, #0
 8002758:	d043      	beq.n	80027e2 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	2b02      	cmp	r3, #2
 8002760:	d106      	bne.n	8002770 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002762:	f7ff f86f 	bl	8001844 <LL_RCC_HSE_IsReady>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d11e      	bne.n	80027aa <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e067      	b.n	8002840 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	2b03      	cmp	r3, #3
 8002776:	d106      	bne.n	8002786 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002778:	f7ff fb17 	bl	8001daa <LL_RCC_PLL_IsReady>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d113      	bne.n	80027aa <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e05c      	b.n	8002840 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d106      	bne.n	800279c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800278e:	f7ff f9d7 	bl	8001b40 <LL_RCC_MSI_IsReady>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d108      	bne.n	80027aa <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e051      	b.n	8002840 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800279c:	f7ff f882 	bl	80018a4 <LL_RCC_HSI_IsReady>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d101      	bne.n	80027aa <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e04a      	b.n	8002840 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	4618      	mov	r0, r3
 80027b0:	f7ff fa15 	bl	8001bde <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027b4:	f7fe fb84 	bl	8000ec0 <HAL_GetTick>
 80027b8:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ba:	e00a      	b.n	80027d2 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027bc:	f7fe fb80 	bl	8000ec0 <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d901      	bls.n	80027d2 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e036      	b.n	8002840 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027d2:	f7ff fa18 	bl	8001c06 <LL_RCC_GetSysClkSource>
 80027d6:	4602      	mov	r2, r0
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	429a      	cmp	r2, r3
 80027e0:	d1ec      	bne.n	80027bc <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027e2:	4b19      	ldr	r3, [pc, #100]	; (8002848 <HAL_RCC_ClockConfig+0x278>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0307 	and.w	r3, r3, #7
 80027ea:	683a      	ldr	r2, [r7, #0]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d21b      	bcs.n	8002828 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027f0:	4b15      	ldr	r3, [pc, #84]	; (8002848 <HAL_RCC_ClockConfig+0x278>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f023 0207 	bic.w	r2, r3, #7
 80027f8:	4913      	ldr	r1, [pc, #76]	; (8002848 <HAL_RCC_ClockConfig+0x278>)
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	4313      	orrs	r3, r2
 80027fe:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002800:	f7fe fb5e 	bl	8000ec0 <HAL_GetTick>
 8002804:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002806:	e008      	b.n	800281a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002808:	f7fe fb5a 	bl	8000ec0 <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	2b02      	cmp	r3, #2
 8002814:	d901      	bls.n	800281a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e012      	b.n	8002840 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800281a:	4b0b      	ldr	r3, [pc, #44]	; (8002848 <HAL_RCC_ClockConfig+0x278>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0307 	and.w	r3, r3, #7
 8002822:	683a      	ldr	r2, [r7, #0]
 8002824:	429a      	cmp	r2, r3
 8002826:	d1ef      	bne.n	8002808 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002828:	f000 f87e 	bl	8002928 <HAL_RCC_GetHCLKFreq>
 800282c:	4603      	mov	r3, r0
 800282e:	4a07      	ldr	r2, [pc, #28]	; (800284c <HAL_RCC_ClockConfig+0x27c>)
 8002830:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8002832:	f7fe fb51 	bl	8000ed8 <HAL_GetTickPrio>
 8002836:	4603      	mov	r3, r0
 8002838:	4618      	mov	r0, r3
 800283a:	f7fe fa17 	bl	8000c6c <HAL_InitTick>
 800283e:	4603      	mov	r3, r0
}
 8002840:	4618      	mov	r0, r3
 8002842:	3710      	adds	r7, #16
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	58004000 	.word	0x58004000
 800284c:	20000004 	.word	0x20000004

08002850 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002850:	b590      	push	{r4, r7, lr}
 8002852:	b085      	sub	sp, #20
 8002854:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002856:	f7ff f9d6 	bl	8001c06 <LL_RCC_GetSysClkSource>
 800285a:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d10a      	bne.n	8002878 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002862:	f7ff f992 	bl	8001b8a <LL_RCC_MSI_GetRange>
 8002866:	4603      	mov	r3, r0
 8002868:	091b      	lsrs	r3, r3, #4
 800286a:	f003 030f 	and.w	r3, r3, #15
 800286e:	4a2b      	ldr	r2, [pc, #172]	; (800291c <HAL_RCC_GetSysClockFreq+0xcc>)
 8002870:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002874:	60fb      	str	r3, [r7, #12]
 8002876:	e04b      	b.n	8002910 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2b04      	cmp	r3, #4
 800287c:	d102      	bne.n	8002884 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800287e:	4b28      	ldr	r3, [pc, #160]	; (8002920 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002880:	60fb      	str	r3, [r7, #12]
 8002882:	e045      	b.n	8002910 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2b08      	cmp	r3, #8
 8002888:	d10a      	bne.n	80028a0 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800288a:	f7fe ffab 	bl	80017e4 <LL_RCC_HSE_IsEnabledDiv2>
 800288e:	4603      	mov	r3, r0
 8002890:	2b01      	cmp	r3, #1
 8002892:	d102      	bne.n	800289a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002894:	4b22      	ldr	r3, [pc, #136]	; (8002920 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002896:	60fb      	str	r3, [r7, #12]
 8002898:	e03a      	b.n	8002910 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800289a:	4b22      	ldr	r3, [pc, #136]	; (8002924 <HAL_RCC_GetSysClockFreq+0xd4>)
 800289c:	60fb      	str	r3, [r7, #12]
 800289e:	e037      	b.n	8002910 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80028a0:	f7ff faba 	bl	8001e18 <LL_RCC_PLL_GetMainSource>
 80028a4:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	2b02      	cmp	r3, #2
 80028aa:	d003      	beq.n	80028b4 <HAL_RCC_GetSysClockFreq+0x64>
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	2b03      	cmp	r3, #3
 80028b0:	d003      	beq.n	80028ba <HAL_RCC_GetSysClockFreq+0x6a>
 80028b2:	e00d      	b.n	80028d0 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80028b4:	4b1a      	ldr	r3, [pc, #104]	; (8002920 <HAL_RCC_GetSysClockFreq+0xd0>)
 80028b6:	60bb      	str	r3, [r7, #8]
        break;
 80028b8:	e015      	b.n	80028e6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80028ba:	f7fe ff93 	bl	80017e4 <LL_RCC_HSE_IsEnabledDiv2>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d102      	bne.n	80028ca <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80028c4:	4b16      	ldr	r3, [pc, #88]	; (8002920 <HAL_RCC_GetSysClockFreq+0xd0>)
 80028c6:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80028c8:	e00d      	b.n	80028e6 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80028ca:	4b16      	ldr	r3, [pc, #88]	; (8002924 <HAL_RCC_GetSysClockFreq+0xd4>)
 80028cc:	60bb      	str	r3, [r7, #8]
        break;
 80028ce:	e00a      	b.n	80028e6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80028d0:	f7ff f95b 	bl	8001b8a <LL_RCC_MSI_GetRange>
 80028d4:	4603      	mov	r3, r0
 80028d6:	091b      	lsrs	r3, r3, #4
 80028d8:	f003 030f 	and.w	r3, r3, #15
 80028dc:	4a0f      	ldr	r2, [pc, #60]	; (800291c <HAL_RCC_GetSysClockFreq+0xcc>)
 80028de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028e2:	60bb      	str	r3, [r7, #8]
        break;
 80028e4:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 80028e6:	f7ff fa72 	bl	8001dce <LL_RCC_PLL_GetN>
 80028ea:	4602      	mov	r2, r0
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	fb03 f402 	mul.w	r4, r3, r2
 80028f2:	f7ff fa85 	bl	8001e00 <LL_RCC_PLL_GetDivider>
 80028f6:	4603      	mov	r3, r0
 80028f8:	091b      	lsrs	r3, r3, #4
 80028fa:	3301      	adds	r3, #1
 80028fc:	fbb4 f4f3 	udiv	r4, r4, r3
 8002900:	f7ff fa72 	bl	8001de8 <LL_RCC_PLL_GetR>
 8002904:	4603      	mov	r3, r0
 8002906:	0f5b      	lsrs	r3, r3, #29
 8002908:	3301      	adds	r3, #1
 800290a:	fbb4 f3f3 	udiv	r3, r4, r3
 800290e:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002910:	68fb      	ldr	r3, [r7, #12]
}
 8002912:	4618      	mov	r0, r3
 8002914:	3714      	adds	r7, #20
 8002916:	46bd      	mov	sp, r7
 8002918:	bd90      	pop	{r4, r7, pc}
 800291a:	bf00      	nop
 800291c:	080080d8 	.word	0x080080d8
 8002920:	00f42400 	.word	0x00f42400
 8002924:	01e84800 	.word	0x01e84800

08002928 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002928:	b598      	push	{r3, r4, r7, lr}
 800292a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800292c:	f7ff ff90 	bl	8002850 <HAL_RCC_GetSysClockFreq>
 8002930:	4604      	mov	r4, r0
 8002932:	f7ff f9dd 	bl	8001cf0 <LL_RCC_GetAHBPrescaler>
 8002936:	4603      	mov	r3, r0
 8002938:	091b      	lsrs	r3, r3, #4
 800293a:	f003 030f 	and.w	r3, r3, #15
 800293e:	4a03      	ldr	r2, [pc, #12]	; (800294c <HAL_RCC_GetHCLKFreq+0x24>)
 8002940:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002944:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002948:	4618      	mov	r0, r3
 800294a:	bd98      	pop	{r3, r4, r7, pc}
 800294c:	08008078 	.word	0x08008078

08002950 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002950:	b598      	push	{r3, r4, r7, lr}
 8002952:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002954:	f7ff ffe8 	bl	8002928 <HAL_RCC_GetHCLKFreq>
 8002958:	4604      	mov	r4, r0
 800295a:	f7ff f9f0 	bl	8001d3e <LL_RCC_GetAPB1Prescaler>
 800295e:	4603      	mov	r3, r0
 8002960:	0a1b      	lsrs	r3, r3, #8
 8002962:	f003 0307 	and.w	r3, r3, #7
 8002966:	4a04      	ldr	r2, [pc, #16]	; (8002978 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002968:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800296c:	f003 031f 	and.w	r3, r3, #31
 8002970:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002974:	4618      	mov	r0, r3
 8002976:	bd98      	pop	{r3, r4, r7, pc}
 8002978:	080080b8 	.word	0x080080b8

0800297c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800297c:	b598      	push	{r3, r4, r7, lr}
 800297e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002980:	f7ff ffd2 	bl	8002928 <HAL_RCC_GetHCLKFreq>
 8002984:	4604      	mov	r4, r0
 8002986:	f7ff f9e6 	bl	8001d56 <LL_RCC_GetAPB2Prescaler>
 800298a:	4603      	mov	r3, r0
 800298c:	0adb      	lsrs	r3, r3, #11
 800298e:	f003 0307 	and.w	r3, r3, #7
 8002992:	4a04      	ldr	r2, [pc, #16]	; (80029a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002994:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002998:	f003 031f 	and.w	r3, r3, #31
 800299c:	fa24 f303 	lsr.w	r3, r4, r3
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	bd98      	pop	{r3, r4, r7, pc}
 80029a4:	080080b8 	.word	0x080080b8

080029a8 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 |
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	226f      	movs	r2, #111	; 0x6f
 80029b6:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 80029b8:	f7ff f925 	bl	8001c06 <LL_RCC_GetSysClkSource>
 80029bc:	4602      	mov	r2, r0
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 80029c2:	f7ff f995 	bl	8001cf0 <LL_RCC_GetAHBPrescaler>
 80029c6:	4602      	mov	r2, r0
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 80029cc:	f7ff f9b7 	bl	8001d3e <LL_RCC_GetAPB1Prescaler>
 80029d0:	4602      	mov	r2, r0
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 80029d6:	f7ff f9be 	bl	8001d56 <LL_RCC_GetAPB2Prescaler>
 80029da:	4602      	mov	r2, r0
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 80029e0:	f7ff f992 	bl	8001d08 <LL_C2_RCC_GetAHBPrescaler>
 80029e4:	4602      	mov	r2, r0
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 80029ea:	f7ff f99a 	bl	8001d22 <LL_RCC_GetAHB4Prescaler>
 80029ee:	4602      	mov	r2, r0
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80029f4:	4b04      	ldr	r3, [pc, #16]	; (8002a08 <HAL_RCC_GetClockConfig+0x60>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0207 	and.w	r2, r3, #7
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	601a      	str	r2, [r3, #0]
}
 8002a00:	bf00      	nop
 8002a02:	3708      	adds	r7, #8
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	58004000 	.word	0x58004000

08002a0c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002a0c:	b590      	push	{r4, r7, lr}
 8002a0e:	b085      	sub	sp, #20
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2bb0      	cmp	r3, #176	; 0xb0
 8002a18:	d903      	bls.n	8002a22 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8002a1a:	4b15      	ldr	r3, [pc, #84]	; (8002a70 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a1e:	60fb      	str	r3, [r7, #12]
 8002a20:	e007      	b.n	8002a32 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	091b      	lsrs	r3, r3, #4
 8002a26:	f003 030f 	and.w	r3, r3, #15
 8002a2a:	4a11      	ldr	r2, [pc, #68]	; (8002a70 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002a2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a30:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8002a32:	f7ff f976 	bl	8001d22 <LL_RCC_GetAHB4Prescaler>
 8002a36:	4603      	mov	r3, r0
 8002a38:	091b      	lsrs	r3, r3, #4
 8002a3a:	f003 030f 	and.w	r3, r3, #15
 8002a3e:	4a0d      	ldr	r2, [pc, #52]	; (8002a74 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8002a40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a44:	68fa      	ldr	r2, [r7, #12]
 8002a46:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a4a:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	4a0a      	ldr	r2, [pc, #40]	; (8002a78 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8002a50:	fba2 2303 	umull	r2, r3, r2, r3
 8002a54:	0c9c      	lsrs	r4, r3, #18
 8002a56:	f7fe feb7 	bl	80017c8 <HAL_PWREx_GetVoltageRange>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	4620      	mov	r0, r4
 8002a60:	f000 f80c 	bl	8002a7c <RCC_SetFlashLatency>
 8002a64:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3714      	adds	r7, #20
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd90      	pop	{r4, r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	080080d8 	.word	0x080080d8
 8002a74:	08008078 	.word	0x08008078
 8002a78:	431bde83 	.word	0x431bde83

08002a7c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002a7c:	b590      	push	{r4, r7, lr}
 8002a7e:	b093      	sub	sp, #76	; 0x4c
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8002a86:	4b37      	ldr	r3, [pc, #220]	; (8002b64 <RCC_SetFlashLatency+0xe8>)
 8002a88:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002a8c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a8e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8002a92:	4a35      	ldr	r2, [pc, #212]	; (8002b68 <RCC_SetFlashLatency+0xec>)
 8002a94:	f107 031c 	add.w	r3, r7, #28
 8002a98:	ca07      	ldmia	r2, {r0, r1, r2}
 8002a9a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8002a9e:	4b33      	ldr	r3, [pc, #204]	; (8002b6c <RCC_SetFlashLatency+0xf0>)
 8002aa0:	f107 040c 	add.w	r4, r7, #12
 8002aa4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002aa6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002aaa:	2300      	movs	r3, #0
 8002aac:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ab4:	d11a      	bne.n	8002aec <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	643b      	str	r3, [r7, #64]	; 0x40
 8002aba:	e013      	b.n	8002ae4 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002abc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	3348      	adds	r3, #72	; 0x48
 8002ac2:	443b      	add	r3, r7
 8002ac4:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d807      	bhi.n	8002ade <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002ace:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	3348      	adds	r3, #72	; 0x48
 8002ad4:	443b      	add	r3, r7
 8002ad6:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002ada:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002adc:	e020      	b.n	8002b20 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002ade:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	643b      	str	r3, [r7, #64]	; 0x40
 8002ae4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ae6:	2b03      	cmp	r3, #3
 8002ae8:	d9e8      	bls.n	8002abc <RCC_SetFlashLatency+0x40>
 8002aea:	e019      	b.n	8002b20 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002aec:	2300      	movs	r3, #0
 8002aee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002af0:	e013      	b.n	8002b1a <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002af2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	3348      	adds	r3, #72	; 0x48
 8002af8:	443b      	add	r3, r7
 8002afa:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d807      	bhi.n	8002b14 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002b04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	3348      	adds	r3, #72	; 0x48
 8002b0a:	443b      	add	r3, r7
 8002b0c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002b10:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002b12:	e005      	b.n	8002b20 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002b14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b16:	3301      	adds	r3, #1
 8002b18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b1c:	2b02      	cmp	r3, #2
 8002b1e:	d9e8      	bls.n	8002af2 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8002b20:	4b13      	ldr	r3, [pc, #76]	; (8002b70 <RCC_SetFlashLatency+0xf4>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f023 0207 	bic.w	r2, r3, #7
 8002b28:	4911      	ldr	r1, [pc, #68]	; (8002b70 <RCC_SetFlashLatency+0xf4>)
 8002b2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002b30:	f7fe f9c6 	bl	8000ec0 <HAL_GetTick>
 8002b34:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002b36:	e008      	b.n	8002b4a <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002b38:	f7fe f9c2 	bl	8000ec0 <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d901      	bls.n	8002b4a <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e007      	b.n	8002b5a <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002b4a:	4b09      	ldr	r3, [pc, #36]	; (8002b70 <RCC_SetFlashLatency+0xf4>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0307 	and.w	r3, r3, #7
 8002b52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d1ef      	bne.n	8002b38 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8002b58:	2300      	movs	r3, #0
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	374c      	adds	r7, #76	; 0x4c
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd90      	pop	{r4, r7, pc}
 8002b62:	bf00      	nop
 8002b64:	08007ffc 	.word	0x08007ffc
 8002b68:	0800800c 	.word	0x0800800c
 8002b6c:	08008018 	.word	0x08008018
 8002b70:	58004000 	.word	0x58004000

08002b74 <LL_RCC_LSE_IsEnabled>:
{
 8002b74:	b480      	push	{r7}
 8002b76:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8002b78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b80:	f003 0301 	and.w	r3, r3, #1
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d101      	bne.n	8002b8c <LL_RCC_LSE_IsEnabled+0x18>
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e000      	b.n	8002b8e <LL_RCC_LSE_IsEnabled+0x1a>
 8002b8c:	2300      	movs	r3, #0
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr

08002b98 <LL_RCC_LSE_IsReady>:
{
 8002b98:	b480      	push	{r7}
 8002b9a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002b9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ba0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ba4:	f003 0302 	and.w	r3, r3, #2
 8002ba8:	2b02      	cmp	r3, #2
 8002baa:	d101      	bne.n	8002bb0 <LL_RCC_LSE_IsReady+0x18>
 8002bac:	2301      	movs	r3, #1
 8002bae:	e000      	b.n	8002bb2 <LL_RCC_LSE_IsReady+0x1a>
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr

08002bbc <LL_RCC_MSI_EnablePLLMode>:
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8002bc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002bca:	f043 0304 	orr.w	r3, r3, #4
 8002bce:	6013      	str	r3, [r2, #0]
}
 8002bd0:	bf00      	nop
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr

08002bda <LL_RCC_SetRFWKPClockSource>:
{
 8002bda:	b480      	push	{r7}
 8002bdc:	b083      	sub	sp, #12
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8002be2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002be6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bea:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002bee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002bfa:	bf00      	nop
 8002bfc:	370c      	adds	r7, #12
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr

08002c06 <LL_RCC_SetSMPSClockSource>:
{
 8002c06:	b480      	push	{r7}
 8002c08:	b083      	sub	sp, #12
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8002c0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c14:	f023 0203 	bic.w	r2, r3, #3
 8002c18:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002c22:	bf00      	nop
 8002c24:	370c      	adds	r7, #12
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr

08002c2e <LL_RCC_SetSMPSPrescaler>:
{
 8002c2e:	b480      	push	{r7}
 8002c30:	b083      	sub	sp, #12
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8002c36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002c40:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002c4a:	bf00      	nop
 8002c4c:	370c      	adds	r7, #12
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr

08002c56 <LL_RCC_SetUSARTClockSource>:
{
 8002c56:	b480      	push	{r7}
 8002c58:	b083      	sub	sp, #12
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8002c5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c66:	f023 0203 	bic.w	r2, r3, #3
 8002c6a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002c76:	bf00      	nop
 8002c78:	370c      	adds	r7, #12
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr

08002c82 <LL_RCC_SetLPUARTClockSource>:
{
 8002c82:	b480      	push	{r7}
 8002c84:	b083      	sub	sp, #12
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002c8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c92:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002c96:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002ca2:	bf00      	nop
 8002ca4:	370c      	adds	r7, #12
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr

08002cae <LL_RCC_SetI2CClockSource>:
{
 8002cae:	b480      	push	{r7}
 8002cb0:	b083      	sub	sp, #12
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002cb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cba:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	091b      	lsrs	r3, r3, #4
 8002cc2:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002cc6:	43db      	mvns	r3, r3
 8002cc8:	401a      	ands	r2, r3
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	011b      	lsls	r3, r3, #4
 8002cce:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002cd2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002cdc:	bf00      	nop
 8002cde:	370c      	adds	r7, #12
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr

08002ce8 <LL_RCC_SetLPTIMClockSource>:
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002cf0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cf4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	0c1b      	lsrs	r3, r3, #16
 8002cfc:	041b      	lsls	r3, r3, #16
 8002cfe:	43db      	mvns	r3, r3
 8002d00:	401a      	ands	r2, r3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	041b      	lsls	r3, r3, #16
 8002d06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002d10:	bf00      	nop
 8002d12:	370c      	adds	r7, #12
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr

08002d1c <LL_RCC_SetSAIClockSource>:
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8002d24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d2c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d30:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002d3c:	bf00      	nop
 8002d3e:	370c      	adds	r7, #12
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr

08002d48 <LL_RCC_SetRNGClockSource>:
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002d50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d58:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002d5c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002d68:	bf00      	nop
 8002d6a:	370c      	adds	r7, #12
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr

08002d74 <LL_RCC_SetCLK48ClockSource>:
{
 8002d74:	b480      	push	{r7}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8002d7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d84:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d88:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002d94:	bf00      	nop
 8002d96:	370c      	adds	r7, #12
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr

08002da0 <LL_RCC_SetUSBClockSource>:
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b082      	sub	sp, #8
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f7ff ffe3 	bl	8002d74 <LL_RCC_SetCLK48ClockSource>
}
 8002dae:	bf00      	nop
 8002db0:	3708      	adds	r7, #8
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}

08002db6 <LL_RCC_SetADCClockSource>:
{
 8002db6:	b480      	push	{r7}
 8002db8:	b083      	sub	sp, #12
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002dbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dc6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002dca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002dd6:	bf00      	nop
 8002dd8:	370c      	adds	r7, #12
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr

08002de2 <LL_RCC_SetRTCClockSource>:
{
 8002de2:	b480      	push	{r7}
 8002de4:	b083      	sub	sp, #12
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002dea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002df2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002df6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002e02:	bf00      	nop
 8002e04:	370c      	adds	r7, #12
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr

08002e0e <LL_RCC_GetRTCClockSource>:
{
 8002e0e:	b480      	push	{r7}
 8002e10:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002e12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr

08002e28 <LL_RCC_ForceBackupDomainReset>:
{
 8002e28:	b480      	push	{r7}
 8002e2a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002e2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e34:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002e40:	bf00      	nop
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr

08002e4a <LL_RCC_ReleaseBackupDomainReset>:
{
 8002e4a:	b480      	push	{r7}
 8002e4c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002e4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e56:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002e62:	bf00      	nop
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr

08002e6c <LL_RCC_PLLSAI1_Enable>:
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002e70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e7a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002e7e:	6013      	str	r3, [r2, #0]
}
 8002e80:	bf00      	nop
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr

08002e8a <LL_RCC_PLLSAI1_Disable>:
{
 8002e8a:	b480      	push	{r7}
 8002e8c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002e8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e98:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002e9c:	6013      	str	r3, [r2, #0]
}
 8002e9e:	bf00      	nop
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <LL_RCC_PLLSAI1_IsReady>:
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8002eac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002eb6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002eba:	d101      	bne.n	8002ec0 <LL_RCC_PLLSAI1_IsReady+0x18>
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e000      	b.n	8002ec2 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8002ec0:	2300      	movs	r3, #0
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr

08002ecc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b088      	sub	sp, #32
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002ed8:	2300      	movs	r3, #0
 8002eda:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d034      	beq.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eec:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002ef0:	d021      	beq.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8002ef2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002ef6:	d81b      	bhi.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002ef8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002efc:	d01d      	beq.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8002efe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002f02:	d815      	bhi.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d00b      	beq.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8002f08:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f0c:	d110      	bne.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8002f0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f1c:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8002f1e:	e00d      	b.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	3304      	adds	r3, #4
 8002f24:	4618      	mov	r0, r3
 8002f26:	f000 f94d 	bl	80031c4 <RCCEx_PLLSAI1_ConfigNP>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002f2e:	e005      	b.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	77fb      	strb	r3, [r7, #31]
        break;
 8002f34:	e002      	b.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8002f36:	bf00      	nop
 8002f38:	e000      	b.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8002f3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f3c:	7ffb      	ldrb	r3, [r7, #31]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d105      	bne.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f46:	4618      	mov	r0, r3
 8002f48:	f7ff fee8 	bl	8002d1c <LL_RCC_SetSAIClockSource>
 8002f4c:	e001      	b.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f4e:	7ffb      	ldrb	r3, [r7, #31]
 8002f50:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d046      	beq.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8002f5e:	f7ff ff56 	bl	8002e0e <LL_RCC_GetRTCClockSource>
 8002f62:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f68:	69ba      	ldr	r2, [r7, #24]
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d03c      	beq.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002f6e:	f7fe fbc9 	bl	8001704 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8002f72:	69bb      	ldr	r3, [r7, #24]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d105      	bne.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f7ff ff30 	bl	8002de2 <LL_RCC_SetRTCClockSource>
 8002f82:	e02e      	b.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8002f84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f8c:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8002f8e:	f7ff ff4b 	bl	8002e28 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8002f92:	f7ff ff5a 	bl	8002e4a <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8002fa4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8002fae:	f7ff fde1 	bl	8002b74 <LL_RCC_LSE_IsEnabled>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d114      	bne.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002fb8:	f7fd ff82 	bl	8000ec0 <HAL_GetTick>
 8002fbc:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8002fbe:	e00b      	b.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fc0:	f7fd ff7e 	bl	8000ec0 <HAL_GetTick>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d902      	bls.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	77fb      	strb	r3, [r7, #31]
              break;
 8002fd6:	e004      	b.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8002fd8:	f7ff fdde 	bl	8002b98 <LL_RCC_LSE_IsReady>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d1ee      	bne.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8002fe2:	7ffb      	ldrb	r3, [r7, #31]
 8002fe4:	77bb      	strb	r3, [r7, #30]
 8002fe6:	e001      	b.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fe8:	7ffb      	ldrb	r3, [r7, #31]
 8002fea:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 0301 	and.w	r3, r3, #1
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d004      	beq.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	699b      	ldr	r3, [r3, #24]
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f7ff fe2a 	bl	8002c56 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0302 	and.w	r3, r3, #2
 800300a:	2b00      	cmp	r3, #0
 800300c:	d004      	beq.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	69db      	ldr	r3, [r3, #28]
 8003012:	4618      	mov	r0, r3
 8003014:	f7ff fe35 	bl	8002c82 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0310 	and.w	r3, r3, #16
 8003020:	2b00      	cmp	r3, #0
 8003022:	d004      	beq.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003028:	4618      	mov	r0, r3
 800302a:	f7ff fe5d 	bl	8002ce8 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0320 	and.w	r3, r3, #32
 8003036:	2b00      	cmp	r3, #0
 8003038:	d004      	beq.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800303e:	4618      	mov	r0, r3
 8003040:	f7ff fe52 	bl	8002ce8 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0304 	and.w	r3, r3, #4
 800304c:	2b00      	cmp	r3, #0
 800304e:	d004      	beq.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6a1b      	ldr	r3, [r3, #32]
 8003054:	4618      	mov	r0, r3
 8003056:	f7ff fe2a 	bl	8002cae <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0308 	and.w	r3, r3, #8
 8003062:	2b00      	cmp	r3, #0
 8003064:	d004      	beq.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306a:	4618      	mov	r0, r3
 800306c:	f7ff fe1f 	bl	8002cae <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003078:	2b00      	cmp	r3, #0
 800307a:	d022      	beq.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003080:	4618      	mov	r0, r3
 8003082:	f7ff fe8d 	bl	8002da0 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800308a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800308e:	d107      	bne.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8003090:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003094:	68db      	ldr	r3, [r3, #12]
 8003096:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800309a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800309e:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80030a8:	d10b      	bne.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	3304      	adds	r3, #4
 80030ae:	4618      	mov	r0, r3
 80030b0:	f000 f8e3 	bl	800327a <RCCEx_PLLSAI1_ConfigNQ>
 80030b4:	4603      	mov	r3, r0
 80030b6:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80030b8:	7ffb      	ldrb	r3, [r7, #31]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d001      	beq.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 80030be:	7ffb      	ldrb	r3, [r7, #31]
 80030c0:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d02b      	beq.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030d6:	d008      	beq.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80030e0:	d003      	beq.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d105      	bne.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ee:	4618      	mov	r0, r3
 80030f0:	f7ff fe2a 	bl	8002d48 <LL_RCC_SetRNGClockSource>
 80030f4:	e00a      	b.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x240>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030fe:	60fb      	str	r3, [r7, #12]
 8003100:	2000      	movs	r0, #0
 8003102:	f7ff fe21 	bl	8002d48 <LL_RCC_SetRNGClockSource>
 8003106:	68f8      	ldr	r0, [r7, #12]
 8003108:	f7ff fe34 	bl	8002d74 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003110:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8003114:	d107      	bne.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003116:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003120:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003124:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800312e:	2b00      	cmp	r3, #0
 8003130:	d022      	beq.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003136:	4618      	mov	r0, r3
 8003138:	f7ff fe3d 	bl	8002db6 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003140:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003144:	d107      	bne.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003146:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003150:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003154:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800315a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800315e:	d10b      	bne.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	3304      	adds	r3, #4
 8003164:	4618      	mov	r0, r3
 8003166:	f000 f8e3 	bl	8003330 <RCCEx_PLLSAI1_ConfigNR>
 800316a:	4603      	mov	r3, r0
 800316c:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800316e:	7ffb      	ldrb	r3, [r7, #31]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d001      	beq.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8003174:	7ffb      	ldrb	r3, [r7, #31]
 8003176:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003180:	2b00      	cmp	r3, #0
 8003182:	d004      	beq.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003188:	4618      	mov	r0, r3
 800318a:	f7ff fd26 	bl	8002bda <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d009      	beq.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800319e:	4618      	mov	r0, r3
 80031a0:	f7ff fd45 	bl	8002c2e <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031a8:	4618      	mov	r0, r3
 80031aa:	f7ff fd2c 	bl	8002c06 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 80031ae:	7fbb      	ldrb	r3, [r7, #30]
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3720      	adds	r7, #32
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 80031bc:	f7ff fcfe 	bl	8002bbc <LL_RCC_MSI_EnablePLLMode>
}
 80031c0:	bf00      	nop
 80031c2:	bd80      	pop	{r7, pc}

080031c4 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b084      	sub	sp, #16
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80031cc:	2300      	movs	r3, #0
 80031ce:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80031d0:	f7ff fe5b 	bl	8002e8a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80031d4:	f7fd fe74 	bl	8000ec0 <HAL_GetTick>
 80031d8:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80031da:	e009      	b.n	80031f0 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80031dc:	f7fd fe70 	bl	8000ec0 <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d902      	bls.n	80031f0 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	73fb      	strb	r3, [r7, #15]
      break;
 80031ee:	e004      	b.n	80031fa <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80031f0:	f7ff fe5a 	bl	8002ea8 <LL_RCC_PLLSAI1_IsReady>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d1f0      	bne.n	80031dc <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80031fa:	7bfb      	ldrb	r3, [r7, #15]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d137      	bne.n	8003270 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003200:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003204:	691b      	ldr	r3, [r3, #16]
 8003206:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	021b      	lsls	r3, r3, #8
 8003210:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003214:	4313      	orrs	r3, r2
 8003216:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8003218:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800321c:	691b      	ldr	r3, [r3, #16]
 800321e:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800322a:	4313      	orrs	r3, r2
 800322c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800322e:	f7ff fe1d 	bl	8002e6c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003232:	f7fd fe45 	bl	8000ec0 <HAL_GetTick>
 8003236:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003238:	e009      	b.n	800324e <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800323a:	f7fd fe41 	bl	8000ec0 <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	2b02      	cmp	r3, #2
 8003246:	d902      	bls.n	800324e <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8003248:	2303      	movs	r3, #3
 800324a:	73fb      	strb	r3, [r7, #15]
        break;
 800324c:	e004      	b.n	8003258 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800324e:	f7ff fe2b 	bl	8002ea8 <LL_RCC_PLLSAI1_IsReady>
 8003252:	4603      	mov	r3, r0
 8003254:	2b01      	cmp	r3, #1
 8003256:	d1f0      	bne.n	800323a <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8003258:	7bfb      	ldrb	r3, [r7, #15]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d108      	bne.n	8003270 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800325e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003262:	691a      	ldr	r2, [r3, #16]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	691b      	ldr	r3, [r3, #16]
 8003268:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800326c:	4313      	orrs	r3, r2
 800326e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003270:	7bfb      	ldrb	r3, [r7, #15]
}
 8003272:	4618      	mov	r0, r3
 8003274:	3710      	adds	r7, #16
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}

0800327a <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800327a:	b580      	push	{r7, lr}
 800327c:	b084      	sub	sp, #16
 800327e:	af00      	add	r7, sp, #0
 8003280:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003282:	2300      	movs	r3, #0
 8003284:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003286:	f7ff fe00 	bl	8002e8a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800328a:	f7fd fe19 	bl	8000ec0 <HAL_GetTick>
 800328e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003290:	e009      	b.n	80032a6 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003292:	f7fd fe15 	bl	8000ec0 <HAL_GetTick>
 8003296:	4602      	mov	r2, r0
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	2b02      	cmp	r3, #2
 800329e:	d902      	bls.n	80032a6 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80032a0:	2303      	movs	r3, #3
 80032a2:	73fb      	strb	r3, [r7, #15]
      break;
 80032a4:	e004      	b.n	80032b0 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80032a6:	f7ff fdff 	bl	8002ea8 <LL_RCC_PLLSAI1_IsReady>
 80032aa:	4603      	mov	r3, r0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d1f0      	bne.n	8003292 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80032b0:	7bfb      	ldrb	r3, [r7, #15]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d137      	bne.n	8003326 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80032b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032ba:	691b      	ldr	r3, [r3, #16]
 80032bc:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	021b      	lsls	r3, r3, #8
 80032c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032ca:	4313      	orrs	r3, r2
 80032cc:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80032ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032d2:	691b      	ldr	r3, [r3, #16]
 80032d4:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032e0:	4313      	orrs	r3, r2
 80032e2:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80032e4:	f7ff fdc2 	bl	8002e6c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032e8:	f7fd fdea 	bl	8000ec0 <HAL_GetTick>
 80032ec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80032ee:	e009      	b.n	8003304 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80032f0:	f7fd fde6 	bl	8000ec0 <HAL_GetTick>
 80032f4:	4602      	mov	r2, r0
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	2b02      	cmp	r3, #2
 80032fc:	d902      	bls.n	8003304 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	73fb      	strb	r3, [r7, #15]
        break;
 8003302:	e004      	b.n	800330e <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003304:	f7ff fdd0 	bl	8002ea8 <LL_RCC_PLLSAI1_IsReady>
 8003308:	4603      	mov	r3, r0
 800330a:	2b01      	cmp	r3, #1
 800330c:	d1f0      	bne.n	80032f0 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800330e:	7bfb      	ldrb	r3, [r7, #15]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d108      	bne.n	8003326 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003314:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003318:	691a      	ldr	r2, [r3, #16]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	691b      	ldr	r3, [r3, #16]
 800331e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003322:	4313      	orrs	r3, r2
 8003324:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003326:	7bfb      	ldrb	r3, [r7, #15]
}
 8003328:	4618      	mov	r0, r3
 800332a:	3710      	adds	r7, #16
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}

08003330 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b084      	sub	sp, #16
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003338:	2300      	movs	r3, #0
 800333a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800333c:	f7ff fda5 	bl	8002e8a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003340:	f7fd fdbe 	bl	8000ec0 <HAL_GetTick>
 8003344:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003346:	e009      	b.n	800335c <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003348:	f7fd fdba 	bl	8000ec0 <HAL_GetTick>
 800334c:	4602      	mov	r2, r0
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	2b02      	cmp	r3, #2
 8003354:	d902      	bls.n	800335c <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	73fb      	strb	r3, [r7, #15]
      break;
 800335a:	e004      	b.n	8003366 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800335c:	f7ff fda4 	bl	8002ea8 <LL_RCC_PLLSAI1_IsReady>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d1f0      	bne.n	8003348 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8003366:	7bfb      	ldrb	r3, [r7, #15]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d137      	bne.n	80033dc <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800336c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003370:	691b      	ldr	r3, [r3, #16]
 8003372:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	021b      	lsls	r3, r3, #8
 800337c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003380:	4313      	orrs	r3, r2
 8003382:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8003384:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003388:	691b      	ldr	r3, [r3, #16]
 800338a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003396:	4313      	orrs	r3, r2
 8003398:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800339a:	f7ff fd67 	bl	8002e6c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800339e:	f7fd fd8f 	bl	8000ec0 <HAL_GetTick>
 80033a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80033a4:	e009      	b.n	80033ba <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80033a6:	f7fd fd8b 	bl	8000ec0 <HAL_GetTick>
 80033aa:	4602      	mov	r2, r0
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	1ad3      	subs	r3, r2, r3
 80033b0:	2b02      	cmp	r3, #2
 80033b2:	d902      	bls.n	80033ba <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80033b4:	2303      	movs	r3, #3
 80033b6:	73fb      	strb	r3, [r7, #15]
        break;
 80033b8:	e004      	b.n	80033c4 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80033ba:	f7ff fd75 	bl	8002ea8 <LL_RCC_PLLSAI1_IsReady>
 80033be:	4603      	mov	r3, r0
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d1f0      	bne.n	80033a6 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80033c4:	7bfb      	ldrb	r3, [r7, #15]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d108      	bne.n	80033dc <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80033ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033ce:	691a      	ldr	r2, [r3, #16]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	691b      	ldr	r3, [r3, #16]
 80033d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033d8:	4313      	orrs	r3, r2
 80033da:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80033dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3710      	adds	r7, #16
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}

080033e6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033e6:	b580      	push	{r7, lr}
 80033e8:	b082      	sub	sp, #8
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d101      	bne.n	80033f8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	e049      	b.n	800348c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	2b00      	cmp	r3, #0
 8003402:	d106      	bne.n	8003412 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2200      	movs	r2, #0
 8003408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	f000 f841 	bl	8003494 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2202      	movs	r2, #2
 8003416:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	3304      	adds	r3, #4
 8003422:	4619      	mov	r1, r3
 8003424:	4610      	mov	r0, r2
 8003426:	f000 f9d5 	bl	80037d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2201      	movs	r2, #1
 800342e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2201      	movs	r2, #1
 8003436:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2201      	movs	r2, #1
 800343e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2201      	movs	r2, #1
 8003446:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2201      	movs	r2, #1
 800344e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2201      	movs	r2, #1
 8003456:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2201      	movs	r2, #1
 800345e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2201      	movs	r2, #1
 8003466:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2201      	movs	r2, #1
 800346e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2201      	movs	r2, #1
 8003476:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2201      	movs	r2, #1
 800347e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2201      	movs	r2, #1
 8003486:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800348a:	2300      	movs	r3, #0
}
 800348c:	4618      	mov	r0, r3
 800348e:	3708      	adds	r7, #8
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}

08003494 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800349c:	bf00      	nop
 800349e:	370c      	adds	r7, #12
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr

080034a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b085      	sub	sp, #20
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d001      	beq.n	80034c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e036      	b.n	800352e <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2202      	movs	r2, #2
 80034c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	68da      	ldr	r2, [r3, #12]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f042 0201 	orr.w	r2, r2, #1
 80034d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a17      	ldr	r2, [pc, #92]	; (800353c <HAL_TIM_Base_Start_IT+0x94>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d004      	beq.n	80034ec <HAL_TIM_Base_Start_IT+0x44>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034ea:	d115      	bne.n	8003518 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	689a      	ldr	r2, [r3, #8]
 80034f2:	4b13      	ldr	r3, [pc, #76]	; (8003540 <HAL_TIM_Base_Start_IT+0x98>)
 80034f4:	4013      	ands	r3, r2
 80034f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2b06      	cmp	r3, #6
 80034fc:	d015      	beq.n	800352a <HAL_TIM_Base_Start_IT+0x82>
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003504:	d011      	beq.n	800352a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f042 0201 	orr.w	r2, r2, #1
 8003514:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003516:	e008      	b.n	800352a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f042 0201 	orr.w	r2, r2, #1
 8003526:	601a      	str	r2, [r3, #0]
 8003528:	e000      	b.n	800352c <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800352a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800352c:	2300      	movs	r3, #0
}
 800352e:	4618      	mov	r0, r3
 8003530:	3714      	adds	r7, #20
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr
 800353a:	bf00      	nop
 800353c:	40012c00 	.word	0x40012c00
 8003540:	00010007 	.word	0x00010007

08003544 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b082      	sub	sp, #8
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	691b      	ldr	r3, [r3, #16]
 8003552:	f003 0302 	and.w	r3, r3, #2
 8003556:	2b02      	cmp	r3, #2
 8003558:	d122      	bne.n	80035a0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	f003 0302 	and.w	r3, r3, #2
 8003564:	2b02      	cmp	r3, #2
 8003566:	d11b      	bne.n	80035a0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f06f 0202 	mvn.w	r2, #2
 8003570:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2201      	movs	r2, #1
 8003576:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	699b      	ldr	r3, [r3, #24]
 800357e:	f003 0303 	and.w	r3, r3, #3
 8003582:	2b00      	cmp	r3, #0
 8003584:	d003      	beq.n	800358e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f000 f905 	bl	8003796 <HAL_TIM_IC_CaptureCallback>
 800358c:	e005      	b.n	800359a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f000 f8f7 	bl	8003782 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f000 f908 	bl	80037aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	691b      	ldr	r3, [r3, #16]
 80035a6:	f003 0304 	and.w	r3, r3, #4
 80035aa:	2b04      	cmp	r3, #4
 80035ac:	d122      	bne.n	80035f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	f003 0304 	and.w	r3, r3, #4
 80035b8:	2b04      	cmp	r3, #4
 80035ba:	d11b      	bne.n	80035f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f06f 0204 	mvn.w	r2, #4
 80035c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2202      	movs	r2, #2
 80035ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	699b      	ldr	r3, [r3, #24]
 80035d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d003      	beq.n	80035e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f000 f8db 	bl	8003796 <HAL_TIM_IC_CaptureCallback>
 80035e0:	e005      	b.n	80035ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f000 f8cd 	bl	8003782 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f000 f8de 	bl	80037aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	691b      	ldr	r3, [r3, #16]
 80035fa:	f003 0308 	and.w	r3, r3, #8
 80035fe:	2b08      	cmp	r3, #8
 8003600:	d122      	bne.n	8003648 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	f003 0308 	and.w	r3, r3, #8
 800360c:	2b08      	cmp	r3, #8
 800360e:	d11b      	bne.n	8003648 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f06f 0208 	mvn.w	r2, #8
 8003618:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2204      	movs	r2, #4
 800361e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	69db      	ldr	r3, [r3, #28]
 8003626:	f003 0303 	and.w	r3, r3, #3
 800362a:	2b00      	cmp	r3, #0
 800362c:	d003      	beq.n	8003636 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f000 f8b1 	bl	8003796 <HAL_TIM_IC_CaptureCallback>
 8003634:	e005      	b.n	8003642 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f000 f8a3 	bl	8003782 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f000 f8b4 	bl	80037aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	691b      	ldr	r3, [r3, #16]
 800364e:	f003 0310 	and.w	r3, r3, #16
 8003652:	2b10      	cmp	r3, #16
 8003654:	d122      	bne.n	800369c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	f003 0310 	and.w	r3, r3, #16
 8003660:	2b10      	cmp	r3, #16
 8003662:	d11b      	bne.n	800369c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f06f 0210 	mvn.w	r2, #16
 800366c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2208      	movs	r2, #8
 8003672:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	69db      	ldr	r3, [r3, #28]
 800367a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800367e:	2b00      	cmp	r3, #0
 8003680:	d003      	beq.n	800368a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f000 f887 	bl	8003796 <HAL_TIM_IC_CaptureCallback>
 8003688:	e005      	b.n	8003696 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f000 f879 	bl	8003782 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	f000 f88a 	bl	80037aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2200      	movs	r2, #0
 800369a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	691b      	ldr	r3, [r3, #16]
 80036a2:	f003 0301 	and.w	r3, r3, #1
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d10e      	bne.n	80036c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	f003 0301 	and.w	r3, r3, #1
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d107      	bne.n	80036c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f06f 0201 	mvn.w	r2, #1
 80036c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f7fd f9a0 	bl	8000a08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	691b      	ldr	r3, [r3, #16]
 80036ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036d2:	2b80      	cmp	r3, #128	; 0x80
 80036d4:	d10e      	bne.n	80036f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036e0:	2b80      	cmp	r3, #128	; 0x80
 80036e2:	d107      	bne.n	80036f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80036ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f000 f8de 	bl	80038b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	691b      	ldr	r3, [r3, #16]
 80036fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003702:	d10e      	bne.n	8003722 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	68db      	ldr	r3, [r3, #12]
 800370a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800370e:	2b80      	cmp	r3, #128	; 0x80
 8003710:	d107      	bne.n	8003722 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800371a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f000 f8d1 	bl	80038c4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	691b      	ldr	r3, [r3, #16]
 8003728:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800372c:	2b40      	cmp	r3, #64	; 0x40
 800372e:	d10e      	bne.n	800374e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	68db      	ldr	r3, [r3, #12]
 8003736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800373a:	2b40      	cmp	r3, #64	; 0x40
 800373c:	d107      	bne.n	800374e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003746:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f000 f838 	bl	80037be <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	691b      	ldr	r3, [r3, #16]
 8003754:	f003 0320 	and.w	r3, r3, #32
 8003758:	2b20      	cmp	r3, #32
 800375a:	d10e      	bne.n	800377a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	f003 0320 	and.w	r3, r3, #32
 8003766:	2b20      	cmp	r3, #32
 8003768:	d107      	bne.n	800377a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f06f 0220 	mvn.w	r2, #32
 8003772:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f000 f891 	bl	800389c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800377a:	bf00      	nop
 800377c:	3708      	adds	r7, #8
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}

08003782 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003782:	b480      	push	{r7}
 8003784:	b083      	sub	sp, #12
 8003786:	af00      	add	r7, sp, #0
 8003788:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800378a:	bf00      	nop
 800378c:	370c      	adds	r7, #12
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr

08003796 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003796:	b480      	push	{r7}
 8003798:	b083      	sub	sp, #12
 800379a:	af00      	add	r7, sp, #0
 800379c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800379e:	bf00      	nop
 80037a0:	370c      	adds	r7, #12
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr

080037aa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80037aa:	b480      	push	{r7}
 80037ac:	b083      	sub	sp, #12
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80037b2:	bf00      	nop
 80037b4:	370c      	adds	r7, #12
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr

080037be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80037be:	b480      	push	{r7}
 80037c0:	b083      	sub	sp, #12
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80037c6:	bf00      	nop
 80037c8:	370c      	adds	r7, #12
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr
	...

080037d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b085      	sub	sp, #20
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	4a2a      	ldr	r2, [pc, #168]	; (8003890 <TIM_Base_SetConfig+0xbc>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d003      	beq.n	80037f4 <TIM_Base_SetConfig+0x20>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037f2:	d108      	bne.n	8003806 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	68fa      	ldr	r2, [r7, #12]
 8003802:	4313      	orrs	r3, r2
 8003804:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4a21      	ldr	r2, [pc, #132]	; (8003890 <TIM_Base_SetConfig+0xbc>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d00b      	beq.n	8003826 <TIM_Base_SetConfig+0x52>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003814:	d007      	beq.n	8003826 <TIM_Base_SetConfig+0x52>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	4a1e      	ldr	r2, [pc, #120]	; (8003894 <TIM_Base_SetConfig+0xc0>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d003      	beq.n	8003826 <TIM_Base_SetConfig+0x52>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	4a1d      	ldr	r2, [pc, #116]	; (8003898 <TIM_Base_SetConfig+0xc4>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d108      	bne.n	8003838 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800382c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	68fa      	ldr	r2, [r7, #12]
 8003834:	4313      	orrs	r3, r2
 8003836:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	695b      	ldr	r3, [r3, #20]
 8003842:	4313      	orrs	r3, r2
 8003844:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	68fa      	ldr	r2, [r7, #12]
 800384a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	689a      	ldr	r2, [r3, #8]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	4a0c      	ldr	r2, [pc, #48]	; (8003890 <TIM_Base_SetConfig+0xbc>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d007      	beq.n	8003874 <TIM_Base_SetConfig+0xa0>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	4a0b      	ldr	r2, [pc, #44]	; (8003894 <TIM_Base_SetConfig+0xc0>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d003      	beq.n	8003874 <TIM_Base_SetConfig+0xa0>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	4a0a      	ldr	r2, [pc, #40]	; (8003898 <TIM_Base_SetConfig+0xc4>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d103      	bne.n	800387c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	691a      	ldr	r2, [r3, #16]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	615a      	str	r2, [r3, #20]
}
 8003882:	bf00      	nop
 8003884:	3714      	adds	r7, #20
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr
 800388e:	bf00      	nop
 8003890:	40012c00 	.word	0x40012c00
 8003894:	40014400 	.word	0x40014400
 8003898:	40014800 	.word	0x40014800

0800389c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800389c:	b480      	push	{r7}
 800389e:	b083      	sub	sp, #12
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80038a4:	bf00      	nop
 80038a6:	370c      	adds	r7, #12
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr

080038b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b083      	sub	sp, #12
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80038b8:	bf00      	nop
 80038ba:	370c      	adds	r7, #12
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr

080038c4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b083      	sub	sp, #12
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80038cc:	bf00      	nop
 80038ce:	370c      	adds	r7, #12
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr

080038d8 <LL_RCC_GetUSARTClockSource>:
{
 80038d8:	b480      	push	{r7}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80038e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038e4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	4013      	ands	r3, r2
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	370c      	adds	r7, #12
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr

080038f8 <LL_RCC_GetLPUARTClockSource>:
{
 80038f8:	b480      	push	{r7}
 80038fa:	b083      	sub	sp, #12
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8003900:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003904:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	4013      	ands	r3, r2
}
 800390c:	4618      	mov	r0, r3
 800390e:	370c      	adds	r7, #12
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr

08003918 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b082      	sub	sp, #8
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d101      	bne.n	800392a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e042      	b.n	80039b0 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003930:	2b00      	cmp	r3, #0
 8003932:	d106      	bne.n	8003942 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2200      	movs	r2, #0
 8003938:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f7fd f8e1 	bl	8000b04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2224      	movs	r2, #36	; 0x24
 8003946:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f022 0201 	bic.w	r2, r2, #1
 8003958:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f000 f82c 	bl	80039b8 <UART_SetConfig>
 8003960:	4603      	mov	r3, r0
 8003962:	2b01      	cmp	r3, #1
 8003964:	d101      	bne.n	800396a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e022      	b.n	80039b0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800396e:	2b00      	cmp	r3, #0
 8003970:	d002      	beq.n	8003978 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f000 fa46 	bl	8003e04 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	685a      	ldr	r2, [r3, #4]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003986:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	689a      	ldr	r2, [r3, #8]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003996:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f042 0201 	orr.w	r2, r2, #1
 80039a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	f000 facd 	bl	8003f48 <UART_CheckIdleState>
 80039ae:	4603      	mov	r3, r0
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3708      	adds	r7, #8
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}

080039b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039bc:	b08c      	sub	sp, #48	; 0x30
 80039be:	af00      	add	r7, sp, #0
 80039c0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80039c2:	2300      	movs	r3, #0
 80039c4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	689a      	ldr	r2, [r3, #8]
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	691b      	ldr	r3, [r3, #16]
 80039d0:	431a      	orrs	r2, r3
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	695b      	ldr	r3, [r3, #20]
 80039d6:	431a      	orrs	r2, r3
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	69db      	ldr	r3, [r3, #28]
 80039dc:	4313      	orrs	r3, r2
 80039de:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	4baf      	ldr	r3, [pc, #700]	; (8003ca4 <UART_SetConfig+0x2ec>)
 80039e8:	4013      	ands	r3, r2
 80039ea:	697a      	ldr	r2, [r7, #20]
 80039ec:	6812      	ldr	r2, [r2, #0]
 80039ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80039f0:	430b      	orrs	r3, r1
 80039f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	68da      	ldr	r2, [r3, #12]
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	430a      	orrs	r2, r1
 8003a08:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	699b      	ldr	r3, [r3, #24]
 8003a0e:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4aa4      	ldr	r2, [pc, #656]	; (8003ca8 <UART_SetConfig+0x2f0>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d004      	beq.n	8003a24 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	6a1b      	ldr	r3, [r3, #32]
 8003a1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a20:	4313      	orrs	r3, r2
 8003a22:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003a2e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003a32:	697a      	ldr	r2, [r7, #20]
 8003a34:	6812      	ldr	r2, [r2, #0]
 8003a36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a38:	430b      	orrs	r3, r1
 8003a3a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a42:	f023 010f 	bic.w	r1, r3, #15
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	430a      	orrs	r2, r1
 8003a50:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a95      	ldr	r2, [pc, #596]	; (8003cac <UART_SetConfig+0x2f4>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d125      	bne.n	8003aa8 <UART_SetConfig+0xf0>
 8003a5c:	2003      	movs	r0, #3
 8003a5e:	f7ff ff3b 	bl	80038d8 <LL_RCC_GetUSARTClockSource>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b03      	cmp	r3, #3
 8003a66:	d81b      	bhi.n	8003aa0 <UART_SetConfig+0xe8>
 8003a68:	a201      	add	r2, pc, #4	; (adr r2, 8003a70 <UART_SetConfig+0xb8>)
 8003a6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a6e:	bf00      	nop
 8003a70:	08003a81 	.word	0x08003a81
 8003a74:	08003a91 	.word	0x08003a91
 8003a78:	08003a89 	.word	0x08003a89
 8003a7c:	08003a99 	.word	0x08003a99
 8003a80:	2301      	movs	r3, #1
 8003a82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a86:	e042      	b.n	8003b0e <UART_SetConfig+0x156>
 8003a88:	2302      	movs	r3, #2
 8003a8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a8e:	e03e      	b.n	8003b0e <UART_SetConfig+0x156>
 8003a90:	2304      	movs	r3, #4
 8003a92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a96:	e03a      	b.n	8003b0e <UART_SetConfig+0x156>
 8003a98:	2308      	movs	r3, #8
 8003a9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a9e:	e036      	b.n	8003b0e <UART_SetConfig+0x156>
 8003aa0:	2310      	movs	r3, #16
 8003aa2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003aa6:	e032      	b.n	8003b0e <UART_SetConfig+0x156>
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a7e      	ldr	r2, [pc, #504]	; (8003ca8 <UART_SetConfig+0x2f0>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d12a      	bne.n	8003b08 <UART_SetConfig+0x150>
 8003ab2:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8003ab6:	f7ff ff1f 	bl	80038f8 <LL_RCC_GetLPUARTClockSource>
 8003aba:	4603      	mov	r3, r0
 8003abc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ac0:	d01a      	beq.n	8003af8 <UART_SetConfig+0x140>
 8003ac2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ac6:	d81b      	bhi.n	8003b00 <UART_SetConfig+0x148>
 8003ac8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003acc:	d00c      	beq.n	8003ae8 <UART_SetConfig+0x130>
 8003ace:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ad2:	d815      	bhi.n	8003b00 <UART_SetConfig+0x148>
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d003      	beq.n	8003ae0 <UART_SetConfig+0x128>
 8003ad8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003adc:	d008      	beq.n	8003af0 <UART_SetConfig+0x138>
 8003ade:	e00f      	b.n	8003b00 <UART_SetConfig+0x148>
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ae6:	e012      	b.n	8003b0e <UART_SetConfig+0x156>
 8003ae8:	2302      	movs	r3, #2
 8003aea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003aee:	e00e      	b.n	8003b0e <UART_SetConfig+0x156>
 8003af0:	2304      	movs	r3, #4
 8003af2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003af6:	e00a      	b.n	8003b0e <UART_SetConfig+0x156>
 8003af8:	2308      	movs	r3, #8
 8003afa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003afe:	e006      	b.n	8003b0e <UART_SetConfig+0x156>
 8003b00:	2310      	movs	r3, #16
 8003b02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b06:	e002      	b.n	8003b0e <UART_SetConfig+0x156>
 8003b08:	2310      	movs	r3, #16
 8003b0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a65      	ldr	r2, [pc, #404]	; (8003ca8 <UART_SetConfig+0x2f0>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	f040 8097 	bne.w	8003c48 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003b1a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003b1e:	2b08      	cmp	r3, #8
 8003b20:	d823      	bhi.n	8003b6a <UART_SetConfig+0x1b2>
 8003b22:	a201      	add	r2, pc, #4	; (adr r2, 8003b28 <UART_SetConfig+0x170>)
 8003b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b28:	08003b4d 	.word	0x08003b4d
 8003b2c:	08003b6b 	.word	0x08003b6b
 8003b30:	08003b55 	.word	0x08003b55
 8003b34:	08003b6b 	.word	0x08003b6b
 8003b38:	08003b5b 	.word	0x08003b5b
 8003b3c:	08003b6b 	.word	0x08003b6b
 8003b40:	08003b6b 	.word	0x08003b6b
 8003b44:	08003b6b 	.word	0x08003b6b
 8003b48:	08003b63 	.word	0x08003b63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b4c:	f7fe ff00 	bl	8002950 <HAL_RCC_GetPCLK1Freq>
 8003b50:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003b52:	e010      	b.n	8003b76 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b54:	4b56      	ldr	r3, [pc, #344]	; (8003cb0 <UART_SetConfig+0x2f8>)
 8003b56:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003b58:	e00d      	b.n	8003b76 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b5a:	f7fe fe79 	bl	8002850 <HAL_RCC_GetSysClockFreq>
 8003b5e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003b60:	e009      	b.n	8003b76 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b66:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003b68:	e005      	b.n	8003b76 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003b74:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	f000 812a 	beq.w	8003dd2 <UART_SetConfig+0x41a>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b82:	4a4c      	ldr	r2, [pc, #304]	; (8003cb4 <UART_SetConfig+0x2fc>)
 8003b84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003b88:	461a      	mov	r2, r3
 8003b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003b90:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	685a      	ldr	r2, [r3, #4]
 8003b96:	4613      	mov	r3, r2
 8003b98:	005b      	lsls	r3, r3, #1
 8003b9a:	4413      	add	r3, r2
 8003b9c:	69ba      	ldr	r2, [r7, #24]
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d305      	bcc.n	8003bae <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003ba8:	69ba      	ldr	r2, [r7, #24]
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d903      	bls.n	8003bb6 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003bb4:	e10d      	b.n	8003dd2 <UART_SetConfig+0x41a>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb8:	2200      	movs	r2, #0
 8003bba:	60bb      	str	r3, [r7, #8]
 8003bbc:	60fa      	str	r2, [r7, #12]
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc2:	4a3c      	ldr	r2, [pc, #240]	; (8003cb4 <UART_SetConfig+0x2fc>)
 8003bc4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003bc8:	b29b      	uxth	r3, r3
 8003bca:	2200      	movs	r2, #0
 8003bcc:	603b      	str	r3, [r7, #0]
 8003bce:	607a      	str	r2, [r7, #4]
 8003bd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003bd4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003bd8:	f7fc fad2 	bl	8000180 <__aeabi_uldivmod>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	460b      	mov	r3, r1
 8003be0:	4610      	mov	r0, r2
 8003be2:	4619      	mov	r1, r3
 8003be4:	f04f 0200 	mov.w	r2, #0
 8003be8:	f04f 0300 	mov.w	r3, #0
 8003bec:	020b      	lsls	r3, r1, #8
 8003bee:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003bf2:	0202      	lsls	r2, r0, #8
 8003bf4:	6979      	ldr	r1, [r7, #20]
 8003bf6:	6849      	ldr	r1, [r1, #4]
 8003bf8:	0849      	lsrs	r1, r1, #1
 8003bfa:	2000      	movs	r0, #0
 8003bfc:	460c      	mov	r4, r1
 8003bfe:	4605      	mov	r5, r0
 8003c00:	eb12 0804 	adds.w	r8, r2, r4
 8003c04:	eb43 0905 	adc.w	r9, r3, r5
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	469a      	mov	sl, r3
 8003c10:	4693      	mov	fp, r2
 8003c12:	4652      	mov	r2, sl
 8003c14:	465b      	mov	r3, fp
 8003c16:	4640      	mov	r0, r8
 8003c18:	4649      	mov	r1, r9
 8003c1a:	f7fc fab1 	bl	8000180 <__aeabi_uldivmod>
 8003c1e:	4602      	mov	r2, r0
 8003c20:	460b      	mov	r3, r1
 8003c22:	4613      	mov	r3, r2
 8003c24:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003c26:	6a3b      	ldr	r3, [r7, #32]
 8003c28:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c2c:	d308      	bcc.n	8003c40 <UART_SetConfig+0x288>
 8003c2e:	6a3b      	ldr	r3, [r7, #32]
 8003c30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c34:	d204      	bcs.n	8003c40 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	6a3a      	ldr	r2, [r7, #32]
 8003c3c:	60da      	str	r2, [r3, #12]
 8003c3e:	e0c8      	b.n	8003dd2 <UART_SetConfig+0x41a>
        }
        else
        {
          ret = HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003c46:	e0c4      	b.n	8003dd2 <UART_SetConfig+0x41a>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	69db      	ldr	r3, [r3, #28]
 8003c4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c50:	d16d      	bne.n	8003d2e <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8003c52:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003c56:	3b01      	subs	r3, #1
 8003c58:	2b07      	cmp	r3, #7
 8003c5a:	d82d      	bhi.n	8003cb8 <UART_SetConfig+0x300>
 8003c5c:	a201      	add	r2, pc, #4	; (adr r2, 8003c64 <UART_SetConfig+0x2ac>)
 8003c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c62:	bf00      	nop
 8003c64:	08003c85 	.word	0x08003c85
 8003c68:	08003c8d 	.word	0x08003c8d
 8003c6c:	08003cb9 	.word	0x08003cb9
 8003c70:	08003c93 	.word	0x08003c93
 8003c74:	08003cb9 	.word	0x08003cb9
 8003c78:	08003cb9 	.word	0x08003cb9
 8003c7c:	08003cb9 	.word	0x08003cb9
 8003c80:	08003c9b 	.word	0x08003c9b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c84:	f7fe fe7a 	bl	800297c <HAL_RCC_GetPCLK2Freq>
 8003c88:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003c8a:	e01b      	b.n	8003cc4 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c8c:	4b08      	ldr	r3, [pc, #32]	; (8003cb0 <UART_SetConfig+0x2f8>)
 8003c8e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003c90:	e018      	b.n	8003cc4 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c92:	f7fe fddd 	bl	8002850 <HAL_RCC_GetSysClockFreq>
 8003c96:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003c98:	e014      	b.n	8003cc4 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c9e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003ca0:	e010      	b.n	8003cc4 <UART_SetConfig+0x30c>
 8003ca2:	bf00      	nop
 8003ca4:	cfff69f3 	.word	0xcfff69f3
 8003ca8:	40008000 	.word	0x40008000
 8003cac:	40013800 	.word	0x40013800
 8003cb0:	00f42400 	.word	0x00f42400
 8003cb4:	08008118 	.word	0x08008118
      default:
        pclk = 0U;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003cc2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	f000 8083 	beq.w	8003dd2 <UART_SetConfig+0x41a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd0:	4a4a      	ldr	r2, [pc, #296]	; (8003dfc <UART_SetConfig+0x444>)
 8003cd2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003cd6:	461a      	mov	r2, r3
 8003cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cda:	fbb3 f3f2 	udiv	r3, r3, r2
 8003cde:	005a      	lsls	r2, r3, #1
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	085b      	lsrs	r3, r3, #1
 8003ce6:	441a      	add	r2, r3
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cf0:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003cf2:	6a3b      	ldr	r3, [r7, #32]
 8003cf4:	2b0f      	cmp	r3, #15
 8003cf6:	d916      	bls.n	8003d26 <UART_SetConfig+0x36e>
 8003cf8:	6a3b      	ldr	r3, [r7, #32]
 8003cfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cfe:	d212      	bcs.n	8003d26 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d00:	6a3b      	ldr	r3, [r7, #32]
 8003d02:	b29b      	uxth	r3, r3
 8003d04:	f023 030f 	bic.w	r3, r3, #15
 8003d08:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d0a:	6a3b      	ldr	r3, [r7, #32]
 8003d0c:	085b      	lsrs	r3, r3, #1
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	f003 0307 	and.w	r3, r3, #7
 8003d14:	b29a      	uxth	r2, r3
 8003d16:	8bfb      	ldrh	r3, [r7, #30]
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	8bfa      	ldrh	r2, [r7, #30]
 8003d22:	60da      	str	r2, [r3, #12]
 8003d24:	e055      	b.n	8003dd2 <UART_SetConfig+0x41a>
      }
      else
      {
        ret = HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003d2c:	e051      	b.n	8003dd2 <UART_SetConfig+0x41a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003d2e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003d32:	3b01      	subs	r3, #1
 8003d34:	2b07      	cmp	r3, #7
 8003d36:	d822      	bhi.n	8003d7e <UART_SetConfig+0x3c6>
 8003d38:	a201      	add	r2, pc, #4	; (adr r2, 8003d40 <UART_SetConfig+0x388>)
 8003d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d3e:	bf00      	nop
 8003d40:	08003d61 	.word	0x08003d61
 8003d44:	08003d69 	.word	0x08003d69
 8003d48:	08003d7f 	.word	0x08003d7f
 8003d4c:	08003d6f 	.word	0x08003d6f
 8003d50:	08003d7f 	.word	0x08003d7f
 8003d54:	08003d7f 	.word	0x08003d7f
 8003d58:	08003d7f 	.word	0x08003d7f
 8003d5c:	08003d77 	.word	0x08003d77
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d60:	f7fe fe0c 	bl	800297c <HAL_RCC_GetPCLK2Freq>
 8003d64:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003d66:	e010      	b.n	8003d8a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d68:	4b25      	ldr	r3, [pc, #148]	; (8003e00 <UART_SetConfig+0x448>)
 8003d6a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003d6c:	e00d      	b.n	8003d8a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d6e:	f7fe fd6f 	bl	8002850 <HAL_RCC_GetSysClockFreq>
 8003d72:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003d74:	e009      	b.n	8003d8a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d7a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003d7c:	e005      	b.n	8003d8a <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003d88:	bf00      	nop
    }

    if (pclk != 0U)
 8003d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d020      	beq.n	8003dd2 <UART_SetConfig+0x41a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d94:	4a19      	ldr	r2, [pc, #100]	; (8003dfc <UART_SetConfig+0x444>)
 8003d96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9e:	fbb3 f2f2 	udiv	r2, r3, r2
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	085b      	lsrs	r3, r3, #1
 8003da8:	441a      	add	r2, r3
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8003db2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003db4:	6a3b      	ldr	r3, [r7, #32]
 8003db6:	2b0f      	cmp	r3, #15
 8003db8:	d908      	bls.n	8003dcc <UART_SetConfig+0x414>
 8003dba:	6a3b      	ldr	r3, [r7, #32]
 8003dbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dc0:	d204      	bcs.n	8003dcc <UART_SetConfig+0x414>
      {
        huart->Instance->BRR = usartdiv;
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	6a3a      	ldr	r2, [r7, #32]
 8003dc8:	60da      	str	r2, [r3, #12]
 8003dca:	e002      	b.n	8003dd2 <UART_SetConfig+0x41a>
      }
      else
      {
        ret = HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	2201      	movs	r2, #1
 8003dde:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	2200      	movs	r2, #0
 8003de6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	2200      	movs	r2, #0
 8003dec:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003dee:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3730      	adds	r7, #48	; 0x30
 8003df6:	46bd      	mov	sp, r7
 8003df8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003dfc:	08008118 	.word	0x08008118
 8003e00:	00f42400 	.word	0x00f42400

08003e04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e10:	f003 0301 	and.w	r3, r3, #1
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d00a      	beq.n	8003e2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	430a      	orrs	r2, r1
 8003e2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e32:	f003 0302 	and.w	r3, r3, #2
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d00a      	beq.n	8003e50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	430a      	orrs	r2, r1
 8003e4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e54:	f003 0304 	and.w	r3, r3, #4
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d00a      	beq.n	8003e72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	430a      	orrs	r2, r1
 8003e70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e76:	f003 0308 	and.w	r3, r3, #8
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d00a      	beq.n	8003e94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	430a      	orrs	r2, r1
 8003e92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e98:	f003 0310 	and.w	r3, r3, #16
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d00a      	beq.n	8003eb6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	430a      	orrs	r2, r1
 8003eb4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eba:	f003 0320 	and.w	r3, r3, #32
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d00a      	beq.n	8003ed8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	430a      	orrs	r2, r1
 8003ed6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003edc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d01a      	beq.n	8003f1a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	430a      	orrs	r2, r1
 8003ef8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003efe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f02:	d10a      	bne.n	8003f1a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	430a      	orrs	r2, r1
 8003f18:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d00a      	beq.n	8003f3c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	430a      	orrs	r2, r1
 8003f3a:	605a      	str	r2, [r3, #4]
  }
}
 8003f3c:	bf00      	nop
 8003f3e:	370c      	adds	r7, #12
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr

08003f48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b086      	sub	sp, #24
 8003f4c:	af02      	add	r7, sp, #8
 8003f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2200      	movs	r2, #0
 8003f54:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003f58:	f7fc ffb2 	bl	8000ec0 <HAL_GetTick>
 8003f5c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 0308 	and.w	r3, r3, #8
 8003f68:	2b08      	cmp	r3, #8
 8003f6a:	d10e      	bne.n	8003f8a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f6c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003f70:	9300      	str	r3, [sp, #0]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2200      	movs	r2, #0
 8003f76:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f000 f82f 	bl	8003fde <UART_WaitOnFlagUntilTimeout>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d001      	beq.n	8003f8a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f86:	2303      	movs	r3, #3
 8003f88:	e025      	b.n	8003fd6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 0304 	and.w	r3, r3, #4
 8003f94:	2b04      	cmp	r3, #4
 8003f96:	d10e      	bne.n	8003fb6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f98:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003f9c:	9300      	str	r3, [sp, #0]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f000 f819 	bl	8003fde <UART_WaitOnFlagUntilTimeout>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d001      	beq.n	8003fb6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	e00f      	b.n	8003fd6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2220      	movs	r2, #32
 8003fba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2220      	movs	r2, #32
 8003fc2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003fd4:	2300      	movs	r3, #0
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3710      	adds	r7, #16
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}

08003fde <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003fde:	b580      	push	{r7, lr}
 8003fe0:	b09c      	sub	sp, #112	; 0x70
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	60f8      	str	r0, [r7, #12]
 8003fe6:	60b9      	str	r1, [r7, #8]
 8003fe8:	603b      	str	r3, [r7, #0]
 8003fea:	4613      	mov	r3, r2
 8003fec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fee:	e0a9      	b.n	8004144 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ff0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ff6:	f000 80a5 	beq.w	8004144 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ffa:	f7fc ff61 	bl	8000ec0 <HAL_GetTick>
 8003ffe:	4602      	mov	r2, r0
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	1ad3      	subs	r3, r2, r3
 8004004:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004006:	429a      	cmp	r2, r3
 8004008:	d302      	bcc.n	8004010 <UART_WaitOnFlagUntilTimeout+0x32>
 800400a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800400c:	2b00      	cmp	r3, #0
 800400e:	d140      	bne.n	8004092 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004016:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004018:	e853 3f00 	ldrex	r3, [r3]
 800401c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800401e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004020:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004024:	667b      	str	r3, [r7, #100]	; 0x64
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	461a      	mov	r2, r3
 800402c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800402e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004030:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004032:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004034:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004036:	e841 2300 	strex	r3, r2, [r1]
 800403a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800403c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800403e:	2b00      	cmp	r3, #0
 8004040:	d1e6      	bne.n	8004010 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	3308      	adds	r3, #8
 8004048:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800404a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800404c:	e853 3f00 	ldrex	r3, [r3]
 8004050:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004054:	f023 0301 	bic.w	r3, r3, #1
 8004058:	663b      	str	r3, [r7, #96]	; 0x60
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	3308      	adds	r3, #8
 8004060:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004062:	64ba      	str	r2, [r7, #72]	; 0x48
 8004064:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004066:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004068:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800406a:	e841 2300 	strex	r3, r2, [r1]
 800406e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004070:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004072:	2b00      	cmp	r3, #0
 8004074:	d1e5      	bne.n	8004042 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2220      	movs	r2, #32
 800407a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2220      	movs	r2, #32
 8004082:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2200      	movs	r2, #0
 800408a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	e069      	b.n	8004166 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 0304 	and.w	r3, r3, #4
 800409c:	2b00      	cmp	r3, #0
 800409e:	d051      	beq.n	8004144 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	69db      	ldr	r3, [r3, #28]
 80040a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040ae:	d149      	bne.n	8004144 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80040b8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040c2:	e853 3f00 	ldrex	r3, [r3]
 80040c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80040c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80040ce:	66fb      	str	r3, [r7, #108]	; 0x6c
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	461a      	mov	r2, r3
 80040d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040d8:	637b      	str	r3, [r7, #52]	; 0x34
 80040da:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80040de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80040e0:	e841 2300 	strex	r3, r2, [r1]
 80040e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80040e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d1e6      	bne.n	80040ba <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	3308      	adds	r3, #8
 80040f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	e853 3f00 	ldrex	r3, [r3]
 80040fa:	613b      	str	r3, [r7, #16]
   return(result);
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	f023 0301 	bic.w	r3, r3, #1
 8004102:	66bb      	str	r3, [r7, #104]	; 0x68
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	3308      	adds	r3, #8
 800410a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800410c:	623a      	str	r2, [r7, #32]
 800410e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004110:	69f9      	ldr	r1, [r7, #28]
 8004112:	6a3a      	ldr	r2, [r7, #32]
 8004114:	e841 2300 	strex	r3, r2, [r1]
 8004118:	61bb      	str	r3, [r7, #24]
   return(result);
 800411a:	69bb      	ldr	r3, [r7, #24]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d1e5      	bne.n	80040ec <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2220      	movs	r2, #32
 8004124:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2220      	movs	r2, #32
 800412c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2220      	movs	r2, #32
 8004134:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2200      	movs	r2, #0
 800413c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004140:	2303      	movs	r3, #3
 8004142:	e010      	b.n	8004166 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	69da      	ldr	r2, [r3, #28]
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	4013      	ands	r3, r2
 800414e:	68ba      	ldr	r2, [r7, #8]
 8004150:	429a      	cmp	r2, r3
 8004152:	bf0c      	ite	eq
 8004154:	2301      	moveq	r3, #1
 8004156:	2300      	movne	r3, #0
 8004158:	b2db      	uxtb	r3, r3
 800415a:	461a      	mov	r2, r3
 800415c:	79fb      	ldrb	r3, [r7, #7]
 800415e:	429a      	cmp	r2, r3
 8004160:	f43f af46 	beq.w	8003ff0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004164:	2300      	movs	r3, #0
}
 8004166:	4618      	mov	r0, r3
 8004168:	3770      	adds	r7, #112	; 0x70
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}

0800416e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800416e:	b480      	push	{r7}
 8004170:	b085      	sub	sp, #20
 8004172:	af00      	add	r7, sp, #0
 8004174:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800417c:	2b01      	cmp	r3, #1
 800417e:	d101      	bne.n	8004184 <HAL_UARTEx_DisableFifoMode+0x16>
 8004180:	2302      	movs	r3, #2
 8004182:	e027      	b.n	80041d4 <HAL_UARTEx_DisableFifoMode+0x66>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2224      	movs	r2, #36	; 0x24
 8004190:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f022 0201 	bic.w	r2, r2, #1
 80041aa:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80041b2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2200      	movs	r2, #0
 80041b8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	68fa      	ldr	r2, [r7, #12]
 80041c0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2220      	movs	r2, #32
 80041c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2200      	movs	r2, #0
 80041ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80041d2:	2300      	movs	r3, #0
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	3714      	adds	r7, #20
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr

080041e0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b084      	sub	sp, #16
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d101      	bne.n	80041f8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80041f4:	2302      	movs	r3, #2
 80041f6:	e02d      	b.n	8004254 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2224      	movs	r2, #36	; 0x24
 8004204:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f022 0201 	bic.w	r2, r2, #1
 800421e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	683a      	ldr	r2, [r7, #0]
 8004230:	430a      	orrs	r2, r1
 8004232:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f000 f84f 	bl	80042d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	68fa      	ldr	r2, [r7, #12]
 8004240:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2220      	movs	r2, #32
 8004246:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2200      	movs	r2, #0
 800424e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004252:	2300      	movs	r3, #0
}
 8004254:	4618      	mov	r0, r3
 8004256:	3710      	adds	r7, #16
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}

0800425c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b084      	sub	sp, #16
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800426c:	2b01      	cmp	r3, #1
 800426e:	d101      	bne.n	8004274 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004270:	2302      	movs	r3, #2
 8004272:	e02d      	b.n	80042d0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2201      	movs	r2, #1
 8004278:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2224      	movs	r2, #36	; 0x24
 8004280:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f022 0201 	bic.w	r2, r2, #1
 800429a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	683a      	ldr	r2, [r7, #0]
 80042ac:	430a      	orrs	r2, r1
 80042ae:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f000 f811 	bl	80042d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	68fa      	ldr	r2, [r7, #12]
 80042bc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2220      	movs	r2, #32
 80042c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2200      	movs	r2, #0
 80042ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80042ce:	2300      	movs	r3, #0
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3710      	adds	r7, #16
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}

080042d8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80042d8:	b480      	push	{r7}
 80042da:	b085      	sub	sp, #20
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d108      	bne.n	80042fa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80042f8:	e031      	b.n	800435e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80042fa:	2308      	movs	r3, #8
 80042fc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80042fe:	2308      	movs	r3, #8
 8004300:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	0e5b      	lsrs	r3, r3, #25
 800430a:	b2db      	uxtb	r3, r3
 800430c:	f003 0307 	and.w	r3, r3, #7
 8004310:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	0f5b      	lsrs	r3, r3, #29
 800431a:	b2db      	uxtb	r3, r3
 800431c:	f003 0307 	and.w	r3, r3, #7
 8004320:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004322:	7bbb      	ldrb	r3, [r7, #14]
 8004324:	7b3a      	ldrb	r2, [r7, #12]
 8004326:	4911      	ldr	r1, [pc, #68]	; (800436c <UARTEx_SetNbDataToProcess+0x94>)
 8004328:	5c8a      	ldrb	r2, [r1, r2]
 800432a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800432e:	7b3a      	ldrb	r2, [r7, #12]
 8004330:	490f      	ldr	r1, [pc, #60]	; (8004370 <UARTEx_SetNbDataToProcess+0x98>)
 8004332:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004334:	fb93 f3f2 	sdiv	r3, r3, r2
 8004338:	b29a      	uxth	r2, r3
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004340:	7bfb      	ldrb	r3, [r7, #15]
 8004342:	7b7a      	ldrb	r2, [r7, #13]
 8004344:	4909      	ldr	r1, [pc, #36]	; (800436c <UARTEx_SetNbDataToProcess+0x94>)
 8004346:	5c8a      	ldrb	r2, [r1, r2]
 8004348:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800434c:	7b7a      	ldrb	r2, [r7, #13]
 800434e:	4908      	ldr	r1, [pc, #32]	; (8004370 <UARTEx_SetNbDataToProcess+0x98>)
 8004350:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004352:	fb93 f3f2 	sdiv	r3, r3, r2
 8004356:	b29a      	uxth	r2, r3
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800435e:	bf00      	nop
 8004360:	3714      	adds	r7, #20
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr
 800436a:	bf00      	nop
 800436c:	08008130 	.word	0x08008130
 8004370:	08008138 	.word	0x08008138

08004374 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004374:	b480      	push	{r7}
 8004376:	b085      	sub	sp, #20
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800437c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004380:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004388:	b29a      	uxth	r2, r3
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	b29b      	uxth	r3, r3
 800438e:	43db      	mvns	r3, r3
 8004390:	b29b      	uxth	r3, r3
 8004392:	4013      	ands	r3, r2
 8004394:	b29a      	uxth	r2, r3
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800439c:	2300      	movs	r3, #0
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3714      	adds	r7, #20
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr

080043aa <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80043aa:	b084      	sub	sp, #16
 80043ac:	b480      	push	{r7}
 80043ae:	b083      	sub	sp, #12
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
 80043b4:	f107 0014 	add.w	r0, r7, #20
 80043b8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2201      	movs	r2, #1
 80043c0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2200      	movs	r2, #0
 80043c8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2200      	movs	r2, #0
 80043d0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80043dc:	2300      	movs	r3, #0
}
 80043de:	4618      	mov	r0, r3
 80043e0:	370c      	adds	r7, #12
 80043e2:	46bd      	mov	sp, r7
 80043e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e8:	b004      	add	sp, #16
 80043ea:	4770      	bx	lr

080043ec <__NVIC_SetPriority>:
{
 80043ec:	b480      	push	{r7}
 80043ee:	b083      	sub	sp, #12
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	4603      	mov	r3, r0
 80043f4:	6039      	str	r1, [r7, #0]
 80043f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	db0a      	blt.n	8004416 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	b2da      	uxtb	r2, r3
 8004404:	490c      	ldr	r1, [pc, #48]	; (8004438 <__NVIC_SetPriority+0x4c>)
 8004406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800440a:	0112      	lsls	r2, r2, #4
 800440c:	b2d2      	uxtb	r2, r2
 800440e:	440b      	add	r3, r1
 8004410:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004414:	e00a      	b.n	800442c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	b2da      	uxtb	r2, r3
 800441a:	4908      	ldr	r1, [pc, #32]	; (800443c <__NVIC_SetPriority+0x50>)
 800441c:	79fb      	ldrb	r3, [r7, #7]
 800441e:	f003 030f 	and.w	r3, r3, #15
 8004422:	3b04      	subs	r3, #4
 8004424:	0112      	lsls	r2, r2, #4
 8004426:	b2d2      	uxtb	r2, r2
 8004428:	440b      	add	r3, r1
 800442a:	761a      	strb	r2, [r3, #24]
}
 800442c:	bf00      	nop
 800442e:	370c      	adds	r7, #12
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr
 8004438:	e000e100 	.word	0xe000e100
 800443c:	e000ed00 	.word	0xe000ed00

08004440 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004440:	b580      	push	{r7, lr}
 8004442:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004444:	4b05      	ldr	r3, [pc, #20]	; (800445c <SysTick_Handler+0x1c>)
 8004446:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004448:	f002 fb4a 	bl	8006ae0 <xTaskGetSchedulerState>
 800444c:	4603      	mov	r3, r0
 800444e:	2b01      	cmp	r3, #1
 8004450:	d001      	beq.n	8004456 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004452:	f003 fa21 	bl	8007898 <xPortSysTickHandler>
  }
}
 8004456:	bf00      	nop
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	e000e010 	.word	0xe000e010

08004460 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004460:	b580      	push	{r7, lr}
 8004462:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004464:	2100      	movs	r1, #0
 8004466:	f06f 0004 	mvn.w	r0, #4
 800446a:	f7ff ffbf 	bl	80043ec <__NVIC_SetPriority>
#endif
}
 800446e:	bf00      	nop
 8004470:	bd80      	pop	{r7, pc}
	...

08004474 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004474:	b480      	push	{r7}
 8004476:	b083      	sub	sp, #12
 8004478:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800447a:	f3ef 8305 	mrs	r3, IPSR
 800447e:	603b      	str	r3, [r7, #0]
  return(result);
 8004480:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004482:	2b00      	cmp	r3, #0
 8004484:	d003      	beq.n	800448e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004486:	f06f 0305 	mvn.w	r3, #5
 800448a:	607b      	str	r3, [r7, #4]
 800448c:	e00c      	b.n	80044a8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800448e:	4b0a      	ldr	r3, [pc, #40]	; (80044b8 <osKernelInitialize+0x44>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d105      	bne.n	80044a2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004496:	4b08      	ldr	r3, [pc, #32]	; (80044b8 <osKernelInitialize+0x44>)
 8004498:	2201      	movs	r2, #1
 800449a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800449c:	2300      	movs	r3, #0
 800449e:	607b      	str	r3, [r7, #4]
 80044a0:	e002      	b.n	80044a8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80044a2:	f04f 33ff 	mov.w	r3, #4294967295
 80044a6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80044a8:	687b      	ldr	r3, [r7, #4]
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	370c      	adds	r7, #12
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr
 80044b6:	bf00      	nop
 80044b8:	200004a8 	.word	0x200004a8

080044bc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80044bc:	b580      	push	{r7, lr}
 80044be:	b082      	sub	sp, #8
 80044c0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80044c2:	f3ef 8305 	mrs	r3, IPSR
 80044c6:	603b      	str	r3, [r7, #0]
  return(result);
 80044c8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d003      	beq.n	80044d6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80044ce:	f06f 0305 	mvn.w	r3, #5
 80044d2:	607b      	str	r3, [r7, #4]
 80044d4:	e010      	b.n	80044f8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80044d6:	4b0b      	ldr	r3, [pc, #44]	; (8004504 <osKernelStart+0x48>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d109      	bne.n	80044f2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80044de:	f7ff ffbf 	bl	8004460 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80044e2:	4b08      	ldr	r3, [pc, #32]	; (8004504 <osKernelStart+0x48>)
 80044e4:	2202      	movs	r2, #2
 80044e6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80044e8:	f001 fe00 	bl	80060ec <vTaskStartScheduler>
      stat = osOK;
 80044ec:	2300      	movs	r3, #0
 80044ee:	607b      	str	r3, [r7, #4]
 80044f0:	e002      	b.n	80044f8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80044f2:	f04f 33ff 	mov.w	r3, #4294967295
 80044f6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80044f8:	687b      	ldr	r3, [r7, #4]
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3708      	adds	r7, #8
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
 8004502:	bf00      	nop
 8004504:	200004a8 	.word	0x200004a8

08004508 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004508:	b580      	push	{r7, lr}
 800450a:	b08e      	sub	sp, #56	; 0x38
 800450c:	af04      	add	r7, sp, #16
 800450e:	60f8      	str	r0, [r7, #12]
 8004510:	60b9      	str	r1, [r7, #8]
 8004512:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004514:	2300      	movs	r3, #0
 8004516:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004518:	f3ef 8305 	mrs	r3, IPSR
 800451c:	617b      	str	r3, [r7, #20]
  return(result);
 800451e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004520:	2b00      	cmp	r3, #0
 8004522:	d17e      	bne.n	8004622 <osThreadNew+0x11a>
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d07b      	beq.n	8004622 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800452a:	2380      	movs	r3, #128	; 0x80
 800452c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800452e:	2318      	movs	r3, #24
 8004530:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004532:	2300      	movs	r3, #0
 8004534:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004536:	f04f 33ff 	mov.w	r3, #4294967295
 800453a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d045      	beq.n	80045ce <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d002      	beq.n	8004550 <osThreadNew+0x48>
        name = attr->name;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	699b      	ldr	r3, [r3, #24]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d002      	beq.n	800455e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	699b      	ldr	r3, [r3, #24]
 800455c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800455e:	69fb      	ldr	r3, [r7, #28]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d008      	beq.n	8004576 <osThreadNew+0x6e>
 8004564:	69fb      	ldr	r3, [r7, #28]
 8004566:	2b38      	cmp	r3, #56	; 0x38
 8004568:	d805      	bhi.n	8004576 <osThreadNew+0x6e>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	f003 0301 	and.w	r3, r3, #1
 8004572:	2b00      	cmp	r3, #0
 8004574:	d001      	beq.n	800457a <osThreadNew+0x72>
        return (NULL);
 8004576:	2300      	movs	r3, #0
 8004578:	e054      	b.n	8004624 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	695b      	ldr	r3, [r3, #20]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d003      	beq.n	800458a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	695b      	ldr	r3, [r3, #20]
 8004586:	089b      	lsrs	r3, r3, #2
 8004588:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d00e      	beq.n	80045b0 <osThreadNew+0xa8>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	2bbb      	cmp	r3, #187	; 0xbb
 8004598:	d90a      	bls.n	80045b0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d006      	beq.n	80045b0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	695b      	ldr	r3, [r3, #20]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d002      	beq.n	80045b0 <osThreadNew+0xa8>
        mem = 1;
 80045aa:	2301      	movs	r3, #1
 80045ac:	61bb      	str	r3, [r7, #24]
 80045ae:	e010      	b.n	80045d2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d10c      	bne.n	80045d2 <osThreadNew+0xca>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d108      	bne.n	80045d2 <osThreadNew+0xca>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	691b      	ldr	r3, [r3, #16]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d104      	bne.n	80045d2 <osThreadNew+0xca>
          mem = 0;
 80045c8:	2300      	movs	r3, #0
 80045ca:	61bb      	str	r3, [r7, #24]
 80045cc:	e001      	b.n	80045d2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80045ce:	2300      	movs	r3, #0
 80045d0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80045d2:	69bb      	ldr	r3, [r7, #24]
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d110      	bne.n	80045fa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80045dc:	687a      	ldr	r2, [r7, #4]
 80045de:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80045e0:	9202      	str	r2, [sp, #8]
 80045e2:	9301      	str	r3, [sp, #4]
 80045e4:	69fb      	ldr	r3, [r7, #28]
 80045e6:	9300      	str	r3, [sp, #0]
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	6a3a      	ldr	r2, [r7, #32]
 80045ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80045ee:	68f8      	ldr	r0, [r7, #12]
 80045f0:	f001 fb90 	bl	8005d14 <xTaskCreateStatic>
 80045f4:	4603      	mov	r3, r0
 80045f6:	613b      	str	r3, [r7, #16]
 80045f8:	e013      	b.n	8004622 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80045fa:	69bb      	ldr	r3, [r7, #24]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d110      	bne.n	8004622 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004600:	6a3b      	ldr	r3, [r7, #32]
 8004602:	b29a      	uxth	r2, r3
 8004604:	f107 0310 	add.w	r3, r7, #16
 8004608:	9301      	str	r3, [sp, #4]
 800460a:	69fb      	ldr	r3, [r7, #28]
 800460c:	9300      	str	r3, [sp, #0]
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004612:	68f8      	ldr	r0, [r7, #12]
 8004614:	f001 fbdb 	bl	8005dce <xTaskCreate>
 8004618:	4603      	mov	r3, r0
 800461a:	2b01      	cmp	r3, #1
 800461c:	d001      	beq.n	8004622 <osThreadNew+0x11a>
            hTask = NULL;
 800461e:	2300      	movs	r3, #0
 8004620:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004622:	693b      	ldr	r3, [r7, #16]
}
 8004624:	4618      	mov	r0, r3
 8004626:	3728      	adds	r7, #40	; 0x28
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}

0800462c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800462c:	b580      	push	{r7, lr}
 800462e:	b084      	sub	sp, #16
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004634:	f3ef 8305 	mrs	r3, IPSR
 8004638:	60bb      	str	r3, [r7, #8]
  return(result);
 800463a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800463c:	2b00      	cmp	r3, #0
 800463e:	d003      	beq.n	8004648 <osDelay+0x1c>
    stat = osErrorISR;
 8004640:	f06f 0305 	mvn.w	r3, #5
 8004644:	60fb      	str	r3, [r7, #12]
 8004646:	e007      	b.n	8004658 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004648:	2300      	movs	r3, #0
 800464a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d002      	beq.n	8004658 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f001 fd16 	bl	8006084 <vTaskDelay>
    }
  }

  return (stat);
 8004658:	68fb      	ldr	r3, [r7, #12]
}
 800465a:	4618      	mov	r0, r3
 800465c:	3710      	adds	r7, #16
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}

08004662 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 8004662:	b580      	push	{r7, lr}
 8004664:	b084      	sub	sp, #16
 8004666:	af00      	add	r7, sp, #0
 8004668:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f002 ff18 	bl	80074a0 <pvTimerGetTimerID>
 8004670:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d005      	beq.n	8004684 <TimerCallback+0x22>
    callb->func (callb->arg);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	68fa      	ldr	r2, [r7, #12]
 800467e:	6852      	ldr	r2, [r2, #4]
 8004680:	4610      	mov	r0, r2
 8004682:	4798      	blx	r3
  }
}
 8004684:	bf00      	nop
 8004686:	3710      	adds	r7, #16
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}

0800468c <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800468c:	b580      	push	{r7, lr}
 800468e:	b08c      	sub	sp, #48	; 0x30
 8004690:	af02      	add	r7, sp, #8
 8004692:	60f8      	str	r0, [r7, #12]
 8004694:	607a      	str	r2, [r7, #4]
 8004696:	603b      	str	r3, [r7, #0]
 8004698:	460b      	mov	r3, r1
 800469a:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800469c:	2300      	movs	r3, #0
 800469e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80046a0:	f3ef 8305 	mrs	r3, IPSR
 80046a4:	613b      	str	r3, [r7, #16]
  return(result);
 80046a6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d163      	bne.n	8004774 <osTimerNew+0xe8>
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d060      	beq.n	8004774 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 80046b2:	2008      	movs	r0, #8
 80046b4:	f003 f980 	bl	80079b8 <pvPortMalloc>
 80046b8:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d059      	beq.n	8004774 <osTimerNew+0xe8>
      callb->func = func;
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	68fa      	ldr	r2, [r7, #12]
 80046c4:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	687a      	ldr	r2, [r7, #4]
 80046ca:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 80046cc:	7afb      	ldrb	r3, [r7, #11]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d102      	bne.n	80046d8 <osTimerNew+0x4c>
        reload = pdFALSE;
 80046d2:	2300      	movs	r3, #0
 80046d4:	61fb      	str	r3, [r7, #28]
 80046d6:	e001      	b.n	80046dc <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 80046d8:	2301      	movs	r3, #1
 80046da:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 80046dc:	f04f 33ff 	mov.w	r3, #4294967295
 80046e0:	61bb      	str	r3, [r7, #24]
      name = NULL;
 80046e2:	2300      	movs	r3, #0
 80046e4:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d01c      	beq.n	8004726 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d002      	beq.n	80046fa <osTimerNew+0x6e>
          name = attr->name;
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d006      	beq.n	8004710 <osTimerNew+0x84>
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	2b2b      	cmp	r3, #43	; 0x2b
 8004708:	d902      	bls.n	8004710 <osTimerNew+0x84>
          mem = 1;
 800470a:	2301      	movs	r3, #1
 800470c:	61bb      	str	r3, [r7, #24]
 800470e:	e00c      	b.n	800472a <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d108      	bne.n	800472a <osTimerNew+0x9e>
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d104      	bne.n	800472a <osTimerNew+0x9e>
            mem = 0;
 8004720:	2300      	movs	r3, #0
 8004722:	61bb      	str	r3, [r7, #24]
 8004724:	e001      	b.n	800472a <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 8004726:	2300      	movs	r3, #0
 8004728:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800472a:	69bb      	ldr	r3, [r7, #24]
 800472c:	2b01      	cmp	r3, #1
 800472e:	d10c      	bne.n	800474a <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	9301      	str	r3, [sp, #4]
 8004736:	4b12      	ldr	r3, [pc, #72]	; (8004780 <osTimerNew+0xf4>)
 8004738:	9300      	str	r3, [sp, #0]
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	69fa      	ldr	r2, [r7, #28]
 800473e:	2101      	movs	r1, #1
 8004740:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004742:	f002 fb2e 	bl	8006da2 <xTimerCreateStatic>
 8004746:	6238      	str	r0, [r7, #32]
 8004748:	e00b      	b.n	8004762 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 800474a:	69bb      	ldr	r3, [r7, #24]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d108      	bne.n	8004762 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8004750:	4b0b      	ldr	r3, [pc, #44]	; (8004780 <osTimerNew+0xf4>)
 8004752:	9300      	str	r3, [sp, #0]
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	69fa      	ldr	r2, [r7, #28]
 8004758:	2101      	movs	r1, #1
 800475a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800475c:	f002 fb00 	bl	8006d60 <xTimerCreate>
 8004760:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 8004762:	6a3b      	ldr	r3, [r7, #32]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d105      	bne.n	8004774 <osTimerNew+0xe8>
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d002      	beq.n	8004774 <osTimerNew+0xe8>
        vPortFree (callb);
 800476e:	6978      	ldr	r0, [r7, #20]
 8004770:	f003 f9ee 	bl	8007b50 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8004774:	6a3b      	ldr	r3, [r7, #32]
}
 8004776:	4618      	mov	r0, r3
 8004778:	3728      	adds	r7, #40	; 0x28
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}
 800477e:	bf00      	nop
 8004780:	08004663 	.word	0x08004663

08004784 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8004784:	b580      	push	{r7, lr}
 8004786:	b088      	sub	sp, #32
 8004788:	af02      	add	r7, sp, #8
 800478a:	6078      	str	r0, [r7, #4]
 800478c:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004792:	f3ef 8305 	mrs	r3, IPSR
 8004796:	60fb      	str	r3, [r7, #12]
  return(result);
 8004798:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800479a:	2b00      	cmp	r3, #0
 800479c:	d003      	beq.n	80047a6 <osTimerStart+0x22>
    stat = osErrorISR;
 800479e:	f06f 0305 	mvn.w	r3, #5
 80047a2:	617b      	str	r3, [r7, #20]
 80047a4:	e017      	b.n	80047d6 <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d103      	bne.n	80047b4 <osTimerStart+0x30>
    stat = osErrorParameter;
 80047ac:	f06f 0303 	mvn.w	r3, #3
 80047b0:	617b      	str	r3, [r7, #20]
 80047b2:	e010      	b.n	80047d6 <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 80047b4:	2300      	movs	r3, #0
 80047b6:	9300      	str	r3, [sp, #0]
 80047b8:	2300      	movs	r3, #0
 80047ba:	683a      	ldr	r2, [r7, #0]
 80047bc:	2104      	movs	r1, #4
 80047be:	6938      	ldr	r0, [r7, #16]
 80047c0:	f002 fb68 	bl	8006e94 <xTimerGenericCommand>
 80047c4:	4603      	mov	r3, r0
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d102      	bne.n	80047d0 <osTimerStart+0x4c>
      stat = osOK;
 80047ca:	2300      	movs	r3, #0
 80047cc:	617b      	str	r3, [r7, #20]
 80047ce:	e002      	b.n	80047d6 <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 80047d0:	f06f 0302 	mvn.w	r3, #2
 80047d4:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80047d6:	697b      	ldr	r3, [r7, #20]
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3718      	adds	r7, #24
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}

080047e0 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b086      	sub	sp, #24
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 80047e8:	2300      	movs	r3, #0
 80047ea:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80047ec:	f3ef 8305 	mrs	r3, IPSR
 80047f0:	60fb      	str	r3, [r7, #12]
  return(result);
 80047f2:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d12d      	bne.n	8004854 <osEventFlagsNew+0x74>
    mem = -1;
 80047f8:	f04f 33ff 	mov.w	r3, #4294967295
 80047fc:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d015      	beq.n	8004830 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d006      	beq.n	800481a <osEventFlagsNew+0x3a>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	2b1f      	cmp	r3, #31
 8004812:	d902      	bls.n	800481a <osEventFlagsNew+0x3a>
        mem = 1;
 8004814:	2301      	movs	r3, #1
 8004816:	613b      	str	r3, [r7, #16]
 8004818:	e00c      	b.n	8004834 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d108      	bne.n	8004834 <osEventFlagsNew+0x54>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	68db      	ldr	r3, [r3, #12]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d104      	bne.n	8004834 <osEventFlagsNew+0x54>
          mem = 0;
 800482a:	2300      	movs	r3, #0
 800482c:	613b      	str	r3, [r7, #16]
 800482e:	e001      	b.n	8004834 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8004830:	2300      	movs	r3, #0
 8004832:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	2b01      	cmp	r3, #1
 8004838:	d106      	bne.n	8004848 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	4618      	mov	r0, r3
 8004840:	f000 f9e8 	bl	8004c14 <xEventGroupCreateStatic>
 8004844:	6178      	str	r0, [r7, #20]
 8004846:	e005      	b.n	8004854 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d102      	bne.n	8004854 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 800484e:	f000 fa18 	bl	8004c82 <xEventGroupCreate>
 8004852:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8004854:	697b      	ldr	r3, [r7, #20]
}
 8004856:	4618      	mov	r0, r3
 8004858:	3718      	adds	r7, #24
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
	...

08004860 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8004860:	b580      	push	{r7, lr}
 8004862:	b086      	sub	sp, #24
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d004      	beq.n	800487e <osEventFlagsSet+0x1e>
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800487a:	2b00      	cmp	r3, #0
 800487c:	d003      	beq.n	8004886 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 800487e:	f06f 0303 	mvn.w	r3, #3
 8004882:	617b      	str	r3, [r7, #20]
 8004884:	e028      	b.n	80048d8 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004886:	f3ef 8305 	mrs	r3, IPSR
 800488a:	60fb      	str	r3, [r7, #12]
  return(result);
 800488c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800488e:	2b00      	cmp	r3, #0
 8004890:	d01d      	beq.n	80048ce <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8004892:	2300      	movs	r3, #0
 8004894:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8004896:	f107 0308 	add.w	r3, r7, #8
 800489a:	461a      	mov	r2, r3
 800489c:	6839      	ldr	r1, [r7, #0]
 800489e:	6938      	ldr	r0, [r7, #16]
 80048a0:	f000 fb92 	bl	8004fc8 <xEventGroupSetBitsFromISR>
 80048a4:	4603      	mov	r3, r0
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d103      	bne.n	80048b2 <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 80048aa:	f06f 0302 	mvn.w	r3, #2
 80048ae:	617b      	str	r3, [r7, #20]
 80048b0:	e012      	b.n	80048d8 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d00d      	beq.n	80048d8 <osEventFlagsSet+0x78>
 80048bc:	4b09      	ldr	r3, [pc, #36]	; (80048e4 <osEventFlagsSet+0x84>)
 80048be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048c2:	601a      	str	r2, [r3, #0]
 80048c4:	f3bf 8f4f 	dsb	sy
 80048c8:	f3bf 8f6f 	isb	sy
 80048cc:	e004      	b.n	80048d8 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 80048ce:	6839      	ldr	r1, [r7, #0]
 80048d0:	6938      	ldr	r0, [r7, #16]
 80048d2:	f000 fabf 	bl	8004e54 <xEventGroupSetBits>
 80048d6:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 80048d8:	697b      	ldr	r3, [r7, #20]
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3718      	adds	r7, #24
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}
 80048e2:	bf00      	nop
 80048e4:	e000ed04 	.word	0xe000ed04

080048e8 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b08c      	sub	sp, #48	; 0x30
 80048ec:	af02      	add	r7, sp, #8
 80048ee:	60f8      	str	r0, [r7, #12]
 80048f0:	60b9      	str	r1, [r7, #8]
 80048f2:	607a      	str	r2, [r7, #4]
 80048f4:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80048fa:	69bb      	ldr	r3, [r7, #24]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d004      	beq.n	800490a <osEventFlagsWait+0x22>
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004906:	2b00      	cmp	r3, #0
 8004908:	d003      	beq.n	8004912 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 800490a:	f06f 0303 	mvn.w	r3, #3
 800490e:	61fb      	str	r3, [r7, #28]
 8004910:	e04b      	b.n	80049aa <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004912:	f3ef 8305 	mrs	r3, IPSR
 8004916:	617b      	str	r3, [r7, #20]
  return(result);
 8004918:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800491a:	2b00      	cmp	r3, #0
 800491c:	d003      	beq.n	8004926 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 800491e:	f06f 0305 	mvn.w	r3, #5
 8004922:	61fb      	str	r3, [r7, #28]
 8004924:	e041      	b.n	80049aa <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f003 0301 	and.w	r3, r3, #1
 800492c:	2b00      	cmp	r3, #0
 800492e:	d002      	beq.n	8004936 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 8004930:	2301      	movs	r3, #1
 8004932:	627b      	str	r3, [r7, #36]	; 0x24
 8004934:	e001      	b.n	800493a <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 8004936:	2300      	movs	r3, #0
 8004938:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	f003 0302 	and.w	r3, r3, #2
 8004940:	2b00      	cmp	r3, #0
 8004942:	d002      	beq.n	800494a <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 8004944:	2300      	movs	r3, #0
 8004946:	623b      	str	r3, [r7, #32]
 8004948:	e001      	b.n	800494e <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 800494a:	2301      	movs	r3, #1
 800494c:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	9300      	str	r3, [sp, #0]
 8004952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004954:	6a3a      	ldr	r2, [r7, #32]
 8004956:	68b9      	ldr	r1, [r7, #8]
 8004958:	69b8      	ldr	r0, [r7, #24]
 800495a:	f000 f9ad 	bl	8004cb8 <xEventGroupWaitBits>
 800495e:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f003 0301 	and.w	r3, r3, #1
 8004966:	2b00      	cmp	r3, #0
 8004968:	d010      	beq.n	800498c <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 800496a:	68ba      	ldr	r2, [r7, #8]
 800496c:	69fb      	ldr	r3, [r7, #28]
 800496e:	4013      	ands	r3, r2
 8004970:	68ba      	ldr	r2, [r7, #8]
 8004972:	429a      	cmp	r2, r3
 8004974:	d019      	beq.n	80049aa <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d003      	beq.n	8004984 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 800497c:	f06f 0301 	mvn.w	r3, #1
 8004980:	61fb      	str	r3, [r7, #28]
 8004982:	e012      	b.n	80049aa <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8004984:	f06f 0302 	mvn.w	r3, #2
 8004988:	61fb      	str	r3, [r7, #28]
 800498a:	e00e      	b.n	80049aa <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 800498c:	68ba      	ldr	r2, [r7, #8]
 800498e:	69fb      	ldr	r3, [r7, #28]
 8004990:	4013      	ands	r3, r2
 8004992:	2b00      	cmp	r3, #0
 8004994:	d109      	bne.n	80049aa <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d003      	beq.n	80049a4 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 800499c:	f06f 0301 	mvn.w	r3, #1
 80049a0:	61fb      	str	r3, [r7, #28]
 80049a2:	e002      	b.n	80049aa <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 80049a4:	f06f 0302 	mvn.w	r3, #2
 80049a8:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 80049aa:	69fb      	ldr	r3, [r7, #28]
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	3728      	adds	r7, #40	; 0x28
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}

080049b4 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b08a      	sub	sp, #40	; 0x28
 80049b8:	af02      	add	r7, sp, #8
 80049ba:	60f8      	str	r0, [r7, #12]
 80049bc:	60b9      	str	r1, [r7, #8]
 80049be:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80049c0:	2300      	movs	r3, #0
 80049c2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80049c4:	f3ef 8305 	mrs	r3, IPSR
 80049c8:	613b      	str	r3, [r7, #16]
  return(result);
 80049ca:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d175      	bne.n	8004abc <osSemaphoreNew+0x108>
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d072      	beq.n	8004abc <osSemaphoreNew+0x108>
 80049d6:	68ba      	ldr	r2, [r7, #8]
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	429a      	cmp	r2, r3
 80049dc:	d86e      	bhi.n	8004abc <osSemaphoreNew+0x108>
    mem = -1;
 80049de:	f04f 33ff 	mov.w	r3, #4294967295
 80049e2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d015      	beq.n	8004a16 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d006      	beq.n	8004a00 <osSemaphoreNew+0x4c>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	2b4f      	cmp	r3, #79	; 0x4f
 80049f8:	d902      	bls.n	8004a00 <osSemaphoreNew+0x4c>
        mem = 1;
 80049fa:	2301      	movs	r3, #1
 80049fc:	61bb      	str	r3, [r7, #24]
 80049fe:	e00c      	b.n	8004a1a <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d108      	bne.n	8004a1a <osSemaphoreNew+0x66>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d104      	bne.n	8004a1a <osSemaphoreNew+0x66>
          mem = 0;
 8004a10:	2300      	movs	r3, #0
 8004a12:	61bb      	str	r3, [r7, #24]
 8004a14:	e001      	b.n	8004a1a <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8004a16:	2300      	movs	r3, #0
 8004a18:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8004a1a:	69bb      	ldr	r3, [r7, #24]
 8004a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a20:	d04c      	beq.n	8004abc <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d128      	bne.n	8004a7a <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8004a28:	69bb      	ldr	r3, [r7, #24]
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d10a      	bne.n	8004a44 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	2203      	movs	r2, #3
 8004a34:	9200      	str	r2, [sp, #0]
 8004a36:	2200      	movs	r2, #0
 8004a38:	2100      	movs	r1, #0
 8004a3a:	2001      	movs	r0, #1
 8004a3c:	f000 fbf4 	bl	8005228 <xQueueGenericCreateStatic>
 8004a40:	61f8      	str	r0, [r7, #28]
 8004a42:	e005      	b.n	8004a50 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8004a44:	2203      	movs	r2, #3
 8004a46:	2100      	movs	r1, #0
 8004a48:	2001      	movs	r0, #1
 8004a4a:	f000 fc65 	bl	8005318 <xQueueGenericCreate>
 8004a4e:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8004a50:	69fb      	ldr	r3, [r7, #28]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d022      	beq.n	8004a9c <osSemaphoreNew+0xe8>
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d01f      	beq.n	8004a9c <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	2200      	movs	r2, #0
 8004a60:	2100      	movs	r1, #0
 8004a62:	69f8      	ldr	r0, [r7, #28]
 8004a64:	f000 fd20 	bl	80054a8 <xQueueGenericSend>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d016      	beq.n	8004a9c <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8004a6e:	69f8      	ldr	r0, [r7, #28]
 8004a70:	f000 ff94 	bl	800599c <vQueueDelete>
            hSemaphore = NULL;
 8004a74:	2300      	movs	r3, #0
 8004a76:	61fb      	str	r3, [r7, #28]
 8004a78:	e010      	b.n	8004a9c <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8004a7a:	69bb      	ldr	r3, [r7, #24]
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d108      	bne.n	8004a92 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	461a      	mov	r2, r3
 8004a86:	68b9      	ldr	r1, [r7, #8]
 8004a88:	68f8      	ldr	r0, [r7, #12]
 8004a8a:	f000 fca2 	bl	80053d2 <xQueueCreateCountingSemaphoreStatic>
 8004a8e:	61f8      	str	r0, [r7, #28]
 8004a90:	e004      	b.n	8004a9c <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8004a92:	68b9      	ldr	r1, [r7, #8]
 8004a94:	68f8      	ldr	r0, [r7, #12]
 8004a96:	f000 fcd3 	bl	8005440 <xQueueCreateCountingSemaphore>
 8004a9a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8004a9c:	69fb      	ldr	r3, [r7, #28]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d00c      	beq.n	8004abc <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d003      	beq.n	8004ab0 <osSemaphoreNew+0xfc>
          name = attr->name;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	617b      	str	r3, [r7, #20]
 8004aae:	e001      	b.n	8004ab4 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8004ab4:	6979      	ldr	r1, [r7, #20]
 8004ab6:	69f8      	ldr	r0, [r7, #28]
 8004ab8:	f001 f8a4 	bl	8005c04 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8004abc:	69fb      	ldr	r3, [r7, #28]
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3720      	adds	r7, #32
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}

08004ac6 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8004ac6:	b580      	push	{r7, lr}
 8004ac8:	b08a      	sub	sp, #40	; 0x28
 8004aca:	af02      	add	r7, sp, #8
 8004acc:	60f8      	str	r0, [r7, #12]
 8004ace:	60b9      	str	r1, [r7, #8]
 8004ad0:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ad6:	f3ef 8305 	mrs	r3, IPSR
 8004ada:	613b      	str	r3, [r7, #16]
  return(result);
 8004adc:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d15f      	bne.n	8004ba2 <osMessageQueueNew+0xdc>
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d05c      	beq.n	8004ba2 <osMessageQueueNew+0xdc>
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d059      	beq.n	8004ba2 <osMessageQueueNew+0xdc>
    mem = -1;
 8004aee:	f04f 33ff 	mov.w	r3, #4294967295
 8004af2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d029      	beq.n	8004b4e <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d012      	beq.n	8004b28 <osMessageQueueNew+0x62>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	68db      	ldr	r3, [r3, #12]
 8004b06:	2b4f      	cmp	r3, #79	; 0x4f
 8004b08:	d90e      	bls.n	8004b28 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d00a      	beq.n	8004b28 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	695a      	ldr	r2, [r3, #20]
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	68b9      	ldr	r1, [r7, #8]
 8004b1a:	fb01 f303 	mul.w	r3, r1, r3
 8004b1e:	429a      	cmp	r2, r3
 8004b20:	d302      	bcc.n	8004b28 <osMessageQueueNew+0x62>
        mem = 1;
 8004b22:	2301      	movs	r3, #1
 8004b24:	61bb      	str	r3, [r7, #24]
 8004b26:	e014      	b.n	8004b52 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d110      	bne.n	8004b52 <osMessageQueueNew+0x8c>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d10c      	bne.n	8004b52 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d108      	bne.n	8004b52 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	695b      	ldr	r3, [r3, #20]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d104      	bne.n	8004b52 <osMessageQueueNew+0x8c>
          mem = 0;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	61bb      	str	r3, [r7, #24]
 8004b4c:	e001      	b.n	8004b52 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004b52:	69bb      	ldr	r3, [r7, #24]
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d10b      	bne.n	8004b70 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	691a      	ldr	r2, [r3, #16]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	2100      	movs	r1, #0
 8004b62:	9100      	str	r1, [sp, #0]
 8004b64:	68b9      	ldr	r1, [r7, #8]
 8004b66:	68f8      	ldr	r0, [r7, #12]
 8004b68:	f000 fb5e 	bl	8005228 <xQueueGenericCreateStatic>
 8004b6c:	61f8      	str	r0, [r7, #28]
 8004b6e:	e008      	b.n	8004b82 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8004b70:	69bb      	ldr	r3, [r7, #24]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d105      	bne.n	8004b82 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8004b76:	2200      	movs	r2, #0
 8004b78:	68b9      	ldr	r1, [r7, #8]
 8004b7a:	68f8      	ldr	r0, [r7, #12]
 8004b7c:	f000 fbcc 	bl	8005318 <xQueueGenericCreate>
 8004b80:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8004b82:	69fb      	ldr	r3, [r7, #28]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d00c      	beq.n	8004ba2 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d003      	beq.n	8004b96 <osMessageQueueNew+0xd0>
        name = attr->name;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	617b      	str	r3, [r7, #20]
 8004b94:	e001      	b.n	8004b9a <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8004b96:	2300      	movs	r3, #0
 8004b98:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8004b9a:	6979      	ldr	r1, [r7, #20]
 8004b9c:	69f8      	ldr	r0, [r7, #28]
 8004b9e:	f001 f831 	bl	8005c04 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8004ba2:	69fb      	ldr	r3, [r7, #28]
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3720      	adds	r7, #32
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}

08004bac <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004bac:	b480      	push	{r7}
 8004bae:	b085      	sub	sp, #20
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	60f8      	str	r0, [r7, #12]
 8004bb4:	60b9      	str	r1, [r7, #8]
 8004bb6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	4a07      	ldr	r2, [pc, #28]	; (8004bd8 <vApplicationGetIdleTaskMemory+0x2c>)
 8004bbc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	4a06      	ldr	r2, [pc, #24]	; (8004bdc <vApplicationGetIdleTaskMemory+0x30>)
 8004bc2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2280      	movs	r2, #128	; 0x80
 8004bc8:	601a      	str	r2, [r3, #0]
}
 8004bca:	bf00      	nop
 8004bcc:	3714      	adds	r7, #20
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr
 8004bd6:	bf00      	nop
 8004bd8:	200004ac 	.word	0x200004ac
 8004bdc:	20000568 	.word	0x20000568

08004be0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004be0:	b480      	push	{r7}
 8004be2:	b085      	sub	sp, #20
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	60f8      	str	r0, [r7, #12]
 8004be8:	60b9      	str	r1, [r7, #8]
 8004bea:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	4a07      	ldr	r2, [pc, #28]	; (8004c0c <vApplicationGetTimerTaskMemory+0x2c>)
 8004bf0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	4a06      	ldr	r2, [pc, #24]	; (8004c10 <vApplicationGetTimerTaskMemory+0x30>)
 8004bf6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004bfe:	601a      	str	r2, [r3, #0]
}
 8004c00:	bf00      	nop
 8004c02:	3714      	adds	r7, #20
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr
 8004c0c:	20000768 	.word	0x20000768
 8004c10:	20000824 	.word	0x20000824

08004c14 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b086      	sub	sp, #24
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d10a      	bne.n	8004c38 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c26:	f383 8811 	msr	BASEPRI, r3
 8004c2a:	f3bf 8f6f 	isb	sy
 8004c2e:	f3bf 8f4f 	dsb	sy
 8004c32:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004c34:	bf00      	nop
 8004c36:	e7fe      	b.n	8004c36 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8004c38:	2320      	movs	r3, #32
 8004c3a:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	2b20      	cmp	r3, #32
 8004c40:	d00a      	beq.n	8004c58 <xEventGroupCreateStatic+0x44>
	__asm volatile
 8004c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c46:	f383 8811 	msr	BASEPRI, r3
 8004c4a:	f3bf 8f6f 	isb	sy
 8004c4e:	f3bf 8f4f 	dsb	sy
 8004c52:	60fb      	str	r3, [r7, #12]
}
 8004c54:	bf00      	nop
 8004c56:	e7fe      	b.n	8004c56 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d00a      	beq.n	8004c78 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	2200      	movs	r2, #0
 8004c66:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	3304      	adds	r3, #4
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f000 f9bf 	bl	8004ff0 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	2201      	movs	r2, #1
 8004c76:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8004c78:	697b      	ldr	r3, [r7, #20]
	}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3718      	adds	r7, #24
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}

08004c82 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8004c82:	b580      	push	{r7, lr}
 8004c84:	b082      	sub	sp, #8
 8004c86:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8004c88:	2020      	movs	r0, #32
 8004c8a:	f002 fe95 	bl	80079b8 <pvPortMalloc>
 8004c8e:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d00a      	beq.n	8004cac <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	3304      	adds	r3, #4
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f000 f9a5 	bl	8004ff0 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8004cac:	687b      	ldr	r3, [r7, #4]
	}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3708      	adds	r7, #8
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}
	...

08004cb8 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b090      	sub	sp, #64	; 0x40
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	60f8      	str	r0, [r7, #12]
 8004cc0:	60b9      	str	r1, [r7, #8]
 8004cc2:	607a      	str	r2, [r7, #4]
 8004cc4:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d10a      	bne.n	8004cee <xEventGroupWaitBits+0x36>
	__asm volatile
 8004cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cdc:	f383 8811 	msr	BASEPRI, r3
 8004ce0:	f3bf 8f6f 	isb	sy
 8004ce4:	f3bf 8f4f 	dsb	sy
 8004ce8:	623b      	str	r3, [r7, #32]
}
 8004cea:	bf00      	nop
 8004cec:	e7fe      	b.n	8004cec <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d00a      	beq.n	8004d0e <xEventGroupWaitBits+0x56>
	__asm volatile
 8004cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cfc:	f383 8811 	msr	BASEPRI, r3
 8004d00:	f3bf 8f6f 	isb	sy
 8004d04:	f3bf 8f4f 	dsb	sy
 8004d08:	61fb      	str	r3, [r7, #28]
}
 8004d0a:	bf00      	nop
 8004d0c:	e7fe      	b.n	8004d0c <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d10a      	bne.n	8004d2a <xEventGroupWaitBits+0x72>
	__asm volatile
 8004d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d18:	f383 8811 	msr	BASEPRI, r3
 8004d1c:	f3bf 8f6f 	isb	sy
 8004d20:	f3bf 8f4f 	dsb	sy
 8004d24:	61bb      	str	r3, [r7, #24]
}
 8004d26:	bf00      	nop
 8004d28:	e7fe      	b.n	8004d28 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004d2a:	f001 fed9 	bl	8006ae0 <xTaskGetSchedulerState>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d102      	bne.n	8004d3a <xEventGroupWaitBits+0x82>
 8004d34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d101      	bne.n	8004d3e <xEventGroupWaitBits+0x86>
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e000      	b.n	8004d40 <xEventGroupWaitBits+0x88>
 8004d3e:	2300      	movs	r3, #0
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d10a      	bne.n	8004d5a <xEventGroupWaitBits+0xa2>
	__asm volatile
 8004d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d48:	f383 8811 	msr	BASEPRI, r3
 8004d4c:	f3bf 8f6f 	isb	sy
 8004d50:	f3bf 8f4f 	dsb	sy
 8004d54:	617b      	str	r3, [r7, #20]
}
 8004d56:	bf00      	nop
 8004d58:	e7fe      	b.n	8004d58 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8004d5a:	f001 fa37 	bl	80061cc <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8004d5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8004d64:	683a      	ldr	r2, [r7, #0]
 8004d66:	68b9      	ldr	r1, [r7, #8]
 8004d68:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004d6a:	f000 f90b 	bl	8004f84 <prvTestWaitCondition>
 8004d6e:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8004d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d00e      	beq.n	8004d94 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8004d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d78:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d028      	beq.n	8004dd6 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8004d84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	43db      	mvns	r3, r3
 8004d8c:	401a      	ands	r2, r3
 8004d8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d90:	601a      	str	r2, [r3, #0]
 8004d92:	e020      	b.n	8004dd6 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8004d94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d104      	bne.n	8004da4 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8004d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d9c:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	633b      	str	r3, [r7, #48]	; 0x30
 8004da2:	e018      	b.n	8004dd6 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d003      	beq.n	8004db2 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8004daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004db0:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d003      	beq.n	8004dc0 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8004db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004dbe:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8004dc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dc2:	1d18      	adds	r0, r3, #4
 8004dc4:	68ba      	ldr	r2, [r7, #8]
 8004dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004dcc:	4619      	mov	r1, r3
 8004dce:	f001 fbfb 	bl	80065c8 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8004dd6:	f001 fa07 	bl	80061e8 <xTaskResumeAll>
 8004dda:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8004ddc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d031      	beq.n	8004e46 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8004de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d107      	bne.n	8004df8 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8004de8:	4b19      	ldr	r3, [pc, #100]	; (8004e50 <xEventGroupWaitBits+0x198>)
 8004dea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dee:	601a      	str	r2, [r3, #0]
 8004df0:	f3bf 8f4f 	dsb	sy
 8004df4:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8004df8:	f001 fefe 	bl	8006bf8 <uxTaskResetEventItemValue>
 8004dfc:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8004dfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d11a      	bne.n	8004e3e <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8004e08:	f002 fcb4 	bl	8007774 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8004e0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8004e12:	683a      	ldr	r2, [r7, #0]
 8004e14:	68b9      	ldr	r1, [r7, #8]
 8004e16:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004e18:	f000 f8b4 	bl	8004f84 <prvTestWaitCondition>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d009      	beq.n	8004e36 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d006      	beq.n	8004e36 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8004e28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	43db      	mvns	r3, r3
 8004e30:	401a      	ands	r2, r3
 8004e32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e34:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8004e36:	2301      	movs	r3, #1
 8004e38:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8004e3a:	f002 fccb 	bl	80077d4 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8004e3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e40:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004e44:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8004e46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	3740      	adds	r7, #64	; 0x40
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}
 8004e50:	e000ed04 	.word	0xe000ed04

08004e54 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b08e      	sub	sp, #56	; 0x38
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8004e66:	2300      	movs	r3, #0
 8004e68:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d10a      	bne.n	8004e86 <xEventGroupSetBits+0x32>
	__asm volatile
 8004e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e74:	f383 8811 	msr	BASEPRI, r3
 8004e78:	f3bf 8f6f 	isb	sy
 8004e7c:	f3bf 8f4f 	dsb	sy
 8004e80:	613b      	str	r3, [r7, #16]
}
 8004e82:	bf00      	nop
 8004e84:	e7fe      	b.n	8004e84 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d00a      	beq.n	8004ea6 <xEventGroupSetBits+0x52>
	__asm volatile
 8004e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e94:	f383 8811 	msr	BASEPRI, r3
 8004e98:	f3bf 8f6f 	isb	sy
 8004e9c:	f3bf 8f4f 	dsb	sy
 8004ea0:	60fb      	str	r3, [r7, #12]
}
 8004ea2:	bf00      	nop
 8004ea4:	e7fe      	b.n	8004ea4 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8004ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ea8:	3304      	adds	r3, #4
 8004eaa:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eae:	3308      	adds	r3, #8
 8004eb0:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8004eb2:	f001 f98b 	bl	80061cc <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8004eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb8:	68db      	ldr	r3, [r3, #12]
 8004eba:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8004ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	431a      	orrs	r2, r3
 8004ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ec6:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8004ec8:	e03c      	b.n	8004f44 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8004eca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8004ed0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8004eda:	69bb      	ldr	r3, [r7, #24]
 8004edc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004ee0:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8004ee2:	69bb      	ldr	r3, [r7, #24]
 8004ee4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004ee8:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d108      	bne.n	8004f06 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8004ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	69bb      	ldr	r3, [r7, #24]
 8004efa:	4013      	ands	r3, r2
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d00b      	beq.n	8004f18 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8004f00:	2301      	movs	r3, #1
 8004f02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f04:	e008      	b.n	8004f18 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8004f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	69bb      	ldr	r3, [r7, #24]
 8004f0c:	4013      	ands	r3, r2
 8004f0e:	69ba      	ldr	r2, [r7, #24]
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d101      	bne.n	8004f18 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8004f14:	2301      	movs	r3, #1
 8004f16:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8004f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d010      	beq.n	8004f40 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d003      	beq.n	8004f30 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8004f28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f2a:	69bb      	ldr	r3, [r7, #24]
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8004f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004f38:	4619      	mov	r1, r3
 8004f3a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004f3c:	f001 fc10 	bl	8006760 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8004f40:	69fb      	ldr	r3, [r7, #28]
 8004f42:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8004f44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f46:	6a3b      	ldr	r3, [r7, #32]
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d1be      	bne.n	8004eca <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8004f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f52:	43db      	mvns	r3, r3
 8004f54:	401a      	ands	r2, r3
 8004f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f58:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8004f5a:	f001 f945 	bl	80061e8 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8004f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f60:	681b      	ldr	r3, [r3, #0]
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	3738      	adds	r7, #56	; 0x38
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}

08004f6a <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8004f6a:	b580      	push	{r7, lr}
 8004f6c:	b082      	sub	sp, #8
 8004f6e:	af00      	add	r7, sp, #0
 8004f70:	6078      	str	r0, [r7, #4]
 8004f72:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8004f74:	6839      	ldr	r1, [r7, #0]
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f7ff ff6c 	bl	8004e54 <xEventGroupSetBits>
}
 8004f7c:	bf00      	nop
 8004f7e:	3708      	adds	r7, #8
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}

08004f84 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8004f84:	b480      	push	{r7}
 8004f86:	b087      	sub	sp, #28
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	60f8      	str	r0, [r7, #12]
 8004f8c:	60b9      	str	r1, [r7, #8]
 8004f8e:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8004f90:	2300      	movs	r3, #0
 8004f92:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d107      	bne.n	8004faa <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8004f9a:	68fa      	ldr	r2, [r7, #12]
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	4013      	ands	r3, r2
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d00a      	beq.n	8004fba <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	617b      	str	r3, [r7, #20]
 8004fa8:	e007      	b.n	8004fba <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8004faa:	68fa      	ldr	r2, [r7, #12]
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	4013      	ands	r3, r2
 8004fb0:	68ba      	ldr	r2, [r7, #8]
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	d101      	bne.n	8004fba <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8004fba:	697b      	ldr	r3, [r7, #20]
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	371c      	adds	r7, #28
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc6:	4770      	bx	lr

08004fc8 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b086      	sub	sp, #24
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	60f8      	str	r0, [r7, #12]
 8004fd0:	60b9      	str	r1, [r7, #8]
 8004fd2:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	68ba      	ldr	r2, [r7, #8]
 8004fd8:	68f9      	ldr	r1, [r7, #12]
 8004fda:	4804      	ldr	r0, [pc, #16]	; (8004fec <xEventGroupSetBitsFromISR+0x24>)
 8004fdc:	f002 fa80 	bl	80074e0 <xTimerPendFunctionCallFromISR>
 8004fe0:	6178      	str	r0, [r7, #20]

		return xReturn;
 8004fe2:	697b      	ldr	r3, [r7, #20]
	}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	3718      	adds	r7, #24
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}
 8004fec:	08004f6b 	.word	0x08004f6b

08004ff0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b083      	sub	sp, #12
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	f103 0208 	add.w	r2, r3, #8
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	f04f 32ff 	mov.w	r2, #4294967295
 8005008:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f103 0208 	add.w	r2, r3, #8
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f103 0208 	add.w	r2, r3, #8
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2200      	movs	r2, #0
 8005022:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005024:	bf00      	nop
 8005026:	370c      	adds	r7, #12
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr

08005030 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005030:	b480      	push	{r7}
 8005032:	b083      	sub	sp, #12
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2200      	movs	r2, #0
 800503c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800503e:	bf00      	nop
 8005040:	370c      	adds	r7, #12
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr

0800504a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800504a:	b480      	push	{r7}
 800504c:	b085      	sub	sp, #20
 800504e:	af00      	add	r7, sp, #0
 8005050:	6078      	str	r0, [r7, #4]
 8005052:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	68fa      	ldr	r2, [r7, #12]
 800505e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	689a      	ldr	r2, [r3, #8]
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	683a      	ldr	r2, [r7, #0]
 800506e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	683a      	ldr	r2, [r7, #0]
 8005074:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	687a      	ldr	r2, [r7, #4]
 800507a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	1c5a      	adds	r2, r3, #1
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	601a      	str	r2, [r3, #0]
}
 8005086:	bf00      	nop
 8005088:	3714      	adds	r7, #20
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr

08005092 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005092:	b480      	push	{r7}
 8005094:	b085      	sub	sp, #20
 8005096:	af00      	add	r7, sp, #0
 8005098:	6078      	str	r0, [r7, #4]
 800509a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050a8:	d103      	bne.n	80050b2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	691b      	ldr	r3, [r3, #16]
 80050ae:	60fb      	str	r3, [r7, #12]
 80050b0:	e00c      	b.n	80050cc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	3308      	adds	r3, #8
 80050b6:	60fb      	str	r3, [r7, #12]
 80050b8:	e002      	b.n	80050c0 <vListInsert+0x2e>
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	60fb      	str	r3, [r7, #12]
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	68ba      	ldr	r2, [r7, #8]
 80050c8:	429a      	cmp	r2, r3
 80050ca:	d2f6      	bcs.n	80050ba <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	685a      	ldr	r2, [r3, #4]
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	683a      	ldr	r2, [r7, #0]
 80050da:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	68fa      	ldr	r2, [r7, #12]
 80050e0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	683a      	ldr	r2, [r7, #0]
 80050e6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	687a      	ldr	r2, [r7, #4]
 80050ec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	1c5a      	adds	r2, r3, #1
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	601a      	str	r2, [r3, #0]
}
 80050f8:	bf00      	nop
 80050fa:	3714      	adds	r7, #20
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr

08005104 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005104:	b480      	push	{r7}
 8005106:	b085      	sub	sp, #20
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	691b      	ldr	r3, [r3, #16]
 8005110:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	687a      	ldr	r2, [r7, #4]
 8005118:	6892      	ldr	r2, [r2, #8]
 800511a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	687a      	ldr	r2, [r7, #4]
 8005122:	6852      	ldr	r2, [r2, #4]
 8005124:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	687a      	ldr	r2, [r7, #4]
 800512c:	429a      	cmp	r2, r3
 800512e:	d103      	bne.n	8005138 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	689a      	ldr	r2, [r3, #8]
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2200      	movs	r2, #0
 800513c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	1e5a      	subs	r2, r3, #1
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
}
 800514c:	4618      	mov	r0, r3
 800514e:	3714      	adds	r7, #20
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr

08005158 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b084      	sub	sp, #16
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d10a      	bne.n	8005182 <xQueueGenericReset+0x2a>
	__asm volatile
 800516c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005170:	f383 8811 	msr	BASEPRI, r3
 8005174:	f3bf 8f6f 	isb	sy
 8005178:	f3bf 8f4f 	dsb	sy
 800517c:	60bb      	str	r3, [r7, #8]
}
 800517e:	bf00      	nop
 8005180:	e7fe      	b.n	8005180 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005182:	f002 faf7 	bl	8007774 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800518e:	68f9      	ldr	r1, [r7, #12]
 8005190:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005192:	fb01 f303 	mul.w	r3, r1, r3
 8005196:	441a      	add	r2, r3
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2200      	movs	r2, #0
 80051a0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051b2:	3b01      	subs	r3, #1
 80051b4:	68f9      	ldr	r1, [r7, #12]
 80051b6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80051b8:	fb01 f303 	mul.w	r3, r1, r3
 80051bc:	441a      	add	r2, r3
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	22ff      	movs	r2, #255	; 0xff
 80051c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	22ff      	movs	r2, #255	; 0xff
 80051ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d114      	bne.n	8005202 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	691b      	ldr	r3, [r3, #16]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d01a      	beq.n	8005216 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	3310      	adds	r3, #16
 80051e4:	4618      	mov	r0, r3
 80051e6:	f001 fa57 	bl	8006698 <xTaskRemoveFromEventList>
 80051ea:	4603      	mov	r3, r0
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d012      	beq.n	8005216 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80051f0:	4b0c      	ldr	r3, [pc, #48]	; (8005224 <xQueueGenericReset+0xcc>)
 80051f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051f6:	601a      	str	r2, [r3, #0]
 80051f8:	f3bf 8f4f 	dsb	sy
 80051fc:	f3bf 8f6f 	isb	sy
 8005200:	e009      	b.n	8005216 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	3310      	adds	r3, #16
 8005206:	4618      	mov	r0, r3
 8005208:	f7ff fef2 	bl	8004ff0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	3324      	adds	r3, #36	; 0x24
 8005210:	4618      	mov	r0, r3
 8005212:	f7ff feed 	bl	8004ff0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005216:	f002 fadd 	bl	80077d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800521a:	2301      	movs	r3, #1
}
 800521c:	4618      	mov	r0, r3
 800521e:	3710      	adds	r7, #16
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}
 8005224:	e000ed04 	.word	0xe000ed04

08005228 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005228:	b580      	push	{r7, lr}
 800522a:	b08e      	sub	sp, #56	; 0x38
 800522c:	af02      	add	r7, sp, #8
 800522e:	60f8      	str	r0, [r7, #12]
 8005230:	60b9      	str	r1, [r7, #8]
 8005232:	607a      	str	r2, [r7, #4]
 8005234:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d10a      	bne.n	8005252 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800523c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005240:	f383 8811 	msr	BASEPRI, r3
 8005244:	f3bf 8f6f 	isb	sy
 8005248:	f3bf 8f4f 	dsb	sy
 800524c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800524e:	bf00      	nop
 8005250:	e7fe      	b.n	8005250 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d10a      	bne.n	800526e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800525c:	f383 8811 	msr	BASEPRI, r3
 8005260:	f3bf 8f6f 	isb	sy
 8005264:	f3bf 8f4f 	dsb	sy
 8005268:	627b      	str	r3, [r7, #36]	; 0x24
}
 800526a:	bf00      	nop
 800526c:	e7fe      	b.n	800526c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d002      	beq.n	800527a <xQueueGenericCreateStatic+0x52>
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d001      	beq.n	800527e <xQueueGenericCreateStatic+0x56>
 800527a:	2301      	movs	r3, #1
 800527c:	e000      	b.n	8005280 <xQueueGenericCreateStatic+0x58>
 800527e:	2300      	movs	r3, #0
 8005280:	2b00      	cmp	r3, #0
 8005282:	d10a      	bne.n	800529a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005288:	f383 8811 	msr	BASEPRI, r3
 800528c:	f3bf 8f6f 	isb	sy
 8005290:	f3bf 8f4f 	dsb	sy
 8005294:	623b      	str	r3, [r7, #32]
}
 8005296:	bf00      	nop
 8005298:	e7fe      	b.n	8005298 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d102      	bne.n	80052a6 <xQueueGenericCreateStatic+0x7e>
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d101      	bne.n	80052aa <xQueueGenericCreateStatic+0x82>
 80052a6:	2301      	movs	r3, #1
 80052a8:	e000      	b.n	80052ac <xQueueGenericCreateStatic+0x84>
 80052aa:	2300      	movs	r3, #0
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d10a      	bne.n	80052c6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80052b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052b4:	f383 8811 	msr	BASEPRI, r3
 80052b8:	f3bf 8f6f 	isb	sy
 80052bc:	f3bf 8f4f 	dsb	sy
 80052c0:	61fb      	str	r3, [r7, #28]
}
 80052c2:	bf00      	nop
 80052c4:	e7fe      	b.n	80052c4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80052c6:	2350      	movs	r3, #80	; 0x50
 80052c8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	2b50      	cmp	r3, #80	; 0x50
 80052ce:	d00a      	beq.n	80052e6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80052d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052d4:	f383 8811 	msr	BASEPRI, r3
 80052d8:	f3bf 8f6f 	isb	sy
 80052dc:	f3bf 8f4f 	dsb	sy
 80052e0:	61bb      	str	r3, [r7, #24]
}
 80052e2:	bf00      	nop
 80052e4:	e7fe      	b.n	80052e4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80052e6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80052ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d00d      	beq.n	800530e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80052f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052f4:	2201      	movs	r2, #1
 80052f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80052fa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80052fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005300:	9300      	str	r3, [sp, #0]
 8005302:	4613      	mov	r3, r2
 8005304:	687a      	ldr	r2, [r7, #4]
 8005306:	68b9      	ldr	r1, [r7, #8]
 8005308:	68f8      	ldr	r0, [r7, #12]
 800530a:	f000 f83f 	bl	800538c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800530e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005310:	4618      	mov	r0, r3
 8005312:	3730      	adds	r7, #48	; 0x30
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}

08005318 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005318:	b580      	push	{r7, lr}
 800531a:	b08a      	sub	sp, #40	; 0x28
 800531c:	af02      	add	r7, sp, #8
 800531e:	60f8      	str	r0, [r7, #12]
 8005320:	60b9      	str	r1, [r7, #8]
 8005322:	4613      	mov	r3, r2
 8005324:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d10a      	bne.n	8005342 <xQueueGenericCreate+0x2a>
	__asm volatile
 800532c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005330:	f383 8811 	msr	BASEPRI, r3
 8005334:	f3bf 8f6f 	isb	sy
 8005338:	f3bf 8f4f 	dsb	sy
 800533c:	613b      	str	r3, [r7, #16]
}
 800533e:	bf00      	nop
 8005340:	e7fe      	b.n	8005340 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	68ba      	ldr	r2, [r7, #8]
 8005346:	fb02 f303 	mul.w	r3, r2, r3
 800534a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800534c:	69fb      	ldr	r3, [r7, #28]
 800534e:	3350      	adds	r3, #80	; 0x50
 8005350:	4618      	mov	r0, r3
 8005352:	f002 fb31 	bl	80079b8 <pvPortMalloc>
 8005356:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005358:	69bb      	ldr	r3, [r7, #24]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d011      	beq.n	8005382 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800535e:	69bb      	ldr	r3, [r7, #24]
 8005360:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	3350      	adds	r3, #80	; 0x50
 8005366:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005368:	69bb      	ldr	r3, [r7, #24]
 800536a:	2200      	movs	r2, #0
 800536c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005370:	79fa      	ldrb	r2, [r7, #7]
 8005372:	69bb      	ldr	r3, [r7, #24]
 8005374:	9300      	str	r3, [sp, #0]
 8005376:	4613      	mov	r3, r2
 8005378:	697a      	ldr	r2, [r7, #20]
 800537a:	68b9      	ldr	r1, [r7, #8]
 800537c:	68f8      	ldr	r0, [r7, #12]
 800537e:	f000 f805 	bl	800538c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005382:	69bb      	ldr	r3, [r7, #24]
	}
 8005384:	4618      	mov	r0, r3
 8005386:	3720      	adds	r7, #32
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}

0800538c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b084      	sub	sp, #16
 8005390:	af00      	add	r7, sp, #0
 8005392:	60f8      	str	r0, [r7, #12]
 8005394:	60b9      	str	r1, [r7, #8]
 8005396:	607a      	str	r2, [r7, #4]
 8005398:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d103      	bne.n	80053a8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80053a0:	69bb      	ldr	r3, [r7, #24]
 80053a2:	69ba      	ldr	r2, [r7, #24]
 80053a4:	601a      	str	r2, [r3, #0]
 80053a6:	e002      	b.n	80053ae <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80053a8:	69bb      	ldr	r3, [r7, #24]
 80053aa:	687a      	ldr	r2, [r7, #4]
 80053ac:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80053ae:	69bb      	ldr	r3, [r7, #24]
 80053b0:	68fa      	ldr	r2, [r7, #12]
 80053b2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80053b4:	69bb      	ldr	r3, [r7, #24]
 80053b6:	68ba      	ldr	r2, [r7, #8]
 80053b8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80053ba:	2101      	movs	r1, #1
 80053bc:	69b8      	ldr	r0, [r7, #24]
 80053be:	f7ff fecb 	bl	8005158 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80053c2:	69bb      	ldr	r3, [r7, #24]
 80053c4:	78fa      	ldrb	r2, [r7, #3]
 80053c6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80053ca:	bf00      	nop
 80053cc:	3710      	adds	r7, #16
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}

080053d2 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80053d2:	b580      	push	{r7, lr}
 80053d4:	b08a      	sub	sp, #40	; 0x28
 80053d6:	af02      	add	r7, sp, #8
 80053d8:	60f8      	str	r0, [r7, #12]
 80053da:	60b9      	str	r1, [r7, #8]
 80053dc:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d10a      	bne.n	80053fa <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 80053e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053e8:	f383 8811 	msr	BASEPRI, r3
 80053ec:	f3bf 8f6f 	isb	sy
 80053f0:	f3bf 8f4f 	dsb	sy
 80053f4:	61bb      	str	r3, [r7, #24]
}
 80053f6:	bf00      	nop
 80053f8:	e7fe      	b.n	80053f8 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80053fa:	68ba      	ldr	r2, [r7, #8]
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	429a      	cmp	r2, r3
 8005400:	d90a      	bls.n	8005418 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8005402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005406:	f383 8811 	msr	BASEPRI, r3
 800540a:	f3bf 8f6f 	isb	sy
 800540e:	f3bf 8f4f 	dsb	sy
 8005412:	617b      	str	r3, [r7, #20]
}
 8005414:	bf00      	nop
 8005416:	e7fe      	b.n	8005416 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005418:	2302      	movs	r3, #2
 800541a:	9300      	str	r3, [sp, #0]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2200      	movs	r2, #0
 8005420:	2100      	movs	r1, #0
 8005422:	68f8      	ldr	r0, [r7, #12]
 8005424:	f7ff ff00 	bl	8005228 <xQueueGenericCreateStatic>
 8005428:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800542a:	69fb      	ldr	r3, [r7, #28]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d002      	beq.n	8005436 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005430:	69fb      	ldr	r3, [r7, #28]
 8005432:	68ba      	ldr	r2, [r7, #8]
 8005434:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005436:	69fb      	ldr	r3, [r7, #28]
	}
 8005438:	4618      	mov	r0, r3
 800543a:	3720      	adds	r7, #32
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}

08005440 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8005440:	b580      	push	{r7, lr}
 8005442:	b086      	sub	sp, #24
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
 8005448:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d10a      	bne.n	8005466 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8005450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005454:	f383 8811 	msr	BASEPRI, r3
 8005458:	f3bf 8f6f 	isb	sy
 800545c:	f3bf 8f4f 	dsb	sy
 8005460:	613b      	str	r3, [r7, #16]
}
 8005462:	bf00      	nop
 8005464:	e7fe      	b.n	8005464 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005466:	683a      	ldr	r2, [r7, #0]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	429a      	cmp	r2, r3
 800546c:	d90a      	bls.n	8005484 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800546e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005472:	f383 8811 	msr	BASEPRI, r3
 8005476:	f3bf 8f6f 	isb	sy
 800547a:	f3bf 8f4f 	dsb	sy
 800547e:	60fb      	str	r3, [r7, #12]
}
 8005480:	bf00      	nop
 8005482:	e7fe      	b.n	8005482 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005484:	2202      	movs	r2, #2
 8005486:	2100      	movs	r1, #0
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	f7ff ff45 	bl	8005318 <xQueueGenericCreate>
 800548e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d002      	beq.n	800549c <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	683a      	ldr	r2, [r7, #0]
 800549a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800549c:	697b      	ldr	r3, [r7, #20]
	}
 800549e:	4618      	mov	r0, r3
 80054a0:	3718      	adds	r7, #24
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}
	...

080054a8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b08e      	sub	sp, #56	; 0x38
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	60f8      	str	r0, [r7, #12]
 80054b0:	60b9      	str	r1, [r7, #8]
 80054b2:	607a      	str	r2, [r7, #4]
 80054b4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80054b6:	2300      	movs	r3, #0
 80054b8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80054be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d10a      	bne.n	80054da <xQueueGenericSend+0x32>
	__asm volatile
 80054c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054c8:	f383 8811 	msr	BASEPRI, r3
 80054cc:	f3bf 8f6f 	isb	sy
 80054d0:	f3bf 8f4f 	dsb	sy
 80054d4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80054d6:	bf00      	nop
 80054d8:	e7fe      	b.n	80054d8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d103      	bne.n	80054e8 <xQueueGenericSend+0x40>
 80054e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d101      	bne.n	80054ec <xQueueGenericSend+0x44>
 80054e8:	2301      	movs	r3, #1
 80054ea:	e000      	b.n	80054ee <xQueueGenericSend+0x46>
 80054ec:	2300      	movs	r3, #0
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d10a      	bne.n	8005508 <xQueueGenericSend+0x60>
	__asm volatile
 80054f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054f6:	f383 8811 	msr	BASEPRI, r3
 80054fa:	f3bf 8f6f 	isb	sy
 80054fe:	f3bf 8f4f 	dsb	sy
 8005502:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005504:	bf00      	nop
 8005506:	e7fe      	b.n	8005506 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	2b02      	cmp	r3, #2
 800550c:	d103      	bne.n	8005516 <xQueueGenericSend+0x6e>
 800550e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005512:	2b01      	cmp	r3, #1
 8005514:	d101      	bne.n	800551a <xQueueGenericSend+0x72>
 8005516:	2301      	movs	r3, #1
 8005518:	e000      	b.n	800551c <xQueueGenericSend+0x74>
 800551a:	2300      	movs	r3, #0
 800551c:	2b00      	cmp	r3, #0
 800551e:	d10a      	bne.n	8005536 <xQueueGenericSend+0x8e>
	__asm volatile
 8005520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005524:	f383 8811 	msr	BASEPRI, r3
 8005528:	f3bf 8f6f 	isb	sy
 800552c:	f3bf 8f4f 	dsb	sy
 8005530:	623b      	str	r3, [r7, #32]
}
 8005532:	bf00      	nop
 8005534:	e7fe      	b.n	8005534 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005536:	f001 fad3 	bl	8006ae0 <xTaskGetSchedulerState>
 800553a:	4603      	mov	r3, r0
 800553c:	2b00      	cmp	r3, #0
 800553e:	d102      	bne.n	8005546 <xQueueGenericSend+0x9e>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d101      	bne.n	800554a <xQueueGenericSend+0xa2>
 8005546:	2301      	movs	r3, #1
 8005548:	e000      	b.n	800554c <xQueueGenericSend+0xa4>
 800554a:	2300      	movs	r3, #0
 800554c:	2b00      	cmp	r3, #0
 800554e:	d10a      	bne.n	8005566 <xQueueGenericSend+0xbe>
	__asm volatile
 8005550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005554:	f383 8811 	msr	BASEPRI, r3
 8005558:	f3bf 8f6f 	isb	sy
 800555c:	f3bf 8f4f 	dsb	sy
 8005560:	61fb      	str	r3, [r7, #28]
}
 8005562:	bf00      	nop
 8005564:	e7fe      	b.n	8005564 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005566:	f002 f905 	bl	8007774 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800556a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800556c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800556e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005572:	429a      	cmp	r2, r3
 8005574:	d302      	bcc.n	800557c <xQueueGenericSend+0xd4>
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	2b02      	cmp	r3, #2
 800557a:	d129      	bne.n	80055d0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800557c:	683a      	ldr	r2, [r7, #0]
 800557e:	68b9      	ldr	r1, [r7, #8]
 8005580:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005582:	f000 fa2e 	bl	80059e2 <prvCopyDataToQueue>
 8005586:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800558a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800558c:	2b00      	cmp	r3, #0
 800558e:	d010      	beq.n	80055b2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005592:	3324      	adds	r3, #36	; 0x24
 8005594:	4618      	mov	r0, r3
 8005596:	f001 f87f 	bl	8006698 <xTaskRemoveFromEventList>
 800559a:	4603      	mov	r3, r0
 800559c:	2b00      	cmp	r3, #0
 800559e:	d013      	beq.n	80055c8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80055a0:	4b3f      	ldr	r3, [pc, #252]	; (80056a0 <xQueueGenericSend+0x1f8>)
 80055a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055a6:	601a      	str	r2, [r3, #0]
 80055a8:	f3bf 8f4f 	dsb	sy
 80055ac:	f3bf 8f6f 	isb	sy
 80055b0:	e00a      	b.n	80055c8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80055b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d007      	beq.n	80055c8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80055b8:	4b39      	ldr	r3, [pc, #228]	; (80056a0 <xQueueGenericSend+0x1f8>)
 80055ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055be:	601a      	str	r2, [r3, #0]
 80055c0:	f3bf 8f4f 	dsb	sy
 80055c4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80055c8:	f002 f904 	bl	80077d4 <vPortExitCritical>
				return pdPASS;
 80055cc:	2301      	movs	r3, #1
 80055ce:	e063      	b.n	8005698 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d103      	bne.n	80055de <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80055d6:	f002 f8fd 	bl	80077d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80055da:	2300      	movs	r3, #0
 80055dc:	e05c      	b.n	8005698 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80055de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d106      	bne.n	80055f2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80055e4:	f107 0314 	add.w	r3, r7, #20
 80055e8:	4618      	mov	r0, r3
 80055ea:	f001 f91b 	bl	8006824 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80055ee:	2301      	movs	r3, #1
 80055f0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80055f2:	f002 f8ef 	bl	80077d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80055f6:	f000 fde9 	bl	80061cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80055fa:	f002 f8bb 	bl	8007774 <vPortEnterCritical>
 80055fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005600:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005604:	b25b      	sxtb	r3, r3
 8005606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800560a:	d103      	bne.n	8005614 <xQueueGenericSend+0x16c>
 800560c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800560e:	2200      	movs	r2, #0
 8005610:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005616:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800561a:	b25b      	sxtb	r3, r3
 800561c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005620:	d103      	bne.n	800562a <xQueueGenericSend+0x182>
 8005622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005624:	2200      	movs	r2, #0
 8005626:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800562a:	f002 f8d3 	bl	80077d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800562e:	1d3a      	adds	r2, r7, #4
 8005630:	f107 0314 	add.w	r3, r7, #20
 8005634:	4611      	mov	r1, r2
 8005636:	4618      	mov	r0, r3
 8005638:	f001 f90a 	bl	8006850 <xTaskCheckForTimeOut>
 800563c:	4603      	mov	r3, r0
 800563e:	2b00      	cmp	r3, #0
 8005640:	d124      	bne.n	800568c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005642:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005644:	f000 fac5 	bl	8005bd2 <prvIsQueueFull>
 8005648:	4603      	mov	r3, r0
 800564a:	2b00      	cmp	r3, #0
 800564c:	d018      	beq.n	8005680 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800564e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005650:	3310      	adds	r3, #16
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	4611      	mov	r1, r2
 8005656:	4618      	mov	r0, r3
 8005658:	f000 ff92 	bl	8006580 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800565c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800565e:	f000 fa50 	bl	8005b02 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005662:	f000 fdc1 	bl	80061e8 <xTaskResumeAll>
 8005666:	4603      	mov	r3, r0
 8005668:	2b00      	cmp	r3, #0
 800566a:	f47f af7c 	bne.w	8005566 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800566e:	4b0c      	ldr	r3, [pc, #48]	; (80056a0 <xQueueGenericSend+0x1f8>)
 8005670:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005674:	601a      	str	r2, [r3, #0]
 8005676:	f3bf 8f4f 	dsb	sy
 800567a:	f3bf 8f6f 	isb	sy
 800567e:	e772      	b.n	8005566 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005680:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005682:	f000 fa3e 	bl	8005b02 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005686:	f000 fdaf 	bl	80061e8 <xTaskResumeAll>
 800568a:	e76c      	b.n	8005566 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800568c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800568e:	f000 fa38 	bl	8005b02 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005692:	f000 fda9 	bl	80061e8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005696:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005698:	4618      	mov	r0, r3
 800569a:	3738      	adds	r7, #56	; 0x38
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}
 80056a0:	e000ed04 	.word	0xe000ed04

080056a4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b090      	sub	sp, #64	; 0x40
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	60f8      	str	r0, [r7, #12]
 80056ac:	60b9      	str	r1, [r7, #8]
 80056ae:	607a      	str	r2, [r7, #4]
 80056b0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80056b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d10a      	bne.n	80056d2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80056bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056c0:	f383 8811 	msr	BASEPRI, r3
 80056c4:	f3bf 8f6f 	isb	sy
 80056c8:	f3bf 8f4f 	dsb	sy
 80056cc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80056ce:	bf00      	nop
 80056d0:	e7fe      	b.n	80056d0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d103      	bne.n	80056e0 <xQueueGenericSendFromISR+0x3c>
 80056d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d101      	bne.n	80056e4 <xQueueGenericSendFromISR+0x40>
 80056e0:	2301      	movs	r3, #1
 80056e2:	e000      	b.n	80056e6 <xQueueGenericSendFromISR+0x42>
 80056e4:	2300      	movs	r3, #0
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d10a      	bne.n	8005700 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80056ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ee:	f383 8811 	msr	BASEPRI, r3
 80056f2:	f3bf 8f6f 	isb	sy
 80056f6:	f3bf 8f4f 	dsb	sy
 80056fa:	627b      	str	r3, [r7, #36]	; 0x24
}
 80056fc:	bf00      	nop
 80056fe:	e7fe      	b.n	80056fe <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	2b02      	cmp	r3, #2
 8005704:	d103      	bne.n	800570e <xQueueGenericSendFromISR+0x6a>
 8005706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800570a:	2b01      	cmp	r3, #1
 800570c:	d101      	bne.n	8005712 <xQueueGenericSendFromISR+0x6e>
 800570e:	2301      	movs	r3, #1
 8005710:	e000      	b.n	8005714 <xQueueGenericSendFromISR+0x70>
 8005712:	2300      	movs	r3, #0
 8005714:	2b00      	cmp	r3, #0
 8005716:	d10a      	bne.n	800572e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800571c:	f383 8811 	msr	BASEPRI, r3
 8005720:	f3bf 8f6f 	isb	sy
 8005724:	f3bf 8f4f 	dsb	sy
 8005728:	623b      	str	r3, [r7, #32]
}
 800572a:	bf00      	nop
 800572c:	e7fe      	b.n	800572c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800572e:	f002 f903 	bl	8007938 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005732:	f3ef 8211 	mrs	r2, BASEPRI
 8005736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800573a:	f383 8811 	msr	BASEPRI, r3
 800573e:	f3bf 8f6f 	isb	sy
 8005742:	f3bf 8f4f 	dsb	sy
 8005746:	61fa      	str	r2, [r7, #28]
 8005748:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800574a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800574c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800574e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005750:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005754:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005756:	429a      	cmp	r2, r3
 8005758:	d302      	bcc.n	8005760 <xQueueGenericSendFromISR+0xbc>
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	2b02      	cmp	r3, #2
 800575e:	d12f      	bne.n	80057c0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005762:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005766:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800576a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800576c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800576e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005770:	683a      	ldr	r2, [r7, #0]
 8005772:	68b9      	ldr	r1, [r7, #8]
 8005774:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005776:	f000 f934 	bl	80059e2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800577a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800577e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005782:	d112      	bne.n	80057aa <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005788:	2b00      	cmp	r3, #0
 800578a:	d016      	beq.n	80057ba <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800578c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800578e:	3324      	adds	r3, #36	; 0x24
 8005790:	4618      	mov	r0, r3
 8005792:	f000 ff81 	bl	8006698 <xTaskRemoveFromEventList>
 8005796:	4603      	mov	r3, r0
 8005798:	2b00      	cmp	r3, #0
 800579a:	d00e      	beq.n	80057ba <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d00b      	beq.n	80057ba <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2201      	movs	r2, #1
 80057a6:	601a      	str	r2, [r3, #0]
 80057a8:	e007      	b.n	80057ba <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80057aa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80057ae:	3301      	adds	r3, #1
 80057b0:	b2db      	uxtb	r3, r3
 80057b2:	b25a      	sxtb	r2, r3
 80057b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80057ba:	2301      	movs	r3, #1
 80057bc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80057be:	e001      	b.n	80057c4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80057c0:	2300      	movs	r3, #0
 80057c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057c6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80057ce:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80057d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3740      	adds	r7, #64	; 0x40
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}
	...

080057dc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b08c      	sub	sp, #48	; 0x30
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	60f8      	str	r0, [r7, #12]
 80057e4:	60b9      	str	r1, [r7, #8]
 80057e6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80057e8:	2300      	movs	r3, #0
 80057ea:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80057f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d10a      	bne.n	800580c <xQueueReceive+0x30>
	__asm volatile
 80057f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057fa:	f383 8811 	msr	BASEPRI, r3
 80057fe:	f3bf 8f6f 	isb	sy
 8005802:	f3bf 8f4f 	dsb	sy
 8005806:	623b      	str	r3, [r7, #32]
}
 8005808:	bf00      	nop
 800580a:	e7fe      	b.n	800580a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d103      	bne.n	800581a <xQueueReceive+0x3e>
 8005812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005816:	2b00      	cmp	r3, #0
 8005818:	d101      	bne.n	800581e <xQueueReceive+0x42>
 800581a:	2301      	movs	r3, #1
 800581c:	e000      	b.n	8005820 <xQueueReceive+0x44>
 800581e:	2300      	movs	r3, #0
 8005820:	2b00      	cmp	r3, #0
 8005822:	d10a      	bne.n	800583a <xQueueReceive+0x5e>
	__asm volatile
 8005824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005828:	f383 8811 	msr	BASEPRI, r3
 800582c:	f3bf 8f6f 	isb	sy
 8005830:	f3bf 8f4f 	dsb	sy
 8005834:	61fb      	str	r3, [r7, #28]
}
 8005836:	bf00      	nop
 8005838:	e7fe      	b.n	8005838 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800583a:	f001 f951 	bl	8006ae0 <xTaskGetSchedulerState>
 800583e:	4603      	mov	r3, r0
 8005840:	2b00      	cmp	r3, #0
 8005842:	d102      	bne.n	800584a <xQueueReceive+0x6e>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d101      	bne.n	800584e <xQueueReceive+0x72>
 800584a:	2301      	movs	r3, #1
 800584c:	e000      	b.n	8005850 <xQueueReceive+0x74>
 800584e:	2300      	movs	r3, #0
 8005850:	2b00      	cmp	r3, #0
 8005852:	d10a      	bne.n	800586a <xQueueReceive+0x8e>
	__asm volatile
 8005854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005858:	f383 8811 	msr	BASEPRI, r3
 800585c:	f3bf 8f6f 	isb	sy
 8005860:	f3bf 8f4f 	dsb	sy
 8005864:	61bb      	str	r3, [r7, #24]
}
 8005866:	bf00      	nop
 8005868:	e7fe      	b.n	8005868 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800586a:	f001 ff83 	bl	8007774 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800586e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005872:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005876:	2b00      	cmp	r3, #0
 8005878:	d01f      	beq.n	80058ba <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800587a:	68b9      	ldr	r1, [r7, #8]
 800587c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800587e:	f000 f91a 	bl	8005ab6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005884:	1e5a      	subs	r2, r3, #1
 8005886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005888:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800588a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800588c:	691b      	ldr	r3, [r3, #16]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d00f      	beq.n	80058b2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005894:	3310      	adds	r3, #16
 8005896:	4618      	mov	r0, r3
 8005898:	f000 fefe 	bl	8006698 <xTaskRemoveFromEventList>
 800589c:	4603      	mov	r3, r0
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d007      	beq.n	80058b2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80058a2:	4b3d      	ldr	r3, [pc, #244]	; (8005998 <xQueueReceive+0x1bc>)
 80058a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058a8:	601a      	str	r2, [r3, #0]
 80058aa:	f3bf 8f4f 	dsb	sy
 80058ae:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80058b2:	f001 ff8f 	bl	80077d4 <vPortExitCritical>
				return pdPASS;
 80058b6:	2301      	movs	r3, #1
 80058b8:	e069      	b.n	800598e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d103      	bne.n	80058c8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80058c0:	f001 ff88 	bl	80077d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80058c4:	2300      	movs	r3, #0
 80058c6:	e062      	b.n	800598e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80058c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d106      	bne.n	80058dc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80058ce:	f107 0310 	add.w	r3, r7, #16
 80058d2:	4618      	mov	r0, r3
 80058d4:	f000 ffa6 	bl	8006824 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80058d8:	2301      	movs	r3, #1
 80058da:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80058dc:	f001 ff7a 	bl	80077d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80058e0:	f000 fc74 	bl	80061cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80058e4:	f001 ff46 	bl	8007774 <vPortEnterCritical>
 80058e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80058ee:	b25b      	sxtb	r3, r3
 80058f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058f4:	d103      	bne.n	80058fe <xQueueReceive+0x122>
 80058f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058f8:	2200      	movs	r2, #0
 80058fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005900:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005904:	b25b      	sxtb	r3, r3
 8005906:	f1b3 3fff 	cmp.w	r3, #4294967295
 800590a:	d103      	bne.n	8005914 <xQueueReceive+0x138>
 800590c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800590e:	2200      	movs	r2, #0
 8005910:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005914:	f001 ff5e 	bl	80077d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005918:	1d3a      	adds	r2, r7, #4
 800591a:	f107 0310 	add.w	r3, r7, #16
 800591e:	4611      	mov	r1, r2
 8005920:	4618      	mov	r0, r3
 8005922:	f000 ff95 	bl	8006850 <xTaskCheckForTimeOut>
 8005926:	4603      	mov	r3, r0
 8005928:	2b00      	cmp	r3, #0
 800592a:	d123      	bne.n	8005974 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800592c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800592e:	f000 f93a 	bl	8005ba6 <prvIsQueueEmpty>
 8005932:	4603      	mov	r3, r0
 8005934:	2b00      	cmp	r3, #0
 8005936:	d017      	beq.n	8005968 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800593a:	3324      	adds	r3, #36	; 0x24
 800593c:	687a      	ldr	r2, [r7, #4]
 800593e:	4611      	mov	r1, r2
 8005940:	4618      	mov	r0, r3
 8005942:	f000 fe1d 	bl	8006580 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005946:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005948:	f000 f8db 	bl	8005b02 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800594c:	f000 fc4c 	bl	80061e8 <xTaskResumeAll>
 8005950:	4603      	mov	r3, r0
 8005952:	2b00      	cmp	r3, #0
 8005954:	d189      	bne.n	800586a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005956:	4b10      	ldr	r3, [pc, #64]	; (8005998 <xQueueReceive+0x1bc>)
 8005958:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800595c:	601a      	str	r2, [r3, #0]
 800595e:	f3bf 8f4f 	dsb	sy
 8005962:	f3bf 8f6f 	isb	sy
 8005966:	e780      	b.n	800586a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005968:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800596a:	f000 f8ca 	bl	8005b02 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800596e:	f000 fc3b 	bl	80061e8 <xTaskResumeAll>
 8005972:	e77a      	b.n	800586a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005974:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005976:	f000 f8c4 	bl	8005b02 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800597a:	f000 fc35 	bl	80061e8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800597e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005980:	f000 f911 	bl	8005ba6 <prvIsQueueEmpty>
 8005984:	4603      	mov	r3, r0
 8005986:	2b00      	cmp	r3, #0
 8005988:	f43f af6f 	beq.w	800586a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800598c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800598e:	4618      	mov	r0, r3
 8005990:	3730      	adds	r7, #48	; 0x30
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}
 8005996:	bf00      	nop
 8005998:	e000ed04 	.word	0xe000ed04

0800599c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b084      	sub	sp, #16
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d10a      	bne.n	80059c4 <vQueueDelete+0x28>
	__asm volatile
 80059ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059b2:	f383 8811 	msr	BASEPRI, r3
 80059b6:	f3bf 8f6f 	isb	sy
 80059ba:	f3bf 8f4f 	dsb	sy
 80059be:	60bb      	str	r3, [r7, #8]
}
 80059c0:	bf00      	nop
 80059c2:	e7fe      	b.n	80059c2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80059c4:	68f8      	ldr	r0, [r7, #12]
 80059c6:	f000 f947 	bl	8005c58 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d102      	bne.n	80059da <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80059d4:	68f8      	ldr	r0, [r7, #12]
 80059d6:	f002 f8bb 	bl	8007b50 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80059da:	bf00      	nop
 80059dc:	3710      	adds	r7, #16
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}

080059e2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80059e2:	b580      	push	{r7, lr}
 80059e4:	b086      	sub	sp, #24
 80059e6:	af00      	add	r7, sp, #0
 80059e8:	60f8      	str	r0, [r7, #12]
 80059ea:	60b9      	str	r1, [r7, #8]
 80059ec:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80059ee:	2300      	movs	r3, #0
 80059f0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059f6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d10d      	bne.n	8005a1c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d14d      	bne.n	8005aa4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	689b      	ldr	r3, [r3, #8]
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	f001 f885 	bl	8006b1c <xTaskPriorityDisinherit>
 8005a12:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2200      	movs	r2, #0
 8005a18:	609a      	str	r2, [r3, #8]
 8005a1a:	e043      	b.n	8005aa4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d119      	bne.n	8005a56 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	6858      	ldr	r0, [r3, #4]
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	68b9      	ldr	r1, [r7, #8]
 8005a2e:	f002 f9d3 	bl	8007dd8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	685a      	ldr	r2, [r3, #4]
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a3a:	441a      	add	r2, r3
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	685a      	ldr	r2, [r3, #4]
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	429a      	cmp	r2, r3
 8005a4a:	d32b      	bcc.n	8005aa4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681a      	ldr	r2, [r3, #0]
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	605a      	str	r2, [r3, #4]
 8005a54:	e026      	b.n	8005aa4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	68d8      	ldr	r0, [r3, #12]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a5e:	461a      	mov	r2, r3
 8005a60:	68b9      	ldr	r1, [r7, #8]
 8005a62:	f002 f9b9 	bl	8007dd8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	68da      	ldr	r2, [r3, #12]
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a6e:	425b      	negs	r3, r3
 8005a70:	441a      	add	r2, r3
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	68da      	ldr	r2, [r3, #12]
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	429a      	cmp	r2, r3
 8005a80:	d207      	bcs.n	8005a92 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	689a      	ldr	r2, [r3, #8]
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a8a:	425b      	negs	r3, r3
 8005a8c:	441a      	add	r2, r3
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2b02      	cmp	r3, #2
 8005a96:	d105      	bne.n	8005aa4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d002      	beq.n	8005aa4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	3b01      	subs	r3, #1
 8005aa2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	1c5a      	adds	r2, r3, #1
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005aac:	697b      	ldr	r3, [r7, #20]
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3718      	adds	r7, #24
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}

08005ab6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005ab6:	b580      	push	{r7, lr}
 8005ab8:	b082      	sub	sp, #8
 8005aba:	af00      	add	r7, sp, #0
 8005abc:	6078      	str	r0, [r7, #4]
 8005abe:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d018      	beq.n	8005afa <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	68da      	ldr	r2, [r3, #12]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad0:	441a      	add	r2, r3
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	68da      	ldr	r2, [r3, #12]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	429a      	cmp	r2, r3
 8005ae0:	d303      	bcc.n	8005aea <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	68d9      	ldr	r1, [r3, #12]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af2:	461a      	mov	r2, r3
 8005af4:	6838      	ldr	r0, [r7, #0]
 8005af6:	f002 f96f 	bl	8007dd8 <memcpy>
	}
}
 8005afa:	bf00      	nop
 8005afc:	3708      	adds	r7, #8
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}

08005b02 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005b02:	b580      	push	{r7, lr}
 8005b04:	b084      	sub	sp, #16
 8005b06:	af00      	add	r7, sp, #0
 8005b08:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005b0a:	f001 fe33 	bl	8007774 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b14:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005b16:	e011      	b.n	8005b3c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d012      	beq.n	8005b46 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	3324      	adds	r3, #36	; 0x24
 8005b24:	4618      	mov	r0, r3
 8005b26:	f000 fdb7 	bl	8006698 <xTaskRemoveFromEventList>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d001      	beq.n	8005b34 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005b30:	f000 fef0 	bl	8006914 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005b34:	7bfb      	ldrb	r3, [r7, #15]
 8005b36:	3b01      	subs	r3, #1
 8005b38:	b2db      	uxtb	r3, r3
 8005b3a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005b3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	dce9      	bgt.n	8005b18 <prvUnlockQueue+0x16>
 8005b44:	e000      	b.n	8005b48 <prvUnlockQueue+0x46>
					break;
 8005b46:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	22ff      	movs	r2, #255	; 0xff
 8005b4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005b50:	f001 fe40 	bl	80077d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005b54:	f001 fe0e 	bl	8007774 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005b5e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005b60:	e011      	b.n	8005b86 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	691b      	ldr	r3, [r3, #16]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d012      	beq.n	8005b90 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	3310      	adds	r3, #16
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f000 fd92 	bl	8006698 <xTaskRemoveFromEventList>
 8005b74:	4603      	mov	r3, r0
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d001      	beq.n	8005b7e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005b7a:	f000 fecb 	bl	8006914 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005b7e:	7bbb      	ldrb	r3, [r7, #14]
 8005b80:	3b01      	subs	r3, #1
 8005b82:	b2db      	uxtb	r3, r3
 8005b84:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005b86:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	dce9      	bgt.n	8005b62 <prvUnlockQueue+0x60>
 8005b8e:	e000      	b.n	8005b92 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005b90:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	22ff      	movs	r2, #255	; 0xff
 8005b96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005b9a:	f001 fe1b 	bl	80077d4 <vPortExitCritical>
}
 8005b9e:	bf00      	nop
 8005ba0:	3710      	adds	r7, #16
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}

08005ba6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005ba6:	b580      	push	{r7, lr}
 8005ba8:	b084      	sub	sp, #16
 8005baa:	af00      	add	r7, sp, #0
 8005bac:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005bae:	f001 fde1 	bl	8007774 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d102      	bne.n	8005bc0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	60fb      	str	r3, [r7, #12]
 8005bbe:	e001      	b.n	8005bc4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005bc4:	f001 fe06 	bl	80077d4 <vPortExitCritical>

	return xReturn;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3710      	adds	r7, #16
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}

08005bd2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005bd2:	b580      	push	{r7, lr}
 8005bd4:	b084      	sub	sp, #16
 8005bd6:	af00      	add	r7, sp, #0
 8005bd8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005bda:	f001 fdcb 	bl	8007774 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005be6:	429a      	cmp	r2, r3
 8005be8:	d102      	bne.n	8005bf0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005bea:	2301      	movs	r3, #1
 8005bec:	60fb      	str	r3, [r7, #12]
 8005bee:	e001      	b.n	8005bf4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005bf4:	f001 fdee 	bl	80077d4 <vPortExitCritical>

	return xReturn;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3710      	adds	r7, #16
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}
	...

08005c04 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005c04:	b480      	push	{r7}
 8005c06:	b085      	sub	sp, #20
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
 8005c0c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005c0e:	2300      	movs	r3, #0
 8005c10:	60fb      	str	r3, [r7, #12]
 8005c12:	e014      	b.n	8005c3e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005c14:	4a0f      	ldr	r2, [pc, #60]	; (8005c54 <vQueueAddToRegistry+0x50>)
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d10b      	bne.n	8005c38 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005c20:	490c      	ldr	r1, [pc, #48]	; (8005c54 <vQueueAddToRegistry+0x50>)
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	683a      	ldr	r2, [r7, #0]
 8005c26:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005c2a:	4a0a      	ldr	r2, [pc, #40]	; (8005c54 <vQueueAddToRegistry+0x50>)
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	00db      	lsls	r3, r3, #3
 8005c30:	4413      	add	r3, r2
 8005c32:	687a      	ldr	r2, [r7, #4]
 8005c34:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005c36:	e006      	b.n	8005c46 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	3301      	adds	r3, #1
 8005c3c:	60fb      	str	r3, [r7, #12]
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2b07      	cmp	r3, #7
 8005c42:	d9e7      	bls.n	8005c14 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005c44:	bf00      	nop
 8005c46:	bf00      	nop
 8005c48:	3714      	adds	r7, #20
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c50:	4770      	bx	lr
 8005c52:	bf00      	nop
 8005c54:	20000c24 	.word	0x20000c24

08005c58 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8005c58:	b480      	push	{r7}
 8005c5a:	b085      	sub	sp, #20
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005c60:	2300      	movs	r3, #0
 8005c62:	60fb      	str	r3, [r7, #12]
 8005c64:	e016      	b.n	8005c94 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8005c66:	4a10      	ldr	r2, [pc, #64]	; (8005ca8 <vQueueUnregisterQueue+0x50>)
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	00db      	lsls	r3, r3, #3
 8005c6c:	4413      	add	r3, r2
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	687a      	ldr	r2, [r7, #4]
 8005c72:	429a      	cmp	r2, r3
 8005c74:	d10b      	bne.n	8005c8e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8005c76:	4a0c      	ldr	r2, [pc, #48]	; (8005ca8 <vQueueUnregisterQueue+0x50>)
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	2100      	movs	r1, #0
 8005c7c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8005c80:	4a09      	ldr	r2, [pc, #36]	; (8005ca8 <vQueueUnregisterQueue+0x50>)
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	00db      	lsls	r3, r3, #3
 8005c86:	4413      	add	r3, r2
 8005c88:	2200      	movs	r2, #0
 8005c8a:	605a      	str	r2, [r3, #4]
				break;
 8005c8c:	e006      	b.n	8005c9c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	3301      	adds	r3, #1
 8005c92:	60fb      	str	r3, [r7, #12]
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2b07      	cmp	r3, #7
 8005c98:	d9e5      	bls.n	8005c66 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8005c9a:	bf00      	nop
 8005c9c:	bf00      	nop
 8005c9e:	3714      	adds	r7, #20
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr
 8005ca8:	20000c24 	.word	0x20000c24

08005cac <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b086      	sub	sp, #24
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	60f8      	str	r0, [r7, #12]
 8005cb4:	60b9      	str	r1, [r7, #8]
 8005cb6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005cbc:	f001 fd5a 	bl	8007774 <vPortEnterCritical>
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005cc6:	b25b      	sxtb	r3, r3
 8005cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ccc:	d103      	bne.n	8005cd6 <vQueueWaitForMessageRestricted+0x2a>
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005cdc:	b25b      	sxtb	r3, r3
 8005cde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ce2:	d103      	bne.n	8005cec <vQueueWaitForMessageRestricted+0x40>
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005cec:	f001 fd72 	bl	80077d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d106      	bne.n	8005d06 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	3324      	adds	r3, #36	; 0x24
 8005cfc:	687a      	ldr	r2, [r7, #4]
 8005cfe:	68b9      	ldr	r1, [r7, #8]
 8005d00:	4618      	mov	r0, r3
 8005d02:	f000 fc9d 	bl	8006640 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005d06:	6978      	ldr	r0, [r7, #20]
 8005d08:	f7ff fefb 	bl	8005b02 <prvUnlockQueue>
	}
 8005d0c:	bf00      	nop
 8005d0e:	3718      	adds	r7, #24
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}

08005d14 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b08e      	sub	sp, #56	; 0x38
 8005d18:	af04      	add	r7, sp, #16
 8005d1a:	60f8      	str	r0, [r7, #12]
 8005d1c:	60b9      	str	r1, [r7, #8]
 8005d1e:	607a      	str	r2, [r7, #4]
 8005d20:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005d22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d10a      	bne.n	8005d3e <xTaskCreateStatic+0x2a>
	__asm volatile
 8005d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d2c:	f383 8811 	msr	BASEPRI, r3
 8005d30:	f3bf 8f6f 	isb	sy
 8005d34:	f3bf 8f4f 	dsb	sy
 8005d38:	623b      	str	r3, [r7, #32]
}
 8005d3a:	bf00      	nop
 8005d3c:	e7fe      	b.n	8005d3c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d10a      	bne.n	8005d5a <xTaskCreateStatic+0x46>
	__asm volatile
 8005d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d48:	f383 8811 	msr	BASEPRI, r3
 8005d4c:	f3bf 8f6f 	isb	sy
 8005d50:	f3bf 8f4f 	dsb	sy
 8005d54:	61fb      	str	r3, [r7, #28]
}
 8005d56:	bf00      	nop
 8005d58:	e7fe      	b.n	8005d58 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005d5a:	23bc      	movs	r3, #188	; 0xbc
 8005d5c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	2bbc      	cmp	r3, #188	; 0xbc
 8005d62:	d00a      	beq.n	8005d7a <xTaskCreateStatic+0x66>
	__asm volatile
 8005d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d68:	f383 8811 	msr	BASEPRI, r3
 8005d6c:	f3bf 8f6f 	isb	sy
 8005d70:	f3bf 8f4f 	dsb	sy
 8005d74:	61bb      	str	r3, [r7, #24]
}
 8005d76:	bf00      	nop
 8005d78:	e7fe      	b.n	8005d78 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005d7a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d01e      	beq.n	8005dc0 <xTaskCreateStatic+0xac>
 8005d82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d01b      	beq.n	8005dc0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d8a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d90:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d94:	2202      	movs	r2, #2
 8005d96:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	9303      	str	r3, [sp, #12]
 8005d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da0:	9302      	str	r3, [sp, #8]
 8005da2:	f107 0314 	add.w	r3, r7, #20
 8005da6:	9301      	str	r3, [sp, #4]
 8005da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005daa:	9300      	str	r3, [sp, #0]
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	687a      	ldr	r2, [r7, #4]
 8005db0:	68b9      	ldr	r1, [r7, #8]
 8005db2:	68f8      	ldr	r0, [r7, #12]
 8005db4:	f000 f850 	bl	8005e58 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005db8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005dba:	f000 f8f3 	bl	8005fa4 <prvAddNewTaskToReadyList>
 8005dbe:	e001      	b.n	8005dc4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005dc4:	697b      	ldr	r3, [r7, #20]
	}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3728      	adds	r7, #40	; 0x28
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}

08005dce <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005dce:	b580      	push	{r7, lr}
 8005dd0:	b08c      	sub	sp, #48	; 0x30
 8005dd2:	af04      	add	r7, sp, #16
 8005dd4:	60f8      	str	r0, [r7, #12]
 8005dd6:	60b9      	str	r1, [r7, #8]
 8005dd8:	603b      	str	r3, [r7, #0]
 8005dda:	4613      	mov	r3, r2
 8005ddc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005dde:	88fb      	ldrh	r3, [r7, #6]
 8005de0:	009b      	lsls	r3, r3, #2
 8005de2:	4618      	mov	r0, r3
 8005de4:	f001 fde8 	bl	80079b8 <pvPortMalloc>
 8005de8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d00e      	beq.n	8005e0e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005df0:	20bc      	movs	r0, #188	; 0xbc
 8005df2:	f001 fde1 	bl	80079b8 <pvPortMalloc>
 8005df6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005df8:	69fb      	ldr	r3, [r7, #28]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d003      	beq.n	8005e06 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005dfe:	69fb      	ldr	r3, [r7, #28]
 8005e00:	697a      	ldr	r2, [r7, #20]
 8005e02:	631a      	str	r2, [r3, #48]	; 0x30
 8005e04:	e005      	b.n	8005e12 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005e06:	6978      	ldr	r0, [r7, #20]
 8005e08:	f001 fea2 	bl	8007b50 <vPortFree>
 8005e0c:	e001      	b.n	8005e12 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005e12:	69fb      	ldr	r3, [r7, #28]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d017      	beq.n	8005e48 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005e18:	69fb      	ldr	r3, [r7, #28]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005e20:	88fa      	ldrh	r2, [r7, #6]
 8005e22:	2300      	movs	r3, #0
 8005e24:	9303      	str	r3, [sp, #12]
 8005e26:	69fb      	ldr	r3, [r7, #28]
 8005e28:	9302      	str	r3, [sp, #8]
 8005e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e2c:	9301      	str	r3, [sp, #4]
 8005e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e30:	9300      	str	r3, [sp, #0]
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	68b9      	ldr	r1, [r7, #8]
 8005e36:	68f8      	ldr	r0, [r7, #12]
 8005e38:	f000 f80e 	bl	8005e58 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005e3c:	69f8      	ldr	r0, [r7, #28]
 8005e3e:	f000 f8b1 	bl	8005fa4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005e42:	2301      	movs	r3, #1
 8005e44:	61bb      	str	r3, [r7, #24]
 8005e46:	e002      	b.n	8005e4e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005e48:	f04f 33ff 	mov.w	r3, #4294967295
 8005e4c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005e4e:	69bb      	ldr	r3, [r7, #24]
	}
 8005e50:	4618      	mov	r0, r3
 8005e52:	3720      	adds	r7, #32
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}

08005e58 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b088      	sub	sp, #32
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	60f8      	str	r0, [r7, #12]
 8005e60:	60b9      	str	r1, [r7, #8]
 8005e62:	607a      	str	r2, [r7, #4]
 8005e64:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e68:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	009b      	lsls	r3, r3, #2
 8005e6e:	461a      	mov	r2, r3
 8005e70:	21a5      	movs	r1, #165	; 0xa5
 8005e72:	f001 ffbf 	bl	8007df4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005e80:	3b01      	subs	r3, #1
 8005e82:	009b      	lsls	r3, r3, #2
 8005e84:	4413      	add	r3, r2
 8005e86:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005e88:	69bb      	ldr	r3, [r7, #24]
 8005e8a:	f023 0307 	bic.w	r3, r3, #7
 8005e8e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005e90:	69bb      	ldr	r3, [r7, #24]
 8005e92:	f003 0307 	and.w	r3, r3, #7
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d00a      	beq.n	8005eb0 <prvInitialiseNewTask+0x58>
	__asm volatile
 8005e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e9e:	f383 8811 	msr	BASEPRI, r3
 8005ea2:	f3bf 8f6f 	isb	sy
 8005ea6:	f3bf 8f4f 	dsb	sy
 8005eaa:	617b      	str	r3, [r7, #20]
}
 8005eac:	bf00      	nop
 8005eae:	e7fe      	b.n	8005eae <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d01f      	beq.n	8005ef6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	61fb      	str	r3, [r7, #28]
 8005eba:	e012      	b.n	8005ee2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005ebc:	68ba      	ldr	r2, [r7, #8]
 8005ebe:	69fb      	ldr	r3, [r7, #28]
 8005ec0:	4413      	add	r3, r2
 8005ec2:	7819      	ldrb	r1, [r3, #0]
 8005ec4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ec6:	69fb      	ldr	r3, [r7, #28]
 8005ec8:	4413      	add	r3, r2
 8005eca:	3334      	adds	r3, #52	; 0x34
 8005ecc:	460a      	mov	r2, r1
 8005ece:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005ed0:	68ba      	ldr	r2, [r7, #8]
 8005ed2:	69fb      	ldr	r3, [r7, #28]
 8005ed4:	4413      	add	r3, r2
 8005ed6:	781b      	ldrb	r3, [r3, #0]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d006      	beq.n	8005eea <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005edc:	69fb      	ldr	r3, [r7, #28]
 8005ede:	3301      	adds	r3, #1
 8005ee0:	61fb      	str	r3, [r7, #28]
 8005ee2:	69fb      	ldr	r3, [r7, #28]
 8005ee4:	2b0f      	cmp	r3, #15
 8005ee6:	d9e9      	bls.n	8005ebc <prvInitialiseNewTask+0x64>
 8005ee8:	e000      	b.n	8005eec <prvInitialiseNewTask+0x94>
			{
				break;
 8005eea:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eee:	2200      	movs	r2, #0
 8005ef0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005ef4:	e003      	b.n	8005efe <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ef8:	2200      	movs	r2, #0
 8005efa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f00:	2b37      	cmp	r3, #55	; 0x37
 8005f02:	d901      	bls.n	8005f08 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005f04:	2337      	movs	r3, #55	; 0x37
 8005f06:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f0c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f12:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f16:	2200      	movs	r2, #0
 8005f18:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f1c:	3304      	adds	r3, #4
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f7ff f886 	bl	8005030 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f26:	3318      	adds	r3, #24
 8005f28:	4618      	mov	r0, r3
 8005f2a:	f7ff f881 	bl	8005030 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f32:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f36:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f3c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f42:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f46:	2200      	movs	r2, #0
 8005f48:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f4e:	2200      	movs	r2, #0
 8005f50:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f56:	3354      	adds	r3, #84	; 0x54
 8005f58:	2260      	movs	r2, #96	; 0x60
 8005f5a:	2100      	movs	r1, #0
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f001 ff49 	bl	8007df4 <memset>
 8005f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f64:	4a0c      	ldr	r2, [pc, #48]	; (8005f98 <prvInitialiseNewTask+0x140>)
 8005f66:	659a      	str	r2, [r3, #88]	; 0x58
 8005f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f6a:	4a0c      	ldr	r2, [pc, #48]	; (8005f9c <prvInitialiseNewTask+0x144>)
 8005f6c:	65da      	str	r2, [r3, #92]	; 0x5c
 8005f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f70:	4a0b      	ldr	r2, [pc, #44]	; (8005fa0 <prvInitialiseNewTask+0x148>)
 8005f72:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005f74:	683a      	ldr	r2, [r7, #0]
 8005f76:	68f9      	ldr	r1, [r7, #12]
 8005f78:	69b8      	ldr	r0, [r7, #24]
 8005f7a:	f001 fad1 	bl	8007520 <pxPortInitialiseStack>
 8005f7e:	4602      	mov	r2, r0
 8005f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f82:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d002      	beq.n	8005f90 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f8e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f90:	bf00      	nop
 8005f92:	3720      	adds	r7, #32
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}
 8005f98:	08008160 	.word	0x08008160
 8005f9c:	08008180 	.word	0x08008180
 8005fa0:	08008140 	.word	0x08008140

08005fa4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b082      	sub	sp, #8
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005fac:	f001 fbe2 	bl	8007774 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005fb0:	4b2d      	ldr	r3, [pc, #180]	; (8006068 <prvAddNewTaskToReadyList+0xc4>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	3301      	adds	r3, #1
 8005fb6:	4a2c      	ldr	r2, [pc, #176]	; (8006068 <prvAddNewTaskToReadyList+0xc4>)
 8005fb8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005fba:	4b2c      	ldr	r3, [pc, #176]	; (800606c <prvAddNewTaskToReadyList+0xc8>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d109      	bne.n	8005fd6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005fc2:	4a2a      	ldr	r2, [pc, #168]	; (800606c <prvAddNewTaskToReadyList+0xc8>)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005fc8:	4b27      	ldr	r3, [pc, #156]	; (8006068 <prvAddNewTaskToReadyList+0xc4>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	d110      	bne.n	8005ff2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005fd0:	f000 fcc4 	bl	800695c <prvInitialiseTaskLists>
 8005fd4:	e00d      	b.n	8005ff2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005fd6:	4b26      	ldr	r3, [pc, #152]	; (8006070 <prvAddNewTaskToReadyList+0xcc>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d109      	bne.n	8005ff2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005fde:	4b23      	ldr	r3, [pc, #140]	; (800606c <prvAddNewTaskToReadyList+0xc8>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fe8:	429a      	cmp	r2, r3
 8005fea:	d802      	bhi.n	8005ff2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005fec:	4a1f      	ldr	r2, [pc, #124]	; (800606c <prvAddNewTaskToReadyList+0xc8>)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005ff2:	4b20      	ldr	r3, [pc, #128]	; (8006074 <prvAddNewTaskToReadyList+0xd0>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	3301      	adds	r3, #1
 8005ff8:	4a1e      	ldr	r2, [pc, #120]	; (8006074 <prvAddNewTaskToReadyList+0xd0>)
 8005ffa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005ffc:	4b1d      	ldr	r3, [pc, #116]	; (8006074 <prvAddNewTaskToReadyList+0xd0>)
 8005ffe:	681a      	ldr	r2, [r3, #0]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006008:	4b1b      	ldr	r3, [pc, #108]	; (8006078 <prvAddNewTaskToReadyList+0xd4>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	429a      	cmp	r2, r3
 800600e:	d903      	bls.n	8006018 <prvAddNewTaskToReadyList+0x74>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006014:	4a18      	ldr	r2, [pc, #96]	; (8006078 <prvAddNewTaskToReadyList+0xd4>)
 8006016:	6013      	str	r3, [r2, #0]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800601c:	4613      	mov	r3, r2
 800601e:	009b      	lsls	r3, r3, #2
 8006020:	4413      	add	r3, r2
 8006022:	009b      	lsls	r3, r3, #2
 8006024:	4a15      	ldr	r2, [pc, #84]	; (800607c <prvAddNewTaskToReadyList+0xd8>)
 8006026:	441a      	add	r2, r3
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	3304      	adds	r3, #4
 800602c:	4619      	mov	r1, r3
 800602e:	4610      	mov	r0, r2
 8006030:	f7ff f80b 	bl	800504a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006034:	f001 fbce 	bl	80077d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006038:	4b0d      	ldr	r3, [pc, #52]	; (8006070 <prvAddNewTaskToReadyList+0xcc>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d00e      	beq.n	800605e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006040:	4b0a      	ldr	r3, [pc, #40]	; (800606c <prvAddNewTaskToReadyList+0xc8>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800604a:	429a      	cmp	r2, r3
 800604c:	d207      	bcs.n	800605e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800604e:	4b0c      	ldr	r3, [pc, #48]	; (8006080 <prvAddNewTaskToReadyList+0xdc>)
 8006050:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006054:	601a      	str	r2, [r3, #0]
 8006056:	f3bf 8f4f 	dsb	sy
 800605a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800605e:	bf00      	nop
 8006060:	3708      	adds	r7, #8
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}
 8006066:	bf00      	nop
 8006068:	20001138 	.word	0x20001138
 800606c:	20000c64 	.word	0x20000c64
 8006070:	20001144 	.word	0x20001144
 8006074:	20001154 	.word	0x20001154
 8006078:	20001140 	.word	0x20001140
 800607c:	20000c68 	.word	0x20000c68
 8006080:	e000ed04 	.word	0xe000ed04

08006084 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006084:	b580      	push	{r7, lr}
 8006086:	b084      	sub	sp, #16
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800608c:	2300      	movs	r3, #0
 800608e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d017      	beq.n	80060c6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006096:	4b13      	ldr	r3, [pc, #76]	; (80060e4 <vTaskDelay+0x60>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d00a      	beq.n	80060b4 <vTaskDelay+0x30>
	__asm volatile
 800609e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a2:	f383 8811 	msr	BASEPRI, r3
 80060a6:	f3bf 8f6f 	isb	sy
 80060aa:	f3bf 8f4f 	dsb	sy
 80060ae:	60bb      	str	r3, [r7, #8]
}
 80060b0:	bf00      	nop
 80060b2:	e7fe      	b.n	80060b2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80060b4:	f000 f88a 	bl	80061cc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80060b8:	2100      	movs	r1, #0
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f000 fdb4 	bl	8006c28 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80060c0:	f000 f892 	bl	80061e8 <xTaskResumeAll>
 80060c4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d107      	bne.n	80060dc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80060cc:	4b06      	ldr	r3, [pc, #24]	; (80060e8 <vTaskDelay+0x64>)
 80060ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060d2:	601a      	str	r2, [r3, #0]
 80060d4:	f3bf 8f4f 	dsb	sy
 80060d8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80060dc:	bf00      	nop
 80060de:	3710      	adds	r7, #16
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}
 80060e4:	20001160 	.word	0x20001160
 80060e8:	e000ed04 	.word	0xe000ed04

080060ec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b08a      	sub	sp, #40	; 0x28
 80060f0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80060f2:	2300      	movs	r3, #0
 80060f4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80060f6:	2300      	movs	r3, #0
 80060f8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80060fa:	463a      	mov	r2, r7
 80060fc:	1d39      	adds	r1, r7, #4
 80060fe:	f107 0308 	add.w	r3, r7, #8
 8006102:	4618      	mov	r0, r3
 8006104:	f7fe fd52 	bl	8004bac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006108:	6839      	ldr	r1, [r7, #0]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	68ba      	ldr	r2, [r7, #8]
 800610e:	9202      	str	r2, [sp, #8]
 8006110:	9301      	str	r3, [sp, #4]
 8006112:	2300      	movs	r3, #0
 8006114:	9300      	str	r3, [sp, #0]
 8006116:	2300      	movs	r3, #0
 8006118:	460a      	mov	r2, r1
 800611a:	4924      	ldr	r1, [pc, #144]	; (80061ac <vTaskStartScheduler+0xc0>)
 800611c:	4824      	ldr	r0, [pc, #144]	; (80061b0 <vTaskStartScheduler+0xc4>)
 800611e:	f7ff fdf9 	bl	8005d14 <xTaskCreateStatic>
 8006122:	4603      	mov	r3, r0
 8006124:	4a23      	ldr	r2, [pc, #140]	; (80061b4 <vTaskStartScheduler+0xc8>)
 8006126:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006128:	4b22      	ldr	r3, [pc, #136]	; (80061b4 <vTaskStartScheduler+0xc8>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d002      	beq.n	8006136 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006130:	2301      	movs	r3, #1
 8006132:	617b      	str	r3, [r7, #20]
 8006134:	e001      	b.n	800613a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006136:	2300      	movs	r3, #0
 8006138:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	2b01      	cmp	r3, #1
 800613e:	d102      	bne.n	8006146 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006140:	f000 fdc6 	bl	8006cd0 <xTimerCreateTimerTask>
 8006144:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	2b01      	cmp	r3, #1
 800614a:	d11b      	bne.n	8006184 <vTaskStartScheduler+0x98>
	__asm volatile
 800614c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006150:	f383 8811 	msr	BASEPRI, r3
 8006154:	f3bf 8f6f 	isb	sy
 8006158:	f3bf 8f4f 	dsb	sy
 800615c:	613b      	str	r3, [r7, #16]
}
 800615e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006160:	4b15      	ldr	r3, [pc, #84]	; (80061b8 <vTaskStartScheduler+0xcc>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	3354      	adds	r3, #84	; 0x54
 8006166:	4a15      	ldr	r2, [pc, #84]	; (80061bc <vTaskStartScheduler+0xd0>)
 8006168:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800616a:	4b15      	ldr	r3, [pc, #84]	; (80061c0 <vTaskStartScheduler+0xd4>)
 800616c:	f04f 32ff 	mov.w	r2, #4294967295
 8006170:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006172:	4b14      	ldr	r3, [pc, #80]	; (80061c4 <vTaskStartScheduler+0xd8>)
 8006174:	2201      	movs	r2, #1
 8006176:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006178:	4b13      	ldr	r3, [pc, #76]	; (80061c8 <vTaskStartScheduler+0xdc>)
 800617a:	2200      	movs	r2, #0
 800617c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800617e:	f001 fa57 	bl	8007630 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006182:	e00e      	b.n	80061a2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800618a:	d10a      	bne.n	80061a2 <vTaskStartScheduler+0xb6>
	__asm volatile
 800618c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006190:	f383 8811 	msr	BASEPRI, r3
 8006194:	f3bf 8f6f 	isb	sy
 8006198:	f3bf 8f4f 	dsb	sy
 800619c:	60fb      	str	r3, [r7, #12]
}
 800619e:	bf00      	nop
 80061a0:	e7fe      	b.n	80061a0 <vTaskStartScheduler+0xb4>
}
 80061a2:	bf00      	nop
 80061a4:	3718      	adds	r7, #24
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}
 80061aa:	bf00      	nop
 80061ac:	08008028 	.word	0x08008028
 80061b0:	0800692d 	.word	0x0800692d
 80061b4:	2000115c 	.word	0x2000115c
 80061b8:	20000c64 	.word	0x20000c64
 80061bc:	20000014 	.word	0x20000014
 80061c0:	20001158 	.word	0x20001158
 80061c4:	20001144 	.word	0x20001144
 80061c8:	2000113c 	.word	0x2000113c

080061cc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80061cc:	b480      	push	{r7}
 80061ce:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80061d0:	4b04      	ldr	r3, [pc, #16]	; (80061e4 <vTaskSuspendAll+0x18>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	3301      	adds	r3, #1
 80061d6:	4a03      	ldr	r2, [pc, #12]	; (80061e4 <vTaskSuspendAll+0x18>)
 80061d8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80061da:	bf00      	nop
 80061dc:	46bd      	mov	sp, r7
 80061de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e2:	4770      	bx	lr
 80061e4:	20001160 	.word	0x20001160

080061e8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b084      	sub	sp, #16
 80061ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80061ee:	2300      	movs	r3, #0
 80061f0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80061f2:	2300      	movs	r3, #0
 80061f4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80061f6:	4b42      	ldr	r3, [pc, #264]	; (8006300 <xTaskResumeAll+0x118>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d10a      	bne.n	8006214 <xTaskResumeAll+0x2c>
	__asm volatile
 80061fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006202:	f383 8811 	msr	BASEPRI, r3
 8006206:	f3bf 8f6f 	isb	sy
 800620a:	f3bf 8f4f 	dsb	sy
 800620e:	603b      	str	r3, [r7, #0]
}
 8006210:	bf00      	nop
 8006212:	e7fe      	b.n	8006212 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006214:	f001 faae 	bl	8007774 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006218:	4b39      	ldr	r3, [pc, #228]	; (8006300 <xTaskResumeAll+0x118>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	3b01      	subs	r3, #1
 800621e:	4a38      	ldr	r2, [pc, #224]	; (8006300 <xTaskResumeAll+0x118>)
 8006220:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006222:	4b37      	ldr	r3, [pc, #220]	; (8006300 <xTaskResumeAll+0x118>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d162      	bne.n	80062f0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800622a:	4b36      	ldr	r3, [pc, #216]	; (8006304 <xTaskResumeAll+0x11c>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d05e      	beq.n	80062f0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006232:	e02f      	b.n	8006294 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006234:	4b34      	ldr	r3, [pc, #208]	; (8006308 <xTaskResumeAll+0x120>)
 8006236:	68db      	ldr	r3, [r3, #12]
 8006238:	68db      	ldr	r3, [r3, #12]
 800623a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	3318      	adds	r3, #24
 8006240:	4618      	mov	r0, r3
 8006242:	f7fe ff5f 	bl	8005104 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	3304      	adds	r3, #4
 800624a:	4618      	mov	r0, r3
 800624c:	f7fe ff5a 	bl	8005104 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006254:	4b2d      	ldr	r3, [pc, #180]	; (800630c <xTaskResumeAll+0x124>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	429a      	cmp	r2, r3
 800625a:	d903      	bls.n	8006264 <xTaskResumeAll+0x7c>
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006260:	4a2a      	ldr	r2, [pc, #168]	; (800630c <xTaskResumeAll+0x124>)
 8006262:	6013      	str	r3, [r2, #0]
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006268:	4613      	mov	r3, r2
 800626a:	009b      	lsls	r3, r3, #2
 800626c:	4413      	add	r3, r2
 800626e:	009b      	lsls	r3, r3, #2
 8006270:	4a27      	ldr	r2, [pc, #156]	; (8006310 <xTaskResumeAll+0x128>)
 8006272:	441a      	add	r2, r3
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	3304      	adds	r3, #4
 8006278:	4619      	mov	r1, r3
 800627a:	4610      	mov	r0, r2
 800627c:	f7fe fee5 	bl	800504a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006284:	4b23      	ldr	r3, [pc, #140]	; (8006314 <xTaskResumeAll+0x12c>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800628a:	429a      	cmp	r2, r3
 800628c:	d302      	bcc.n	8006294 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800628e:	4b22      	ldr	r3, [pc, #136]	; (8006318 <xTaskResumeAll+0x130>)
 8006290:	2201      	movs	r2, #1
 8006292:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006294:	4b1c      	ldr	r3, [pc, #112]	; (8006308 <xTaskResumeAll+0x120>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d1cb      	bne.n	8006234 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d001      	beq.n	80062a6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80062a2:	f000 fbfd 	bl	8006aa0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80062a6:	4b1d      	ldr	r3, [pc, #116]	; (800631c <xTaskResumeAll+0x134>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d010      	beq.n	80062d4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80062b2:	f000 f847 	bl	8006344 <xTaskIncrementTick>
 80062b6:	4603      	mov	r3, r0
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d002      	beq.n	80062c2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80062bc:	4b16      	ldr	r3, [pc, #88]	; (8006318 <xTaskResumeAll+0x130>)
 80062be:	2201      	movs	r2, #1
 80062c0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	3b01      	subs	r3, #1
 80062c6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d1f1      	bne.n	80062b2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80062ce:	4b13      	ldr	r3, [pc, #76]	; (800631c <xTaskResumeAll+0x134>)
 80062d0:	2200      	movs	r2, #0
 80062d2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80062d4:	4b10      	ldr	r3, [pc, #64]	; (8006318 <xTaskResumeAll+0x130>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d009      	beq.n	80062f0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80062dc:	2301      	movs	r3, #1
 80062de:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80062e0:	4b0f      	ldr	r3, [pc, #60]	; (8006320 <xTaskResumeAll+0x138>)
 80062e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062e6:	601a      	str	r2, [r3, #0]
 80062e8:	f3bf 8f4f 	dsb	sy
 80062ec:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80062f0:	f001 fa70 	bl	80077d4 <vPortExitCritical>

	return xAlreadyYielded;
 80062f4:	68bb      	ldr	r3, [r7, #8]
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	3710      	adds	r7, #16
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}
 80062fe:	bf00      	nop
 8006300:	20001160 	.word	0x20001160
 8006304:	20001138 	.word	0x20001138
 8006308:	200010f8 	.word	0x200010f8
 800630c:	20001140 	.word	0x20001140
 8006310:	20000c68 	.word	0x20000c68
 8006314:	20000c64 	.word	0x20000c64
 8006318:	2000114c 	.word	0x2000114c
 800631c:	20001148 	.word	0x20001148
 8006320:	e000ed04 	.word	0xe000ed04

08006324 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006324:	b480      	push	{r7}
 8006326:	b083      	sub	sp, #12
 8006328:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800632a:	4b05      	ldr	r3, [pc, #20]	; (8006340 <xTaskGetTickCount+0x1c>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006330:	687b      	ldr	r3, [r7, #4]
}
 8006332:	4618      	mov	r0, r3
 8006334:	370c      	adds	r7, #12
 8006336:	46bd      	mov	sp, r7
 8006338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633c:	4770      	bx	lr
 800633e:	bf00      	nop
 8006340:	2000113c 	.word	0x2000113c

08006344 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b086      	sub	sp, #24
 8006348:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800634a:	2300      	movs	r3, #0
 800634c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800634e:	4b4f      	ldr	r3, [pc, #316]	; (800648c <xTaskIncrementTick+0x148>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	2b00      	cmp	r3, #0
 8006354:	f040 808f 	bne.w	8006476 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006358:	4b4d      	ldr	r3, [pc, #308]	; (8006490 <xTaskIncrementTick+0x14c>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	3301      	adds	r3, #1
 800635e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006360:	4a4b      	ldr	r2, [pc, #300]	; (8006490 <xTaskIncrementTick+0x14c>)
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d120      	bne.n	80063ae <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800636c:	4b49      	ldr	r3, [pc, #292]	; (8006494 <xTaskIncrementTick+0x150>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d00a      	beq.n	800638c <xTaskIncrementTick+0x48>
	__asm volatile
 8006376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800637a:	f383 8811 	msr	BASEPRI, r3
 800637e:	f3bf 8f6f 	isb	sy
 8006382:	f3bf 8f4f 	dsb	sy
 8006386:	603b      	str	r3, [r7, #0]
}
 8006388:	bf00      	nop
 800638a:	e7fe      	b.n	800638a <xTaskIncrementTick+0x46>
 800638c:	4b41      	ldr	r3, [pc, #260]	; (8006494 <xTaskIncrementTick+0x150>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	60fb      	str	r3, [r7, #12]
 8006392:	4b41      	ldr	r3, [pc, #260]	; (8006498 <xTaskIncrementTick+0x154>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a3f      	ldr	r2, [pc, #252]	; (8006494 <xTaskIncrementTick+0x150>)
 8006398:	6013      	str	r3, [r2, #0]
 800639a:	4a3f      	ldr	r2, [pc, #252]	; (8006498 <xTaskIncrementTick+0x154>)
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	6013      	str	r3, [r2, #0]
 80063a0:	4b3e      	ldr	r3, [pc, #248]	; (800649c <xTaskIncrementTick+0x158>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	3301      	adds	r3, #1
 80063a6:	4a3d      	ldr	r2, [pc, #244]	; (800649c <xTaskIncrementTick+0x158>)
 80063a8:	6013      	str	r3, [r2, #0]
 80063aa:	f000 fb79 	bl	8006aa0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80063ae:	4b3c      	ldr	r3, [pc, #240]	; (80064a0 <xTaskIncrementTick+0x15c>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	693a      	ldr	r2, [r7, #16]
 80063b4:	429a      	cmp	r2, r3
 80063b6:	d349      	bcc.n	800644c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80063b8:	4b36      	ldr	r3, [pc, #216]	; (8006494 <xTaskIncrementTick+0x150>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d104      	bne.n	80063cc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063c2:	4b37      	ldr	r3, [pc, #220]	; (80064a0 <xTaskIncrementTick+0x15c>)
 80063c4:	f04f 32ff 	mov.w	r2, #4294967295
 80063c8:	601a      	str	r2, [r3, #0]
					break;
 80063ca:	e03f      	b.n	800644c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063cc:	4b31      	ldr	r3, [pc, #196]	; (8006494 <xTaskIncrementTick+0x150>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	68db      	ldr	r3, [r3, #12]
 80063d2:	68db      	ldr	r3, [r3, #12]
 80063d4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80063dc:	693a      	ldr	r2, [r7, #16]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	429a      	cmp	r2, r3
 80063e2:	d203      	bcs.n	80063ec <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80063e4:	4a2e      	ldr	r2, [pc, #184]	; (80064a0 <xTaskIncrementTick+0x15c>)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80063ea:	e02f      	b.n	800644c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	3304      	adds	r3, #4
 80063f0:	4618      	mov	r0, r3
 80063f2:	f7fe fe87 	bl	8005104 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d004      	beq.n	8006408 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	3318      	adds	r3, #24
 8006402:	4618      	mov	r0, r3
 8006404:	f7fe fe7e 	bl	8005104 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800640c:	4b25      	ldr	r3, [pc, #148]	; (80064a4 <xTaskIncrementTick+0x160>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	429a      	cmp	r2, r3
 8006412:	d903      	bls.n	800641c <xTaskIncrementTick+0xd8>
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006418:	4a22      	ldr	r2, [pc, #136]	; (80064a4 <xTaskIncrementTick+0x160>)
 800641a:	6013      	str	r3, [r2, #0]
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006420:	4613      	mov	r3, r2
 8006422:	009b      	lsls	r3, r3, #2
 8006424:	4413      	add	r3, r2
 8006426:	009b      	lsls	r3, r3, #2
 8006428:	4a1f      	ldr	r2, [pc, #124]	; (80064a8 <xTaskIncrementTick+0x164>)
 800642a:	441a      	add	r2, r3
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	3304      	adds	r3, #4
 8006430:	4619      	mov	r1, r3
 8006432:	4610      	mov	r0, r2
 8006434:	f7fe fe09 	bl	800504a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800643c:	4b1b      	ldr	r3, [pc, #108]	; (80064ac <xTaskIncrementTick+0x168>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006442:	429a      	cmp	r2, r3
 8006444:	d3b8      	bcc.n	80063b8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006446:	2301      	movs	r3, #1
 8006448:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800644a:	e7b5      	b.n	80063b8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800644c:	4b17      	ldr	r3, [pc, #92]	; (80064ac <xTaskIncrementTick+0x168>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006452:	4915      	ldr	r1, [pc, #84]	; (80064a8 <xTaskIncrementTick+0x164>)
 8006454:	4613      	mov	r3, r2
 8006456:	009b      	lsls	r3, r3, #2
 8006458:	4413      	add	r3, r2
 800645a:	009b      	lsls	r3, r3, #2
 800645c:	440b      	add	r3, r1
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	2b01      	cmp	r3, #1
 8006462:	d901      	bls.n	8006468 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006464:	2301      	movs	r3, #1
 8006466:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006468:	4b11      	ldr	r3, [pc, #68]	; (80064b0 <xTaskIncrementTick+0x16c>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d007      	beq.n	8006480 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006470:	2301      	movs	r3, #1
 8006472:	617b      	str	r3, [r7, #20]
 8006474:	e004      	b.n	8006480 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006476:	4b0f      	ldr	r3, [pc, #60]	; (80064b4 <xTaskIncrementTick+0x170>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	3301      	adds	r3, #1
 800647c:	4a0d      	ldr	r2, [pc, #52]	; (80064b4 <xTaskIncrementTick+0x170>)
 800647e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006480:	697b      	ldr	r3, [r7, #20]
}
 8006482:	4618      	mov	r0, r3
 8006484:	3718      	adds	r7, #24
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}
 800648a:	bf00      	nop
 800648c:	20001160 	.word	0x20001160
 8006490:	2000113c 	.word	0x2000113c
 8006494:	200010f0 	.word	0x200010f0
 8006498:	200010f4 	.word	0x200010f4
 800649c:	20001150 	.word	0x20001150
 80064a0:	20001158 	.word	0x20001158
 80064a4:	20001140 	.word	0x20001140
 80064a8:	20000c68 	.word	0x20000c68
 80064ac:	20000c64 	.word	0x20000c64
 80064b0:	2000114c 	.word	0x2000114c
 80064b4:	20001148 	.word	0x20001148

080064b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80064b8:	b480      	push	{r7}
 80064ba:	b085      	sub	sp, #20
 80064bc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80064be:	4b2a      	ldr	r3, [pc, #168]	; (8006568 <vTaskSwitchContext+0xb0>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d003      	beq.n	80064ce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80064c6:	4b29      	ldr	r3, [pc, #164]	; (800656c <vTaskSwitchContext+0xb4>)
 80064c8:	2201      	movs	r2, #1
 80064ca:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80064cc:	e046      	b.n	800655c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80064ce:	4b27      	ldr	r3, [pc, #156]	; (800656c <vTaskSwitchContext+0xb4>)
 80064d0:	2200      	movs	r2, #0
 80064d2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064d4:	4b26      	ldr	r3, [pc, #152]	; (8006570 <vTaskSwitchContext+0xb8>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	60fb      	str	r3, [r7, #12]
 80064da:	e010      	b.n	80064fe <vTaskSwitchContext+0x46>
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d10a      	bne.n	80064f8 <vTaskSwitchContext+0x40>
	__asm volatile
 80064e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064e6:	f383 8811 	msr	BASEPRI, r3
 80064ea:	f3bf 8f6f 	isb	sy
 80064ee:	f3bf 8f4f 	dsb	sy
 80064f2:	607b      	str	r3, [r7, #4]
}
 80064f4:	bf00      	nop
 80064f6:	e7fe      	b.n	80064f6 <vTaskSwitchContext+0x3e>
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	3b01      	subs	r3, #1
 80064fc:	60fb      	str	r3, [r7, #12]
 80064fe:	491d      	ldr	r1, [pc, #116]	; (8006574 <vTaskSwitchContext+0xbc>)
 8006500:	68fa      	ldr	r2, [r7, #12]
 8006502:	4613      	mov	r3, r2
 8006504:	009b      	lsls	r3, r3, #2
 8006506:	4413      	add	r3, r2
 8006508:	009b      	lsls	r3, r3, #2
 800650a:	440b      	add	r3, r1
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d0e4      	beq.n	80064dc <vTaskSwitchContext+0x24>
 8006512:	68fa      	ldr	r2, [r7, #12]
 8006514:	4613      	mov	r3, r2
 8006516:	009b      	lsls	r3, r3, #2
 8006518:	4413      	add	r3, r2
 800651a:	009b      	lsls	r3, r3, #2
 800651c:	4a15      	ldr	r2, [pc, #84]	; (8006574 <vTaskSwitchContext+0xbc>)
 800651e:	4413      	add	r3, r2
 8006520:	60bb      	str	r3, [r7, #8]
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	685b      	ldr	r3, [r3, #4]
 8006526:	685a      	ldr	r2, [r3, #4]
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	605a      	str	r2, [r3, #4]
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	685a      	ldr	r2, [r3, #4]
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	3308      	adds	r3, #8
 8006534:	429a      	cmp	r2, r3
 8006536:	d104      	bne.n	8006542 <vTaskSwitchContext+0x8a>
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	685b      	ldr	r3, [r3, #4]
 800653c:	685a      	ldr	r2, [r3, #4]
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	605a      	str	r2, [r3, #4]
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	685b      	ldr	r3, [r3, #4]
 8006546:	68db      	ldr	r3, [r3, #12]
 8006548:	4a0b      	ldr	r2, [pc, #44]	; (8006578 <vTaskSwitchContext+0xc0>)
 800654a:	6013      	str	r3, [r2, #0]
 800654c:	4a08      	ldr	r2, [pc, #32]	; (8006570 <vTaskSwitchContext+0xb8>)
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006552:	4b09      	ldr	r3, [pc, #36]	; (8006578 <vTaskSwitchContext+0xc0>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	3354      	adds	r3, #84	; 0x54
 8006558:	4a08      	ldr	r2, [pc, #32]	; (800657c <vTaskSwitchContext+0xc4>)
 800655a:	6013      	str	r3, [r2, #0]
}
 800655c:	bf00      	nop
 800655e:	3714      	adds	r7, #20
 8006560:	46bd      	mov	sp, r7
 8006562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006566:	4770      	bx	lr
 8006568:	20001160 	.word	0x20001160
 800656c:	2000114c 	.word	0x2000114c
 8006570:	20001140 	.word	0x20001140
 8006574:	20000c68 	.word	0x20000c68
 8006578:	20000c64 	.word	0x20000c64
 800657c:	20000014 	.word	0x20000014

08006580 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b084      	sub	sp, #16
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
 8006588:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d10a      	bne.n	80065a6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006594:	f383 8811 	msr	BASEPRI, r3
 8006598:	f3bf 8f6f 	isb	sy
 800659c:	f3bf 8f4f 	dsb	sy
 80065a0:	60fb      	str	r3, [r7, #12]
}
 80065a2:	bf00      	nop
 80065a4:	e7fe      	b.n	80065a4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80065a6:	4b07      	ldr	r3, [pc, #28]	; (80065c4 <vTaskPlaceOnEventList+0x44>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	3318      	adds	r3, #24
 80065ac:	4619      	mov	r1, r3
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f7fe fd6f 	bl	8005092 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80065b4:	2101      	movs	r1, #1
 80065b6:	6838      	ldr	r0, [r7, #0]
 80065b8:	f000 fb36 	bl	8006c28 <prvAddCurrentTaskToDelayedList>
}
 80065bc:	bf00      	nop
 80065be:	3710      	adds	r7, #16
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bd80      	pop	{r7, pc}
 80065c4:	20000c64 	.word	0x20000c64

080065c8 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b086      	sub	sp, #24
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	60f8      	str	r0, [r7, #12]
 80065d0:	60b9      	str	r1, [r7, #8]
 80065d2:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d10a      	bne.n	80065f0 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 80065da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065de:	f383 8811 	msr	BASEPRI, r3
 80065e2:	f3bf 8f6f 	isb	sy
 80065e6:	f3bf 8f4f 	dsb	sy
 80065ea:	617b      	str	r3, [r7, #20]
}
 80065ec:	bf00      	nop
 80065ee:	e7fe      	b.n	80065ee <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 80065f0:	4b11      	ldr	r3, [pc, #68]	; (8006638 <vTaskPlaceOnUnorderedEventList+0x70>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d10a      	bne.n	800660e <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 80065f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065fc:	f383 8811 	msr	BASEPRI, r3
 8006600:	f3bf 8f6f 	isb	sy
 8006604:	f3bf 8f4f 	dsb	sy
 8006608:	613b      	str	r3, [r7, #16]
}
 800660a:	bf00      	nop
 800660c:	e7fe      	b.n	800660c <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800660e:	4b0b      	ldr	r3, [pc, #44]	; (800663c <vTaskPlaceOnUnorderedEventList+0x74>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	68ba      	ldr	r2, [r7, #8]
 8006614:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8006618:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800661a:	4b08      	ldr	r3, [pc, #32]	; (800663c <vTaskPlaceOnUnorderedEventList+0x74>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	3318      	adds	r3, #24
 8006620:	4619      	mov	r1, r3
 8006622:	68f8      	ldr	r0, [r7, #12]
 8006624:	f7fe fd11 	bl	800504a <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006628:	2101      	movs	r1, #1
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f000 fafc 	bl	8006c28 <prvAddCurrentTaskToDelayedList>
}
 8006630:	bf00      	nop
 8006632:	3718      	adds	r7, #24
 8006634:	46bd      	mov	sp, r7
 8006636:	bd80      	pop	{r7, pc}
 8006638:	20001160 	.word	0x20001160
 800663c:	20000c64 	.word	0x20000c64

08006640 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006640:	b580      	push	{r7, lr}
 8006642:	b086      	sub	sp, #24
 8006644:	af00      	add	r7, sp, #0
 8006646:	60f8      	str	r0, [r7, #12]
 8006648:	60b9      	str	r1, [r7, #8]
 800664a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d10a      	bne.n	8006668 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006656:	f383 8811 	msr	BASEPRI, r3
 800665a:	f3bf 8f6f 	isb	sy
 800665e:	f3bf 8f4f 	dsb	sy
 8006662:	617b      	str	r3, [r7, #20]
}
 8006664:	bf00      	nop
 8006666:	e7fe      	b.n	8006666 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006668:	4b0a      	ldr	r3, [pc, #40]	; (8006694 <vTaskPlaceOnEventListRestricted+0x54>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	3318      	adds	r3, #24
 800666e:	4619      	mov	r1, r3
 8006670:	68f8      	ldr	r0, [r7, #12]
 8006672:	f7fe fcea 	bl	800504a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d002      	beq.n	8006682 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800667c:	f04f 33ff 	mov.w	r3, #4294967295
 8006680:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006682:	6879      	ldr	r1, [r7, #4]
 8006684:	68b8      	ldr	r0, [r7, #8]
 8006686:	f000 facf 	bl	8006c28 <prvAddCurrentTaskToDelayedList>
	}
 800668a:	bf00      	nop
 800668c:	3718      	adds	r7, #24
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}
 8006692:	bf00      	nop
 8006694:	20000c64 	.word	0x20000c64

08006698 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b086      	sub	sp, #24
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	68db      	ldr	r3, [r3, #12]
 80066a4:	68db      	ldr	r3, [r3, #12]
 80066a6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80066a8:	693b      	ldr	r3, [r7, #16]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d10a      	bne.n	80066c4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80066ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066b2:	f383 8811 	msr	BASEPRI, r3
 80066b6:	f3bf 8f6f 	isb	sy
 80066ba:	f3bf 8f4f 	dsb	sy
 80066be:	60fb      	str	r3, [r7, #12]
}
 80066c0:	bf00      	nop
 80066c2:	e7fe      	b.n	80066c2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	3318      	adds	r3, #24
 80066c8:	4618      	mov	r0, r3
 80066ca:	f7fe fd1b 	bl	8005104 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80066ce:	4b1e      	ldr	r3, [pc, #120]	; (8006748 <xTaskRemoveFromEventList+0xb0>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d11d      	bne.n	8006712 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	3304      	adds	r3, #4
 80066da:	4618      	mov	r0, r3
 80066dc:	f7fe fd12 	bl	8005104 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066e4:	4b19      	ldr	r3, [pc, #100]	; (800674c <xTaskRemoveFromEventList+0xb4>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	429a      	cmp	r2, r3
 80066ea:	d903      	bls.n	80066f4 <xTaskRemoveFromEventList+0x5c>
 80066ec:	693b      	ldr	r3, [r7, #16]
 80066ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066f0:	4a16      	ldr	r2, [pc, #88]	; (800674c <xTaskRemoveFromEventList+0xb4>)
 80066f2:	6013      	str	r3, [r2, #0]
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066f8:	4613      	mov	r3, r2
 80066fa:	009b      	lsls	r3, r3, #2
 80066fc:	4413      	add	r3, r2
 80066fe:	009b      	lsls	r3, r3, #2
 8006700:	4a13      	ldr	r2, [pc, #76]	; (8006750 <xTaskRemoveFromEventList+0xb8>)
 8006702:	441a      	add	r2, r3
 8006704:	693b      	ldr	r3, [r7, #16]
 8006706:	3304      	adds	r3, #4
 8006708:	4619      	mov	r1, r3
 800670a:	4610      	mov	r0, r2
 800670c:	f7fe fc9d 	bl	800504a <vListInsertEnd>
 8006710:	e005      	b.n	800671e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	3318      	adds	r3, #24
 8006716:	4619      	mov	r1, r3
 8006718:	480e      	ldr	r0, [pc, #56]	; (8006754 <xTaskRemoveFromEventList+0xbc>)
 800671a:	f7fe fc96 	bl	800504a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006722:	4b0d      	ldr	r3, [pc, #52]	; (8006758 <xTaskRemoveFromEventList+0xc0>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006728:	429a      	cmp	r2, r3
 800672a:	d905      	bls.n	8006738 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800672c:	2301      	movs	r3, #1
 800672e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006730:	4b0a      	ldr	r3, [pc, #40]	; (800675c <xTaskRemoveFromEventList+0xc4>)
 8006732:	2201      	movs	r2, #1
 8006734:	601a      	str	r2, [r3, #0]
 8006736:	e001      	b.n	800673c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006738:	2300      	movs	r3, #0
 800673a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800673c:	697b      	ldr	r3, [r7, #20]
}
 800673e:	4618      	mov	r0, r3
 8006740:	3718      	adds	r7, #24
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}
 8006746:	bf00      	nop
 8006748:	20001160 	.word	0x20001160
 800674c:	20001140 	.word	0x20001140
 8006750:	20000c68 	.word	0x20000c68
 8006754:	200010f8 	.word	0x200010f8
 8006758:	20000c64 	.word	0x20000c64
 800675c:	2000114c 	.word	0x2000114c

08006760 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b086      	sub	sp, #24
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
 8006768:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800676a:	4b29      	ldr	r3, [pc, #164]	; (8006810 <vTaskRemoveFromUnorderedEventList+0xb0>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d10a      	bne.n	8006788 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8006772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006776:	f383 8811 	msr	BASEPRI, r3
 800677a:	f3bf 8f6f 	isb	sy
 800677e:	f3bf 8f4f 	dsb	sy
 8006782:	613b      	str	r3, [r7, #16]
}
 8006784:	bf00      	nop
 8006786:	e7fe      	b.n	8006786 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	68db      	ldr	r3, [r3, #12]
 8006796:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d10a      	bne.n	80067b4 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 800679e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067a2:	f383 8811 	msr	BASEPRI, r3
 80067a6:	f3bf 8f6f 	isb	sy
 80067aa:	f3bf 8f4f 	dsb	sy
 80067ae:	60fb      	str	r3, [r7, #12]
}
 80067b0:	bf00      	nop
 80067b2:	e7fe      	b.n	80067b2 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f7fe fca5 	bl	8005104 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	3304      	adds	r3, #4
 80067be:	4618      	mov	r0, r3
 80067c0:	f7fe fca0 	bl	8005104 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067c8:	4b12      	ldr	r3, [pc, #72]	; (8006814 <vTaskRemoveFromUnorderedEventList+0xb4>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	429a      	cmp	r2, r3
 80067ce:	d903      	bls.n	80067d8 <vTaskRemoveFromUnorderedEventList+0x78>
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067d4:	4a0f      	ldr	r2, [pc, #60]	; (8006814 <vTaskRemoveFromUnorderedEventList+0xb4>)
 80067d6:	6013      	str	r3, [r2, #0]
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067dc:	4613      	mov	r3, r2
 80067de:	009b      	lsls	r3, r3, #2
 80067e0:	4413      	add	r3, r2
 80067e2:	009b      	lsls	r3, r3, #2
 80067e4:	4a0c      	ldr	r2, [pc, #48]	; (8006818 <vTaskRemoveFromUnorderedEventList+0xb8>)
 80067e6:	441a      	add	r2, r3
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	3304      	adds	r3, #4
 80067ec:	4619      	mov	r1, r3
 80067ee:	4610      	mov	r0, r2
 80067f0:	f7fe fc2b 	bl	800504a <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067f8:	4b08      	ldr	r3, [pc, #32]	; (800681c <vTaskRemoveFromUnorderedEventList+0xbc>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067fe:	429a      	cmp	r2, r3
 8006800:	d902      	bls.n	8006808 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8006802:	4b07      	ldr	r3, [pc, #28]	; (8006820 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8006804:	2201      	movs	r2, #1
 8006806:	601a      	str	r2, [r3, #0]
	}
}
 8006808:	bf00      	nop
 800680a:	3718      	adds	r7, #24
 800680c:	46bd      	mov	sp, r7
 800680e:	bd80      	pop	{r7, pc}
 8006810:	20001160 	.word	0x20001160
 8006814:	20001140 	.word	0x20001140
 8006818:	20000c68 	.word	0x20000c68
 800681c:	20000c64 	.word	0x20000c64
 8006820:	2000114c 	.word	0x2000114c

08006824 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006824:	b480      	push	{r7}
 8006826:	b083      	sub	sp, #12
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800682c:	4b06      	ldr	r3, [pc, #24]	; (8006848 <vTaskInternalSetTimeOutState+0x24>)
 800682e:	681a      	ldr	r2, [r3, #0]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006834:	4b05      	ldr	r3, [pc, #20]	; (800684c <vTaskInternalSetTimeOutState+0x28>)
 8006836:	681a      	ldr	r2, [r3, #0]
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	605a      	str	r2, [r3, #4]
}
 800683c:	bf00      	nop
 800683e:	370c      	adds	r7, #12
 8006840:	46bd      	mov	sp, r7
 8006842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006846:	4770      	bx	lr
 8006848:	20001150 	.word	0x20001150
 800684c:	2000113c 	.word	0x2000113c

08006850 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b088      	sub	sp, #32
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
 8006858:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d10a      	bne.n	8006876 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006864:	f383 8811 	msr	BASEPRI, r3
 8006868:	f3bf 8f6f 	isb	sy
 800686c:	f3bf 8f4f 	dsb	sy
 8006870:	613b      	str	r3, [r7, #16]
}
 8006872:	bf00      	nop
 8006874:	e7fe      	b.n	8006874 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d10a      	bne.n	8006892 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800687c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006880:	f383 8811 	msr	BASEPRI, r3
 8006884:	f3bf 8f6f 	isb	sy
 8006888:	f3bf 8f4f 	dsb	sy
 800688c:	60fb      	str	r3, [r7, #12]
}
 800688e:	bf00      	nop
 8006890:	e7fe      	b.n	8006890 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006892:	f000 ff6f 	bl	8007774 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006896:	4b1d      	ldr	r3, [pc, #116]	; (800690c <xTaskCheckForTimeOut+0xbc>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	69ba      	ldr	r2, [r7, #24]
 80068a2:	1ad3      	subs	r3, r2, r3
 80068a4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068ae:	d102      	bne.n	80068b6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80068b0:	2300      	movs	r3, #0
 80068b2:	61fb      	str	r3, [r7, #28]
 80068b4:	e023      	b.n	80068fe <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681a      	ldr	r2, [r3, #0]
 80068ba:	4b15      	ldr	r3, [pc, #84]	; (8006910 <xTaskCheckForTimeOut+0xc0>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	429a      	cmp	r2, r3
 80068c0:	d007      	beq.n	80068d2 <xTaskCheckForTimeOut+0x82>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	685b      	ldr	r3, [r3, #4]
 80068c6:	69ba      	ldr	r2, [r7, #24]
 80068c8:	429a      	cmp	r2, r3
 80068ca:	d302      	bcc.n	80068d2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80068cc:	2301      	movs	r3, #1
 80068ce:	61fb      	str	r3, [r7, #28]
 80068d0:	e015      	b.n	80068fe <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	697a      	ldr	r2, [r7, #20]
 80068d8:	429a      	cmp	r2, r3
 80068da:	d20b      	bcs.n	80068f4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	681a      	ldr	r2, [r3, #0]
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	1ad2      	subs	r2, r2, r3
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f7ff ff9b 	bl	8006824 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80068ee:	2300      	movs	r3, #0
 80068f0:	61fb      	str	r3, [r7, #28]
 80068f2:	e004      	b.n	80068fe <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	2200      	movs	r2, #0
 80068f8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80068fa:	2301      	movs	r3, #1
 80068fc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80068fe:	f000 ff69 	bl	80077d4 <vPortExitCritical>

	return xReturn;
 8006902:	69fb      	ldr	r3, [r7, #28]
}
 8006904:	4618      	mov	r0, r3
 8006906:	3720      	adds	r7, #32
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}
 800690c:	2000113c 	.word	0x2000113c
 8006910:	20001150 	.word	0x20001150

08006914 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006914:	b480      	push	{r7}
 8006916:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006918:	4b03      	ldr	r3, [pc, #12]	; (8006928 <vTaskMissedYield+0x14>)
 800691a:	2201      	movs	r2, #1
 800691c:	601a      	str	r2, [r3, #0]
}
 800691e:	bf00      	nop
 8006920:	46bd      	mov	sp, r7
 8006922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006926:	4770      	bx	lr
 8006928:	2000114c 	.word	0x2000114c

0800692c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b082      	sub	sp, #8
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006934:	f000 f852 	bl	80069dc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006938:	4b06      	ldr	r3, [pc, #24]	; (8006954 <prvIdleTask+0x28>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	2b01      	cmp	r3, #1
 800693e:	d9f9      	bls.n	8006934 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006940:	4b05      	ldr	r3, [pc, #20]	; (8006958 <prvIdleTask+0x2c>)
 8006942:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006946:	601a      	str	r2, [r3, #0]
 8006948:	f3bf 8f4f 	dsb	sy
 800694c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006950:	e7f0      	b.n	8006934 <prvIdleTask+0x8>
 8006952:	bf00      	nop
 8006954:	20000c68 	.word	0x20000c68
 8006958:	e000ed04 	.word	0xe000ed04

0800695c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b082      	sub	sp, #8
 8006960:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006962:	2300      	movs	r3, #0
 8006964:	607b      	str	r3, [r7, #4]
 8006966:	e00c      	b.n	8006982 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006968:	687a      	ldr	r2, [r7, #4]
 800696a:	4613      	mov	r3, r2
 800696c:	009b      	lsls	r3, r3, #2
 800696e:	4413      	add	r3, r2
 8006970:	009b      	lsls	r3, r3, #2
 8006972:	4a12      	ldr	r2, [pc, #72]	; (80069bc <prvInitialiseTaskLists+0x60>)
 8006974:	4413      	add	r3, r2
 8006976:	4618      	mov	r0, r3
 8006978:	f7fe fb3a 	bl	8004ff0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	3301      	adds	r3, #1
 8006980:	607b      	str	r3, [r7, #4]
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2b37      	cmp	r3, #55	; 0x37
 8006986:	d9ef      	bls.n	8006968 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006988:	480d      	ldr	r0, [pc, #52]	; (80069c0 <prvInitialiseTaskLists+0x64>)
 800698a:	f7fe fb31 	bl	8004ff0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800698e:	480d      	ldr	r0, [pc, #52]	; (80069c4 <prvInitialiseTaskLists+0x68>)
 8006990:	f7fe fb2e 	bl	8004ff0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006994:	480c      	ldr	r0, [pc, #48]	; (80069c8 <prvInitialiseTaskLists+0x6c>)
 8006996:	f7fe fb2b 	bl	8004ff0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800699a:	480c      	ldr	r0, [pc, #48]	; (80069cc <prvInitialiseTaskLists+0x70>)
 800699c:	f7fe fb28 	bl	8004ff0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80069a0:	480b      	ldr	r0, [pc, #44]	; (80069d0 <prvInitialiseTaskLists+0x74>)
 80069a2:	f7fe fb25 	bl	8004ff0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80069a6:	4b0b      	ldr	r3, [pc, #44]	; (80069d4 <prvInitialiseTaskLists+0x78>)
 80069a8:	4a05      	ldr	r2, [pc, #20]	; (80069c0 <prvInitialiseTaskLists+0x64>)
 80069aa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80069ac:	4b0a      	ldr	r3, [pc, #40]	; (80069d8 <prvInitialiseTaskLists+0x7c>)
 80069ae:	4a05      	ldr	r2, [pc, #20]	; (80069c4 <prvInitialiseTaskLists+0x68>)
 80069b0:	601a      	str	r2, [r3, #0]
}
 80069b2:	bf00      	nop
 80069b4:	3708      	adds	r7, #8
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}
 80069ba:	bf00      	nop
 80069bc:	20000c68 	.word	0x20000c68
 80069c0:	200010c8 	.word	0x200010c8
 80069c4:	200010dc 	.word	0x200010dc
 80069c8:	200010f8 	.word	0x200010f8
 80069cc:	2000110c 	.word	0x2000110c
 80069d0:	20001124 	.word	0x20001124
 80069d4:	200010f0 	.word	0x200010f0
 80069d8:	200010f4 	.word	0x200010f4

080069dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b082      	sub	sp, #8
 80069e0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80069e2:	e019      	b.n	8006a18 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80069e4:	f000 fec6 	bl	8007774 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069e8:	4b10      	ldr	r3, [pc, #64]	; (8006a2c <prvCheckTasksWaitingTermination+0x50>)
 80069ea:	68db      	ldr	r3, [r3, #12]
 80069ec:	68db      	ldr	r3, [r3, #12]
 80069ee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	3304      	adds	r3, #4
 80069f4:	4618      	mov	r0, r3
 80069f6:	f7fe fb85 	bl	8005104 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80069fa:	4b0d      	ldr	r3, [pc, #52]	; (8006a30 <prvCheckTasksWaitingTermination+0x54>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	3b01      	subs	r3, #1
 8006a00:	4a0b      	ldr	r2, [pc, #44]	; (8006a30 <prvCheckTasksWaitingTermination+0x54>)
 8006a02:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006a04:	4b0b      	ldr	r3, [pc, #44]	; (8006a34 <prvCheckTasksWaitingTermination+0x58>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	3b01      	subs	r3, #1
 8006a0a:	4a0a      	ldr	r2, [pc, #40]	; (8006a34 <prvCheckTasksWaitingTermination+0x58>)
 8006a0c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006a0e:	f000 fee1 	bl	80077d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f000 f810 	bl	8006a38 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006a18:	4b06      	ldr	r3, [pc, #24]	; (8006a34 <prvCheckTasksWaitingTermination+0x58>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d1e1      	bne.n	80069e4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006a20:	bf00      	nop
 8006a22:	bf00      	nop
 8006a24:	3708      	adds	r7, #8
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}
 8006a2a:	bf00      	nop
 8006a2c:	2000110c 	.word	0x2000110c
 8006a30:	20001138 	.word	0x20001138
 8006a34:	20001120 	.word	0x20001120

08006a38 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b084      	sub	sp, #16
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	3354      	adds	r3, #84	; 0x54
 8006a44:	4618      	mov	r0, r3
 8006a46:	f001 f9eb 	bl	8007e20 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d108      	bne.n	8006a66 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a58:	4618      	mov	r0, r3
 8006a5a:	f001 f879 	bl	8007b50 <vPortFree>
				vPortFree( pxTCB );
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f001 f876 	bl	8007b50 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006a64:	e018      	b.n	8006a98 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006a6c:	2b01      	cmp	r3, #1
 8006a6e:	d103      	bne.n	8006a78 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f001 f86d 	bl	8007b50 <vPortFree>
	}
 8006a76:	e00f      	b.n	8006a98 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006a7e:	2b02      	cmp	r3, #2
 8006a80:	d00a      	beq.n	8006a98 <prvDeleteTCB+0x60>
	__asm volatile
 8006a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a86:	f383 8811 	msr	BASEPRI, r3
 8006a8a:	f3bf 8f6f 	isb	sy
 8006a8e:	f3bf 8f4f 	dsb	sy
 8006a92:	60fb      	str	r3, [r7, #12]
}
 8006a94:	bf00      	nop
 8006a96:	e7fe      	b.n	8006a96 <prvDeleteTCB+0x5e>
	}
 8006a98:	bf00      	nop
 8006a9a:	3710      	adds	r7, #16
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}

08006aa0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b083      	sub	sp, #12
 8006aa4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006aa6:	4b0c      	ldr	r3, [pc, #48]	; (8006ad8 <prvResetNextTaskUnblockTime+0x38>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d104      	bne.n	8006aba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006ab0:	4b0a      	ldr	r3, [pc, #40]	; (8006adc <prvResetNextTaskUnblockTime+0x3c>)
 8006ab2:	f04f 32ff 	mov.w	r2, #4294967295
 8006ab6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006ab8:	e008      	b.n	8006acc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006aba:	4b07      	ldr	r3, [pc, #28]	; (8006ad8 <prvResetNextTaskUnblockTime+0x38>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	68db      	ldr	r3, [r3, #12]
 8006ac0:	68db      	ldr	r3, [r3, #12]
 8006ac2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	685b      	ldr	r3, [r3, #4]
 8006ac8:	4a04      	ldr	r2, [pc, #16]	; (8006adc <prvResetNextTaskUnblockTime+0x3c>)
 8006aca:	6013      	str	r3, [r2, #0]
}
 8006acc:	bf00      	nop
 8006ace:	370c      	adds	r7, #12
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad6:	4770      	bx	lr
 8006ad8:	200010f0 	.word	0x200010f0
 8006adc:	20001158 	.word	0x20001158

08006ae0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b083      	sub	sp, #12
 8006ae4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006ae6:	4b0b      	ldr	r3, [pc, #44]	; (8006b14 <xTaskGetSchedulerState+0x34>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d102      	bne.n	8006af4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006aee:	2301      	movs	r3, #1
 8006af0:	607b      	str	r3, [r7, #4]
 8006af2:	e008      	b.n	8006b06 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006af4:	4b08      	ldr	r3, [pc, #32]	; (8006b18 <xTaskGetSchedulerState+0x38>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d102      	bne.n	8006b02 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006afc:	2302      	movs	r3, #2
 8006afe:	607b      	str	r3, [r7, #4]
 8006b00:	e001      	b.n	8006b06 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006b02:	2300      	movs	r3, #0
 8006b04:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006b06:	687b      	ldr	r3, [r7, #4]
	}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	370c      	adds	r7, #12
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b12:	4770      	bx	lr
 8006b14:	20001144 	.word	0x20001144
 8006b18:	20001160 	.word	0x20001160

08006b1c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b086      	sub	sp, #24
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d056      	beq.n	8006be0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006b32:	4b2e      	ldr	r3, [pc, #184]	; (8006bec <xTaskPriorityDisinherit+0xd0>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	693a      	ldr	r2, [r7, #16]
 8006b38:	429a      	cmp	r2, r3
 8006b3a:	d00a      	beq.n	8006b52 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b40:	f383 8811 	msr	BASEPRI, r3
 8006b44:	f3bf 8f6f 	isb	sy
 8006b48:	f3bf 8f4f 	dsb	sy
 8006b4c:	60fb      	str	r3, [r7, #12]
}
 8006b4e:	bf00      	nop
 8006b50:	e7fe      	b.n	8006b50 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006b52:	693b      	ldr	r3, [r7, #16]
 8006b54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d10a      	bne.n	8006b70 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b5e:	f383 8811 	msr	BASEPRI, r3
 8006b62:	f3bf 8f6f 	isb	sy
 8006b66:	f3bf 8f4f 	dsb	sy
 8006b6a:	60bb      	str	r3, [r7, #8]
}
 8006b6c:	bf00      	nop
 8006b6e:	e7fe      	b.n	8006b6e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b74:	1e5a      	subs	r2, r3, #1
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006b7a:	693b      	ldr	r3, [r7, #16]
 8006b7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b82:	429a      	cmp	r2, r3
 8006b84:	d02c      	beq.n	8006be0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006b86:	693b      	ldr	r3, [r7, #16]
 8006b88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d128      	bne.n	8006be0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	3304      	adds	r3, #4
 8006b92:	4618      	mov	r0, r3
 8006b94:	f7fe fab6 	bl	8005104 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006b98:	693b      	ldr	r3, [r7, #16]
 8006b9a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006b9c:	693b      	ldr	r3, [r7, #16]
 8006b9e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ba0:	693b      	ldr	r3, [r7, #16]
 8006ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ba4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bb0:	4b0f      	ldr	r3, [pc, #60]	; (8006bf0 <xTaskPriorityDisinherit+0xd4>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	429a      	cmp	r2, r3
 8006bb6:	d903      	bls.n	8006bc0 <xTaskPriorityDisinherit+0xa4>
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bbc:	4a0c      	ldr	r2, [pc, #48]	; (8006bf0 <xTaskPriorityDisinherit+0xd4>)
 8006bbe:	6013      	str	r3, [r2, #0]
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bc4:	4613      	mov	r3, r2
 8006bc6:	009b      	lsls	r3, r3, #2
 8006bc8:	4413      	add	r3, r2
 8006bca:	009b      	lsls	r3, r3, #2
 8006bcc:	4a09      	ldr	r2, [pc, #36]	; (8006bf4 <xTaskPriorityDisinherit+0xd8>)
 8006bce:	441a      	add	r2, r3
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	3304      	adds	r3, #4
 8006bd4:	4619      	mov	r1, r3
 8006bd6:	4610      	mov	r0, r2
 8006bd8:	f7fe fa37 	bl	800504a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006bdc:	2301      	movs	r3, #1
 8006bde:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006be0:	697b      	ldr	r3, [r7, #20]
	}
 8006be2:	4618      	mov	r0, r3
 8006be4:	3718      	adds	r7, #24
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}
 8006bea:	bf00      	nop
 8006bec:	20000c64 	.word	0x20000c64
 8006bf0:	20001140 	.word	0x20001140
 8006bf4:	20000c68 	.word	0x20000c68

08006bf8 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	b083      	sub	sp, #12
 8006bfc:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8006bfe:	4b09      	ldr	r3, [pc, #36]	; (8006c24 <uxTaskResetEventItemValue+0x2c>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	699b      	ldr	r3, [r3, #24]
 8006c04:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c06:	4b07      	ldr	r3, [pc, #28]	; (8006c24 <uxTaskResetEventItemValue+0x2c>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c0c:	4b05      	ldr	r3, [pc, #20]	; (8006c24 <uxTaskResetEventItemValue+0x2c>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8006c14:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8006c16:	687b      	ldr	r3, [r7, #4]
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	370c      	adds	r7, #12
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c22:	4770      	bx	lr
 8006c24:	20000c64 	.word	0x20000c64

08006c28 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b084      	sub	sp, #16
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
 8006c30:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006c32:	4b21      	ldr	r3, [pc, #132]	; (8006cb8 <prvAddCurrentTaskToDelayedList+0x90>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c38:	4b20      	ldr	r3, [pc, #128]	; (8006cbc <prvAddCurrentTaskToDelayedList+0x94>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	3304      	adds	r3, #4
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f7fe fa60 	bl	8005104 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c4a:	d10a      	bne.n	8006c62 <prvAddCurrentTaskToDelayedList+0x3a>
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d007      	beq.n	8006c62 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c52:	4b1a      	ldr	r3, [pc, #104]	; (8006cbc <prvAddCurrentTaskToDelayedList+0x94>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	3304      	adds	r3, #4
 8006c58:	4619      	mov	r1, r3
 8006c5a:	4819      	ldr	r0, [pc, #100]	; (8006cc0 <prvAddCurrentTaskToDelayedList+0x98>)
 8006c5c:	f7fe f9f5 	bl	800504a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006c60:	e026      	b.n	8006cb0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006c62:	68fa      	ldr	r2, [r7, #12]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	4413      	add	r3, r2
 8006c68:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006c6a:	4b14      	ldr	r3, [pc, #80]	; (8006cbc <prvAddCurrentTaskToDelayedList+0x94>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	68ba      	ldr	r2, [r7, #8]
 8006c70:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006c72:	68ba      	ldr	r2, [r7, #8]
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	429a      	cmp	r2, r3
 8006c78:	d209      	bcs.n	8006c8e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c7a:	4b12      	ldr	r3, [pc, #72]	; (8006cc4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006c7c:	681a      	ldr	r2, [r3, #0]
 8006c7e:	4b0f      	ldr	r3, [pc, #60]	; (8006cbc <prvAddCurrentTaskToDelayedList+0x94>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	3304      	adds	r3, #4
 8006c84:	4619      	mov	r1, r3
 8006c86:	4610      	mov	r0, r2
 8006c88:	f7fe fa03 	bl	8005092 <vListInsert>
}
 8006c8c:	e010      	b.n	8006cb0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c8e:	4b0e      	ldr	r3, [pc, #56]	; (8006cc8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006c90:	681a      	ldr	r2, [r3, #0]
 8006c92:	4b0a      	ldr	r3, [pc, #40]	; (8006cbc <prvAddCurrentTaskToDelayedList+0x94>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	3304      	adds	r3, #4
 8006c98:	4619      	mov	r1, r3
 8006c9a:	4610      	mov	r0, r2
 8006c9c:	f7fe f9f9 	bl	8005092 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006ca0:	4b0a      	ldr	r3, [pc, #40]	; (8006ccc <prvAddCurrentTaskToDelayedList+0xa4>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	68ba      	ldr	r2, [r7, #8]
 8006ca6:	429a      	cmp	r2, r3
 8006ca8:	d202      	bcs.n	8006cb0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006caa:	4a08      	ldr	r2, [pc, #32]	; (8006ccc <prvAddCurrentTaskToDelayedList+0xa4>)
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	6013      	str	r3, [r2, #0]
}
 8006cb0:	bf00      	nop
 8006cb2:	3710      	adds	r7, #16
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd80      	pop	{r7, pc}
 8006cb8:	2000113c 	.word	0x2000113c
 8006cbc:	20000c64 	.word	0x20000c64
 8006cc0:	20001124 	.word	0x20001124
 8006cc4:	200010f4 	.word	0x200010f4
 8006cc8:	200010f0 	.word	0x200010f0
 8006ccc:	20001158 	.word	0x20001158

08006cd0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b08a      	sub	sp, #40	; 0x28
 8006cd4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006cda:	f000 fba1 	bl	8007420 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006cde:	4b1c      	ldr	r3, [pc, #112]	; (8006d50 <xTimerCreateTimerTask+0x80>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d021      	beq.n	8006d2a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006cea:	2300      	movs	r3, #0
 8006cec:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006cee:	1d3a      	adds	r2, r7, #4
 8006cf0:	f107 0108 	add.w	r1, r7, #8
 8006cf4:	f107 030c 	add.w	r3, r7, #12
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f7fd ff71 	bl	8004be0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006cfe:	6879      	ldr	r1, [r7, #4]
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	68fa      	ldr	r2, [r7, #12]
 8006d04:	9202      	str	r2, [sp, #8]
 8006d06:	9301      	str	r3, [sp, #4]
 8006d08:	2302      	movs	r3, #2
 8006d0a:	9300      	str	r3, [sp, #0]
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	460a      	mov	r2, r1
 8006d10:	4910      	ldr	r1, [pc, #64]	; (8006d54 <xTimerCreateTimerTask+0x84>)
 8006d12:	4811      	ldr	r0, [pc, #68]	; (8006d58 <xTimerCreateTimerTask+0x88>)
 8006d14:	f7fe fffe 	bl	8005d14 <xTaskCreateStatic>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	4a10      	ldr	r2, [pc, #64]	; (8006d5c <xTimerCreateTimerTask+0x8c>)
 8006d1c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006d1e:	4b0f      	ldr	r3, [pc, #60]	; (8006d5c <xTimerCreateTimerTask+0x8c>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d001      	beq.n	8006d2a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006d26:	2301      	movs	r3, #1
 8006d28:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d10a      	bne.n	8006d46 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d34:	f383 8811 	msr	BASEPRI, r3
 8006d38:	f3bf 8f6f 	isb	sy
 8006d3c:	f3bf 8f4f 	dsb	sy
 8006d40:	613b      	str	r3, [r7, #16]
}
 8006d42:	bf00      	nop
 8006d44:	e7fe      	b.n	8006d44 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006d46:	697b      	ldr	r3, [r7, #20]
}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	3718      	adds	r7, #24
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}
 8006d50:	20001194 	.word	0x20001194
 8006d54:	08008030 	.word	0x08008030
 8006d58:	08006fc9 	.word	0x08006fc9
 8006d5c:	20001198 	.word	0x20001198

08006d60 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b088      	sub	sp, #32
 8006d64:	af02      	add	r7, sp, #8
 8006d66:	60f8      	str	r0, [r7, #12]
 8006d68:	60b9      	str	r1, [r7, #8]
 8006d6a:	607a      	str	r2, [r7, #4]
 8006d6c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8006d6e:	202c      	movs	r0, #44	; 0x2c
 8006d70:	f000 fe22 	bl	80079b8 <pvPortMalloc>
 8006d74:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8006d76:	697b      	ldr	r3, [r7, #20]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d00d      	beq.n	8006d98 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8006d7c:	697b      	ldr	r3, [r7, #20]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	9301      	str	r3, [sp, #4]
 8006d88:	6a3b      	ldr	r3, [r7, #32]
 8006d8a:	9300      	str	r3, [sp, #0]
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	687a      	ldr	r2, [r7, #4]
 8006d90:	68b9      	ldr	r1, [r7, #8]
 8006d92:	68f8      	ldr	r0, [r7, #12]
 8006d94:	f000 f843 	bl	8006e1e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8006d98:	697b      	ldr	r3, [r7, #20]
	}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	3718      	adds	r7, #24
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}

08006da2 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8006da2:	b580      	push	{r7, lr}
 8006da4:	b08a      	sub	sp, #40	; 0x28
 8006da6:	af02      	add	r7, sp, #8
 8006da8:	60f8      	str	r0, [r7, #12]
 8006daa:	60b9      	str	r1, [r7, #8]
 8006dac:	607a      	str	r2, [r7, #4]
 8006dae:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8006db0:	232c      	movs	r3, #44	; 0x2c
 8006db2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8006db4:	693b      	ldr	r3, [r7, #16]
 8006db6:	2b2c      	cmp	r3, #44	; 0x2c
 8006db8:	d00a      	beq.n	8006dd0 <xTimerCreateStatic+0x2e>
	__asm volatile
 8006dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dbe:	f383 8811 	msr	BASEPRI, r3
 8006dc2:	f3bf 8f6f 	isb	sy
 8006dc6:	f3bf 8f4f 	dsb	sy
 8006dca:	61bb      	str	r3, [r7, #24]
}
 8006dcc:	bf00      	nop
 8006dce:	e7fe      	b.n	8006dce <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006dd0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8006dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d10a      	bne.n	8006dee <xTimerCreateStatic+0x4c>
	__asm volatile
 8006dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ddc:	f383 8811 	msr	BASEPRI, r3
 8006de0:	f3bf 8f6f 	isb	sy
 8006de4:	f3bf 8f4f 	dsb	sy
 8006de8:	617b      	str	r3, [r7, #20]
}
 8006dea:	bf00      	nop
 8006dec:	e7fe      	b.n	8006dec <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8006dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006df0:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8006df2:	69fb      	ldr	r3, [r7, #28]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d00d      	beq.n	8006e14 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8006df8:	69fb      	ldr	r3, [r7, #28]
 8006dfa:	2202      	movs	r2, #2
 8006dfc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8006e00:	69fb      	ldr	r3, [r7, #28]
 8006e02:	9301      	str	r3, [sp, #4]
 8006e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e06:	9300      	str	r3, [sp, #0]
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	687a      	ldr	r2, [r7, #4]
 8006e0c:	68b9      	ldr	r1, [r7, #8]
 8006e0e:	68f8      	ldr	r0, [r7, #12]
 8006e10:	f000 f805 	bl	8006e1e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8006e14:	69fb      	ldr	r3, [r7, #28]
	}
 8006e16:	4618      	mov	r0, r3
 8006e18:	3720      	adds	r7, #32
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}

08006e1e <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8006e1e:	b580      	push	{r7, lr}
 8006e20:	b086      	sub	sp, #24
 8006e22:	af00      	add	r7, sp, #0
 8006e24:	60f8      	str	r0, [r7, #12]
 8006e26:	60b9      	str	r1, [r7, #8]
 8006e28:	607a      	str	r2, [r7, #4]
 8006e2a:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d10a      	bne.n	8006e48 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8006e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e36:	f383 8811 	msr	BASEPRI, r3
 8006e3a:	f3bf 8f6f 	isb	sy
 8006e3e:	f3bf 8f4f 	dsb	sy
 8006e42:	617b      	str	r3, [r7, #20]
}
 8006e44:	bf00      	nop
 8006e46:	e7fe      	b.n	8006e46 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8006e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d01e      	beq.n	8006e8c <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8006e4e:	f000 fae7 	bl	8007420 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8006e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e54:	68fa      	ldr	r2, [r7, #12]
 8006e56:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8006e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e5a:	68ba      	ldr	r2, [r7, #8]
 8006e5c:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8006e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e60:	683a      	ldr	r2, [r7, #0]
 8006e62:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8006e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e66:	6a3a      	ldr	r2, [r7, #32]
 8006e68:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8006e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e6c:	3304      	adds	r3, #4
 8006e6e:	4618      	mov	r0, r3
 8006e70:	f7fe f8de 	bl	8005030 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d008      	beq.n	8006e8c <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8006e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e80:	f043 0304 	orr.w	r3, r3, #4
 8006e84:	b2da      	uxtb	r2, r3
 8006e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e88:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8006e8c:	bf00      	nop
 8006e8e:	3718      	adds	r7, #24
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd80      	pop	{r7, pc}

08006e94 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b08a      	sub	sp, #40	; 0x28
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	60f8      	str	r0, [r7, #12]
 8006e9c:	60b9      	str	r1, [r7, #8]
 8006e9e:	607a      	str	r2, [r7, #4]
 8006ea0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d10a      	bne.n	8006ec2 <xTimerGenericCommand+0x2e>
	__asm volatile
 8006eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eb0:	f383 8811 	msr	BASEPRI, r3
 8006eb4:	f3bf 8f6f 	isb	sy
 8006eb8:	f3bf 8f4f 	dsb	sy
 8006ebc:	623b      	str	r3, [r7, #32]
}
 8006ebe:	bf00      	nop
 8006ec0:	e7fe      	b.n	8006ec0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006ec2:	4b1a      	ldr	r3, [pc, #104]	; (8006f2c <xTimerGenericCommand+0x98>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d02a      	beq.n	8006f20 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	2b05      	cmp	r3, #5
 8006eda:	dc18      	bgt.n	8006f0e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006edc:	f7ff fe00 	bl	8006ae0 <xTaskGetSchedulerState>
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	2b02      	cmp	r3, #2
 8006ee4:	d109      	bne.n	8006efa <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006ee6:	4b11      	ldr	r3, [pc, #68]	; (8006f2c <xTimerGenericCommand+0x98>)
 8006ee8:	6818      	ldr	r0, [r3, #0]
 8006eea:	f107 0110 	add.w	r1, r7, #16
 8006eee:	2300      	movs	r3, #0
 8006ef0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ef2:	f7fe fad9 	bl	80054a8 <xQueueGenericSend>
 8006ef6:	6278      	str	r0, [r7, #36]	; 0x24
 8006ef8:	e012      	b.n	8006f20 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006efa:	4b0c      	ldr	r3, [pc, #48]	; (8006f2c <xTimerGenericCommand+0x98>)
 8006efc:	6818      	ldr	r0, [r3, #0]
 8006efe:	f107 0110 	add.w	r1, r7, #16
 8006f02:	2300      	movs	r3, #0
 8006f04:	2200      	movs	r2, #0
 8006f06:	f7fe facf 	bl	80054a8 <xQueueGenericSend>
 8006f0a:	6278      	str	r0, [r7, #36]	; 0x24
 8006f0c:	e008      	b.n	8006f20 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006f0e:	4b07      	ldr	r3, [pc, #28]	; (8006f2c <xTimerGenericCommand+0x98>)
 8006f10:	6818      	ldr	r0, [r3, #0]
 8006f12:	f107 0110 	add.w	r1, r7, #16
 8006f16:	2300      	movs	r3, #0
 8006f18:	683a      	ldr	r2, [r7, #0]
 8006f1a:	f7fe fbc3 	bl	80056a4 <xQueueGenericSendFromISR>
 8006f1e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	3728      	adds	r7, #40	; 0x28
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd80      	pop	{r7, pc}
 8006f2a:	bf00      	nop
 8006f2c:	20001194 	.word	0x20001194

08006f30 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b088      	sub	sp, #32
 8006f34:	af02      	add	r7, sp, #8
 8006f36:	6078      	str	r0, [r7, #4]
 8006f38:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f3a:	4b22      	ldr	r3, [pc, #136]	; (8006fc4 <prvProcessExpiredTimer+0x94>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	68db      	ldr	r3, [r3, #12]
 8006f40:	68db      	ldr	r3, [r3, #12]
 8006f42:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	3304      	adds	r3, #4
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f7fe f8db 	bl	8005104 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006f54:	f003 0304 	and.w	r3, r3, #4
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d022      	beq.n	8006fa2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	699a      	ldr	r2, [r3, #24]
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	18d1      	adds	r1, r2, r3
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	683a      	ldr	r2, [r7, #0]
 8006f68:	6978      	ldr	r0, [r7, #20]
 8006f6a:	f000 f8d1 	bl	8007110 <prvInsertTimerInActiveList>
 8006f6e:	4603      	mov	r3, r0
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d01f      	beq.n	8006fb4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006f74:	2300      	movs	r3, #0
 8006f76:	9300      	str	r3, [sp, #0]
 8006f78:	2300      	movs	r3, #0
 8006f7a:	687a      	ldr	r2, [r7, #4]
 8006f7c:	2100      	movs	r1, #0
 8006f7e:	6978      	ldr	r0, [r7, #20]
 8006f80:	f7ff ff88 	bl	8006e94 <xTimerGenericCommand>
 8006f84:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d113      	bne.n	8006fb4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f90:	f383 8811 	msr	BASEPRI, r3
 8006f94:	f3bf 8f6f 	isb	sy
 8006f98:	f3bf 8f4f 	dsb	sy
 8006f9c:	60fb      	str	r3, [r7, #12]
}
 8006f9e:	bf00      	nop
 8006fa0:	e7fe      	b.n	8006fa0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006fa2:	697b      	ldr	r3, [r7, #20]
 8006fa4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006fa8:	f023 0301 	bic.w	r3, r3, #1
 8006fac:	b2da      	uxtb	r2, r3
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	6a1b      	ldr	r3, [r3, #32]
 8006fb8:	6978      	ldr	r0, [r7, #20]
 8006fba:	4798      	blx	r3
}
 8006fbc:	bf00      	nop
 8006fbe:	3718      	adds	r7, #24
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}
 8006fc4:	2000118c 	.word	0x2000118c

08006fc8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b084      	sub	sp, #16
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006fd0:	f107 0308 	add.w	r3, r7, #8
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	f000 f857 	bl	8007088 <prvGetNextExpireTime>
 8006fda:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	4619      	mov	r1, r3
 8006fe0:	68f8      	ldr	r0, [r7, #12]
 8006fe2:	f000 f803 	bl	8006fec <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006fe6:	f000 f8d5 	bl	8007194 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006fea:	e7f1      	b.n	8006fd0 <prvTimerTask+0x8>

08006fec <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b084      	sub	sp, #16
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
 8006ff4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006ff6:	f7ff f8e9 	bl	80061cc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006ffa:	f107 0308 	add.w	r3, r7, #8
 8006ffe:	4618      	mov	r0, r3
 8007000:	f000 f866 	bl	80070d0 <prvSampleTimeNow>
 8007004:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d130      	bne.n	800706e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d10a      	bne.n	8007028 <prvProcessTimerOrBlockTask+0x3c>
 8007012:	687a      	ldr	r2, [r7, #4]
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	429a      	cmp	r2, r3
 8007018:	d806      	bhi.n	8007028 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800701a:	f7ff f8e5 	bl	80061e8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800701e:	68f9      	ldr	r1, [r7, #12]
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	f7ff ff85 	bl	8006f30 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007026:	e024      	b.n	8007072 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d008      	beq.n	8007040 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800702e:	4b13      	ldr	r3, [pc, #76]	; (800707c <prvProcessTimerOrBlockTask+0x90>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d101      	bne.n	800703c <prvProcessTimerOrBlockTask+0x50>
 8007038:	2301      	movs	r3, #1
 800703a:	e000      	b.n	800703e <prvProcessTimerOrBlockTask+0x52>
 800703c:	2300      	movs	r3, #0
 800703e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007040:	4b0f      	ldr	r3, [pc, #60]	; (8007080 <prvProcessTimerOrBlockTask+0x94>)
 8007042:	6818      	ldr	r0, [r3, #0]
 8007044:	687a      	ldr	r2, [r7, #4]
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	1ad3      	subs	r3, r2, r3
 800704a:	683a      	ldr	r2, [r7, #0]
 800704c:	4619      	mov	r1, r3
 800704e:	f7fe fe2d 	bl	8005cac <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007052:	f7ff f8c9 	bl	80061e8 <xTaskResumeAll>
 8007056:	4603      	mov	r3, r0
 8007058:	2b00      	cmp	r3, #0
 800705a:	d10a      	bne.n	8007072 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800705c:	4b09      	ldr	r3, [pc, #36]	; (8007084 <prvProcessTimerOrBlockTask+0x98>)
 800705e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007062:	601a      	str	r2, [r3, #0]
 8007064:	f3bf 8f4f 	dsb	sy
 8007068:	f3bf 8f6f 	isb	sy
}
 800706c:	e001      	b.n	8007072 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800706e:	f7ff f8bb 	bl	80061e8 <xTaskResumeAll>
}
 8007072:	bf00      	nop
 8007074:	3710      	adds	r7, #16
 8007076:	46bd      	mov	sp, r7
 8007078:	bd80      	pop	{r7, pc}
 800707a:	bf00      	nop
 800707c:	20001190 	.word	0x20001190
 8007080:	20001194 	.word	0x20001194
 8007084:	e000ed04 	.word	0xe000ed04

08007088 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007088:	b480      	push	{r7}
 800708a:	b085      	sub	sp, #20
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007090:	4b0e      	ldr	r3, [pc, #56]	; (80070cc <prvGetNextExpireTime+0x44>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d101      	bne.n	800709e <prvGetNextExpireTime+0x16>
 800709a:	2201      	movs	r2, #1
 800709c:	e000      	b.n	80070a0 <prvGetNextExpireTime+0x18>
 800709e:	2200      	movs	r2, #0
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d105      	bne.n	80070b8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80070ac:	4b07      	ldr	r3, [pc, #28]	; (80070cc <prvGetNextExpireTime+0x44>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	68db      	ldr	r3, [r3, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	60fb      	str	r3, [r7, #12]
 80070b6:	e001      	b.n	80070bc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80070b8:	2300      	movs	r3, #0
 80070ba:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80070bc:	68fb      	ldr	r3, [r7, #12]
}
 80070be:	4618      	mov	r0, r3
 80070c0:	3714      	adds	r7, #20
 80070c2:	46bd      	mov	sp, r7
 80070c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c8:	4770      	bx	lr
 80070ca:	bf00      	nop
 80070cc:	2000118c 	.word	0x2000118c

080070d0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b084      	sub	sp, #16
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80070d8:	f7ff f924 	bl	8006324 <xTaskGetTickCount>
 80070dc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80070de:	4b0b      	ldr	r3, [pc, #44]	; (800710c <prvSampleTimeNow+0x3c>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	68fa      	ldr	r2, [r7, #12]
 80070e4:	429a      	cmp	r2, r3
 80070e6:	d205      	bcs.n	80070f4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80070e8:	f000 f936 	bl	8007358 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2201      	movs	r2, #1
 80070f0:	601a      	str	r2, [r3, #0]
 80070f2:	e002      	b.n	80070fa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2200      	movs	r2, #0
 80070f8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80070fa:	4a04      	ldr	r2, [pc, #16]	; (800710c <prvSampleTimeNow+0x3c>)
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007100:	68fb      	ldr	r3, [r7, #12]
}
 8007102:	4618      	mov	r0, r3
 8007104:	3710      	adds	r7, #16
 8007106:	46bd      	mov	sp, r7
 8007108:	bd80      	pop	{r7, pc}
 800710a:	bf00      	nop
 800710c:	2000119c 	.word	0x2000119c

08007110 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b086      	sub	sp, #24
 8007114:	af00      	add	r7, sp, #0
 8007116:	60f8      	str	r0, [r7, #12]
 8007118:	60b9      	str	r1, [r7, #8]
 800711a:	607a      	str	r2, [r7, #4]
 800711c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800711e:	2300      	movs	r3, #0
 8007120:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	68ba      	ldr	r2, [r7, #8]
 8007126:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	68fa      	ldr	r2, [r7, #12]
 800712c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800712e:	68ba      	ldr	r2, [r7, #8]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	429a      	cmp	r2, r3
 8007134:	d812      	bhi.n	800715c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007136:	687a      	ldr	r2, [r7, #4]
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	1ad2      	subs	r2, r2, r3
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	699b      	ldr	r3, [r3, #24]
 8007140:	429a      	cmp	r2, r3
 8007142:	d302      	bcc.n	800714a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007144:	2301      	movs	r3, #1
 8007146:	617b      	str	r3, [r7, #20]
 8007148:	e01b      	b.n	8007182 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800714a:	4b10      	ldr	r3, [pc, #64]	; (800718c <prvInsertTimerInActiveList+0x7c>)
 800714c:	681a      	ldr	r2, [r3, #0]
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	3304      	adds	r3, #4
 8007152:	4619      	mov	r1, r3
 8007154:	4610      	mov	r0, r2
 8007156:	f7fd ff9c 	bl	8005092 <vListInsert>
 800715a:	e012      	b.n	8007182 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800715c:	687a      	ldr	r2, [r7, #4]
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	429a      	cmp	r2, r3
 8007162:	d206      	bcs.n	8007172 <prvInsertTimerInActiveList+0x62>
 8007164:	68ba      	ldr	r2, [r7, #8]
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	429a      	cmp	r2, r3
 800716a:	d302      	bcc.n	8007172 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800716c:	2301      	movs	r3, #1
 800716e:	617b      	str	r3, [r7, #20]
 8007170:	e007      	b.n	8007182 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007172:	4b07      	ldr	r3, [pc, #28]	; (8007190 <prvInsertTimerInActiveList+0x80>)
 8007174:	681a      	ldr	r2, [r3, #0]
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	3304      	adds	r3, #4
 800717a:	4619      	mov	r1, r3
 800717c:	4610      	mov	r0, r2
 800717e:	f7fd ff88 	bl	8005092 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007182:	697b      	ldr	r3, [r7, #20]
}
 8007184:	4618      	mov	r0, r3
 8007186:	3718      	adds	r7, #24
 8007188:	46bd      	mov	sp, r7
 800718a:	bd80      	pop	{r7, pc}
 800718c:	20001190 	.word	0x20001190
 8007190:	2000118c 	.word	0x2000118c

08007194 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b08e      	sub	sp, #56	; 0x38
 8007198:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800719a:	e0ca      	b.n	8007332 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	da18      	bge.n	80071d4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80071a2:	1d3b      	adds	r3, r7, #4
 80071a4:	3304      	adds	r3, #4
 80071a6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80071a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d10a      	bne.n	80071c4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80071ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071b2:	f383 8811 	msr	BASEPRI, r3
 80071b6:	f3bf 8f6f 	isb	sy
 80071ba:	f3bf 8f4f 	dsb	sy
 80071be:	61fb      	str	r3, [r7, #28]
}
 80071c0:	bf00      	nop
 80071c2:	e7fe      	b.n	80071c2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80071c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80071ca:	6850      	ldr	r0, [r2, #4]
 80071cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80071ce:	6892      	ldr	r2, [r2, #8]
 80071d0:	4611      	mov	r1, r2
 80071d2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	f2c0 80aa 	blt.w	8007330 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80071e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071e2:	695b      	ldr	r3, [r3, #20]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d004      	beq.n	80071f2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80071e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ea:	3304      	adds	r3, #4
 80071ec:	4618      	mov	r0, r3
 80071ee:	f7fd ff89 	bl	8005104 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80071f2:	463b      	mov	r3, r7
 80071f4:	4618      	mov	r0, r3
 80071f6:	f7ff ff6b 	bl	80070d0 <prvSampleTimeNow>
 80071fa:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2b09      	cmp	r3, #9
 8007200:	f200 8097 	bhi.w	8007332 <prvProcessReceivedCommands+0x19e>
 8007204:	a201      	add	r2, pc, #4	; (adr r2, 800720c <prvProcessReceivedCommands+0x78>)
 8007206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800720a:	bf00      	nop
 800720c:	08007235 	.word	0x08007235
 8007210:	08007235 	.word	0x08007235
 8007214:	08007235 	.word	0x08007235
 8007218:	080072a9 	.word	0x080072a9
 800721c:	080072bd 	.word	0x080072bd
 8007220:	08007307 	.word	0x08007307
 8007224:	08007235 	.word	0x08007235
 8007228:	08007235 	.word	0x08007235
 800722c:	080072a9 	.word	0x080072a9
 8007230:	080072bd 	.word	0x080072bd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007236:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800723a:	f043 0301 	orr.w	r3, r3, #1
 800723e:	b2da      	uxtb	r2, r3
 8007240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007242:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007246:	68ba      	ldr	r2, [r7, #8]
 8007248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800724a:	699b      	ldr	r3, [r3, #24]
 800724c:	18d1      	adds	r1, r2, r3
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007252:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007254:	f7ff ff5c 	bl	8007110 <prvInsertTimerInActiveList>
 8007258:	4603      	mov	r3, r0
 800725a:	2b00      	cmp	r3, #0
 800725c:	d069      	beq.n	8007332 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800725e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007260:	6a1b      	ldr	r3, [r3, #32]
 8007262:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007264:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007268:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800726c:	f003 0304 	and.w	r3, r3, #4
 8007270:	2b00      	cmp	r3, #0
 8007272:	d05e      	beq.n	8007332 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007274:	68ba      	ldr	r2, [r7, #8]
 8007276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007278:	699b      	ldr	r3, [r3, #24]
 800727a:	441a      	add	r2, r3
 800727c:	2300      	movs	r3, #0
 800727e:	9300      	str	r3, [sp, #0]
 8007280:	2300      	movs	r3, #0
 8007282:	2100      	movs	r1, #0
 8007284:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007286:	f7ff fe05 	bl	8006e94 <xTimerGenericCommand>
 800728a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800728c:	6a3b      	ldr	r3, [r7, #32]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d14f      	bne.n	8007332 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007296:	f383 8811 	msr	BASEPRI, r3
 800729a:	f3bf 8f6f 	isb	sy
 800729e:	f3bf 8f4f 	dsb	sy
 80072a2:	61bb      	str	r3, [r7, #24]
}
 80072a4:	bf00      	nop
 80072a6:	e7fe      	b.n	80072a6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80072a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80072ae:	f023 0301 	bic.w	r3, r3, #1
 80072b2:	b2da      	uxtb	r2, r3
 80072b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80072ba:	e03a      	b.n	8007332 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80072bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80072c2:	f043 0301 	orr.w	r3, r3, #1
 80072c6:	b2da      	uxtb	r2, r3
 80072c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80072ce:	68ba      	ldr	r2, [r7, #8]
 80072d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072d2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80072d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072d6:	699b      	ldr	r3, [r3, #24]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d10a      	bne.n	80072f2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80072dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072e0:	f383 8811 	msr	BASEPRI, r3
 80072e4:	f3bf 8f6f 	isb	sy
 80072e8:	f3bf 8f4f 	dsb	sy
 80072ec:	617b      	str	r3, [r7, #20]
}
 80072ee:	bf00      	nop
 80072f0:	e7fe      	b.n	80072f0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80072f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072f4:	699a      	ldr	r2, [r3, #24]
 80072f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072f8:	18d1      	adds	r1, r2, r3
 80072fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007300:	f7ff ff06 	bl	8007110 <prvInsertTimerInActiveList>
					break;
 8007304:	e015      	b.n	8007332 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007308:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800730c:	f003 0302 	and.w	r3, r3, #2
 8007310:	2b00      	cmp	r3, #0
 8007312:	d103      	bne.n	800731c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007314:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007316:	f000 fc1b 	bl	8007b50 <vPortFree>
 800731a:	e00a      	b.n	8007332 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800731c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800731e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007322:	f023 0301 	bic.w	r3, r3, #1
 8007326:	b2da      	uxtb	r2, r3
 8007328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800732a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800732e:	e000      	b.n	8007332 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007330:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007332:	4b08      	ldr	r3, [pc, #32]	; (8007354 <prvProcessReceivedCommands+0x1c0>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	1d39      	adds	r1, r7, #4
 8007338:	2200      	movs	r2, #0
 800733a:	4618      	mov	r0, r3
 800733c:	f7fe fa4e 	bl	80057dc <xQueueReceive>
 8007340:	4603      	mov	r3, r0
 8007342:	2b00      	cmp	r3, #0
 8007344:	f47f af2a 	bne.w	800719c <prvProcessReceivedCommands+0x8>
	}
}
 8007348:	bf00      	nop
 800734a:	bf00      	nop
 800734c:	3730      	adds	r7, #48	; 0x30
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}
 8007352:	bf00      	nop
 8007354:	20001194 	.word	0x20001194

08007358 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b088      	sub	sp, #32
 800735c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800735e:	e048      	b.n	80073f2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007360:	4b2d      	ldr	r3, [pc, #180]	; (8007418 <prvSwitchTimerLists+0xc0>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	68db      	ldr	r3, [r3, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800736a:	4b2b      	ldr	r3, [pc, #172]	; (8007418 <prvSwitchTimerLists+0xc0>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	68db      	ldr	r3, [r3, #12]
 8007370:	68db      	ldr	r3, [r3, #12]
 8007372:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	3304      	adds	r3, #4
 8007378:	4618      	mov	r0, r3
 800737a:	f7fd fec3 	bl	8005104 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	6a1b      	ldr	r3, [r3, #32]
 8007382:	68f8      	ldr	r0, [r7, #12]
 8007384:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800738c:	f003 0304 	and.w	r3, r3, #4
 8007390:	2b00      	cmp	r3, #0
 8007392:	d02e      	beq.n	80073f2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	699b      	ldr	r3, [r3, #24]
 8007398:	693a      	ldr	r2, [r7, #16]
 800739a:	4413      	add	r3, r2
 800739c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800739e:	68ba      	ldr	r2, [r7, #8]
 80073a0:	693b      	ldr	r3, [r7, #16]
 80073a2:	429a      	cmp	r2, r3
 80073a4:	d90e      	bls.n	80073c4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	68ba      	ldr	r2, [r7, #8]
 80073aa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	68fa      	ldr	r2, [r7, #12]
 80073b0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80073b2:	4b19      	ldr	r3, [pc, #100]	; (8007418 <prvSwitchTimerLists+0xc0>)
 80073b4:	681a      	ldr	r2, [r3, #0]
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	3304      	adds	r3, #4
 80073ba:	4619      	mov	r1, r3
 80073bc:	4610      	mov	r0, r2
 80073be:	f7fd fe68 	bl	8005092 <vListInsert>
 80073c2:	e016      	b.n	80073f2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80073c4:	2300      	movs	r3, #0
 80073c6:	9300      	str	r3, [sp, #0]
 80073c8:	2300      	movs	r3, #0
 80073ca:	693a      	ldr	r2, [r7, #16]
 80073cc:	2100      	movs	r1, #0
 80073ce:	68f8      	ldr	r0, [r7, #12]
 80073d0:	f7ff fd60 	bl	8006e94 <xTimerGenericCommand>
 80073d4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d10a      	bne.n	80073f2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80073dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073e0:	f383 8811 	msr	BASEPRI, r3
 80073e4:	f3bf 8f6f 	isb	sy
 80073e8:	f3bf 8f4f 	dsb	sy
 80073ec:	603b      	str	r3, [r7, #0]
}
 80073ee:	bf00      	nop
 80073f0:	e7fe      	b.n	80073f0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80073f2:	4b09      	ldr	r3, [pc, #36]	; (8007418 <prvSwitchTimerLists+0xc0>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d1b1      	bne.n	8007360 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80073fc:	4b06      	ldr	r3, [pc, #24]	; (8007418 <prvSwitchTimerLists+0xc0>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007402:	4b06      	ldr	r3, [pc, #24]	; (800741c <prvSwitchTimerLists+0xc4>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4a04      	ldr	r2, [pc, #16]	; (8007418 <prvSwitchTimerLists+0xc0>)
 8007408:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800740a:	4a04      	ldr	r2, [pc, #16]	; (800741c <prvSwitchTimerLists+0xc4>)
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	6013      	str	r3, [r2, #0]
}
 8007410:	bf00      	nop
 8007412:	3718      	adds	r7, #24
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}
 8007418:	2000118c 	.word	0x2000118c
 800741c:	20001190 	.word	0x20001190

08007420 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b082      	sub	sp, #8
 8007424:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007426:	f000 f9a5 	bl	8007774 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800742a:	4b15      	ldr	r3, [pc, #84]	; (8007480 <prvCheckForValidListAndQueue+0x60>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d120      	bne.n	8007474 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007432:	4814      	ldr	r0, [pc, #80]	; (8007484 <prvCheckForValidListAndQueue+0x64>)
 8007434:	f7fd fddc 	bl	8004ff0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007438:	4813      	ldr	r0, [pc, #76]	; (8007488 <prvCheckForValidListAndQueue+0x68>)
 800743a:	f7fd fdd9 	bl	8004ff0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800743e:	4b13      	ldr	r3, [pc, #76]	; (800748c <prvCheckForValidListAndQueue+0x6c>)
 8007440:	4a10      	ldr	r2, [pc, #64]	; (8007484 <prvCheckForValidListAndQueue+0x64>)
 8007442:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007444:	4b12      	ldr	r3, [pc, #72]	; (8007490 <prvCheckForValidListAndQueue+0x70>)
 8007446:	4a10      	ldr	r2, [pc, #64]	; (8007488 <prvCheckForValidListAndQueue+0x68>)
 8007448:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800744a:	2300      	movs	r3, #0
 800744c:	9300      	str	r3, [sp, #0]
 800744e:	4b11      	ldr	r3, [pc, #68]	; (8007494 <prvCheckForValidListAndQueue+0x74>)
 8007450:	4a11      	ldr	r2, [pc, #68]	; (8007498 <prvCheckForValidListAndQueue+0x78>)
 8007452:	2110      	movs	r1, #16
 8007454:	200a      	movs	r0, #10
 8007456:	f7fd fee7 	bl	8005228 <xQueueGenericCreateStatic>
 800745a:	4603      	mov	r3, r0
 800745c:	4a08      	ldr	r2, [pc, #32]	; (8007480 <prvCheckForValidListAndQueue+0x60>)
 800745e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007460:	4b07      	ldr	r3, [pc, #28]	; (8007480 <prvCheckForValidListAndQueue+0x60>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d005      	beq.n	8007474 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007468:	4b05      	ldr	r3, [pc, #20]	; (8007480 <prvCheckForValidListAndQueue+0x60>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	490b      	ldr	r1, [pc, #44]	; (800749c <prvCheckForValidListAndQueue+0x7c>)
 800746e:	4618      	mov	r0, r3
 8007470:	f7fe fbc8 	bl	8005c04 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007474:	f000 f9ae 	bl	80077d4 <vPortExitCritical>
}
 8007478:	bf00      	nop
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}
 800747e:	bf00      	nop
 8007480:	20001194 	.word	0x20001194
 8007484:	20001164 	.word	0x20001164
 8007488:	20001178 	.word	0x20001178
 800748c:	2000118c 	.word	0x2000118c
 8007490:	20001190 	.word	0x20001190
 8007494:	20001240 	.word	0x20001240
 8007498:	200011a0 	.word	0x200011a0
 800749c:	08008038 	.word	0x08008038

080074a0 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b086      	sub	sp, #24
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d10a      	bne.n	80074c8 <pvTimerGetTimerID+0x28>
	__asm volatile
 80074b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074b6:	f383 8811 	msr	BASEPRI, r3
 80074ba:	f3bf 8f6f 	isb	sy
 80074be:	f3bf 8f4f 	dsb	sy
 80074c2:	60fb      	str	r3, [r7, #12]
}
 80074c4:	bf00      	nop
 80074c6:	e7fe      	b.n	80074c6 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 80074c8:	f000 f954 	bl	8007774 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	69db      	ldr	r3, [r3, #28]
 80074d0:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 80074d2:	f000 f97f 	bl	80077d4 <vPortExitCritical>

	return pvReturn;
 80074d6:	693b      	ldr	r3, [r7, #16]
}
 80074d8:	4618      	mov	r0, r3
 80074da:	3718      	adds	r7, #24
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd80      	pop	{r7, pc}

080074e0 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b08a      	sub	sp, #40	; 0x28
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	60f8      	str	r0, [r7, #12]
 80074e8:	60b9      	str	r1, [r7, #8]
 80074ea:	607a      	str	r2, [r7, #4]
 80074ec:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 80074ee:	f06f 0301 	mvn.w	r3, #1
 80074f2:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007500:	4b06      	ldr	r3, [pc, #24]	; (800751c <xTimerPendFunctionCallFromISR+0x3c>)
 8007502:	6818      	ldr	r0, [r3, #0]
 8007504:	f107 0114 	add.w	r1, r7, #20
 8007508:	2300      	movs	r3, #0
 800750a:	683a      	ldr	r2, [r7, #0]
 800750c:	f7fe f8ca 	bl	80056a4 <xQueueGenericSendFromISR>
 8007510:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8007512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8007514:	4618      	mov	r0, r3
 8007516:	3728      	adds	r7, #40	; 0x28
 8007518:	46bd      	mov	sp, r7
 800751a:	bd80      	pop	{r7, pc}
 800751c:	20001194 	.word	0x20001194

08007520 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007520:	b480      	push	{r7}
 8007522:	b085      	sub	sp, #20
 8007524:	af00      	add	r7, sp, #0
 8007526:	60f8      	str	r0, [r7, #12]
 8007528:	60b9      	str	r1, [r7, #8]
 800752a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	3b04      	subs	r3, #4
 8007530:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007538:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	3b04      	subs	r3, #4
 800753e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	f023 0201 	bic.w	r2, r3, #1
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	3b04      	subs	r3, #4
 800754e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007550:	4a0c      	ldr	r2, [pc, #48]	; (8007584 <pxPortInitialiseStack+0x64>)
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	3b14      	subs	r3, #20
 800755a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800755c:	687a      	ldr	r2, [r7, #4]
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	3b04      	subs	r3, #4
 8007566:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	f06f 0202 	mvn.w	r2, #2
 800756e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	3b20      	subs	r3, #32
 8007574:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007576:	68fb      	ldr	r3, [r7, #12]
}
 8007578:	4618      	mov	r0, r3
 800757a:	3714      	adds	r7, #20
 800757c:	46bd      	mov	sp, r7
 800757e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007582:	4770      	bx	lr
 8007584:	08007589 	.word	0x08007589

08007588 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007588:	b480      	push	{r7}
 800758a:	b085      	sub	sp, #20
 800758c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800758e:	2300      	movs	r3, #0
 8007590:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007592:	4b12      	ldr	r3, [pc, #72]	; (80075dc <prvTaskExitError+0x54>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800759a:	d00a      	beq.n	80075b2 <prvTaskExitError+0x2a>
	__asm volatile
 800759c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075a0:	f383 8811 	msr	BASEPRI, r3
 80075a4:	f3bf 8f6f 	isb	sy
 80075a8:	f3bf 8f4f 	dsb	sy
 80075ac:	60fb      	str	r3, [r7, #12]
}
 80075ae:	bf00      	nop
 80075b0:	e7fe      	b.n	80075b0 <prvTaskExitError+0x28>
	__asm volatile
 80075b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075b6:	f383 8811 	msr	BASEPRI, r3
 80075ba:	f3bf 8f6f 	isb	sy
 80075be:	f3bf 8f4f 	dsb	sy
 80075c2:	60bb      	str	r3, [r7, #8]
}
 80075c4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80075c6:	bf00      	nop
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d0fc      	beq.n	80075c8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80075ce:	bf00      	nop
 80075d0:	bf00      	nop
 80075d2:	3714      	adds	r7, #20
 80075d4:	46bd      	mov	sp, r7
 80075d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075da:	4770      	bx	lr
 80075dc:	20000010 	.word	0x20000010

080075e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80075e0:	4b07      	ldr	r3, [pc, #28]	; (8007600 <pxCurrentTCBConst2>)
 80075e2:	6819      	ldr	r1, [r3, #0]
 80075e4:	6808      	ldr	r0, [r1, #0]
 80075e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075ea:	f380 8809 	msr	PSP, r0
 80075ee:	f3bf 8f6f 	isb	sy
 80075f2:	f04f 0000 	mov.w	r0, #0
 80075f6:	f380 8811 	msr	BASEPRI, r0
 80075fa:	4770      	bx	lr
 80075fc:	f3af 8000 	nop.w

08007600 <pxCurrentTCBConst2>:
 8007600:	20000c64 	.word	0x20000c64
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007604:	bf00      	nop
 8007606:	bf00      	nop

08007608 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007608:	4808      	ldr	r0, [pc, #32]	; (800762c <prvPortStartFirstTask+0x24>)
 800760a:	6800      	ldr	r0, [r0, #0]
 800760c:	6800      	ldr	r0, [r0, #0]
 800760e:	f380 8808 	msr	MSP, r0
 8007612:	f04f 0000 	mov.w	r0, #0
 8007616:	f380 8814 	msr	CONTROL, r0
 800761a:	b662      	cpsie	i
 800761c:	b661      	cpsie	f
 800761e:	f3bf 8f4f 	dsb	sy
 8007622:	f3bf 8f6f 	isb	sy
 8007626:	df00      	svc	0
 8007628:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800762a:	bf00      	nop
 800762c:	e000ed08 	.word	0xe000ed08

08007630 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b086      	sub	sp, #24
 8007634:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007636:	4b46      	ldr	r3, [pc, #280]	; (8007750 <xPortStartScheduler+0x120>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4a46      	ldr	r2, [pc, #280]	; (8007754 <xPortStartScheduler+0x124>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d10a      	bne.n	8007656 <xPortStartScheduler+0x26>
	__asm volatile
 8007640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007644:	f383 8811 	msr	BASEPRI, r3
 8007648:	f3bf 8f6f 	isb	sy
 800764c:	f3bf 8f4f 	dsb	sy
 8007650:	613b      	str	r3, [r7, #16]
}
 8007652:	bf00      	nop
 8007654:	e7fe      	b.n	8007654 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007656:	4b3e      	ldr	r3, [pc, #248]	; (8007750 <xPortStartScheduler+0x120>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	4a3f      	ldr	r2, [pc, #252]	; (8007758 <xPortStartScheduler+0x128>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d10a      	bne.n	8007676 <xPortStartScheduler+0x46>
	__asm volatile
 8007660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007664:	f383 8811 	msr	BASEPRI, r3
 8007668:	f3bf 8f6f 	isb	sy
 800766c:	f3bf 8f4f 	dsb	sy
 8007670:	60fb      	str	r3, [r7, #12]
}
 8007672:	bf00      	nop
 8007674:	e7fe      	b.n	8007674 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007676:	4b39      	ldr	r3, [pc, #228]	; (800775c <xPortStartScheduler+0x12c>)
 8007678:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800767a:	697b      	ldr	r3, [r7, #20]
 800767c:	781b      	ldrb	r3, [r3, #0]
 800767e:	b2db      	uxtb	r3, r3
 8007680:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007682:	697b      	ldr	r3, [r7, #20]
 8007684:	22ff      	movs	r2, #255	; 0xff
 8007686:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	781b      	ldrb	r3, [r3, #0]
 800768c:	b2db      	uxtb	r3, r3
 800768e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007690:	78fb      	ldrb	r3, [r7, #3]
 8007692:	b2db      	uxtb	r3, r3
 8007694:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007698:	b2da      	uxtb	r2, r3
 800769a:	4b31      	ldr	r3, [pc, #196]	; (8007760 <xPortStartScheduler+0x130>)
 800769c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800769e:	4b31      	ldr	r3, [pc, #196]	; (8007764 <xPortStartScheduler+0x134>)
 80076a0:	2207      	movs	r2, #7
 80076a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80076a4:	e009      	b.n	80076ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80076a6:	4b2f      	ldr	r3, [pc, #188]	; (8007764 <xPortStartScheduler+0x134>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	3b01      	subs	r3, #1
 80076ac:	4a2d      	ldr	r2, [pc, #180]	; (8007764 <xPortStartScheduler+0x134>)
 80076ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80076b0:	78fb      	ldrb	r3, [r7, #3]
 80076b2:	b2db      	uxtb	r3, r3
 80076b4:	005b      	lsls	r3, r3, #1
 80076b6:	b2db      	uxtb	r3, r3
 80076b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80076ba:	78fb      	ldrb	r3, [r7, #3]
 80076bc:	b2db      	uxtb	r3, r3
 80076be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076c2:	2b80      	cmp	r3, #128	; 0x80
 80076c4:	d0ef      	beq.n	80076a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80076c6:	4b27      	ldr	r3, [pc, #156]	; (8007764 <xPortStartScheduler+0x134>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f1c3 0307 	rsb	r3, r3, #7
 80076ce:	2b04      	cmp	r3, #4
 80076d0:	d00a      	beq.n	80076e8 <xPortStartScheduler+0xb8>
	__asm volatile
 80076d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076d6:	f383 8811 	msr	BASEPRI, r3
 80076da:	f3bf 8f6f 	isb	sy
 80076de:	f3bf 8f4f 	dsb	sy
 80076e2:	60bb      	str	r3, [r7, #8]
}
 80076e4:	bf00      	nop
 80076e6:	e7fe      	b.n	80076e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80076e8:	4b1e      	ldr	r3, [pc, #120]	; (8007764 <xPortStartScheduler+0x134>)
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	021b      	lsls	r3, r3, #8
 80076ee:	4a1d      	ldr	r2, [pc, #116]	; (8007764 <xPortStartScheduler+0x134>)
 80076f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80076f2:	4b1c      	ldr	r3, [pc, #112]	; (8007764 <xPortStartScheduler+0x134>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80076fa:	4a1a      	ldr	r2, [pc, #104]	; (8007764 <xPortStartScheduler+0x134>)
 80076fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	b2da      	uxtb	r2, r3
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007706:	4b18      	ldr	r3, [pc, #96]	; (8007768 <xPortStartScheduler+0x138>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4a17      	ldr	r2, [pc, #92]	; (8007768 <xPortStartScheduler+0x138>)
 800770c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007710:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007712:	4b15      	ldr	r3, [pc, #84]	; (8007768 <xPortStartScheduler+0x138>)
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	4a14      	ldr	r2, [pc, #80]	; (8007768 <xPortStartScheduler+0x138>)
 8007718:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800771c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800771e:	f000 f8dd 	bl	80078dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007722:	4b12      	ldr	r3, [pc, #72]	; (800776c <xPortStartScheduler+0x13c>)
 8007724:	2200      	movs	r2, #0
 8007726:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007728:	f000 f8fc 	bl	8007924 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800772c:	4b10      	ldr	r3, [pc, #64]	; (8007770 <xPortStartScheduler+0x140>)
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4a0f      	ldr	r2, [pc, #60]	; (8007770 <xPortStartScheduler+0x140>)
 8007732:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007736:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007738:	f7ff ff66 	bl	8007608 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800773c:	f7fe febc 	bl	80064b8 <vTaskSwitchContext>
	prvTaskExitError();
 8007740:	f7ff ff22 	bl	8007588 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007744:	2300      	movs	r3, #0
}
 8007746:	4618      	mov	r0, r3
 8007748:	3718      	adds	r7, #24
 800774a:	46bd      	mov	sp, r7
 800774c:	bd80      	pop	{r7, pc}
 800774e:	bf00      	nop
 8007750:	e000ed00 	.word	0xe000ed00
 8007754:	410fc271 	.word	0x410fc271
 8007758:	410fc270 	.word	0x410fc270
 800775c:	e000e400 	.word	0xe000e400
 8007760:	20001290 	.word	0x20001290
 8007764:	20001294 	.word	0x20001294
 8007768:	e000ed20 	.word	0xe000ed20
 800776c:	20000010 	.word	0x20000010
 8007770:	e000ef34 	.word	0xe000ef34

08007774 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007774:	b480      	push	{r7}
 8007776:	b083      	sub	sp, #12
 8007778:	af00      	add	r7, sp, #0
	__asm volatile
 800777a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800777e:	f383 8811 	msr	BASEPRI, r3
 8007782:	f3bf 8f6f 	isb	sy
 8007786:	f3bf 8f4f 	dsb	sy
 800778a:	607b      	str	r3, [r7, #4]
}
 800778c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800778e:	4b0f      	ldr	r3, [pc, #60]	; (80077cc <vPortEnterCritical+0x58>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	3301      	adds	r3, #1
 8007794:	4a0d      	ldr	r2, [pc, #52]	; (80077cc <vPortEnterCritical+0x58>)
 8007796:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007798:	4b0c      	ldr	r3, [pc, #48]	; (80077cc <vPortEnterCritical+0x58>)
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	2b01      	cmp	r3, #1
 800779e:	d10f      	bne.n	80077c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80077a0:	4b0b      	ldr	r3, [pc, #44]	; (80077d0 <vPortEnterCritical+0x5c>)
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	b2db      	uxtb	r3, r3
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d00a      	beq.n	80077c0 <vPortEnterCritical+0x4c>
	__asm volatile
 80077aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ae:	f383 8811 	msr	BASEPRI, r3
 80077b2:	f3bf 8f6f 	isb	sy
 80077b6:	f3bf 8f4f 	dsb	sy
 80077ba:	603b      	str	r3, [r7, #0]
}
 80077bc:	bf00      	nop
 80077be:	e7fe      	b.n	80077be <vPortEnterCritical+0x4a>
	}
}
 80077c0:	bf00      	nop
 80077c2:	370c      	adds	r7, #12
 80077c4:	46bd      	mov	sp, r7
 80077c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ca:	4770      	bx	lr
 80077cc:	20000010 	.word	0x20000010
 80077d0:	e000ed04 	.word	0xe000ed04

080077d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80077d4:	b480      	push	{r7}
 80077d6:	b083      	sub	sp, #12
 80077d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80077da:	4b12      	ldr	r3, [pc, #72]	; (8007824 <vPortExitCritical+0x50>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d10a      	bne.n	80077f8 <vPortExitCritical+0x24>
	__asm volatile
 80077e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077e6:	f383 8811 	msr	BASEPRI, r3
 80077ea:	f3bf 8f6f 	isb	sy
 80077ee:	f3bf 8f4f 	dsb	sy
 80077f2:	607b      	str	r3, [r7, #4]
}
 80077f4:	bf00      	nop
 80077f6:	e7fe      	b.n	80077f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80077f8:	4b0a      	ldr	r3, [pc, #40]	; (8007824 <vPortExitCritical+0x50>)
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	3b01      	subs	r3, #1
 80077fe:	4a09      	ldr	r2, [pc, #36]	; (8007824 <vPortExitCritical+0x50>)
 8007800:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007802:	4b08      	ldr	r3, [pc, #32]	; (8007824 <vPortExitCritical+0x50>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d105      	bne.n	8007816 <vPortExitCritical+0x42>
 800780a:	2300      	movs	r3, #0
 800780c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	f383 8811 	msr	BASEPRI, r3
}
 8007814:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007816:	bf00      	nop
 8007818:	370c      	adds	r7, #12
 800781a:	46bd      	mov	sp, r7
 800781c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007820:	4770      	bx	lr
 8007822:	bf00      	nop
 8007824:	20000010 	.word	0x20000010
	...

08007830 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007830:	f3ef 8009 	mrs	r0, PSP
 8007834:	f3bf 8f6f 	isb	sy
 8007838:	4b15      	ldr	r3, [pc, #84]	; (8007890 <pxCurrentTCBConst>)
 800783a:	681a      	ldr	r2, [r3, #0]
 800783c:	f01e 0f10 	tst.w	lr, #16
 8007840:	bf08      	it	eq
 8007842:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007846:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800784a:	6010      	str	r0, [r2, #0]
 800784c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007850:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007854:	f380 8811 	msr	BASEPRI, r0
 8007858:	f3bf 8f4f 	dsb	sy
 800785c:	f3bf 8f6f 	isb	sy
 8007860:	f7fe fe2a 	bl	80064b8 <vTaskSwitchContext>
 8007864:	f04f 0000 	mov.w	r0, #0
 8007868:	f380 8811 	msr	BASEPRI, r0
 800786c:	bc09      	pop	{r0, r3}
 800786e:	6819      	ldr	r1, [r3, #0]
 8007870:	6808      	ldr	r0, [r1, #0]
 8007872:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007876:	f01e 0f10 	tst.w	lr, #16
 800787a:	bf08      	it	eq
 800787c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007880:	f380 8809 	msr	PSP, r0
 8007884:	f3bf 8f6f 	isb	sy
 8007888:	4770      	bx	lr
 800788a:	bf00      	nop
 800788c:	f3af 8000 	nop.w

08007890 <pxCurrentTCBConst>:
 8007890:	20000c64 	.word	0x20000c64
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007894:	bf00      	nop
 8007896:	bf00      	nop

08007898 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b082      	sub	sp, #8
 800789c:	af00      	add	r7, sp, #0
	__asm volatile
 800789e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078a2:	f383 8811 	msr	BASEPRI, r3
 80078a6:	f3bf 8f6f 	isb	sy
 80078aa:	f3bf 8f4f 	dsb	sy
 80078ae:	607b      	str	r3, [r7, #4]
}
 80078b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80078b2:	f7fe fd47 	bl	8006344 <xTaskIncrementTick>
 80078b6:	4603      	mov	r3, r0
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d003      	beq.n	80078c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80078bc:	4b06      	ldr	r3, [pc, #24]	; (80078d8 <xPortSysTickHandler+0x40>)
 80078be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078c2:	601a      	str	r2, [r3, #0]
 80078c4:	2300      	movs	r3, #0
 80078c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	f383 8811 	msr	BASEPRI, r3
}
 80078ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80078d0:	bf00      	nop
 80078d2:	3708      	adds	r7, #8
 80078d4:	46bd      	mov	sp, r7
 80078d6:	bd80      	pop	{r7, pc}
 80078d8:	e000ed04 	.word	0xe000ed04

080078dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80078dc:	b480      	push	{r7}
 80078de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80078e0:	4b0b      	ldr	r3, [pc, #44]	; (8007910 <vPortSetupTimerInterrupt+0x34>)
 80078e2:	2200      	movs	r2, #0
 80078e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80078e6:	4b0b      	ldr	r3, [pc, #44]	; (8007914 <vPortSetupTimerInterrupt+0x38>)
 80078e8:	2200      	movs	r2, #0
 80078ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80078ec:	4b0a      	ldr	r3, [pc, #40]	; (8007918 <vPortSetupTimerInterrupt+0x3c>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	4a0a      	ldr	r2, [pc, #40]	; (800791c <vPortSetupTimerInterrupt+0x40>)
 80078f2:	fba2 2303 	umull	r2, r3, r2, r3
 80078f6:	099b      	lsrs	r3, r3, #6
 80078f8:	4a09      	ldr	r2, [pc, #36]	; (8007920 <vPortSetupTimerInterrupt+0x44>)
 80078fa:	3b01      	subs	r3, #1
 80078fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80078fe:	4b04      	ldr	r3, [pc, #16]	; (8007910 <vPortSetupTimerInterrupt+0x34>)
 8007900:	2207      	movs	r2, #7
 8007902:	601a      	str	r2, [r3, #0]
}
 8007904:	bf00      	nop
 8007906:	46bd      	mov	sp, r7
 8007908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790c:	4770      	bx	lr
 800790e:	bf00      	nop
 8007910:	e000e010 	.word	0xe000e010
 8007914:	e000e018 	.word	0xe000e018
 8007918:	20000004 	.word	0x20000004
 800791c:	10624dd3 	.word	0x10624dd3
 8007920:	e000e014 	.word	0xe000e014

08007924 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007924:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007934 <vPortEnableVFP+0x10>
 8007928:	6801      	ldr	r1, [r0, #0]
 800792a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800792e:	6001      	str	r1, [r0, #0]
 8007930:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007932:	bf00      	nop
 8007934:	e000ed88 	.word	0xe000ed88

08007938 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007938:	b480      	push	{r7}
 800793a:	b085      	sub	sp, #20
 800793c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800793e:	f3ef 8305 	mrs	r3, IPSR
 8007942:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	2b0f      	cmp	r3, #15
 8007948:	d914      	bls.n	8007974 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800794a:	4a17      	ldr	r2, [pc, #92]	; (80079a8 <vPortValidateInterruptPriority+0x70>)
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	4413      	add	r3, r2
 8007950:	781b      	ldrb	r3, [r3, #0]
 8007952:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007954:	4b15      	ldr	r3, [pc, #84]	; (80079ac <vPortValidateInterruptPriority+0x74>)
 8007956:	781b      	ldrb	r3, [r3, #0]
 8007958:	7afa      	ldrb	r2, [r7, #11]
 800795a:	429a      	cmp	r2, r3
 800795c:	d20a      	bcs.n	8007974 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800795e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007962:	f383 8811 	msr	BASEPRI, r3
 8007966:	f3bf 8f6f 	isb	sy
 800796a:	f3bf 8f4f 	dsb	sy
 800796e:	607b      	str	r3, [r7, #4]
}
 8007970:	bf00      	nop
 8007972:	e7fe      	b.n	8007972 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007974:	4b0e      	ldr	r3, [pc, #56]	; (80079b0 <vPortValidateInterruptPriority+0x78>)
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800797c:	4b0d      	ldr	r3, [pc, #52]	; (80079b4 <vPortValidateInterruptPriority+0x7c>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	429a      	cmp	r2, r3
 8007982:	d90a      	bls.n	800799a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007988:	f383 8811 	msr	BASEPRI, r3
 800798c:	f3bf 8f6f 	isb	sy
 8007990:	f3bf 8f4f 	dsb	sy
 8007994:	603b      	str	r3, [r7, #0]
}
 8007996:	bf00      	nop
 8007998:	e7fe      	b.n	8007998 <vPortValidateInterruptPriority+0x60>
	}
 800799a:	bf00      	nop
 800799c:	3714      	adds	r7, #20
 800799e:	46bd      	mov	sp, r7
 80079a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a4:	4770      	bx	lr
 80079a6:	bf00      	nop
 80079a8:	e000e3f0 	.word	0xe000e3f0
 80079ac:	20001290 	.word	0x20001290
 80079b0:	e000ed0c 	.word	0xe000ed0c
 80079b4:	20001294 	.word	0x20001294

080079b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b08a      	sub	sp, #40	; 0x28
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80079c0:	2300      	movs	r3, #0
 80079c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80079c4:	f7fe fc02 	bl	80061cc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80079c8:	4b5b      	ldr	r3, [pc, #364]	; (8007b38 <pvPortMalloc+0x180>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d101      	bne.n	80079d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80079d0:	f000 f920 	bl	8007c14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80079d4:	4b59      	ldr	r3, [pc, #356]	; (8007b3c <pvPortMalloc+0x184>)
 80079d6:	681a      	ldr	r2, [r3, #0]
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	4013      	ands	r3, r2
 80079dc:	2b00      	cmp	r3, #0
 80079de:	f040 8093 	bne.w	8007b08 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d01d      	beq.n	8007a24 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80079e8:	2208      	movs	r2, #8
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	4413      	add	r3, r2
 80079ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f003 0307 	and.w	r3, r3, #7
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d014      	beq.n	8007a24 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f023 0307 	bic.w	r3, r3, #7
 8007a00:	3308      	adds	r3, #8
 8007a02:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	f003 0307 	and.w	r3, r3, #7
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d00a      	beq.n	8007a24 <pvPortMalloc+0x6c>
	__asm volatile
 8007a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a12:	f383 8811 	msr	BASEPRI, r3
 8007a16:	f3bf 8f6f 	isb	sy
 8007a1a:	f3bf 8f4f 	dsb	sy
 8007a1e:	617b      	str	r3, [r7, #20]
}
 8007a20:	bf00      	nop
 8007a22:	e7fe      	b.n	8007a22 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d06e      	beq.n	8007b08 <pvPortMalloc+0x150>
 8007a2a:	4b45      	ldr	r3, [pc, #276]	; (8007b40 <pvPortMalloc+0x188>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	687a      	ldr	r2, [r7, #4]
 8007a30:	429a      	cmp	r2, r3
 8007a32:	d869      	bhi.n	8007b08 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007a34:	4b43      	ldr	r3, [pc, #268]	; (8007b44 <pvPortMalloc+0x18c>)
 8007a36:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007a38:	4b42      	ldr	r3, [pc, #264]	; (8007b44 <pvPortMalloc+0x18c>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007a3e:	e004      	b.n	8007a4a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a42:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a4c:	685b      	ldr	r3, [r3, #4]
 8007a4e:	687a      	ldr	r2, [r7, #4]
 8007a50:	429a      	cmp	r2, r3
 8007a52:	d903      	bls.n	8007a5c <pvPortMalloc+0xa4>
 8007a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d1f1      	bne.n	8007a40 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007a5c:	4b36      	ldr	r3, [pc, #216]	; (8007b38 <pvPortMalloc+0x180>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a62:	429a      	cmp	r2, r3
 8007a64:	d050      	beq.n	8007b08 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007a66:	6a3b      	ldr	r3, [r7, #32]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	2208      	movs	r2, #8
 8007a6c:	4413      	add	r3, r2
 8007a6e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a72:	681a      	ldr	r2, [r3, #0]
 8007a74:	6a3b      	ldr	r3, [r7, #32]
 8007a76:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a7a:	685a      	ldr	r2, [r3, #4]
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	1ad2      	subs	r2, r2, r3
 8007a80:	2308      	movs	r3, #8
 8007a82:	005b      	lsls	r3, r3, #1
 8007a84:	429a      	cmp	r2, r3
 8007a86:	d91f      	bls.n	8007ac8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007a88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	4413      	add	r3, r2
 8007a8e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007a90:	69bb      	ldr	r3, [r7, #24]
 8007a92:	f003 0307 	and.w	r3, r3, #7
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d00a      	beq.n	8007ab0 <pvPortMalloc+0xf8>
	__asm volatile
 8007a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a9e:	f383 8811 	msr	BASEPRI, r3
 8007aa2:	f3bf 8f6f 	isb	sy
 8007aa6:	f3bf 8f4f 	dsb	sy
 8007aaa:	613b      	str	r3, [r7, #16]
}
 8007aac:	bf00      	nop
 8007aae:	e7fe      	b.n	8007aae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ab2:	685a      	ldr	r2, [r3, #4]
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	1ad2      	subs	r2, r2, r3
 8007ab8:	69bb      	ldr	r3, [r7, #24]
 8007aba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007abe:	687a      	ldr	r2, [r7, #4]
 8007ac0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007ac2:	69b8      	ldr	r0, [r7, #24]
 8007ac4:	f000 f908 	bl	8007cd8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007ac8:	4b1d      	ldr	r3, [pc, #116]	; (8007b40 <pvPortMalloc+0x188>)
 8007aca:	681a      	ldr	r2, [r3, #0]
 8007acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ace:	685b      	ldr	r3, [r3, #4]
 8007ad0:	1ad3      	subs	r3, r2, r3
 8007ad2:	4a1b      	ldr	r2, [pc, #108]	; (8007b40 <pvPortMalloc+0x188>)
 8007ad4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007ad6:	4b1a      	ldr	r3, [pc, #104]	; (8007b40 <pvPortMalloc+0x188>)
 8007ad8:	681a      	ldr	r2, [r3, #0]
 8007ada:	4b1b      	ldr	r3, [pc, #108]	; (8007b48 <pvPortMalloc+0x190>)
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	429a      	cmp	r2, r3
 8007ae0:	d203      	bcs.n	8007aea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007ae2:	4b17      	ldr	r3, [pc, #92]	; (8007b40 <pvPortMalloc+0x188>)
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	4a18      	ldr	r2, [pc, #96]	; (8007b48 <pvPortMalloc+0x190>)
 8007ae8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aec:	685a      	ldr	r2, [r3, #4]
 8007aee:	4b13      	ldr	r3, [pc, #76]	; (8007b3c <pvPortMalloc+0x184>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	431a      	orrs	r2, r3
 8007af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007af6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007afa:	2200      	movs	r2, #0
 8007afc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007afe:	4b13      	ldr	r3, [pc, #76]	; (8007b4c <pvPortMalloc+0x194>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	3301      	adds	r3, #1
 8007b04:	4a11      	ldr	r2, [pc, #68]	; (8007b4c <pvPortMalloc+0x194>)
 8007b06:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007b08:	f7fe fb6e 	bl	80061e8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b0c:	69fb      	ldr	r3, [r7, #28]
 8007b0e:	f003 0307 	and.w	r3, r3, #7
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d00a      	beq.n	8007b2c <pvPortMalloc+0x174>
	__asm volatile
 8007b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b1a:	f383 8811 	msr	BASEPRI, r3
 8007b1e:	f3bf 8f6f 	isb	sy
 8007b22:	f3bf 8f4f 	dsb	sy
 8007b26:	60fb      	str	r3, [r7, #12]
}
 8007b28:	bf00      	nop
 8007b2a:	e7fe      	b.n	8007b2a <pvPortMalloc+0x172>
	return pvReturn;
 8007b2c:	69fb      	ldr	r3, [r7, #28]
}
 8007b2e:	4618      	mov	r0, r3
 8007b30:	3728      	adds	r7, #40	; 0x28
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd80      	pop	{r7, pc}
 8007b36:	bf00      	nop
 8007b38:	20001ea0 	.word	0x20001ea0
 8007b3c:	20001eb4 	.word	0x20001eb4
 8007b40:	20001ea4 	.word	0x20001ea4
 8007b44:	20001e98 	.word	0x20001e98
 8007b48:	20001ea8 	.word	0x20001ea8
 8007b4c:	20001eac 	.word	0x20001eac

08007b50 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b086      	sub	sp, #24
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d04d      	beq.n	8007bfe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007b62:	2308      	movs	r3, #8
 8007b64:	425b      	negs	r3, r3
 8007b66:	697a      	ldr	r2, [r7, #20]
 8007b68:	4413      	add	r3, r2
 8007b6a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007b6c:	697b      	ldr	r3, [r7, #20]
 8007b6e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007b70:	693b      	ldr	r3, [r7, #16]
 8007b72:	685a      	ldr	r2, [r3, #4]
 8007b74:	4b24      	ldr	r3, [pc, #144]	; (8007c08 <vPortFree+0xb8>)
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	4013      	ands	r3, r2
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d10a      	bne.n	8007b94 <vPortFree+0x44>
	__asm volatile
 8007b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b82:	f383 8811 	msr	BASEPRI, r3
 8007b86:	f3bf 8f6f 	isb	sy
 8007b8a:	f3bf 8f4f 	dsb	sy
 8007b8e:	60fb      	str	r3, [r7, #12]
}
 8007b90:	bf00      	nop
 8007b92:	e7fe      	b.n	8007b92 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007b94:	693b      	ldr	r3, [r7, #16]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d00a      	beq.n	8007bb2 <vPortFree+0x62>
	__asm volatile
 8007b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ba0:	f383 8811 	msr	BASEPRI, r3
 8007ba4:	f3bf 8f6f 	isb	sy
 8007ba8:	f3bf 8f4f 	dsb	sy
 8007bac:	60bb      	str	r3, [r7, #8]
}
 8007bae:	bf00      	nop
 8007bb0:	e7fe      	b.n	8007bb0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007bb2:	693b      	ldr	r3, [r7, #16]
 8007bb4:	685a      	ldr	r2, [r3, #4]
 8007bb6:	4b14      	ldr	r3, [pc, #80]	; (8007c08 <vPortFree+0xb8>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	4013      	ands	r3, r2
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d01e      	beq.n	8007bfe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007bc0:	693b      	ldr	r3, [r7, #16]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d11a      	bne.n	8007bfe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007bc8:	693b      	ldr	r3, [r7, #16]
 8007bca:	685a      	ldr	r2, [r3, #4]
 8007bcc:	4b0e      	ldr	r3, [pc, #56]	; (8007c08 <vPortFree+0xb8>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	43db      	mvns	r3, r3
 8007bd2:	401a      	ands	r2, r3
 8007bd4:	693b      	ldr	r3, [r7, #16]
 8007bd6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007bd8:	f7fe faf8 	bl	80061cc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007bdc:	693b      	ldr	r3, [r7, #16]
 8007bde:	685a      	ldr	r2, [r3, #4]
 8007be0:	4b0a      	ldr	r3, [pc, #40]	; (8007c0c <vPortFree+0xbc>)
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	4413      	add	r3, r2
 8007be6:	4a09      	ldr	r2, [pc, #36]	; (8007c0c <vPortFree+0xbc>)
 8007be8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007bea:	6938      	ldr	r0, [r7, #16]
 8007bec:	f000 f874 	bl	8007cd8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007bf0:	4b07      	ldr	r3, [pc, #28]	; (8007c10 <vPortFree+0xc0>)
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	3301      	adds	r3, #1
 8007bf6:	4a06      	ldr	r2, [pc, #24]	; (8007c10 <vPortFree+0xc0>)
 8007bf8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007bfa:	f7fe faf5 	bl	80061e8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007bfe:	bf00      	nop
 8007c00:	3718      	adds	r7, #24
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd80      	pop	{r7, pc}
 8007c06:	bf00      	nop
 8007c08:	20001eb4 	.word	0x20001eb4
 8007c0c:	20001ea4 	.word	0x20001ea4
 8007c10:	20001eb0 	.word	0x20001eb0

08007c14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007c14:	b480      	push	{r7}
 8007c16:	b085      	sub	sp, #20
 8007c18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007c1a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8007c1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007c20:	4b27      	ldr	r3, [pc, #156]	; (8007cc0 <prvHeapInit+0xac>)
 8007c22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	f003 0307 	and.w	r3, r3, #7
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d00c      	beq.n	8007c48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	3307      	adds	r3, #7
 8007c32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	f023 0307 	bic.w	r3, r3, #7
 8007c3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007c3c:	68ba      	ldr	r2, [r7, #8]
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	1ad3      	subs	r3, r2, r3
 8007c42:	4a1f      	ldr	r2, [pc, #124]	; (8007cc0 <prvHeapInit+0xac>)
 8007c44:	4413      	add	r3, r2
 8007c46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007c4c:	4a1d      	ldr	r2, [pc, #116]	; (8007cc4 <prvHeapInit+0xb0>)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007c52:	4b1c      	ldr	r3, [pc, #112]	; (8007cc4 <prvHeapInit+0xb0>)
 8007c54:	2200      	movs	r2, #0
 8007c56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	68ba      	ldr	r2, [r7, #8]
 8007c5c:	4413      	add	r3, r2
 8007c5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007c60:	2208      	movs	r2, #8
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	1a9b      	subs	r3, r3, r2
 8007c66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	f023 0307 	bic.w	r3, r3, #7
 8007c6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	4a15      	ldr	r2, [pc, #84]	; (8007cc8 <prvHeapInit+0xb4>)
 8007c74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007c76:	4b14      	ldr	r3, [pc, #80]	; (8007cc8 <prvHeapInit+0xb4>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007c7e:	4b12      	ldr	r3, [pc, #72]	; (8007cc8 <prvHeapInit+0xb4>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	2200      	movs	r2, #0
 8007c84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	68fa      	ldr	r2, [r7, #12]
 8007c8e:	1ad2      	subs	r2, r2, r3
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007c94:	4b0c      	ldr	r3, [pc, #48]	; (8007cc8 <prvHeapInit+0xb4>)
 8007c96:	681a      	ldr	r2, [r3, #0]
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	685b      	ldr	r3, [r3, #4]
 8007ca0:	4a0a      	ldr	r2, [pc, #40]	; (8007ccc <prvHeapInit+0xb8>)
 8007ca2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	685b      	ldr	r3, [r3, #4]
 8007ca8:	4a09      	ldr	r2, [pc, #36]	; (8007cd0 <prvHeapInit+0xbc>)
 8007caa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007cac:	4b09      	ldr	r3, [pc, #36]	; (8007cd4 <prvHeapInit+0xc0>)
 8007cae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007cb2:	601a      	str	r2, [r3, #0]
}
 8007cb4:	bf00      	nop
 8007cb6:	3714      	adds	r7, #20
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbe:	4770      	bx	lr
 8007cc0:	20001298 	.word	0x20001298
 8007cc4:	20001e98 	.word	0x20001e98
 8007cc8:	20001ea0 	.word	0x20001ea0
 8007ccc:	20001ea8 	.word	0x20001ea8
 8007cd0:	20001ea4 	.word	0x20001ea4
 8007cd4:	20001eb4 	.word	0x20001eb4

08007cd8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b085      	sub	sp, #20
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007ce0:	4b28      	ldr	r3, [pc, #160]	; (8007d84 <prvInsertBlockIntoFreeList+0xac>)
 8007ce2:	60fb      	str	r3, [r7, #12]
 8007ce4:	e002      	b.n	8007cec <prvInsertBlockIntoFreeList+0x14>
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	60fb      	str	r3, [r7, #12]
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	687a      	ldr	r2, [r7, #4]
 8007cf2:	429a      	cmp	r2, r3
 8007cf4:	d8f7      	bhi.n	8007ce6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	685b      	ldr	r3, [r3, #4]
 8007cfe:	68ba      	ldr	r2, [r7, #8]
 8007d00:	4413      	add	r3, r2
 8007d02:	687a      	ldr	r2, [r7, #4]
 8007d04:	429a      	cmp	r2, r3
 8007d06:	d108      	bne.n	8007d1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	685a      	ldr	r2, [r3, #4]
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	685b      	ldr	r3, [r3, #4]
 8007d10:	441a      	add	r2, r3
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	685b      	ldr	r3, [r3, #4]
 8007d22:	68ba      	ldr	r2, [r7, #8]
 8007d24:	441a      	add	r2, r3
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	429a      	cmp	r2, r3
 8007d2c:	d118      	bne.n	8007d60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681a      	ldr	r2, [r3, #0]
 8007d32:	4b15      	ldr	r3, [pc, #84]	; (8007d88 <prvInsertBlockIntoFreeList+0xb0>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	429a      	cmp	r2, r3
 8007d38:	d00d      	beq.n	8007d56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	685a      	ldr	r2, [r3, #4]
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	685b      	ldr	r3, [r3, #4]
 8007d44:	441a      	add	r2, r3
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	681a      	ldr	r2, [r3, #0]
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	601a      	str	r2, [r3, #0]
 8007d54:	e008      	b.n	8007d68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007d56:	4b0c      	ldr	r3, [pc, #48]	; (8007d88 <prvInsertBlockIntoFreeList+0xb0>)
 8007d58:	681a      	ldr	r2, [r3, #0]
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	601a      	str	r2, [r3, #0]
 8007d5e:	e003      	b.n	8007d68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	681a      	ldr	r2, [r3, #0]
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007d68:	68fa      	ldr	r2, [r7, #12]
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	429a      	cmp	r2, r3
 8007d6e:	d002      	beq.n	8007d76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	687a      	ldr	r2, [r7, #4]
 8007d74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007d76:	bf00      	nop
 8007d78:	3714      	adds	r7, #20
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d80:	4770      	bx	lr
 8007d82:	bf00      	nop
 8007d84:	20001e98 	.word	0x20001e98
 8007d88:	20001ea0 	.word	0x20001ea0

08007d8c <__libc_init_array>:
 8007d8c:	b570      	push	{r4, r5, r6, lr}
 8007d8e:	4d0d      	ldr	r5, [pc, #52]	; (8007dc4 <__libc_init_array+0x38>)
 8007d90:	4c0d      	ldr	r4, [pc, #52]	; (8007dc8 <__libc_init_array+0x3c>)
 8007d92:	1b64      	subs	r4, r4, r5
 8007d94:	10a4      	asrs	r4, r4, #2
 8007d96:	2600      	movs	r6, #0
 8007d98:	42a6      	cmp	r6, r4
 8007d9a:	d109      	bne.n	8007db0 <__libc_init_array+0x24>
 8007d9c:	4d0b      	ldr	r5, [pc, #44]	; (8007dcc <__libc_init_array+0x40>)
 8007d9e:	4c0c      	ldr	r4, [pc, #48]	; (8007dd0 <__libc_init_array+0x44>)
 8007da0:	f000 f8f2 	bl	8007f88 <_init>
 8007da4:	1b64      	subs	r4, r4, r5
 8007da6:	10a4      	asrs	r4, r4, #2
 8007da8:	2600      	movs	r6, #0
 8007daa:	42a6      	cmp	r6, r4
 8007dac:	d105      	bne.n	8007dba <__libc_init_array+0x2e>
 8007dae:	bd70      	pop	{r4, r5, r6, pc}
 8007db0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007db4:	4798      	blx	r3
 8007db6:	3601      	adds	r6, #1
 8007db8:	e7ee      	b.n	8007d98 <__libc_init_array+0xc>
 8007dba:	f855 3b04 	ldr.w	r3, [r5], #4
 8007dbe:	4798      	blx	r3
 8007dc0:	3601      	adds	r6, #1
 8007dc2:	e7f2      	b.n	8007daa <__libc_init_array+0x1e>
 8007dc4:	080081a8 	.word	0x080081a8
 8007dc8:	080081a8 	.word	0x080081a8
 8007dcc:	080081a8 	.word	0x080081a8
 8007dd0:	080081ac 	.word	0x080081ac

08007dd4 <__retarget_lock_acquire_recursive>:
 8007dd4:	4770      	bx	lr

08007dd6 <__retarget_lock_release_recursive>:
 8007dd6:	4770      	bx	lr

08007dd8 <memcpy>:
 8007dd8:	440a      	add	r2, r1
 8007dda:	4291      	cmp	r1, r2
 8007ddc:	f100 33ff 	add.w	r3, r0, #4294967295
 8007de0:	d100      	bne.n	8007de4 <memcpy+0xc>
 8007de2:	4770      	bx	lr
 8007de4:	b510      	push	{r4, lr}
 8007de6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007dea:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007dee:	4291      	cmp	r1, r2
 8007df0:	d1f9      	bne.n	8007de6 <memcpy+0xe>
 8007df2:	bd10      	pop	{r4, pc}

08007df4 <memset>:
 8007df4:	4402      	add	r2, r0
 8007df6:	4603      	mov	r3, r0
 8007df8:	4293      	cmp	r3, r2
 8007dfa:	d100      	bne.n	8007dfe <memset+0xa>
 8007dfc:	4770      	bx	lr
 8007dfe:	f803 1b01 	strb.w	r1, [r3], #1
 8007e02:	e7f9      	b.n	8007df8 <memset+0x4>

08007e04 <cleanup_glue>:
 8007e04:	b538      	push	{r3, r4, r5, lr}
 8007e06:	460c      	mov	r4, r1
 8007e08:	6809      	ldr	r1, [r1, #0]
 8007e0a:	4605      	mov	r5, r0
 8007e0c:	b109      	cbz	r1, 8007e12 <cleanup_glue+0xe>
 8007e0e:	f7ff fff9 	bl	8007e04 <cleanup_glue>
 8007e12:	4621      	mov	r1, r4
 8007e14:	4628      	mov	r0, r5
 8007e16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e1a:	f000 b869 	b.w	8007ef0 <_free_r>
	...

08007e20 <_reclaim_reent>:
 8007e20:	4b2c      	ldr	r3, [pc, #176]	; (8007ed4 <_reclaim_reent+0xb4>)
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	4283      	cmp	r3, r0
 8007e26:	b570      	push	{r4, r5, r6, lr}
 8007e28:	4604      	mov	r4, r0
 8007e2a:	d051      	beq.n	8007ed0 <_reclaim_reent+0xb0>
 8007e2c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007e2e:	b143      	cbz	r3, 8007e42 <_reclaim_reent+0x22>
 8007e30:	68db      	ldr	r3, [r3, #12]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d14a      	bne.n	8007ecc <_reclaim_reent+0xac>
 8007e36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e38:	6819      	ldr	r1, [r3, #0]
 8007e3a:	b111      	cbz	r1, 8007e42 <_reclaim_reent+0x22>
 8007e3c:	4620      	mov	r0, r4
 8007e3e:	f000 f857 	bl	8007ef0 <_free_r>
 8007e42:	6961      	ldr	r1, [r4, #20]
 8007e44:	b111      	cbz	r1, 8007e4c <_reclaim_reent+0x2c>
 8007e46:	4620      	mov	r0, r4
 8007e48:	f000 f852 	bl	8007ef0 <_free_r>
 8007e4c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007e4e:	b111      	cbz	r1, 8007e56 <_reclaim_reent+0x36>
 8007e50:	4620      	mov	r0, r4
 8007e52:	f000 f84d 	bl	8007ef0 <_free_r>
 8007e56:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007e58:	b111      	cbz	r1, 8007e60 <_reclaim_reent+0x40>
 8007e5a:	4620      	mov	r0, r4
 8007e5c:	f000 f848 	bl	8007ef0 <_free_r>
 8007e60:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007e62:	b111      	cbz	r1, 8007e6a <_reclaim_reent+0x4a>
 8007e64:	4620      	mov	r0, r4
 8007e66:	f000 f843 	bl	8007ef0 <_free_r>
 8007e6a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007e6c:	b111      	cbz	r1, 8007e74 <_reclaim_reent+0x54>
 8007e6e:	4620      	mov	r0, r4
 8007e70:	f000 f83e 	bl	8007ef0 <_free_r>
 8007e74:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007e76:	b111      	cbz	r1, 8007e7e <_reclaim_reent+0x5e>
 8007e78:	4620      	mov	r0, r4
 8007e7a:	f000 f839 	bl	8007ef0 <_free_r>
 8007e7e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007e80:	b111      	cbz	r1, 8007e88 <_reclaim_reent+0x68>
 8007e82:	4620      	mov	r0, r4
 8007e84:	f000 f834 	bl	8007ef0 <_free_r>
 8007e88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007e8a:	b111      	cbz	r1, 8007e92 <_reclaim_reent+0x72>
 8007e8c:	4620      	mov	r0, r4
 8007e8e:	f000 f82f 	bl	8007ef0 <_free_r>
 8007e92:	69a3      	ldr	r3, [r4, #24]
 8007e94:	b1e3      	cbz	r3, 8007ed0 <_reclaim_reent+0xb0>
 8007e96:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007e98:	4620      	mov	r0, r4
 8007e9a:	4798      	blx	r3
 8007e9c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007e9e:	b1b9      	cbz	r1, 8007ed0 <_reclaim_reent+0xb0>
 8007ea0:	4620      	mov	r0, r4
 8007ea2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007ea6:	f7ff bfad 	b.w	8007e04 <cleanup_glue>
 8007eaa:	5949      	ldr	r1, [r1, r5]
 8007eac:	b941      	cbnz	r1, 8007ec0 <_reclaim_reent+0xa0>
 8007eae:	3504      	adds	r5, #4
 8007eb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007eb2:	2d80      	cmp	r5, #128	; 0x80
 8007eb4:	68d9      	ldr	r1, [r3, #12]
 8007eb6:	d1f8      	bne.n	8007eaa <_reclaim_reent+0x8a>
 8007eb8:	4620      	mov	r0, r4
 8007eba:	f000 f819 	bl	8007ef0 <_free_r>
 8007ebe:	e7ba      	b.n	8007e36 <_reclaim_reent+0x16>
 8007ec0:	680e      	ldr	r6, [r1, #0]
 8007ec2:	4620      	mov	r0, r4
 8007ec4:	f000 f814 	bl	8007ef0 <_free_r>
 8007ec8:	4631      	mov	r1, r6
 8007eca:	e7ef      	b.n	8007eac <_reclaim_reent+0x8c>
 8007ecc:	2500      	movs	r5, #0
 8007ece:	e7ef      	b.n	8007eb0 <_reclaim_reent+0x90>
 8007ed0:	bd70      	pop	{r4, r5, r6, pc}
 8007ed2:	bf00      	nop
 8007ed4:	20000014 	.word	0x20000014

08007ed8 <__malloc_lock>:
 8007ed8:	4801      	ldr	r0, [pc, #4]	; (8007ee0 <__malloc_lock+0x8>)
 8007eda:	f7ff bf7b 	b.w	8007dd4 <__retarget_lock_acquire_recursive>
 8007ede:	bf00      	nop
 8007ee0:	20001eb8 	.word	0x20001eb8

08007ee4 <__malloc_unlock>:
 8007ee4:	4801      	ldr	r0, [pc, #4]	; (8007eec <__malloc_unlock+0x8>)
 8007ee6:	f7ff bf76 	b.w	8007dd6 <__retarget_lock_release_recursive>
 8007eea:	bf00      	nop
 8007eec:	20001eb8 	.word	0x20001eb8

08007ef0 <_free_r>:
 8007ef0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007ef2:	2900      	cmp	r1, #0
 8007ef4:	d044      	beq.n	8007f80 <_free_r+0x90>
 8007ef6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007efa:	9001      	str	r0, [sp, #4]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	f1a1 0404 	sub.w	r4, r1, #4
 8007f02:	bfb8      	it	lt
 8007f04:	18e4      	addlt	r4, r4, r3
 8007f06:	f7ff ffe7 	bl	8007ed8 <__malloc_lock>
 8007f0a:	4a1e      	ldr	r2, [pc, #120]	; (8007f84 <_free_r+0x94>)
 8007f0c:	9801      	ldr	r0, [sp, #4]
 8007f0e:	6813      	ldr	r3, [r2, #0]
 8007f10:	b933      	cbnz	r3, 8007f20 <_free_r+0x30>
 8007f12:	6063      	str	r3, [r4, #4]
 8007f14:	6014      	str	r4, [r2, #0]
 8007f16:	b003      	add	sp, #12
 8007f18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007f1c:	f7ff bfe2 	b.w	8007ee4 <__malloc_unlock>
 8007f20:	42a3      	cmp	r3, r4
 8007f22:	d908      	bls.n	8007f36 <_free_r+0x46>
 8007f24:	6825      	ldr	r5, [r4, #0]
 8007f26:	1961      	adds	r1, r4, r5
 8007f28:	428b      	cmp	r3, r1
 8007f2a:	bf01      	itttt	eq
 8007f2c:	6819      	ldreq	r1, [r3, #0]
 8007f2e:	685b      	ldreq	r3, [r3, #4]
 8007f30:	1949      	addeq	r1, r1, r5
 8007f32:	6021      	streq	r1, [r4, #0]
 8007f34:	e7ed      	b.n	8007f12 <_free_r+0x22>
 8007f36:	461a      	mov	r2, r3
 8007f38:	685b      	ldr	r3, [r3, #4]
 8007f3a:	b10b      	cbz	r3, 8007f40 <_free_r+0x50>
 8007f3c:	42a3      	cmp	r3, r4
 8007f3e:	d9fa      	bls.n	8007f36 <_free_r+0x46>
 8007f40:	6811      	ldr	r1, [r2, #0]
 8007f42:	1855      	adds	r5, r2, r1
 8007f44:	42a5      	cmp	r5, r4
 8007f46:	d10b      	bne.n	8007f60 <_free_r+0x70>
 8007f48:	6824      	ldr	r4, [r4, #0]
 8007f4a:	4421      	add	r1, r4
 8007f4c:	1854      	adds	r4, r2, r1
 8007f4e:	42a3      	cmp	r3, r4
 8007f50:	6011      	str	r1, [r2, #0]
 8007f52:	d1e0      	bne.n	8007f16 <_free_r+0x26>
 8007f54:	681c      	ldr	r4, [r3, #0]
 8007f56:	685b      	ldr	r3, [r3, #4]
 8007f58:	6053      	str	r3, [r2, #4]
 8007f5a:	4421      	add	r1, r4
 8007f5c:	6011      	str	r1, [r2, #0]
 8007f5e:	e7da      	b.n	8007f16 <_free_r+0x26>
 8007f60:	d902      	bls.n	8007f68 <_free_r+0x78>
 8007f62:	230c      	movs	r3, #12
 8007f64:	6003      	str	r3, [r0, #0]
 8007f66:	e7d6      	b.n	8007f16 <_free_r+0x26>
 8007f68:	6825      	ldr	r5, [r4, #0]
 8007f6a:	1961      	adds	r1, r4, r5
 8007f6c:	428b      	cmp	r3, r1
 8007f6e:	bf04      	itt	eq
 8007f70:	6819      	ldreq	r1, [r3, #0]
 8007f72:	685b      	ldreq	r3, [r3, #4]
 8007f74:	6063      	str	r3, [r4, #4]
 8007f76:	bf04      	itt	eq
 8007f78:	1949      	addeq	r1, r1, r5
 8007f7a:	6021      	streq	r1, [r4, #0]
 8007f7c:	6054      	str	r4, [r2, #4]
 8007f7e:	e7ca      	b.n	8007f16 <_free_r+0x26>
 8007f80:	b003      	add	sp, #12
 8007f82:	bd30      	pop	{r4, r5, pc}
 8007f84:	20001ebc 	.word	0x20001ebc

08007f88 <_init>:
 8007f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f8a:	bf00      	nop
 8007f8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f8e:	bc08      	pop	{r3}
 8007f90:	469e      	mov	lr, r3
 8007f92:	4770      	bx	lr

08007f94 <_fini>:
 8007f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f96:	bf00      	nop
 8007f98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f9a:	bc08      	pop	{r3}
 8007f9c:	469e      	mov	lr, r3
 8007f9e:	4770      	bx	lr
