
23_Working_With_Software_Timers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ac8  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000214  08007c08  08007c08  00017c08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007e1c  08007e1c  00017e1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007e24  08007e24  00017e24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007e28  08007e28  00017e28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  20000004  08007e2c  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001e30  20000078  08007ea0  00020078  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20001ea8  08007ea0  00021ea8  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 10 .debug_info   00025391  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004635  00000000  00000000  00045439  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002238  00000000  00000000  00049a70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000020a0  00000000  00000000  0004bca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00005c52  00000000  00000000  0004dd48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000200a6  00000000  00000000  0005399a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000ef6ab  00000000  00000000  00073a40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001630eb  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000992c  00000000  00000000  0016313c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000078 	.word	0x20000078
 800015c:	00000000 	.word	0x00000000
 8000160:	08007bf0 	.word	0x08007bf0

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000007c 	.word	0x2000007c
 800017c:	08007bf0 	.word	0x08007bf0

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b974 	b.w	8000520 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	468e      	mov	lr, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	d14d      	bne.n	80002fa <__udivmoddi4+0xaa>
 800025e:	428a      	cmp	r2, r1
 8000260:	4694      	mov	ip, r2
 8000262:	d969      	bls.n	8000338 <__udivmoddi4+0xe8>
 8000264:	fab2 f282 	clz	r2, r2
 8000268:	b152      	cbz	r2, 8000280 <__udivmoddi4+0x30>
 800026a:	fa01 f302 	lsl.w	r3, r1, r2
 800026e:	f1c2 0120 	rsb	r1, r2, #32
 8000272:	fa20 f101 	lsr.w	r1, r0, r1
 8000276:	fa0c fc02 	lsl.w	ip, ip, r2
 800027a:	ea41 0e03 	orr.w	lr, r1, r3
 800027e:	4094      	lsls	r4, r2
 8000280:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000284:	0c21      	lsrs	r1, r4, #16
 8000286:	fbbe f6f8 	udiv	r6, lr, r8
 800028a:	fa1f f78c 	uxth.w	r7, ip
 800028e:	fb08 e316 	mls	r3, r8, r6, lr
 8000292:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000296:	fb06 f107 	mul.w	r1, r6, r7
 800029a:	4299      	cmp	r1, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x64>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002a6:	f080 811f 	bcs.w	80004e8 <__udivmoddi4+0x298>
 80002aa:	4299      	cmp	r1, r3
 80002ac:	f240 811c 	bls.w	80004e8 <__udivmoddi4+0x298>
 80002b0:	3e02      	subs	r6, #2
 80002b2:	4463      	add	r3, ip
 80002b4:	1a5b      	subs	r3, r3, r1
 80002b6:	b2a4      	uxth	r4, r4
 80002b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002bc:	fb08 3310 	mls	r3, r8, r0, r3
 80002c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c4:	fb00 f707 	mul.w	r7, r0, r7
 80002c8:	42a7      	cmp	r7, r4
 80002ca:	d90a      	bls.n	80002e2 <__udivmoddi4+0x92>
 80002cc:	eb1c 0404 	adds.w	r4, ip, r4
 80002d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002d4:	f080 810a 	bcs.w	80004ec <__udivmoddi4+0x29c>
 80002d8:	42a7      	cmp	r7, r4
 80002da:	f240 8107 	bls.w	80004ec <__udivmoddi4+0x29c>
 80002de:	4464      	add	r4, ip
 80002e0:	3802      	subs	r0, #2
 80002e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002e6:	1be4      	subs	r4, r4, r7
 80002e8:	2600      	movs	r6, #0
 80002ea:	b11d      	cbz	r5, 80002f4 <__udivmoddi4+0xa4>
 80002ec:	40d4      	lsrs	r4, r2
 80002ee:	2300      	movs	r3, #0
 80002f0:	e9c5 4300 	strd	r4, r3, [r5]
 80002f4:	4631      	mov	r1, r6
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0xc2>
 80002fe:	2d00      	cmp	r5, #0
 8000300:	f000 80ef 	beq.w	80004e2 <__udivmoddi4+0x292>
 8000304:	2600      	movs	r6, #0
 8000306:	e9c5 0100 	strd	r0, r1, [r5]
 800030a:	4630      	mov	r0, r6
 800030c:	4631      	mov	r1, r6
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	fab3 f683 	clz	r6, r3
 8000316:	2e00      	cmp	r6, #0
 8000318:	d14a      	bne.n	80003b0 <__udivmoddi4+0x160>
 800031a:	428b      	cmp	r3, r1
 800031c:	d302      	bcc.n	8000324 <__udivmoddi4+0xd4>
 800031e:	4282      	cmp	r2, r0
 8000320:	f200 80f9 	bhi.w	8000516 <__udivmoddi4+0x2c6>
 8000324:	1a84      	subs	r4, r0, r2
 8000326:	eb61 0303 	sbc.w	r3, r1, r3
 800032a:	2001      	movs	r0, #1
 800032c:	469e      	mov	lr, r3
 800032e:	2d00      	cmp	r5, #0
 8000330:	d0e0      	beq.n	80002f4 <__udivmoddi4+0xa4>
 8000332:	e9c5 4e00 	strd	r4, lr, [r5]
 8000336:	e7dd      	b.n	80002f4 <__udivmoddi4+0xa4>
 8000338:	b902      	cbnz	r2, 800033c <__udivmoddi4+0xec>
 800033a:	deff      	udf	#255	; 0xff
 800033c:	fab2 f282 	clz	r2, r2
 8000340:	2a00      	cmp	r2, #0
 8000342:	f040 8092 	bne.w	800046a <__udivmoddi4+0x21a>
 8000346:	eba1 010c 	sub.w	r1, r1, ip
 800034a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800034e:	fa1f fe8c 	uxth.w	lr, ip
 8000352:	2601      	movs	r6, #1
 8000354:	0c20      	lsrs	r0, r4, #16
 8000356:	fbb1 f3f7 	udiv	r3, r1, r7
 800035a:	fb07 1113 	mls	r1, r7, r3, r1
 800035e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000362:	fb0e f003 	mul.w	r0, lr, r3
 8000366:	4288      	cmp	r0, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x12c>
 800036a:	eb1c 0101 	adds.w	r1, ip, r1
 800036e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x12a>
 8000374:	4288      	cmp	r0, r1
 8000376:	f200 80cb 	bhi.w	8000510 <__udivmoddi4+0x2c0>
 800037a:	4643      	mov	r3, r8
 800037c:	1a09      	subs	r1, r1, r0
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb1 f0f7 	udiv	r0, r1, r7
 8000384:	fb07 1110 	mls	r1, r7, r0, r1
 8000388:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800038c:	fb0e fe00 	mul.w	lr, lr, r0
 8000390:	45a6      	cmp	lr, r4
 8000392:	d908      	bls.n	80003a6 <__udivmoddi4+0x156>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f100 31ff 	add.w	r1, r0, #4294967295
 800039c:	d202      	bcs.n	80003a4 <__udivmoddi4+0x154>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f200 80bb 	bhi.w	800051a <__udivmoddi4+0x2ca>
 80003a4:	4608      	mov	r0, r1
 80003a6:	eba4 040e 	sub.w	r4, r4, lr
 80003aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ae:	e79c      	b.n	80002ea <__udivmoddi4+0x9a>
 80003b0:	f1c6 0720 	rsb	r7, r6, #32
 80003b4:	40b3      	lsls	r3, r6
 80003b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80003be:	fa20 f407 	lsr.w	r4, r0, r7
 80003c2:	fa01 f306 	lsl.w	r3, r1, r6
 80003c6:	431c      	orrs	r4, r3
 80003c8:	40f9      	lsrs	r1, r7
 80003ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ce:	fa00 f306 	lsl.w	r3, r0, r6
 80003d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003d6:	0c20      	lsrs	r0, r4, #16
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	fb09 1118 	mls	r1, r9, r8, r1
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	fb08 f00e 	mul.w	r0, r8, lr
 80003e8:	4288      	cmp	r0, r1
 80003ea:	fa02 f206 	lsl.w	r2, r2, r6
 80003ee:	d90b      	bls.n	8000408 <__udivmoddi4+0x1b8>
 80003f0:	eb1c 0101 	adds.w	r1, ip, r1
 80003f4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f8:	f080 8088 	bcs.w	800050c <__udivmoddi4+0x2bc>
 80003fc:	4288      	cmp	r0, r1
 80003fe:	f240 8085 	bls.w	800050c <__udivmoddi4+0x2bc>
 8000402:	f1a8 0802 	sub.w	r8, r8, #2
 8000406:	4461      	add	r1, ip
 8000408:	1a09      	subs	r1, r1, r0
 800040a:	b2a4      	uxth	r4, r4
 800040c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000410:	fb09 1110 	mls	r1, r9, r0, r1
 8000414:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000418:	fb00 fe0e 	mul.w	lr, r0, lr
 800041c:	458e      	cmp	lr, r1
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x1e2>
 8000420:	eb1c 0101 	adds.w	r1, ip, r1
 8000424:	f100 34ff 	add.w	r4, r0, #4294967295
 8000428:	d26c      	bcs.n	8000504 <__udivmoddi4+0x2b4>
 800042a:	458e      	cmp	lr, r1
 800042c:	d96a      	bls.n	8000504 <__udivmoddi4+0x2b4>
 800042e:	3802      	subs	r0, #2
 8000430:	4461      	add	r1, ip
 8000432:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000436:	fba0 9402 	umull	r9, r4, r0, r2
 800043a:	eba1 010e 	sub.w	r1, r1, lr
 800043e:	42a1      	cmp	r1, r4
 8000440:	46c8      	mov	r8, r9
 8000442:	46a6      	mov	lr, r4
 8000444:	d356      	bcc.n	80004f4 <__udivmoddi4+0x2a4>
 8000446:	d053      	beq.n	80004f0 <__udivmoddi4+0x2a0>
 8000448:	b15d      	cbz	r5, 8000462 <__udivmoddi4+0x212>
 800044a:	ebb3 0208 	subs.w	r2, r3, r8
 800044e:	eb61 010e 	sbc.w	r1, r1, lr
 8000452:	fa01 f707 	lsl.w	r7, r1, r7
 8000456:	fa22 f306 	lsr.w	r3, r2, r6
 800045a:	40f1      	lsrs	r1, r6
 800045c:	431f      	orrs	r7, r3
 800045e:	e9c5 7100 	strd	r7, r1, [r5]
 8000462:	2600      	movs	r6, #0
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	f1c2 0320 	rsb	r3, r2, #32
 800046e:	40d8      	lsrs	r0, r3
 8000470:	fa0c fc02 	lsl.w	ip, ip, r2
 8000474:	fa21 f303 	lsr.w	r3, r1, r3
 8000478:	4091      	lsls	r1, r2
 800047a:	4301      	orrs	r1, r0
 800047c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000480:	fa1f fe8c 	uxth.w	lr, ip
 8000484:	fbb3 f0f7 	udiv	r0, r3, r7
 8000488:	fb07 3610 	mls	r6, r7, r0, r3
 800048c:	0c0b      	lsrs	r3, r1, #16
 800048e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000492:	fb00 f60e 	mul.w	r6, r0, lr
 8000496:	429e      	cmp	r6, r3
 8000498:	fa04 f402 	lsl.w	r4, r4, r2
 800049c:	d908      	bls.n	80004b0 <__udivmoddi4+0x260>
 800049e:	eb1c 0303 	adds.w	r3, ip, r3
 80004a2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004a6:	d22f      	bcs.n	8000508 <__udivmoddi4+0x2b8>
 80004a8:	429e      	cmp	r6, r3
 80004aa:	d92d      	bls.n	8000508 <__udivmoddi4+0x2b8>
 80004ac:	3802      	subs	r0, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	1b9b      	subs	r3, r3, r6
 80004b2:	b289      	uxth	r1, r1
 80004b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b8:	fb07 3316 	mls	r3, r7, r6, r3
 80004bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004c0:	fb06 f30e 	mul.w	r3, r6, lr
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x28a>
 80004c8:	eb1c 0101 	adds.w	r1, ip, r1
 80004cc:	f106 38ff 	add.w	r8, r6, #4294967295
 80004d0:	d216      	bcs.n	8000500 <__udivmoddi4+0x2b0>
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d914      	bls.n	8000500 <__udivmoddi4+0x2b0>
 80004d6:	3e02      	subs	r6, #2
 80004d8:	4461      	add	r1, ip
 80004da:	1ac9      	subs	r1, r1, r3
 80004dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004e0:	e738      	b.n	8000354 <__udivmoddi4+0x104>
 80004e2:	462e      	mov	r6, r5
 80004e4:	4628      	mov	r0, r5
 80004e6:	e705      	b.n	80002f4 <__udivmoddi4+0xa4>
 80004e8:	4606      	mov	r6, r0
 80004ea:	e6e3      	b.n	80002b4 <__udivmoddi4+0x64>
 80004ec:	4618      	mov	r0, r3
 80004ee:	e6f8      	b.n	80002e2 <__udivmoddi4+0x92>
 80004f0:	454b      	cmp	r3, r9
 80004f2:	d2a9      	bcs.n	8000448 <__udivmoddi4+0x1f8>
 80004f4:	ebb9 0802 	subs.w	r8, r9, r2
 80004f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004fc:	3801      	subs	r0, #1
 80004fe:	e7a3      	b.n	8000448 <__udivmoddi4+0x1f8>
 8000500:	4646      	mov	r6, r8
 8000502:	e7ea      	b.n	80004da <__udivmoddi4+0x28a>
 8000504:	4620      	mov	r0, r4
 8000506:	e794      	b.n	8000432 <__udivmoddi4+0x1e2>
 8000508:	4640      	mov	r0, r8
 800050a:	e7d1      	b.n	80004b0 <__udivmoddi4+0x260>
 800050c:	46d0      	mov	r8, sl
 800050e:	e77b      	b.n	8000408 <__udivmoddi4+0x1b8>
 8000510:	3b02      	subs	r3, #2
 8000512:	4461      	add	r1, ip
 8000514:	e732      	b.n	800037c <__udivmoddi4+0x12c>
 8000516:	4630      	mov	r0, r6
 8000518:	e709      	b.n	800032e <__udivmoddi4+0xde>
 800051a:	4464      	add	r4, ip
 800051c:	3802      	subs	r0, #2
 800051e:	e742      	b.n	80003a6 <__udivmoddi4+0x156>

08000520 <__aeabi_idiv0>:
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop

08000524 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000524:	b480      	push	{r7}
 8000526:	b083      	sub	sp, #12
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800052c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000530:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000534:	f023 0218 	bic.w	r2, r3, #24
 8000538:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	4313      	orrs	r3, r2
 8000540:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000544:	bf00      	nop
 8000546:	370c      	adds	r7, #12
 8000548:	46bd      	mov	sp, r7
 800054a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054e:	4770      	bx	lr

08000550 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000550:	b480      	push	{r7}
 8000552:	b085      	sub	sp, #20
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000558:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800055c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800055e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	4313      	orrs	r3, r2
 8000566:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000568:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800056c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	4013      	ands	r3, r2
 8000572:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000574:	68fb      	ldr	r3, [r7, #12]
}
 8000576:	bf00      	nop
 8000578:	3714      	adds	r7, #20
 800057a:	46bd      	mov	sp, r7
 800057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000580:	4770      	bx	lr
	...

08000584 <main>:

void prvOneShotTimerCallback(TimerHandle_t xTimer);
void prvAutoReloadTimerCallback(TimerHandle_t xTimer);

int main(void)
{
 8000584:	b590      	push	{r4, r7, lr}
 8000586:	b083      	sub	sp, #12
 8000588:	af02      	add	r7, sp, #8

  HAL_Init();
 800058a:	f000 fcb5 	bl	8000ef8 <HAL_Init>
  SystemClock_Config();
 800058e:	f000 f89f 	bl	80006d0 <SystemClock_Config>
  MX_GPIO_Init();
 8000592:	f000 f93b 	bl	800080c <MX_GPIO_Init>
  MX_USB_PCD_Init();
 8000596:	f000 f911 	bl	80007bc <MX_USB_PCD_Init>
  LPUART1_UART_TX_Init();
 800059a:	f000 fc23 	bl	8000de4 <LPUART1_UART_TX_Init>

  xOneShotTimer = xTimerCreate(
 800059e:	4b1c      	ldr	r3, [pc, #112]	; (8000610 <main+0x8c>)
 80005a0:	9300      	str	r3, [sp, #0]
 80005a2:	2300      	movs	r3, #0
 80005a4:	2200      	movs	r2, #0
 80005a6:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 80005aa:	481a      	ldr	r0, [pc, #104]	; (8000614 <main+0x90>)
 80005ac:	f005 fb48 	bl	8005c40 <xTimerCreate>
 80005b0:	4603      	mov	r3, r0
 80005b2:	4a19      	ldr	r2, [pc, #100]	; (8000618 <main+0x94>)
 80005b4:	6013      	str	r3, [r2, #0]
		  pdFALSE,
		  0,
		  prvOneShotTimerCallback
		  );

  xAutoReloadTimer = xTimerCreate(
 80005b6:	4b19      	ldr	r3, [pc, #100]	; (800061c <main+0x98>)
 80005b8:	9300      	str	r3, [sp, #0]
 80005ba:	2300      	movs	r3, #0
 80005bc:	2201      	movs	r2, #1
 80005be:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80005c2:	4817      	ldr	r0, [pc, #92]	; (8000620 <main+0x9c>)
 80005c4:	f005 fb3c 	bl	8005c40 <xTimerCreate>
 80005c8:	4603      	mov	r3, r0
 80005ca:	4a16      	ldr	r2, [pc, #88]	; (8000624 <main+0xa0>)
 80005cc:	6013      	str	r3, [r2, #0]
		  pdTRUE,
		  0,
		  prvAutoReloadTimerCallback
		  );

  xTimerOneStarted = xTimerStart(xOneShotTimer, 0);
 80005ce:	4b12      	ldr	r3, [pc, #72]	; (8000618 <main+0x94>)
 80005d0:	681c      	ldr	r4, [r3, #0]
 80005d2:	f004 fecd 	bl	8005370 <xTaskGetTickCount>
 80005d6:	4602      	mov	r2, r0
 80005d8:	2300      	movs	r3, #0
 80005da:	9300      	str	r3, [sp, #0]
 80005dc:	2300      	movs	r3, #0
 80005de:	2101      	movs	r1, #1
 80005e0:	4620      	mov	r0, r4
 80005e2:	f005 fb89 	bl	8005cf8 <xTimerGenericCommand>
 80005e6:	4603      	mov	r3, r0
 80005e8:	4a0f      	ldr	r2, [pc, #60]	; (8000628 <main+0xa4>)
 80005ea:	6013      	str	r3, [r2, #0]
  xTimerTwoStarted = xTimerStart(xAutoReloadTimer, 0);
 80005ec:	4b0d      	ldr	r3, [pc, #52]	; (8000624 <main+0xa0>)
 80005ee:	681c      	ldr	r4, [r3, #0]
 80005f0:	f004 febe 	bl	8005370 <xTaskGetTickCount>
 80005f4:	4602      	mov	r2, r0
 80005f6:	2300      	movs	r3, #0
 80005f8:	9300      	str	r3, [sp, #0]
 80005fa:	2300      	movs	r3, #0
 80005fc:	2101      	movs	r1, #1
 80005fe:	4620      	mov	r0, r4
 8000600:	f005 fb7a 	bl	8005cf8 <xTimerGenericCommand>
 8000604:	4603      	mov	r3, r0
 8000606:	4a09      	ldr	r2, [pc, #36]	; (800062c <main+0xa8>)
 8000608:	6013      	str	r3, [r2, #0]

  vTaskStartScheduler();
 800060a:	f004 fd95 	bl	8005138 <vTaskStartScheduler>

  while (1)
 800060e:	e7fe      	b.n	800060e <main+0x8a>
 8000610:	08000631 	.word	0x08000631
 8000614:	08007c08 	.word	0x08007c08
 8000618:	20000390 	.word	0x20000390
 800061c:	08000661 	.word	0x08000661
 8000620:	08007c10 	.word	0x08007c10
 8000624:	2000038c 	.word	0x2000038c
 8000628:	20000394 	.word	0x20000394
 800062c:	20000398 	.word	0x20000398

08000630 <prvOneShotTimerCallback>:
  }
  /* USER CODE END 3 */
}

void prvOneShotTimerCallback(TimerHandle_t xTimer)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
	static TickType_t xTimeNow;
//	Obtain the current tick count.
	xTimeNow = xTaskGetTickCount();
 8000638:	f004 fe9a 	bl	8005370 <xTaskGetTickCount>
 800063c:	4603      	mov	r3, r0
 800063e:	4a06      	ldr	r2, [pc, #24]	; (8000658 <prvOneShotTimerCallback+0x28>)
 8000640:	6013      	str	r3, [r2, #0]
	printf("One-shot timer callback executing : %ld", xTimeNow);
 8000642:	4b05      	ldr	r3, [pc, #20]	; (8000658 <prvOneShotTimerCallback+0x28>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	4619      	mov	r1, r3
 8000648:	4804      	ldr	r0, [pc, #16]	; (800065c <prvOneShotTimerCallback+0x2c>)
 800064a:	f006 fc65 	bl	8006f18 <iprintf>
}
 800064e:	bf00      	nop
 8000650:	3708      	adds	r7, #8
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	200003a0 	.word	0x200003a0
 800065c:	08007c1c 	.word	0x08007c1c

08000660 <prvAutoReloadTimerCallback>:

uint32_t timeoutCount = 0;
const uint8_t STOP_MARK = 10;

void prvAutoReloadTimerCallback(TimerHandle_t xTimer)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af02      	add	r7, sp, #8
 8000666:	6078      	str	r0, [r7, #4]
	static TickType_t xTimeNow;
//	Obtain the current tick count.
	xTimeNow = xTaskGetTickCount();
 8000668:	f004 fe82 	bl	8005370 <xTaskGetTickCount>
 800066c:	4603      	mov	r3, r0
 800066e:	4a13      	ldr	r2, [pc, #76]	; (80006bc <prvAutoReloadTimerCallback+0x5c>)
 8000670:	6013      	str	r3, [r2, #0]
	printf("Reload timer callback executing : %ld", (uint32_t)xTimeNow);
 8000672:	4b12      	ldr	r3, [pc, #72]	; (80006bc <prvAutoReloadTimerCallback+0x5c>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	4619      	mov	r1, r3
 8000678:	4811      	ldr	r0, [pc, #68]	; (80006c0 <prvAutoReloadTimerCallback+0x60>)
 800067a:	f006 fc4d 	bl	8006f18 <iprintf>
	timeoutCount++;
 800067e:	4b11      	ldr	r3, [pc, #68]	; (80006c4 <prvAutoReloadTimerCallback+0x64>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	3301      	adds	r3, #1
 8000684:	4a0f      	ldr	r2, [pc, #60]	; (80006c4 <prvAutoReloadTimerCallback+0x64>)
 8000686:	6013      	str	r3, [r2, #0]

	if(timeoutCount == STOP_MARK )
 8000688:	230a      	movs	r3, #10
 800068a:	461a      	mov	r2, r3
 800068c:	4b0d      	ldr	r3, [pc, #52]	; (80006c4 <prvAutoReloadTimerCallback+0x64>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	429a      	cmp	r2, r3
 8000692:	d10e      	bne.n	80006b2 <prvAutoReloadTimerCallback+0x52>
	{
		printf("Stop Mark Reached %ld \n\r", (uint32_t)xTimeNow);
 8000694:	4b09      	ldr	r3, [pc, #36]	; (80006bc <prvAutoReloadTimerCallback+0x5c>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4619      	mov	r1, r3
 800069a:	480b      	ldr	r0, [pc, #44]	; (80006c8 <prvAutoReloadTimerCallback+0x68>)
 800069c:	f006 fc3c 	bl	8006f18 <iprintf>
		xTimerStop(xAutoReloadTimer, 0);
 80006a0:	4b0a      	ldr	r3, [pc, #40]	; (80006cc <prvAutoReloadTimerCallback+0x6c>)
 80006a2:	6818      	ldr	r0, [r3, #0]
 80006a4:	2300      	movs	r3, #0
 80006a6:	9300      	str	r3, [sp, #0]
 80006a8:	2300      	movs	r3, #0
 80006aa:	2200      	movs	r2, #0
 80006ac:	2103      	movs	r1, #3
 80006ae:	f005 fb23 	bl	8005cf8 <xTimerGenericCommand>
	}
}
 80006b2:	bf00      	nop
 80006b4:	3708      	adds	r7, #8
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	200003a4 	.word	0x200003a4
 80006c0:	08007c44 	.word	0x08007c44
 80006c4:	2000039c 	.word	0x2000039c
 80006c8:	08007c6c 	.word	0x08007c6c
 80006cc:	2000038c 	.word	0x2000038c

080006d0 <SystemClock_Config>:


void SystemClock_Config(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b09a      	sub	sp, #104	; 0x68
 80006d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006d6:	f107 0320 	add.w	r3, r7, #32
 80006da:	2248      	movs	r2, #72	; 0x48
 80006dc:	2100      	movs	r1, #0
 80006de:	4618      	mov	r0, r3
 80006e0:	f006 fb7d 	bl	8006dde <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e4:	1d3b      	adds	r3, r7, #4
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
 80006ea:	605a      	str	r2, [r3, #4]
 80006ec:	609a      	str	r2, [r3, #8]
 80006ee:	60da      	str	r2, [r3, #12]
 80006f0:	611a      	str	r2, [r3, #16]
 80006f2:	615a      	str	r2, [r3, #20]
 80006f4:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 80006f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006fa:	68db      	ldr	r3, [r3, #12]
 80006fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000700:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000704:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 8000706:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800070a:	68db      	ldr	r3, [r3, #12]
 800070c:	f023 0303 	bic.w	r3, r3, #3
 8000710:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000714:	f043 0301 	orr.w	r3, r3, #1
 8000718:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800071a:	f001 f843 	bl	80017a4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800071e:	2000      	movs	r0, #0
 8000720:	f7ff ff00 	bl	8000524 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000724:	4b24      	ldr	r3, [pc, #144]	; (80007b8 <SystemClock_Config+0xe8>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800072c:	4a22      	ldr	r2, [pc, #136]	; (80007b8 <SystemClock_Config+0xe8>)
 800072e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000732:	6013      	str	r3, [r2, #0]
 8000734:	4b20      	ldr	r3, [pc, #128]	; (80007b8 <SystemClock_Config+0xe8>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800073c:	603b      	str	r3, [r7, #0]
 800073e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8000740:	2327      	movs	r3, #39	; 0x27
 8000742:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000744:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000748:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800074a:	2301      	movs	r3, #1
 800074c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800074e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000752:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000754:	2301      	movs	r3, #1
 8000756:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000758:	2340      	movs	r3, #64	; 0x40
 800075a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800075c:	2300      	movs	r3, #0
 800075e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000760:	2360      	movs	r3, #96	; 0x60
 8000762:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000764:	2300      	movs	r3, #0
 8000766:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000768:	f107 0320 	add.w	r3, r7, #32
 800076c:	4618      	mov	r0, r3
 800076e:	f001 fc0b 	bl	8001f88 <HAL_RCC_OscConfig>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000778:	f000 f8b2 	bl	80008e0 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800077c:	236f      	movs	r3, #111	; 0x6f
 800077e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000780:	2302      	movs	r3, #2
 8000782:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000784:	2300      	movs	r3, #0
 8000786:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000788:	2300      	movs	r3, #0
 800078a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800078c:	2300      	movs	r3, #0
 800078e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000790:	2300      	movs	r3, #0
 8000792:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000794:	2300      	movs	r3, #0
 8000796:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000798:	1d3b      	adds	r3, r7, #4
 800079a:	2101      	movs	r1, #1
 800079c:	4618      	mov	r0, r3
 800079e:	f001 ff67 	bl	8002670 <HAL_RCC_ClockConfig>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <SystemClock_Config+0xdc>
  {
    Error_Handler();
 80007a8:	f000 f89a 	bl	80008e0 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80007ac:	f002 fd54 	bl	8003258 <HAL_RCCEx_EnableMSIPLLMode>
}
 80007b0:	bf00      	nop
 80007b2:	3768      	adds	r7, #104	; 0x68
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	58000400 	.word	0x58000400

080007bc <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80007c0:	4b10      	ldr	r3, [pc, #64]	; (8000804 <MX_USB_PCD_Init+0x48>)
 80007c2:	4a11      	ldr	r2, [pc, #68]	; (8000808 <MX_USB_PCD_Init+0x4c>)
 80007c4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80007c6:	4b0f      	ldr	r3, [pc, #60]	; (8000804 <MX_USB_PCD_Init+0x48>)
 80007c8:	2208      	movs	r2, #8
 80007ca:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80007cc:	4b0d      	ldr	r3, [pc, #52]	; (8000804 <MX_USB_PCD_Init+0x48>)
 80007ce:	2202      	movs	r2, #2
 80007d0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80007d2:	4b0c      	ldr	r3, [pc, #48]	; (8000804 <MX_USB_PCD_Init+0x48>)
 80007d4:	2202      	movs	r2, #2
 80007d6:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80007d8:	4b0a      	ldr	r3, [pc, #40]	; (8000804 <MX_USB_PCD_Init+0x48>)
 80007da:	2200      	movs	r2, #0
 80007dc:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80007de:	4b09      	ldr	r3, [pc, #36]	; (8000804 <MX_USB_PCD_Init+0x48>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80007e4:	4b07      	ldr	r3, [pc, #28]	; (8000804 <MX_USB_PCD_Init+0x48>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80007ea:	4b06      	ldr	r3, [pc, #24]	; (8000804 <MX_USB_PCD_Init+0x48>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80007f0:	4804      	ldr	r0, [pc, #16]	; (8000804 <MX_USB_PCD_Init+0x48>)
 80007f2:	f000 fe35 	bl	8001460 <HAL_PCD_Init>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 80007fc:	f000 f870 	bl	80008e0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000800:	bf00      	nop
 8000802:	bd80      	pop	{r7, pc}
 8000804:	20000094 	.word	0x20000094
 8000808:	40006800 	.word	0x40006800

0800080c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b086      	sub	sp, #24
 8000810:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000812:	1d3b      	adds	r3, r7, #4
 8000814:	2200      	movs	r2, #0
 8000816:	601a      	str	r2, [r3, #0]
 8000818:	605a      	str	r2, [r3, #4]
 800081a:	609a      	str	r2, [r3, #8]
 800081c:	60da      	str	r2, [r3, #12]
 800081e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000820:	2004      	movs	r0, #4
 8000822:	f7ff fe95 	bl	8000550 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000826:	2001      	movs	r0, #1
 8000828:	f7ff fe92 	bl	8000550 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800082c:	2002      	movs	r0, #2
 800082e:	f7ff fe8f 	bl	8000550 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000832:	2008      	movs	r0, #8
 8000834:	f7ff fe8c 	bl	8000550 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8000838:	2200      	movs	r2, #0
 800083a:	2123      	movs	r1, #35	; 0x23
 800083c:	481c      	ldr	r0, [pc, #112]	; (80008b0 <MX_GPIO_Init+0xa4>)
 800083e:	f000 fdf7 	bl	8001430 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000842:	2310      	movs	r3, #16
 8000844:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000846:	2300      	movs	r3, #0
 8000848:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084a:	2300      	movs	r3, #0
 800084c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800084e:	1d3b      	adds	r3, r7, #4
 8000850:	4619      	mov	r1, r3
 8000852:	4818      	ldr	r0, [pc, #96]	; (80008b4 <MX_GPIO_Init+0xa8>)
 8000854:	f000 fc7c 	bl	8001150 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8000858:	2323      	movs	r3, #35	; 0x23
 800085a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085c:	2301      	movs	r3, #1
 800085e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000860:	2300      	movs	r3, #0
 8000862:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000864:	2300      	movs	r3, #0
 8000866:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000868:	1d3b      	adds	r3, r7, #4
 800086a:	4619      	mov	r1, r3
 800086c:	4810      	ldr	r0, [pc, #64]	; (80008b0 <MX_GPIO_Init+0xa4>)
 800086e:	f000 fc6f 	bl	8001150 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8000872:	2303      	movs	r3, #3
 8000874:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000876:	2300      	movs	r3, #0
 8000878:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	2300      	movs	r3, #0
 800087c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800087e:	1d3b      	adds	r3, r7, #4
 8000880:	4619      	mov	r1, r3
 8000882:	480d      	ldr	r0, [pc, #52]	; (80008b8 <MX_GPIO_Init+0xac>)
 8000884:	f000 fc64 	bl	8001150 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000888:	23c0      	movs	r3, #192	; 0xc0
 800088a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088c:	2302      	movs	r3, #2
 800088e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000890:	2301      	movs	r3, #1
 8000892:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000894:	2300      	movs	r3, #0
 8000896:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000898:	2307      	movs	r3, #7
 800089a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800089c:	1d3b      	adds	r3, r7, #4
 800089e:	4619      	mov	r1, r3
 80008a0:	4803      	ldr	r0, [pc, #12]	; (80008b0 <MX_GPIO_Init+0xa4>)
 80008a2:	f000 fc55 	bl	8001150 <HAL_GPIO_Init>

}
 80008a6:	bf00      	nop
 80008a8:	3718      	adds	r7, #24
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	48000400 	.word	0x48000400
 80008b4:	48000800 	.word	0x48000800
 80008b8:	48000c00 	.word	0x48000c00

080008bc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a04      	ldr	r2, [pc, #16]	; (80008dc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d101      	bne.n	80008d2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008ce:	f000 fb33 	bl	8000f38 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008d2:	bf00      	nop
 80008d4:	3708      	adds	r7, #8
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	40012c00 	.word	0x40012c00

080008e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008e4:	b672      	cpsid	i
}
 80008e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008e8:	e7fe      	b.n	80008e8 <Error_Handler+0x8>

080008ea <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80008ea:	b480      	push	{r7}
 80008ec:	b085      	sub	sp, #20
 80008ee:	af00      	add	r7, sp, #0
 80008f0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80008f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80008f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	4313      	orrs	r3, r2
 8000900:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000902:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000906:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	4013      	ands	r3, r2
 800090c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800090e:	68fb      	ldr	r3, [r7, #12]
}
 8000910:	bf00      	nop
 8000912:	3714      	adds	r7, #20
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr

0800091c <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800091c:	b480      	push	{r7}
 800091e:	b085      	sub	sp, #20
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000924:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000928:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800092a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	4313      	orrs	r3, r2
 8000932:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000934:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000938:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	4013      	ands	r3, r2
 800093e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000940:	68fb      	ldr	r3, [r7, #12]
}
 8000942:	bf00      	nop
 8000944:	3714      	adds	r7, #20
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr

0800094e <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM2
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 800094e:	b480      	push	{r7}
 8000950:	b085      	sub	sp, #20
 8000952:	af00      	add	r7, sp, #0
 8000954:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8000956:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800095a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800095c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	4313      	orrs	r3, r2
 8000964:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8000966:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800096a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	4013      	ands	r3, r2
 8000970:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000972:	68fb      	ldr	r3, [r7, #12]
}
 8000974:	bf00      	nop
 8000976:	3714      	adds	r7, #20
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr

08000980 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */
  PWR_PVDTypeDef sConfigPVD = {0};
 8000986:	463b      	mov	r3, r7
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	605a      	str	r2, [r3, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800098e:	2200      	movs	r2, #0
 8000990:	210f      	movs	r1, #15
 8000992:	f06f 0001 	mvn.w	r0, #1
 8000996:	f000 fbb3 	bl	8001100 <HAL_NVIC_SetPriority>

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_0;
 800099a:	2300      	movs	r3, #0
 800099c:	603b      	str	r3, [r7, #0]
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
 800099e:	2300      	movs	r3, #0
 80009a0:	607b      	str	r3, [r7, #4]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 80009a2:	463b      	mov	r3, r7
 80009a4:	4618      	mov	r0, r3
 80009a6:	f000 ff0d 	bl	80017c4 <HAL_PWR_ConfigPVD>

  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 80009aa:	f000 ff4d 	bl	8001848 <HAL_PWR_EnablePVD>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ae:	bf00      	nop
 80009b0:	3708      	adds	r7, #8
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
	...

080009b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b09c      	sub	sp, #112	; 0x70
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
 80009c8:	605a      	str	r2, [r3, #4]
 80009ca:	609a      	str	r2, [r3, #8]
 80009cc:	60da      	str	r2, [r3, #12]
 80009ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009d0:	f107 030c 	add.w	r3, r7, #12
 80009d4:	2250      	movs	r2, #80	; 0x50
 80009d6:	2100      	movs	r1, #0
 80009d8:	4618      	mov	r0, r3
 80009da:	f006 fa00 	bl	8006dde <memset>
  if(huart->Instance==LPUART1)
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	4a16      	ldr	r2, [pc, #88]	; (8000a3c <HAL_UART_MspInit+0x84>)
 80009e4:	4293      	cmp	r3, r2
 80009e6:	d124      	bne.n	8000a32 <HAL_UART_MspInit+0x7a>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80009e8:	2302      	movs	r3, #2
 80009ea:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80009ec:	2300      	movs	r3, #0
 80009ee:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009f0:	f107 030c 	add.w	r3, r7, #12
 80009f4:	4618      	mov	r0, r3
 80009f6:	f002 fab9 	bl	8002f6c <HAL_RCCEx_PeriphCLKConfig>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a00:	f7ff ff6e 	bl	80008e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000a04:	2001      	movs	r0, #1
 8000a06:	f7ff ffa2 	bl	800094e <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0a:	2001      	movs	r0, #1
 8000a0c:	f7ff ff6d 	bl	80008ea <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a10:	230c      	movs	r3, #12
 8000a12:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a14:	2302      	movs	r3, #2
 8000a16:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000a20:	2308      	movs	r3, #8
 8000a22:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a24:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000a28:	4619      	mov	r1, r3
 8000a2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a2e:	f000 fb8f 	bl	8001150 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000a32:	bf00      	nop
 8000a34:	3770      	adds	r7, #112	; 0x70
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40008000 	.word	0x40008000

08000a40 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b09c      	sub	sp, #112	; 0x70
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a48:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	605a      	str	r2, [r3, #4]
 8000a52:	609a      	str	r2, [r3, #8]
 8000a54:	60da      	str	r2, [r3, #12]
 8000a56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a58:	f107 030c 	add.w	r3, r7, #12
 8000a5c:	2250      	movs	r2, #80	; 0x50
 8000a5e:	2100      	movs	r1, #0
 8000a60:	4618      	mov	r0, r3
 8000a62:	f006 f9bc 	bl	8006dde <memset>
  if(hpcd->Instance==USB)
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	4a1f      	ldr	r2, [pc, #124]	; (8000ae8 <HAL_PCD_MspInit+0xa8>)
 8000a6c:	4293      	cmp	r3, r2
 8000a6e:	d136      	bne.n	8000ade <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000a70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a74:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8000a76:	2318      	movs	r3, #24
 8000a78:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8000a7a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a7e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8000a80:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000a84:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8000a86:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000a8a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8000a8c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000a90:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000a92:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000a96:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a98:	f107 030c 	add.w	r3, r7, #12
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f002 fa65 	bl	8002f6c <HAL_RCCEx_PeriphCLKConfig>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8000aa8:	f7ff ff1a 	bl	80008e0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aac:	2001      	movs	r0, #1
 8000aae:	f7ff ff1c 	bl	80008ea <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000ab2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000ab6:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab8:	2302      	movs	r3, #2
 8000aba:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abc:	2300      	movs	r3, #0
 8000abe:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000ac4:	230a      	movs	r3, #10
 8000ac6:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000acc:	4619      	mov	r1, r3
 8000ace:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ad2:	f000 fb3d 	bl	8001150 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000ad6:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000ada:	f7ff ff1f 	bl	800091c <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000ade:	bf00      	nop
 8000ae0:	3770      	adds	r7, #112	; 0x70
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	40006800 	.word	0x40006800

08000aec <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b085      	sub	sp, #20
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000af4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000af8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000afa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	4313      	orrs	r3, r2
 8000b02:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000b04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b08:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	4013      	ands	r3, r2
 8000b0e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b10:	68fb      	ldr	r3, [r7, #12]
}
 8000b12:	bf00      	nop
 8000b14:	3714      	adds	r7, #20
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
	...

08000b20 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b08c      	sub	sp, #48	; 0x30
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8000b30:	2200      	movs	r2, #0
 8000b32:	6879      	ldr	r1, [r7, #4]
 8000b34:	2019      	movs	r0, #25
 8000b36:	f000 fae3 	bl	8001100 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000b3a:	2019      	movs	r0, #25
 8000b3c:	f000 fafa 	bl	8001134 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000b40:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000b44:	f7ff ffd2 	bl	8000aec <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b48:	f107 0208 	add.w	r2, r7, #8
 8000b4c:	f107 030c 	add.w	r3, r7, #12
 8000b50:	4611      	mov	r1, r2
 8000b52:	4618      	mov	r0, r3
 8000b54:	f001 ff78 	bl	8002a48 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000b58:	f001 ff60 	bl	8002a1c <HAL_RCC_GetPCLK2Freq>
 8000b5c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b60:	4a12      	ldr	r2, [pc, #72]	; (8000bac <HAL_InitTick+0x8c>)
 8000b62:	fba2 2303 	umull	r2, r3, r2, r3
 8000b66:	0c9b      	lsrs	r3, r3, #18
 8000b68:	3b01      	subs	r3, #1
 8000b6a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000b6c:	4b10      	ldr	r3, [pc, #64]	; (8000bb0 <HAL_InitTick+0x90>)
 8000b6e:	4a11      	ldr	r2, [pc, #68]	; (8000bb4 <HAL_InitTick+0x94>)
 8000b70:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000b72:	4b0f      	ldr	r3, [pc, #60]	; (8000bb0 <HAL_InitTick+0x90>)
 8000b74:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b78:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000b7a:	4a0d      	ldr	r2, [pc, #52]	; (8000bb0 <HAL_InitTick+0x90>)
 8000b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b7e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000b80:	4b0b      	ldr	r3, [pc, #44]	; (8000bb0 <HAL_InitTick+0x90>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b86:	4b0a      	ldr	r3, [pc, #40]	; (8000bb0 <HAL_InitTick+0x90>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000b8c:	4808      	ldr	r0, [pc, #32]	; (8000bb0 <HAL_InitTick+0x90>)
 8000b8e:	f002 fc7a 	bl	8003486 <HAL_TIM_Base_Init>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d104      	bne.n	8000ba2 <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000b98:	4805      	ldr	r0, [pc, #20]	; (8000bb0 <HAL_InitTick+0x90>)
 8000b9a:	f002 fcd5 	bl	8003548 <HAL_TIM_Base_Start_IT>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	e000      	b.n	8000ba4 <HAL_InitTick+0x84>
  }

  /* Return function status */
  return HAL_ERROR;
 8000ba2:	2301      	movs	r3, #1
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	3730      	adds	r7, #48	; 0x30
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	431bde83 	.word	0x431bde83
 8000bb0:	200003a8 	.word	0x200003a8
 8000bb4:	40012c00 	.word	0x40012c00

08000bb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bbc:	e7fe      	b.n	8000bbc <NMI_Handler+0x4>

08000bbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bc2:	e7fe      	b.n	8000bc2 <HardFault_Handler+0x4>

08000bc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bc8:	e7fe      	b.n	8000bc8 <MemManage_Handler+0x4>

08000bca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bce:	e7fe      	b.n	8000bce <BusFault_Handler+0x4>

08000bd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bd4:	e7fe      	b.n	8000bd4 <UsageFault_Handler+0x4>

08000bd6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr

08000be4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000be8:	4802      	ldr	r0, [pc, #8]	; (8000bf4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000bea:	f002 fcfb 	bl	80035e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	200003a8 	.word	0x200003a8

08000bf8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b086      	sub	sp, #24
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	60f8      	str	r0, [r7, #12]
 8000c00:	60b9      	str	r1, [r7, #8]
 8000c02:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c04:	2300      	movs	r3, #0
 8000c06:	617b      	str	r3, [r7, #20]
 8000c08:	e00a      	b.n	8000c20 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c0a:	f3af 8000 	nop.w
 8000c0e:	4601      	mov	r1, r0
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	1c5a      	adds	r2, r3, #1
 8000c14:	60ba      	str	r2, [r7, #8]
 8000c16:	b2ca      	uxtb	r2, r1
 8000c18:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	617b      	str	r3, [r7, #20]
 8000c20:	697a      	ldr	r2, [r7, #20]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	429a      	cmp	r2, r3
 8000c26:	dbf0      	blt.n	8000c0a <_read+0x12>
	}

return len;
 8000c28:	687b      	ldr	r3, [r7, #4]
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3718      	adds	r7, #24
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}

08000c32 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c32:	b580      	push	{r7, lr}
 8000c34:	b086      	sub	sp, #24
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	60f8      	str	r0, [r7, #12]
 8000c3a:	60b9      	str	r1, [r7, #8]
 8000c3c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c3e:	2300      	movs	r3, #0
 8000c40:	617b      	str	r3, [r7, #20]
 8000c42:	e009      	b.n	8000c58 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000c44:	68bb      	ldr	r3, [r7, #8]
 8000c46:	1c5a      	adds	r2, r3, #1
 8000c48:	60ba      	str	r2, [r7, #8]
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f000 f90f 	bl	8000e70 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	3301      	adds	r3, #1
 8000c56:	617b      	str	r3, [r7, #20]
 8000c58:	697a      	ldr	r2, [r7, #20]
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	429a      	cmp	r2, r3
 8000c5e:	dbf1      	blt.n	8000c44 <_write+0x12>
	}
	return len;
 8000c60:	687b      	ldr	r3, [r7, #4]
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3718      	adds	r7, #24
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}

08000c6a <_close>:

int _close(int file)
{
 8000c6a:	b480      	push	{r7}
 8000c6c:	b083      	sub	sp, #12
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	6078      	str	r0, [r7, #4]
	return -1;
 8000c72:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	370c      	adds	r7, #12
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr

08000c82 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c82:	b480      	push	{r7}
 8000c84:	b083      	sub	sp, #12
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	6078      	str	r0, [r7, #4]
 8000c8a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c92:	605a      	str	r2, [r3, #4]
	return 0;
 8000c94:	2300      	movs	r3, #0
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	370c      	adds	r7, #12
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr

08000ca2 <_isatty>:

int _isatty(int file)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	b083      	sub	sp, #12
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	6078      	str	r0, [r7, #4]
	return 1;
 8000caa:	2301      	movs	r3, #1
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	370c      	adds	r7, #12
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr

08000cb8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b085      	sub	sp, #20
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	60f8      	str	r0, [r7, #12]
 8000cc0:	60b9      	str	r1, [r7, #8]
 8000cc2:	607a      	str	r2, [r7, #4]
	return 0;
 8000cc4:	2300      	movs	r3, #0
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3714      	adds	r7, #20
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
	...

08000cd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b086      	sub	sp, #24
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cdc:	4a14      	ldr	r2, [pc, #80]	; (8000d30 <_sbrk+0x5c>)
 8000cde:	4b15      	ldr	r3, [pc, #84]	; (8000d34 <_sbrk+0x60>)
 8000ce0:	1ad3      	subs	r3, r2, r3
 8000ce2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ce8:	4b13      	ldr	r3, [pc, #76]	; (8000d38 <_sbrk+0x64>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d102      	bne.n	8000cf6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cf0:	4b11      	ldr	r3, [pc, #68]	; (8000d38 <_sbrk+0x64>)
 8000cf2:	4a12      	ldr	r2, [pc, #72]	; (8000d3c <_sbrk+0x68>)
 8000cf4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cf6:	4b10      	ldr	r3, [pc, #64]	; (8000d38 <_sbrk+0x64>)
 8000cf8:	681a      	ldr	r2, [r3, #0]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	4413      	add	r3, r2
 8000cfe:	693a      	ldr	r2, [r7, #16]
 8000d00:	429a      	cmp	r2, r3
 8000d02:	d207      	bcs.n	8000d14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d04:	f005 ff3a 	bl	8006b7c <__errno>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	220c      	movs	r2, #12
 8000d0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d12:	e009      	b.n	8000d28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d14:	4b08      	ldr	r3, [pc, #32]	; (8000d38 <_sbrk+0x64>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d1a:	4b07      	ldr	r3, [pc, #28]	; (8000d38 <_sbrk+0x64>)
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	4413      	add	r3, r2
 8000d22:	4a05      	ldr	r2, [pc, #20]	; (8000d38 <_sbrk+0x64>)
 8000d24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d26:	68fb      	ldr	r3, [r7, #12]
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	3718      	adds	r7, #24
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	20030000 	.word	0x20030000
 8000d34:	00000400 	.word	0x00000400
 8000d38:	200003f4 	.word	0x200003f4
 8000d3c:	20001ea8 	.word	0x20001ea8

08000d40 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8000d44:	4b24      	ldr	r3, [pc, #144]	; (8000dd8 <SystemInit+0x98>)
 8000d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d4a:	4a23      	ldr	r2, [pc, #140]	; (8000dd8 <SystemInit+0x98>)
 8000d4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000d54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d5e:	f043 0301 	orr.w	r3, r3, #1
 8000d62:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000d64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d68:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000d6c:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000d6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d72:	681a      	ldr	r2, [r3, #0]
 8000d74:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000d78:	4b18      	ldr	r3, [pc, #96]	; (8000ddc <SystemInit+0x9c>)
 8000d7a:	4013      	ands	r3, r2
 8000d7c:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000d7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000d86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d8a:	f023 0305 	bic.w	r3, r3, #5
 8000d8e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000d92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d96:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000d9a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d9e:	f023 0301 	bic.w	r3, r3, #1
 8000da2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000da6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000daa:	4a0d      	ldr	r2, [pc, #52]	; (8000de0 <SystemInit+0xa0>)
 8000dac:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000dae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000db2:	4a0b      	ldr	r2, [pc, #44]	; (8000de0 <SystemInit+0xa0>)
 8000db4:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000db6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000dc0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dc4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000dc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dca:	2200      	movs	r2, #0
 8000dcc:	619a      	str	r2, [r3, #24]
}
 8000dce:	bf00      	nop
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr
 8000dd8:	e000ed00 	.word	0xe000ed00
 8000ddc:	faf6fefb 	.word	0xfaf6fefb
 8000de0:	22041000 	.word	0x22041000

08000de4 <LPUART1_UART_TX_Init>:
#include "stm32wbxx_hal.h"

UART_HandleTypeDef hlpuart1;

void LPUART1_UART_TX_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000de8:	4b13      	ldr	r3, [pc, #76]	; (8000e38 <LPUART1_UART_TX_Init+0x54>)
 8000dea:	4a14      	ldr	r2, [pc, #80]	; (8000e3c <LPUART1_UART_TX_Init+0x58>)
 8000dec:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000dee:	4b12      	ldr	r3, [pc, #72]	; (8000e38 <LPUART1_UART_TX_Init+0x54>)
 8000df0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000df4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000df6:	4b10      	ldr	r3, [pc, #64]	; (8000e38 <LPUART1_UART_TX_Init+0x54>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000dfc:	4b0e      	ldr	r3, [pc, #56]	; (8000e38 <LPUART1_UART_TX_Init+0x54>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000e02:	4b0d      	ldr	r3, [pc, #52]	; (8000e38 <LPUART1_UART_TX_Init+0x54>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX;
 8000e08:	4b0b      	ldr	r3, [pc, #44]	; (8000e38 <LPUART1_UART_TX_Init+0x54>)
 8000e0a:	2208      	movs	r2, #8
 8000e0c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e0e:	4b0a      	ldr	r3, [pc, #40]	; (8000e38 <LPUART1_UART_TX_Init+0x54>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e14:	4b08      	ldr	r3, [pc, #32]	; (8000e38 <LPUART1_UART_TX_Init+0x54>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e1a:	4b07      	ldr	r3, [pc, #28]	; (8000e38 <LPUART1_UART_TX_Init+0x54>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e20:	4b05      	ldr	r3, [pc, #20]	; (8000e38 <LPUART1_UART_TX_Init+0x54>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000e26:	4b04      	ldr	r3, [pc, #16]	; (8000e38 <LPUART1_UART_TX_Init+0x54>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000e2c:	4802      	ldr	r0, [pc, #8]	; (8000e38 <LPUART1_UART_TX_Init+0x54>)
 8000e2e:	f002 fdc3 	bl	80039b8 <HAL_UART_Init>
  {
  }
}
 8000e32:	bf00      	nop
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	200003f8 	.word	0x200003f8
 8000e3c:	40008000 	.word	0x40008000

08000e40 <LPUART1_write>:
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
  {
  }
}

int LPUART1_write(int ch) {
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
	while(!(LPUART1->ISR & 0x0080)){}
 8000e48:	bf00      	nop
 8000e4a:	4b08      	ldr	r3, [pc, #32]	; (8000e6c <LPUART1_write+0x2c>)
 8000e4c:	69db      	ldr	r3, [r3, #28]
 8000e4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d0f9      	beq.n	8000e4a <LPUART1_write+0xa>
	LPUART1->RDR = (ch & 0xFF);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4a04      	ldr	r2, [pc, #16]	; (8000e6c <LPUART1_write+0x2c>)
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	6253      	str	r3, [r2, #36]	; 0x24
	return ch;
 8000e5e:	687b      	ldr	r3, [r7, #4]
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	370c      	adds	r7, #12
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr
 8000e6c:	40008000 	.word	0x40008000

08000e70 <__io_putchar>:

int __io_putchar(int ch) {
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
	LPUART1_write(ch);
 8000e78:	6878      	ldr	r0, [r7, #4]
 8000e7a:	f7ff ffe1 	bl	8000e40 <LPUART1_write>
	return ch;
 8000e7e:	687b      	ldr	r3, [r7, #4]
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	3708      	adds	r7, #8
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}

08000e88 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000e88:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e8a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e8c:	3304      	adds	r3, #4

08000e8e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e8e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e90:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000e92:	d3f9      	bcc.n	8000e88 <CopyDataInit>
  bx lr
 8000e94:	4770      	bx	lr

08000e96 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000e96:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000e98:	3004      	adds	r0, #4

08000e9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000e9a:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000e9c:	d3fb      	bcc.n	8000e96 <FillZerobss>
  bx lr
 8000e9e:	4770      	bx	lr

08000ea0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ea0:	480c      	ldr	r0, [pc, #48]	; (8000ed4 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8000ea2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ea4:	f7ff ff4c 	bl	8000d40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000ea8:	480b      	ldr	r0, [pc, #44]	; (8000ed8 <LoopForever+0x8>)
 8000eaa:	490c      	ldr	r1, [pc, #48]	; (8000edc <LoopForever+0xc>)
 8000eac:	4a0c      	ldr	r2, [pc, #48]	; (8000ee0 <LoopForever+0x10>)
 8000eae:	2300      	movs	r3, #0
 8000eb0:	f7ff ffed 	bl	8000e8e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000eb4:	480b      	ldr	r0, [pc, #44]	; (8000ee4 <LoopForever+0x14>)
 8000eb6:	490c      	ldr	r1, [pc, #48]	; (8000ee8 <LoopForever+0x18>)
 8000eb8:	2300      	movs	r3, #0
 8000eba:	f7ff ffee 	bl	8000e9a <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000ebe:	480b      	ldr	r0, [pc, #44]	; (8000eec <LoopForever+0x1c>)
 8000ec0:	490b      	ldr	r1, [pc, #44]	; (8000ef0 <LoopForever+0x20>)
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	f7ff ffe9 	bl	8000e9a <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000ec8:	f005 ff54 	bl	8006d74 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8000ecc:	f7ff fb5a 	bl	8000584 <main>

08000ed0 <LoopForever>:

LoopForever:
  b LoopForever
 8000ed0:	e7fe      	b.n	8000ed0 <LoopForever>
 8000ed2:	0000      	.short	0x0000
  ldr   r0, =_estack
 8000ed4:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000ed8:	20000004 	.word	0x20000004
 8000edc:	20000078 	.word	0x20000078
 8000ee0:	08007e2c 	.word	0x08007e2c
  INIT_BSS _sbss, _ebss
 8000ee4:	20000078 	.word	0x20000078
 8000ee8:	20001ea8 	.word	0x20001ea8
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000eec:	20030000 	.word	0x20030000
 8000ef0:	20030000 	.word	0x20030000

08000ef4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ef4:	e7fe      	b.n	8000ef4 <ADC1_IRQHandler>
	...

08000ef8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000efe:	2300      	movs	r3, #0
 8000f00:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f02:	4b0c      	ldr	r3, [pc, #48]	; (8000f34 <HAL_Init+0x3c>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4a0b      	ldr	r2, [pc, #44]	; (8000f34 <HAL_Init+0x3c>)
 8000f08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f0c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f0e:	2003      	movs	r0, #3
 8000f10:	f000 f8eb 	bl	80010ea <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f14:	200f      	movs	r0, #15
 8000f16:	f7ff fe03 	bl	8000b20 <HAL_InitTick>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d002      	beq.n	8000f26 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000f20:	2301      	movs	r3, #1
 8000f22:	71fb      	strb	r3, [r7, #7]
 8000f24:	e001      	b.n	8000f2a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f26:	f7ff fd2b 	bl	8000980 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f2a:	79fb      	ldrb	r3, [r7, #7]
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3708      	adds	r7, #8
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	58004000 	.word	0x58004000

08000f38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f3c:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <HAL_IncTick+0x20>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	461a      	mov	r2, r3
 8000f42:	4b06      	ldr	r3, [pc, #24]	; (8000f5c <HAL_IncTick+0x24>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4413      	add	r3, r2
 8000f48:	4a04      	ldr	r2, [pc, #16]	; (8000f5c <HAL_IncTick+0x24>)
 8000f4a:	6013      	str	r3, [r2, #0]
}
 8000f4c:	bf00      	nop
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	2000000c 	.word	0x2000000c
 8000f5c:	20000488 	.word	0x20000488

08000f60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  return uwTick;
 8000f64:	4b03      	ldr	r3, [pc, #12]	; (8000f74 <HAL_GetTick+0x14>)
 8000f66:	681b      	ldr	r3, [r3, #0]
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	20000488 	.word	0x20000488

08000f78 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8000f7c:	4b03      	ldr	r3, [pc, #12]	; (8000f8c <HAL_GetTickPrio+0x14>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	20000008 	.word	0x20000008

08000f90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b085      	sub	sp, #20
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	f003 0307 	and.w	r3, r3, #7
 8000f9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fa0:	4b0c      	ldr	r3, [pc, #48]	; (8000fd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fa2:	68db      	ldr	r3, [r3, #12]
 8000fa4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fa6:	68ba      	ldr	r2, [r7, #8]
 8000fa8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fac:	4013      	ands	r3, r2
 8000fae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fc2:	4a04      	ldr	r2, [pc, #16]	; (8000fd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	60d3      	str	r3, [r2, #12]
}
 8000fc8:	bf00      	nop
 8000fca:	3714      	adds	r7, #20
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr
 8000fd4:	e000ed00 	.word	0xe000ed00

08000fd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fdc:	4b04      	ldr	r3, [pc, #16]	; (8000ff0 <__NVIC_GetPriorityGrouping+0x18>)
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	0a1b      	lsrs	r3, r3, #8
 8000fe2:	f003 0307 	and.w	r3, r3, #7
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	e000ed00 	.word	0xe000ed00

08000ff4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001002:	2b00      	cmp	r3, #0
 8001004:	db0b      	blt.n	800101e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001006:	79fb      	ldrb	r3, [r7, #7]
 8001008:	f003 021f 	and.w	r2, r3, #31
 800100c:	4907      	ldr	r1, [pc, #28]	; (800102c <__NVIC_EnableIRQ+0x38>)
 800100e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001012:	095b      	lsrs	r3, r3, #5
 8001014:	2001      	movs	r0, #1
 8001016:	fa00 f202 	lsl.w	r2, r0, r2
 800101a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800101e:	bf00      	nop
 8001020:	370c      	adds	r7, #12
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	e000e100 	.word	0xe000e100

08001030 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	6039      	str	r1, [r7, #0]
 800103a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800103c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001040:	2b00      	cmp	r3, #0
 8001042:	db0a      	blt.n	800105a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	b2da      	uxtb	r2, r3
 8001048:	490c      	ldr	r1, [pc, #48]	; (800107c <__NVIC_SetPriority+0x4c>)
 800104a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104e:	0112      	lsls	r2, r2, #4
 8001050:	b2d2      	uxtb	r2, r2
 8001052:	440b      	add	r3, r1
 8001054:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001058:	e00a      	b.n	8001070 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	b2da      	uxtb	r2, r3
 800105e:	4908      	ldr	r1, [pc, #32]	; (8001080 <__NVIC_SetPriority+0x50>)
 8001060:	79fb      	ldrb	r3, [r7, #7]
 8001062:	f003 030f 	and.w	r3, r3, #15
 8001066:	3b04      	subs	r3, #4
 8001068:	0112      	lsls	r2, r2, #4
 800106a:	b2d2      	uxtb	r2, r2
 800106c:	440b      	add	r3, r1
 800106e:	761a      	strb	r2, [r3, #24]
}
 8001070:	bf00      	nop
 8001072:	370c      	adds	r7, #12
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	e000e100 	.word	0xe000e100
 8001080:	e000ed00 	.word	0xe000ed00

08001084 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001084:	b480      	push	{r7}
 8001086:	b089      	sub	sp, #36	; 0x24
 8001088:	af00      	add	r7, sp, #0
 800108a:	60f8      	str	r0, [r7, #12]
 800108c:	60b9      	str	r1, [r7, #8]
 800108e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	f003 0307 	and.w	r3, r3, #7
 8001096:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	f1c3 0307 	rsb	r3, r3, #7
 800109e:	2b04      	cmp	r3, #4
 80010a0:	bf28      	it	cs
 80010a2:	2304      	movcs	r3, #4
 80010a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	3304      	adds	r3, #4
 80010aa:	2b06      	cmp	r3, #6
 80010ac:	d902      	bls.n	80010b4 <NVIC_EncodePriority+0x30>
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	3b03      	subs	r3, #3
 80010b2:	e000      	b.n	80010b6 <NVIC_EncodePriority+0x32>
 80010b4:	2300      	movs	r3, #0
 80010b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b8:	f04f 32ff 	mov.w	r2, #4294967295
 80010bc:	69bb      	ldr	r3, [r7, #24]
 80010be:	fa02 f303 	lsl.w	r3, r2, r3
 80010c2:	43da      	mvns	r2, r3
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	401a      	ands	r2, r3
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010cc:	f04f 31ff 	mov.w	r1, #4294967295
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	fa01 f303 	lsl.w	r3, r1, r3
 80010d6:	43d9      	mvns	r1, r3
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010dc:	4313      	orrs	r3, r2
         );
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3724      	adds	r7, #36	; 0x24
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr

080010ea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	f7ff ff4c 	bl	8000f90 <__NVIC_SetPriorityGrouping>
}
 80010f8:	bf00      	nop
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}

08001100 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b086      	sub	sp, #24
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	60b9      	str	r1, [r7, #8]
 800110a:	607a      	str	r2, [r7, #4]
 800110c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800110e:	f7ff ff63 	bl	8000fd8 <__NVIC_GetPriorityGrouping>
 8001112:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001114:	687a      	ldr	r2, [r7, #4]
 8001116:	68b9      	ldr	r1, [r7, #8]
 8001118:	6978      	ldr	r0, [r7, #20]
 800111a:	f7ff ffb3 	bl	8001084 <NVIC_EncodePriority>
 800111e:	4602      	mov	r2, r0
 8001120:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001124:	4611      	mov	r1, r2
 8001126:	4618      	mov	r0, r3
 8001128:	f7ff ff82 	bl	8001030 <__NVIC_SetPriority>
}
 800112c:	bf00      	nop
 800112e:	3718      	adds	r7, #24
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}

08001134 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800113e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001142:	4618      	mov	r0, r3
 8001144:	f7ff ff56 	bl	8000ff4 <__NVIC_EnableIRQ>
}
 8001148:	bf00      	nop
 800114a:	3708      	adds	r7, #8
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}

08001150 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001150:	b480      	push	{r7}
 8001152:	b087      	sub	sp, #28
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800115a:	2300      	movs	r3, #0
 800115c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800115e:	e14c      	b.n	80013fa <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	2101      	movs	r1, #1
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	fa01 f303 	lsl.w	r3, r1, r3
 800116c:	4013      	ands	r3, r2
 800116e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	2b00      	cmp	r3, #0
 8001174:	f000 813e 	beq.w	80013f4 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f003 0303 	and.w	r3, r3, #3
 8001180:	2b01      	cmp	r3, #1
 8001182:	d005      	beq.n	8001190 <HAL_GPIO_Init+0x40>
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f003 0303 	and.w	r3, r3, #3
 800118c:	2b02      	cmp	r3, #2
 800118e:	d130      	bne.n	80011f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	689b      	ldr	r3, [r3, #8]
 8001194:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	005b      	lsls	r3, r3, #1
 800119a:	2203      	movs	r2, #3
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	43db      	mvns	r3, r3
 80011a2:	693a      	ldr	r2, [r7, #16]
 80011a4:	4013      	ands	r3, r2
 80011a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	68da      	ldr	r2, [r3, #12]
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	693a      	ldr	r2, [r7, #16]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	693a      	ldr	r2, [r7, #16]
 80011be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011c6:	2201      	movs	r2, #1
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	fa02 f303 	lsl.w	r3, r2, r3
 80011ce:	43db      	mvns	r3, r3
 80011d0:	693a      	ldr	r2, [r7, #16]
 80011d2:	4013      	ands	r3, r2
 80011d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	091b      	lsrs	r3, r3, #4
 80011dc:	f003 0201 	and.w	r2, r3, #1
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	fa02 f303 	lsl.w	r3, r2, r3
 80011e6:	693a      	ldr	r2, [r7, #16]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	693a      	ldr	r2, [r7, #16]
 80011f0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	f003 0303 	and.w	r3, r3, #3
 80011fa:	2b03      	cmp	r3, #3
 80011fc:	d017      	beq.n	800122e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	68db      	ldr	r3, [r3, #12]
 8001202:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	005b      	lsls	r3, r3, #1
 8001208:	2203      	movs	r2, #3
 800120a:	fa02 f303 	lsl.w	r3, r2, r3
 800120e:	43db      	mvns	r3, r3
 8001210:	693a      	ldr	r2, [r7, #16]
 8001212:	4013      	ands	r3, r2
 8001214:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	689a      	ldr	r2, [r3, #8]
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	fa02 f303 	lsl.w	r3, r2, r3
 8001222:	693a      	ldr	r2, [r7, #16]
 8001224:	4313      	orrs	r3, r2
 8001226:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	693a      	ldr	r2, [r7, #16]
 800122c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	f003 0303 	and.w	r3, r3, #3
 8001236:	2b02      	cmp	r3, #2
 8001238:	d123      	bne.n	8001282 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	08da      	lsrs	r2, r3, #3
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	3208      	adds	r2, #8
 8001242:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001246:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	f003 0307 	and.w	r3, r3, #7
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	220f      	movs	r2, #15
 8001252:	fa02 f303 	lsl.w	r3, r2, r3
 8001256:	43db      	mvns	r3, r3
 8001258:	693a      	ldr	r2, [r7, #16]
 800125a:	4013      	ands	r3, r2
 800125c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	691a      	ldr	r2, [r3, #16]
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	f003 0307 	and.w	r3, r3, #7
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	fa02 f303 	lsl.w	r3, r2, r3
 800126e:	693a      	ldr	r2, [r7, #16]
 8001270:	4313      	orrs	r3, r2
 8001272:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	08da      	lsrs	r2, r3, #3
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	3208      	adds	r2, #8
 800127c:	6939      	ldr	r1, [r7, #16]
 800127e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	005b      	lsls	r3, r3, #1
 800128c:	2203      	movs	r2, #3
 800128e:	fa02 f303 	lsl.w	r3, r2, r3
 8001292:	43db      	mvns	r3, r3
 8001294:	693a      	ldr	r2, [r7, #16]
 8001296:	4013      	ands	r3, r2
 8001298:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	f003 0203 	and.w	r2, r3, #3
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	005b      	lsls	r3, r3, #1
 80012a6:	fa02 f303 	lsl.w	r3, r2, r3
 80012aa:	693a      	ldr	r2, [r7, #16]
 80012ac:	4313      	orrs	r3, r2
 80012ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	693a      	ldr	r2, [r7, #16]
 80012b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012be:	2b00      	cmp	r3, #0
 80012c0:	f000 8098 	beq.w	80013f4 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80012c4:	4a54      	ldr	r2, [pc, #336]	; (8001418 <HAL_GPIO_Init+0x2c8>)
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	089b      	lsrs	r3, r3, #2
 80012ca:	3302      	adds	r3, #2
 80012cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	f003 0303 	and.w	r3, r3, #3
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	220f      	movs	r2, #15
 80012dc:	fa02 f303 	lsl.w	r3, r2, r3
 80012e0:	43db      	mvns	r3, r3
 80012e2:	693a      	ldr	r2, [r7, #16]
 80012e4:	4013      	ands	r3, r2
 80012e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80012ee:	d019      	beq.n	8001324 <HAL_GPIO_Init+0x1d4>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	4a4a      	ldr	r2, [pc, #296]	; (800141c <HAL_GPIO_Init+0x2cc>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d013      	beq.n	8001320 <HAL_GPIO_Init+0x1d0>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	4a49      	ldr	r2, [pc, #292]	; (8001420 <HAL_GPIO_Init+0x2d0>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d00d      	beq.n	800131c <HAL_GPIO_Init+0x1cc>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	4a48      	ldr	r2, [pc, #288]	; (8001424 <HAL_GPIO_Init+0x2d4>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d007      	beq.n	8001318 <HAL_GPIO_Init+0x1c8>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	4a47      	ldr	r2, [pc, #284]	; (8001428 <HAL_GPIO_Init+0x2d8>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d101      	bne.n	8001314 <HAL_GPIO_Init+0x1c4>
 8001310:	2304      	movs	r3, #4
 8001312:	e008      	b.n	8001326 <HAL_GPIO_Init+0x1d6>
 8001314:	2307      	movs	r3, #7
 8001316:	e006      	b.n	8001326 <HAL_GPIO_Init+0x1d6>
 8001318:	2303      	movs	r3, #3
 800131a:	e004      	b.n	8001326 <HAL_GPIO_Init+0x1d6>
 800131c:	2302      	movs	r3, #2
 800131e:	e002      	b.n	8001326 <HAL_GPIO_Init+0x1d6>
 8001320:	2301      	movs	r3, #1
 8001322:	e000      	b.n	8001326 <HAL_GPIO_Init+0x1d6>
 8001324:	2300      	movs	r3, #0
 8001326:	697a      	ldr	r2, [r7, #20]
 8001328:	f002 0203 	and.w	r2, r2, #3
 800132c:	0092      	lsls	r2, r2, #2
 800132e:	4093      	lsls	r3, r2
 8001330:	693a      	ldr	r2, [r7, #16]
 8001332:	4313      	orrs	r3, r2
 8001334:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001336:	4938      	ldr	r1, [pc, #224]	; (8001418 <HAL_GPIO_Init+0x2c8>)
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	089b      	lsrs	r3, r3, #2
 800133c:	3302      	adds	r3, #2
 800133e:	693a      	ldr	r2, [r7, #16]
 8001340:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001344:	4b39      	ldr	r3, [pc, #228]	; (800142c <HAL_GPIO_Init+0x2dc>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	43db      	mvns	r3, r3
 800134e:	693a      	ldr	r2, [r7, #16]
 8001350:	4013      	ands	r3, r2
 8001352:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800135c:	2b00      	cmp	r3, #0
 800135e:	d003      	beq.n	8001368 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001360:	693a      	ldr	r2, [r7, #16]
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	4313      	orrs	r3, r2
 8001366:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001368:	4a30      	ldr	r2, [pc, #192]	; (800142c <HAL_GPIO_Init+0x2dc>)
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800136e:	4b2f      	ldr	r3, [pc, #188]	; (800142c <HAL_GPIO_Init+0x2dc>)
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	43db      	mvns	r3, r3
 8001378:	693a      	ldr	r2, [r7, #16]
 800137a:	4013      	ands	r3, r2
 800137c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d003      	beq.n	8001392 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800138a:	693a      	ldr	r2, [r7, #16]
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	4313      	orrs	r3, r2
 8001390:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001392:	4a26      	ldr	r2, [pc, #152]	; (800142c <HAL_GPIO_Init+0x2dc>)
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001398:	4b24      	ldr	r3, [pc, #144]	; (800142c <HAL_GPIO_Init+0x2dc>)
 800139a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800139e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	43db      	mvns	r3, r3
 80013a4:	693a      	ldr	r2, [r7, #16]
 80013a6:	4013      	ands	r3, r2
 80013a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d003      	beq.n	80013be <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80013b6:	693a      	ldr	r2, [r7, #16]
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	4313      	orrs	r3, r2
 80013bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80013be:	4a1b      	ldr	r2, [pc, #108]	; (800142c <HAL_GPIO_Init+0x2dc>)
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80013c6:	4b19      	ldr	r3, [pc, #100]	; (800142c <HAL_GPIO_Init+0x2dc>)
 80013c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80013cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	43db      	mvns	r3, r3
 80013d2:	693a      	ldr	r2, [r7, #16]
 80013d4:	4013      	ands	r3, r2
 80013d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d003      	beq.n	80013ec <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80013e4:	693a      	ldr	r2, [r7, #16]
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	4313      	orrs	r3, r2
 80013ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80013ec:	4a0f      	ldr	r2, [pc, #60]	; (800142c <HAL_GPIO_Init+0x2dc>)
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	3301      	adds	r3, #1
 80013f8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	fa22 f303 	lsr.w	r3, r2, r3
 8001404:	2b00      	cmp	r3, #0
 8001406:	f47f aeab 	bne.w	8001160 <HAL_GPIO_Init+0x10>
  }
}
 800140a:	bf00      	nop
 800140c:	bf00      	nop
 800140e:	371c      	adds	r7, #28
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr
 8001418:	40010000 	.word	0x40010000
 800141c:	48000400 	.word	0x48000400
 8001420:	48000800 	.word	0x48000800
 8001424:	48000c00 	.word	0x48000c00
 8001428:	48001000 	.word	0x48001000
 800142c:	58000800 	.word	0x58000800

08001430 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	460b      	mov	r3, r1
 800143a:	807b      	strh	r3, [r7, #2]
 800143c:	4613      	mov	r3, r2
 800143e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001440:	787b      	ldrb	r3, [r7, #1]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d003      	beq.n	800144e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001446:	887a      	ldrh	r2, [r7, #2]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800144c:	e002      	b.n	8001454 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800144e:	887a      	ldrh	r2, [r7, #2]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001454:	bf00      	nop
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr

08001460 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001460:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001462:	b08b      	sub	sp, #44	; 0x2c
 8001464:	af06      	add	r7, sp, #24
 8001466:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d101      	bne.n	8001472 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	e0dd      	b.n	800162e <HAL_PCD_Init+0x1ce>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	f893 32ad 	ldrb.w	r3, [r3, #685]	; 0x2ad
 8001478:	b2db      	uxtb	r3, r3
 800147a:	2b00      	cmp	r3, #0
 800147c:	d106      	bne.n	800148c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2200      	movs	r2, #0
 8001482:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	f7ff fada 	bl	8000a40 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2203      	movs	r2, #3
 8001490:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad

  /* DMA Not supported for FS instance, Force to Zero */
  hpcd->Init.dma_enable = 0U;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2200      	movs	r2, #0
 8001498:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4618      	mov	r0, r3
 80014a0:	f002 feb5 	bl	800420e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014a4:	2300      	movs	r3, #0
 80014a6:	73fb      	strb	r3, [r7, #15]
 80014a8:	e04d      	b.n	8001546 <HAL_PCD_Init+0xe6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80014aa:	7bfb      	ldrb	r3, [r7, #15]
 80014ac:	6879      	ldr	r1, [r7, #4]
 80014ae:	1c5a      	adds	r2, r3, #1
 80014b0:	4613      	mov	r3, r2
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	4413      	add	r3, r2
 80014b6:	00db      	lsls	r3, r3, #3
 80014b8:	440b      	add	r3, r1
 80014ba:	3305      	adds	r3, #5
 80014bc:	2201      	movs	r2, #1
 80014be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80014c0:	7bfb      	ldrb	r3, [r7, #15]
 80014c2:	6879      	ldr	r1, [r7, #4]
 80014c4:	1c5a      	adds	r2, r3, #1
 80014c6:	4613      	mov	r3, r2
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	4413      	add	r3, r2
 80014cc:	00db      	lsls	r3, r3, #3
 80014ce:	440b      	add	r3, r1
 80014d0:	3304      	adds	r3, #4
 80014d2:	7bfa      	ldrb	r2, [r7, #15]
 80014d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80014d6:	7bfa      	ldrb	r2, [r7, #15]
 80014d8:	7bfb      	ldrb	r3, [r7, #15]
 80014da:	b298      	uxth	r0, r3
 80014dc:	6879      	ldr	r1, [r7, #4]
 80014de:	4613      	mov	r3, r2
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	4413      	add	r3, r2
 80014e4:	00db      	lsls	r3, r3, #3
 80014e6:	440b      	add	r3, r1
 80014e8:	333a      	adds	r3, #58	; 0x3a
 80014ea:	4602      	mov	r2, r0
 80014ec:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80014ee:	7bfb      	ldrb	r3, [r7, #15]
 80014f0:	6879      	ldr	r1, [r7, #4]
 80014f2:	1c5a      	adds	r2, r3, #1
 80014f4:	4613      	mov	r3, r2
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	4413      	add	r3, r2
 80014fa:	00db      	lsls	r3, r3, #3
 80014fc:	440b      	add	r3, r1
 80014fe:	3307      	adds	r3, #7
 8001500:	2200      	movs	r2, #0
 8001502:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001504:	7bfa      	ldrb	r2, [r7, #15]
 8001506:	6879      	ldr	r1, [r7, #4]
 8001508:	4613      	mov	r3, r2
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	4413      	add	r3, r2
 800150e:	00db      	lsls	r3, r3, #3
 8001510:	440b      	add	r3, r1
 8001512:	333c      	adds	r3, #60	; 0x3c
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001518:	7bfa      	ldrb	r2, [r7, #15]
 800151a:	6879      	ldr	r1, [r7, #4]
 800151c:	4613      	mov	r3, r2
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	4413      	add	r3, r2
 8001522:	00db      	lsls	r3, r3, #3
 8001524:	440b      	add	r3, r1
 8001526:	3340      	adds	r3, #64	; 0x40
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800152c:	7bfa      	ldrb	r2, [r7, #15]
 800152e:	6879      	ldr	r1, [r7, #4]
 8001530:	4613      	mov	r3, r2
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	4413      	add	r3, r2
 8001536:	00db      	lsls	r3, r3, #3
 8001538:	440b      	add	r3, r1
 800153a:	3344      	adds	r3, #68	; 0x44
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001540:	7bfb      	ldrb	r3, [r7, #15]
 8001542:	3301      	adds	r3, #1
 8001544:	73fb      	strb	r3, [r7, #15]
 8001546:	7bfa      	ldrb	r2, [r7, #15]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	429a      	cmp	r2, r3
 800154e:	d3ac      	bcc.n	80014aa <HAL_PCD_Init+0x4a>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001550:	2300      	movs	r3, #0
 8001552:	73fb      	strb	r3, [r7, #15]
 8001554:	e044      	b.n	80015e0 <HAL_PCD_Init+0x180>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001556:	7bfa      	ldrb	r2, [r7, #15]
 8001558:	6879      	ldr	r1, [r7, #4]
 800155a:	4613      	mov	r3, r2
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	4413      	add	r3, r2
 8001560:	00db      	lsls	r3, r3, #3
 8001562:	440b      	add	r3, r1
 8001564:	f203 136d 	addw	r3, r3, #365	; 0x16d
 8001568:	2200      	movs	r2, #0
 800156a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800156c:	7bfa      	ldrb	r2, [r7, #15]
 800156e:	6879      	ldr	r1, [r7, #4]
 8001570:	4613      	mov	r3, r2
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	4413      	add	r3, r2
 8001576:	00db      	lsls	r3, r3, #3
 8001578:	440b      	add	r3, r1
 800157a:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 800157e:	7bfa      	ldrb	r2, [r7, #15]
 8001580:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001582:	7bfa      	ldrb	r2, [r7, #15]
 8001584:	6879      	ldr	r1, [r7, #4]
 8001586:	4613      	mov	r3, r2
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	4413      	add	r3, r2
 800158c:	00db      	lsls	r3, r3, #3
 800158e:	440b      	add	r3, r1
 8001590:	f203 136f 	addw	r3, r3, #367	; 0x16f
 8001594:	2200      	movs	r2, #0
 8001596:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001598:	7bfa      	ldrb	r2, [r7, #15]
 800159a:	6879      	ldr	r1, [r7, #4]
 800159c:	4613      	mov	r3, r2
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	4413      	add	r3, r2
 80015a2:	00db      	lsls	r3, r3, #3
 80015a4:	440b      	add	r3, r1
 80015a6:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80015aa:	2200      	movs	r2, #0
 80015ac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80015ae:	7bfa      	ldrb	r2, [r7, #15]
 80015b0:	6879      	ldr	r1, [r7, #4]
 80015b2:	4613      	mov	r3, r2
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	4413      	add	r3, r2
 80015b8:	00db      	lsls	r3, r3, #3
 80015ba:	440b      	add	r3, r1
 80015bc:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80015c4:	7bfa      	ldrb	r2, [r7, #15]
 80015c6:	6879      	ldr	r1, [r7, #4]
 80015c8:	4613      	mov	r3, r2
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	4413      	add	r3, r2
 80015ce:	00db      	lsls	r3, r3, #3
 80015d0:	440b      	add	r3, r1
 80015d2:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80015d6:	2200      	movs	r2, #0
 80015d8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015da:	7bfb      	ldrb	r3, [r7, #15]
 80015dc:	3301      	adds	r3, #1
 80015de:	73fb      	strb	r3, [r7, #15]
 80015e0:	7bfa      	ldrb	r2, [r7, #15]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	429a      	cmp	r2, r3
 80015e8:	d3b5      	bcc.n	8001556 <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	603b      	str	r3, [r7, #0]
 80015f0:	687e      	ldr	r6, [r7, #4]
 80015f2:	466d      	mov	r5, sp
 80015f4:	f106 0410 	add.w	r4, r6, #16
 80015f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015fc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001600:	e885 0003 	stmia.w	r5, {r0, r1}
 8001604:	1d33      	adds	r3, r6, #4
 8001606:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001608:	6838      	ldr	r0, [r7, #0]
 800160a:	f002 fe1b 	bl	8004244 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2200      	movs	r2, #0
 8001612:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  hpcd->State = HAL_PCD_STATE_READY;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2201      	movs	r2, #1
 800161a:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	69db      	ldr	r3, [r3, #28]
 8001622:	2b01      	cmp	r3, #1
 8001624:	d102      	bne.n	800162c <HAL_PCD_Init+0x1cc>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f000 f805 	bl	8001636 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800162c:	2300      	movs	r3, #0
}
 800162e:	4618      	mov	r0, r3
 8001630:	3714      	adds	r7, #20
 8001632:	46bd      	mov	sp, r7
 8001634:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001636 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001636:	b480      	push	{r7}
 8001638:	b085      	sub	sp, #20
 800163a:	af00      	add	r7, sp, #0
 800163c:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2201      	movs	r2, #1
 8001648:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
  hpcd->LPM_State = LPM_L0;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2200      	movs	r2, #0
 8001650:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800165a:	b29b      	uxth	r3, r3
 800165c:	f043 0301 	orr.w	r3, r3, #1
 8001660:	b29a      	uxth	r2, r3
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800166e:	b29b      	uxth	r3, r3
 8001670:	f043 0302 	orr.w	r3, r3, #2
 8001674:	b29a      	uxth	r2, r3
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800167c:	2300      	movs	r3, #0
}
 800167e:	4618      	mov	r0, r3
 8001680:	3714      	adds	r7, #20
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
	...

0800168c <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001694:	4b06      	ldr	r3, [pc, #24]	; (80016b0 <LL_EXTI_EnableIT_0_31+0x24>)
 8001696:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800169a:	4905      	ldr	r1, [pc, #20]	; (80016b0 <LL_EXTI_EnableIT_0_31+0x24>)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	4313      	orrs	r3, r2
 80016a0:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80016a4:	bf00      	nop
 80016a6:	370c      	adds	r7, #12
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr
 80016b0:	58000800 	.word	0x58000800

080016b4 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80016bc:	4b07      	ldr	r3, [pc, #28]	; (80016dc <LL_EXTI_DisableIT_0_31+0x28>)
 80016be:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	43db      	mvns	r3, r3
 80016c6:	4905      	ldr	r1, [pc, #20]	; (80016dc <LL_EXTI_DisableIT_0_31+0x28>)
 80016c8:	4013      	ands	r3, r2
 80016ca:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80016ce:	bf00      	nop
 80016d0:	370c      	adds	r7, #12
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	58000800 	.word	0x58000800

080016e0 <LL_C2_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->C2IMR1, ExtiLine);
 80016e8:	4b07      	ldr	r3, [pc, #28]	; (8001708 <LL_C2_EXTI_DisableIT_0_31+0x28>)
 80016ea:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	43db      	mvns	r3, r3
 80016f2:	4905      	ldr	r1, [pc, #20]	; (8001708 <LL_C2_EXTI_DisableIT_0_31+0x28>)
 80016f4:	4013      	ands	r3, r2
 80016f6:	f8c1 30c0 	str.w	r3, [r1, #192]	; 0xc0
}
 80016fa:	bf00      	nop
 80016fc:	370c      	adds	r7, #12
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	58000800 	.word	0x58000800

0800170c <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8001714:	4b05      	ldr	r3, [pc, #20]	; (800172c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	4904      	ldr	r1, [pc, #16]	; (800172c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4313      	orrs	r3, r2
 800171e:	600b      	str	r3, [r1, #0]

}
 8001720:	bf00      	nop
 8001722:	370c      	adds	r7, #12
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr
 800172c:	58000800 	.word	0x58000800

08001730 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8001738:	4b06      	ldr	r3, [pc, #24]	; (8001754 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	43db      	mvns	r3, r3
 8001740:	4904      	ldr	r1, [pc, #16]	; (8001754 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8001742:	4013      	ands	r3, r2
 8001744:	600b      	str	r3, [r1, #0]

}
 8001746:	bf00      	nop
 8001748:	370c      	adds	r7, #12
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	58000800 	.word	0x58000800

08001758 <LL_EXTI_EnableFallingTrig_0_31>:
  *         (*) value not defined in all devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8001760:	4b05      	ldr	r3, [pc, #20]	; (8001778 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8001762:	685a      	ldr	r2, [r3, #4]
 8001764:	4904      	ldr	r1, [pc, #16]	; (8001778 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4313      	orrs	r3, r2
 800176a:	604b      	str	r3, [r1, #4]
}
 800176c:	bf00      	nop
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr
 8001778:	58000800 	.word	0x58000800

0800177c <LL_EXTI_DisableFallingTrig_0_31>:
  *         (*) value not defined in all devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8001784:	4b06      	ldr	r3, [pc, #24]	; (80017a0 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8001786:	685a      	ldr	r2, [r3, #4]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	43db      	mvns	r3, r3
 800178c:	4904      	ldr	r1, [pc, #16]	; (80017a0 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800178e:	4013      	ands	r3, r2
 8001790:	604b      	str	r3, [r1, #4]
}
 8001792:	bf00      	nop
 8001794:	370c      	adds	r7, #12
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	58000800 	.word	0x58000800

080017a4 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80017a8:	4b05      	ldr	r3, [pc, #20]	; (80017c0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a04      	ldr	r2, [pc, #16]	; (80017c0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80017ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017b2:	6013      	str	r3, [r2, #0]
}
 80017b4:	bf00      	nop
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	58000400 	.word	0x58000400

080017c4 <HAL_PWR_ConfigPVD>:
  *         (and optionally, to select CPU2 only (not both CPU1 and CPU2):
  *         "__HAL_PWR_PVD_EXTI_DISABLE_IT()").
  * @retval None
  */
HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS bits according to PVDLevel value */
  MODIFY_REG(PWR->CR2, PWR_CR2_PLS, sConfigPVD->PVDLevel);
 80017cc:	4b1d      	ldr	r3, [pc, #116]	; (8001844 <HAL_PWR_ConfigPVD+0x80>)
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f023 020e 	bic.w	r2, r3, #14
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	491a      	ldr	r1, [pc, #104]	; (8001844 <HAL_PWR_ConfigPVD+0x80>)
 80017da:	4313      	orrs	r3, r2
 80017dc:	604b      	str	r3, [r1, #4]
  
  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  
  /* Note: On STM32WB series, power PVD event is not available on AIEC lines   */
  /*       (only interruption is available through AIEC line 16).             */
  __HAL_PWR_PVD_EXTI_DISABLE_IT();      /*CPU1*/
 80017de:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80017e2:	f7ff ff67 	bl	80016b4 <LL_EXTI_DisableIT_0_31>
  __HAL_PWR_PVD_EXTIC2_DISABLE_IT();    /*CPU2*/
 80017e6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80017ea:	f7ff ff79 	bl	80016e0 <LL_C2_EXTI_DisableIT_0_31>
    
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 80017ee:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80017f2:	f7ff ffc3 	bl	800177c <LL_EXTI_DisableFallingTrig_0_31>
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE(); 
 80017f6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80017fa:	f7ff ff99 	bl	8001730 <LL_EXTI_DisableRisingTrig_0_31>

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d003      	beq.n	8001812 <HAL_PWR_ConfigPVD+0x4e>
  {
    /* Set CPU1 as wakeup target */
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 800180a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800180e:	f7ff ff3d 	bl	800168c <LL_EXTI_EnableIT_0_31>
  }
  
  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f003 0301 	and.w	r3, r3, #1
 800181a:	2b00      	cmp	r3, #0
 800181c:	d003      	beq.n	8001826 <HAL_PWR_ConfigPVD+0x62>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 800181e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001822:	f7ff ff73 	bl	800170c <LL_EXTI_EnableRisingTrig_0_31>
  }
  
  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f003 0302 	and.w	r3, r3, #2
 800182e:	2b00      	cmp	r3, #0
 8001830:	d003      	beq.n	800183a <HAL_PWR_ConfigPVD+0x76>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 8001832:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001836:	f7ff ff8f 	bl	8001758 <LL_EXTI_EnableFallingTrig_0_31>
  }

  return HAL_OK;
 800183a:	2300      	movs	r3, #0
}
 800183c:	4618      	mov	r0, r3
 800183e:	3708      	adds	r7, #8
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	58000400 	.word	0x58000400

08001848 <HAL_PWR_EnablePVD>:
/**
  * @brief Enables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  /* Enable the power voltage detector */
  SET_BIT(PWR->CR2, PWR_CR2_PVDE);
 800184c:	4b05      	ldr	r3, [pc, #20]	; (8001864 <HAL_PWR_EnablePVD+0x1c>)
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	4a04      	ldr	r2, [pc, #16]	; (8001864 <HAL_PWR_EnablePVD+0x1c>)
 8001852:	f043 0301 	orr.w	r3, r3, #1
 8001856:	6053      	str	r3, [r2, #4]
}
 8001858:	bf00      	nop
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	58000400 	.word	0x58000400

08001868 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 800186c:	4b04      	ldr	r3, [pc, #16]	; (8001880 <HAL_PWREx_GetVoltageRange+0x18>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001874:	4618      	mov	r0, r3
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	58000400 	.word	0x58000400

08001884 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001888:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001892:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001896:	d101      	bne.n	800189c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001898:	2301      	movs	r3, #1
 800189a:	e000      	b.n	800189e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800189c:	2300      	movs	r3, #0
}
 800189e:	4618      	mov	r0, r3
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr

080018a8 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80018ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018ba:	6013      	str	r3, [r2, #0]
}
 80018bc:	bf00      	nop
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr

080018c6 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 80018c6:	b480      	push	{r7}
 80018c8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80018ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018d8:	6013      	str	r3, [r2, #0]
}
 80018da:	bf00      	nop
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr

080018e4 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80018e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80018f6:	d101      	bne.n	80018fc <LL_RCC_HSE_IsReady+0x18>
 80018f8:	2301      	movs	r3, #1
 80018fa:	e000      	b.n	80018fe <LL_RCC_HSE_IsReady+0x1a>
 80018fc:	2300      	movs	r3, #0
}
 80018fe:	4618      	mov	r0, r3
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800190c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001916:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800191a:	6013      	str	r3, [r2, #0]
}
 800191c:	bf00      	nop
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr

08001926 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8001926:	b480      	push	{r7}
 8001928:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800192a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001934:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001938:	6013      	str	r3, [r2, #0]
}
 800193a:	bf00      	nop
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001948:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001952:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001956:	d101      	bne.n	800195c <LL_RCC_HSI_IsReady+0x18>
 8001958:	2301      	movs	r3, #1
 800195a:	e000      	b.n	800195e <LL_RCC_HSI_IsReady+0x1a>
 800195c:	2300      	movs	r3, #0
}
 800195e:	4618      	mov	r0, r3
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr

08001968 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001970:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	061b      	lsls	r3, r3, #24
 800197e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001982:	4313      	orrs	r3, r2
 8001984:	604b      	str	r3, [r1, #4]
}
 8001986:	bf00      	nop
 8001988:	370c      	adds	r7, #12
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr

08001992 <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8001992:	b480      	push	{r7}
 8001994:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001996:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800199a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800199e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019a2:	f043 0301 	orr.w	r3, r3, #1
 80019a6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80019aa:	bf00      	nop
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80019b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019c4:	f023 0301 	bic.w	r3, r3, #1
 80019c8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80019cc:	bf00      	nop
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr

080019d6 <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 80019d6:	b480      	push	{r7}
 80019d8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80019da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d101      	bne.n	80019ee <LL_RCC_HSI48_IsReady+0x18>
 80019ea:	2301      	movs	r3, #1
 80019ec:	e000      	b.n	80019f0 <LL_RCC_HSI48_IsReady+0x1a>
 80019ee:	2300      	movs	r3, #0
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr

080019fa <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 80019fa:	b480      	push	{r7}
 80019fc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80019fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a06:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a0a:	f043 0301 	orr.w	r3, r3, #1
 8001a0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001a12:	bf00      	nop
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr

08001a1c <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001a20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a2c:	f023 0301 	bic.w	r3, r3, #1
 8001a30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001a34:	bf00      	nop
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr

08001a3e <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001a42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a4e:	f043 0304 	orr.w	r3, r3, #4
 8001a52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001a56:	bf00      	nop
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001a64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a70:	f023 0304 	bic.w	r3, r3, #4
 8001a74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001a78:	bf00      	nop
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr

08001a82 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001a82:	b480      	push	{r7}
 8001a84:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001a86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a8e:	f003 0302 	and.w	r3, r3, #2
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	d101      	bne.n	8001a9a <LL_RCC_LSE_IsReady+0x18>
 8001a96:	2301      	movs	r3, #1
 8001a98:	e000      	b.n	8001a9c <LL_RCC_LSE_IsReady+0x1a>
 8001a9a:	2300      	movs	r3, #0
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr

08001aa6 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8001aa6:	b480      	push	{r7}
 8001aa8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001aaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001aae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ab2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ab6:	f043 0301 	orr.w	r3, r3, #1
 8001aba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001abe:	bf00      	nop
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr

08001ac8 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001acc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ad0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ad4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ad8:	f023 0301 	bic.w	r3, r3, #1
 8001adc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001ae0:	bf00      	nop
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr

08001aea <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8001aea:	b480      	push	{r7}
 8001aec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8001aee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001af2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001af6:	f003 0302 	and.w	r3, r3, #2
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	d101      	bne.n	8001b02 <LL_RCC_LSI1_IsReady+0x18>
 8001afe:	2301      	movs	r3, #1
 8001b00:	e000      	b.n	8001b04 <LL_RCC_LSI1_IsReady+0x1a>
 8001b02:	2300      	movs	r3, #0
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr

08001b0e <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8001b0e:	b480      	push	{r7}
 8001b10:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001b12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b1a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b1e:	f043 0304 	orr.w	r3, r3, #4
 8001b22:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001b26:	bf00      	nop
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr

08001b30 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001b34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b40:	f023 0304 	bic.w	r3, r3, #4
 8001b44:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001b48:	bf00      	nop
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr

08001b52 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8001b52:	b480      	push	{r7}
 8001b54:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8001b56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b5e:	f003 0308 	and.w	r3, r3, #8
 8001b62:	2b08      	cmp	r3, #8
 8001b64:	d101      	bne.n	8001b6a <LL_RCC_LSI2_IsReady+0x18>
 8001b66:	2301      	movs	r3, #1
 8001b68:	e000      	b.n	8001b6c <LL_RCC_LSI2_IsReady+0x1a>
 8001b6a:	2300      	movs	r3, #0
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr

08001b76 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8001b76:	b480      	push	{r7}
 8001b78:	b083      	sub	sp, #12
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8001b7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b86:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	021b      	lsls	r3, r3, #8
 8001b8e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b92:	4313      	orrs	r3, r2
 8001b94:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8001b98:	bf00      	nop
 8001b9a:	370c      	adds	r7, #12
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr

08001ba4 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001ba8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bb2:	f043 0301 	orr.w	r3, r3, #1
 8001bb6:	6013      	str	r3, [r2, #0]
}
 8001bb8:	bf00      	nop
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr

08001bc2 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001bc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bd0:	f023 0301 	bic.w	r3, r3, #1
 8001bd4:	6013      	str	r3, [r2, #0]
}
 8001bd6:	bf00      	nop
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr

08001be0 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001be4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0302 	and.w	r3, r3, #2
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d101      	bne.n	8001bf6 <LL_RCC_MSI_IsReady+0x16>
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e000      	b.n	8001bf8 <LL_RCC_MSI_IsReady+0x18>
 8001bf6:	2300      	movs	r3, #0
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr

08001c02 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8001c02:	b480      	push	{r7}
 8001c04:	b083      	sub	sp, #12
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8001c0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c14:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	600b      	str	r3, [r1, #0]
}
 8001c1e:	bf00      	nop
 8001c20:	370c      	adds	r7, #12
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr

08001c2a <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8001c2a:	b480      	push	{r7}
 8001c2c:	b083      	sub	sp, #12
 8001c2e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8001c30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c3a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2bb0      	cmp	r3, #176	; 0xb0
 8001c40:	d901      	bls.n	8001c46 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8001c42:	23b0      	movs	r3, #176	; 0xb0
 8001c44:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8001c46:	687b      	ldr	r3, [r7, #4]
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	370c      	adds	r7, #12
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr

08001c54 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001c5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	021b      	lsls	r3, r3, #8
 8001c6a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	604b      	str	r3, [r1, #4]
}
 8001c72:	bf00      	nop
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr

08001c7e <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001c7e:	b480      	push	{r7}
 8001c80:	b083      	sub	sp, #12
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001c86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	f023 0203 	bic.w	r2, r3, #3
 8001c90:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	4313      	orrs	r3, r2
 8001c98:	608b      	str	r3, [r1, #8]
}
 8001c9a:	bf00      	nop
 8001c9c:	370c      	adds	r7, #12
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr

08001ca6 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001caa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	f003 030c 	and.w	r3, r3, #12
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr

08001cbe <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	b083      	sub	sp, #12
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001cc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cd0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	608b      	str	r3, [r1, #8]
}
 8001cda:	bf00      	nop
 8001cdc:	370c      	adds	r7, #12
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr

08001ce6 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	b083      	sub	sp, #12
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001cee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cf2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001cf6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cfa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001d06:	bf00      	nop
 8001d08:	370c      	adds	r7, #12
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr

08001d12 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8001d12:	b480      	push	{r7}
 8001d14:	b083      	sub	sp, #12
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001d1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d1e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001d22:	f023 020f 	bic.w	r2, r3, #15
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	091b      	lsrs	r3, r3, #4
 8001d2a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001d34:	bf00      	nop
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr

08001d40 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001d48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	608b      	str	r3, [r1, #8]
}
 8001d5c:	bf00      	nop
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001d70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d7a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	608b      	str	r3, [r1, #8]
}
 8001d84:	bf00      	nop
 8001d86:	370c      	adds	r7, #12
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001d94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr

08001da8 <LL_C2_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_C2_RCC_GetAHBPrescaler(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 8001dac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001db0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001db4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr

08001dc2 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8001dc2:	b480      	push	{r7}
 8001dc4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001dc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dca:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001dce:	011b      	lsls	r3, r3, #4
 8001dd0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr

08001dde <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001dde:	b480      	push	{r7}
 8001de0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001de2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr

08001df6 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001df6:	b480      	push	{r7}
 8001df8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001dfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr

08001e0e <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001e0e:	b480      	push	{r7}
 8001e10:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001e12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e1c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e20:	6013      	str	r3, [r2, #0]
}
 8001e22:	bf00      	nop
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001e30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e3e:	6013      	str	r3, [r2, #0]
}
 8001e40:	bf00      	nop
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr

08001e4a <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001e4a:	b480      	push	{r7}
 8001e4c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001e4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e58:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001e5c:	d101      	bne.n	8001e62 <LL_RCC_PLL_IsReady+0x18>
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e000      	b.n	8001e64 <LL_RCC_PLL_IsReady+0x1a>
 8001e62:	2300      	movs	r3, #0
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr

08001e6e <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001e6e:	b480      	push	{r7}
 8001e70:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001e72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	0a1b      	lsrs	r3, r3, #8
 8001e7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr

08001e88 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001e8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e90:	68db      	ldr	r3, [r3, #12]
 8001e92:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr

08001ea0 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001ea4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ea8:	68db      	ldr	r3, [r3, #12]
 8001eaa:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr

08001eb8 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001ebc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ec0:	68db      	ldr	r3, [r3, #12]
 8001ec2:	f003 0303 	and.w	r3, r3, #3
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001ed4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ede:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ee2:	d101      	bne.n	8001ee8 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e000      	b.n	8001eea <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001ee8:	2300      	movs	r3, #0
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr

08001ef4 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001ef8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001efc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001f00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f04:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001f08:	d101      	bne.n	8001f0e <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e000      	b.n	8001f10 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8001f0e:	2300      	movs	r3, #0
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr

08001f1a <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001f1a:	b480      	push	{r7}
 8001f1c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001f1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f22:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001f26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f2e:	d101      	bne.n	8001f34 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001f30:	2301      	movs	r3, #1
 8001f32:	e000      	b.n	8001f36 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001f34:	2300      	movs	r3, #0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001f44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f4e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001f52:	d101      	bne.n	8001f58 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001f54:	2301      	movs	r3, #1
 8001f56:	e000      	b.n	8001f5a <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001f58:	2300      	movs	r3, #0
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001f68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f72:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001f76:	d101      	bne.n	8001f7c <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e000      	b.n	8001f7e <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001f7c:	2300      	movs	r3, #0
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr

08001f88 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f88:	b590      	push	{r4, r7, lr}
 8001f8a:	b08d      	sub	sp, #52	; 0x34
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d101      	bne.n	8001f9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e363      	b.n	8002662 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0320 	and.w	r3, r3, #32
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	f000 808d 	beq.w	80020c2 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fa8:	f7ff fe7d 	bl	8001ca6 <LL_RCC_GetSysClkSource>
 8001fac:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fae:	f7ff ff83 	bl	8001eb8 <LL_RCC_PLL_GetMainSource>
 8001fb2:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d005      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x3e>
 8001fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fbc:	2b0c      	cmp	r3, #12
 8001fbe:	d147      	bne.n	8002050 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8001fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d144      	bne.n	8002050 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	69db      	ldr	r3, [r3, #28]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d101      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e347      	b.n	8002662 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8001fd6:	f7ff fe28 	bl	8001c2a <LL_RCC_MSI_GetRange>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	429c      	cmp	r4, r3
 8001fde:	d914      	bls.n	800200a <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f000 fd61 	bl	8002aac <RCC_SetFlashLatencyFromMSIRange>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d001      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e336      	b.n	8002662 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f7ff fe02 	bl	8001c02 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6a1b      	ldr	r3, [r3, #32]
 8002002:	4618      	mov	r0, r3
 8002004:	f7ff fe26 	bl	8001c54 <LL_RCC_MSI_SetCalibTrimming>
 8002008:	e013      	b.n	8002032 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800200e:	4618      	mov	r0, r3
 8002010:	f7ff fdf7 	bl	8001c02 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6a1b      	ldr	r3, [r3, #32]
 8002018:	4618      	mov	r0, r3
 800201a:	f7ff fe1b 	bl	8001c54 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002022:	4618      	mov	r0, r3
 8002024:	f000 fd42 	bl	8002aac <RCC_SetFlashLatencyFromMSIRange>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d001      	beq.n	8002032 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e317      	b.n	8002662 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002032:	f000 fcc9 	bl	80029c8 <HAL_RCC_GetHCLKFreq>
 8002036:	4603      	mov	r3, r0
 8002038:	4aa4      	ldr	r2, [pc, #656]	; (80022cc <HAL_RCC_OscConfig+0x344>)
 800203a:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800203c:	4ba4      	ldr	r3, [pc, #656]	; (80022d0 <HAL_RCC_OscConfig+0x348>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4618      	mov	r0, r3
 8002042:	f7fe fd6d 	bl	8000b20 <HAL_InitTick>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d039      	beq.n	80020c0 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e308      	b.n	8002662 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	69db      	ldr	r3, [r3, #28]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d01e      	beq.n	8002096 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002058:	f7ff fda4 	bl	8001ba4 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800205c:	f7fe ff80 	bl	8000f60 <HAL_GetTick>
 8002060:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002062:	e008      	b.n	8002076 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002064:	f7fe ff7c 	bl	8000f60 <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	2b02      	cmp	r3, #2
 8002070:	d901      	bls.n	8002076 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e2f5      	b.n	8002662 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002076:	f7ff fdb3 	bl	8001be0 <LL_RCC_MSI_IsReady>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d0f1      	beq.n	8002064 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002084:	4618      	mov	r0, r3
 8002086:	f7ff fdbc 	bl	8001c02 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6a1b      	ldr	r3, [r3, #32]
 800208e:	4618      	mov	r0, r3
 8002090:	f7ff fde0 	bl	8001c54 <LL_RCC_MSI_SetCalibTrimming>
 8002094:	e015      	b.n	80020c2 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002096:	f7ff fd94 	bl	8001bc2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800209a:	f7fe ff61 	bl	8000f60 <HAL_GetTick>
 800209e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80020a0:	e008      	b.n	80020b4 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80020a2:	f7fe ff5d 	bl	8000f60 <HAL_GetTick>
 80020a6:	4602      	mov	r2, r0
 80020a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020aa:	1ad3      	subs	r3, r2, r3
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	d901      	bls.n	80020b4 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80020b0:	2303      	movs	r3, #3
 80020b2:	e2d6      	b.n	8002662 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 80020b4:	f7ff fd94 	bl	8001be0 <LL_RCC_MSI_IsReady>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d1f1      	bne.n	80020a2 <HAL_RCC_OscConfig+0x11a>
 80020be:	e000      	b.n	80020c2 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80020c0:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0301 	and.w	r3, r3, #1
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d047      	beq.n	800215e <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020ce:	f7ff fdea 	bl	8001ca6 <LL_RCC_GetSysClkSource>
 80020d2:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020d4:	f7ff fef0 	bl	8001eb8 <LL_RCC_PLL_GetMainSource>
 80020d8:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80020da:	6a3b      	ldr	r3, [r7, #32]
 80020dc:	2b08      	cmp	r3, #8
 80020de:	d005      	beq.n	80020ec <HAL_RCC_OscConfig+0x164>
 80020e0:	6a3b      	ldr	r3, [r7, #32]
 80020e2:	2b0c      	cmp	r3, #12
 80020e4:	d108      	bne.n	80020f8 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	2b03      	cmp	r3, #3
 80020ea:	d105      	bne.n	80020f8 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d134      	bne.n	800215e <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e2b4      	b.n	8002662 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002100:	d102      	bne.n	8002108 <HAL_RCC_OscConfig+0x180>
 8002102:	f7ff fbd1 	bl	80018a8 <LL_RCC_HSE_Enable>
 8002106:	e001      	b.n	800210c <HAL_RCC_OscConfig+0x184>
 8002108:	f7ff fbdd 	bl	80018c6 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d012      	beq.n	800213a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002114:	f7fe ff24 	bl	8000f60 <HAL_GetTick>
 8002118:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800211a:	e008      	b.n	800212e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800211c:	f7fe ff20 	bl	8000f60 <HAL_GetTick>
 8002120:	4602      	mov	r2, r0
 8002122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	2b64      	cmp	r3, #100	; 0x64
 8002128:	d901      	bls.n	800212e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e299      	b.n	8002662 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800212e:	f7ff fbd9 	bl	80018e4 <LL_RCC_HSE_IsReady>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d0f1      	beq.n	800211c <HAL_RCC_OscConfig+0x194>
 8002138:	e011      	b.n	800215e <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800213a:	f7fe ff11 	bl	8000f60 <HAL_GetTick>
 800213e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002140:	e008      	b.n	8002154 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002142:	f7fe ff0d 	bl	8000f60 <HAL_GetTick>
 8002146:	4602      	mov	r2, r0
 8002148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214a:	1ad3      	subs	r3, r2, r3
 800214c:	2b64      	cmp	r3, #100	; 0x64
 800214e:	d901      	bls.n	8002154 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002150:	2303      	movs	r3, #3
 8002152:	e286      	b.n	8002662 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002154:	f7ff fbc6 	bl	80018e4 <LL_RCC_HSE_IsReady>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d1f1      	bne.n	8002142 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0302 	and.w	r3, r3, #2
 8002166:	2b00      	cmp	r3, #0
 8002168:	d04c      	beq.n	8002204 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800216a:	f7ff fd9c 	bl	8001ca6 <LL_RCC_GetSysClkSource>
 800216e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002170:	f7ff fea2 	bl	8001eb8 <LL_RCC_PLL_GetMainSource>
 8002174:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002176:	69bb      	ldr	r3, [r7, #24]
 8002178:	2b04      	cmp	r3, #4
 800217a:	d005      	beq.n	8002188 <HAL_RCC_OscConfig+0x200>
 800217c:	69bb      	ldr	r3, [r7, #24]
 800217e:	2b0c      	cmp	r3, #12
 8002180:	d10e      	bne.n	80021a0 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	2b02      	cmp	r3, #2
 8002186:	d10b      	bne.n	80021a0 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d101      	bne.n	8002194 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e266      	b.n	8002662 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	691b      	ldr	r3, [r3, #16]
 8002198:	4618      	mov	r0, r3
 800219a:	f7ff fbe5 	bl	8001968 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800219e:	e031      	b.n	8002204 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d019      	beq.n	80021dc <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021a8:	f7ff fbae 	bl	8001908 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ac:	f7fe fed8 	bl	8000f60 <HAL_GetTick>
 80021b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80021b2:	e008      	b.n	80021c6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021b4:	f7fe fed4 	bl	8000f60 <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d901      	bls.n	80021c6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e24d      	b.n	8002662 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 80021c6:	f7ff fbbd 	bl	8001944 <LL_RCC_HSI_IsReady>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d0f1      	beq.n	80021b4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	691b      	ldr	r3, [r3, #16]
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7ff fbc7 	bl	8001968 <LL_RCC_HSI_SetCalibTrimming>
 80021da:	e013      	b.n	8002204 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021dc:	f7ff fba3 	bl	8001926 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021e0:	f7fe febe 	bl	8000f60 <HAL_GetTick>
 80021e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80021e6:	e008      	b.n	80021fa <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021e8:	f7fe feba 	bl	8000f60 <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d901      	bls.n	80021fa <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e233      	b.n	8002662 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80021fa:	f7ff fba3 	bl	8001944 <LL_RCC_HSI_IsReady>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d1f1      	bne.n	80021e8 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0308 	and.w	r3, r3, #8
 800220c:	2b00      	cmp	r3, #0
 800220e:	d106      	bne.n	800221e <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002218:	2b00      	cmp	r3, #0
 800221a:	f000 80a3 	beq.w	8002364 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	695b      	ldr	r3, [r3, #20]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d076      	beq.n	8002314 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0310 	and.w	r3, r3, #16
 800222e:	2b00      	cmp	r3, #0
 8002230:	d046      	beq.n	80022c0 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8002232:	f7ff fc5a 	bl	8001aea <LL_RCC_LSI1_IsReady>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d113      	bne.n	8002264 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800223c:	f7ff fc33 	bl	8001aa6 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002240:	f7fe fe8e 	bl	8000f60 <HAL_GetTick>
 8002244:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002246:	e008      	b.n	800225a <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002248:	f7fe fe8a 	bl	8000f60 <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	2b02      	cmp	r3, #2
 8002254:	d901      	bls.n	800225a <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e203      	b.n	8002662 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800225a:	f7ff fc46 	bl	8001aea <LL_RCC_LSI1_IsReady>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d0f1      	beq.n	8002248 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8002264:	f7ff fc53 	bl	8001b0e <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002268:	f7fe fe7a 	bl	8000f60 <HAL_GetTick>
 800226c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800226e:	e008      	b.n	8002282 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002270:	f7fe fe76 	bl	8000f60 <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	2b03      	cmp	r3, #3
 800227c:	d901      	bls.n	8002282 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	e1ef      	b.n	8002662 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002282:	f7ff fc66 	bl	8001b52 <LL_RCC_LSI2_IsReady>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d0f1      	beq.n	8002270 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	699b      	ldr	r3, [r3, #24]
 8002290:	4618      	mov	r0, r3
 8002292:	f7ff fc70 	bl	8001b76 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8002296:	f7ff fc17 	bl	8001ac8 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800229a:	f7fe fe61 	bl	8000f60 <HAL_GetTick>
 800229e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80022a0:	e008      	b.n	80022b4 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80022a2:	f7fe fe5d 	bl	8000f60 <HAL_GetTick>
 80022a6:	4602      	mov	r2, r0
 80022a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d901      	bls.n	80022b4 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80022b0:	2303      	movs	r3, #3
 80022b2:	e1d6      	b.n	8002662 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80022b4:	f7ff fc19 	bl	8001aea <LL_RCC_LSI1_IsReady>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d1f1      	bne.n	80022a2 <HAL_RCC_OscConfig+0x31a>
 80022be:	e051      	b.n	8002364 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80022c0:	f7ff fbf1 	bl	8001aa6 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c4:	f7fe fe4c 	bl	8000f60 <HAL_GetTick>
 80022c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80022ca:	e00c      	b.n	80022e6 <HAL_RCC_OscConfig+0x35e>
 80022cc:	20000004 	.word	0x20000004
 80022d0:	20000008 	.word	0x20000008
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80022d4:	f7fe fe44 	bl	8000f60 <HAL_GetTick>
 80022d8:	4602      	mov	r2, r0
 80022da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d901      	bls.n	80022e6 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e1bd      	b.n	8002662 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80022e6:	f7ff fc00 	bl	8001aea <LL_RCC_LSI1_IsReady>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d0f1      	beq.n	80022d4 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80022f0:	f7ff fc1e 	bl	8001b30 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80022f4:	e008      	b.n	8002308 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80022f6:	f7fe fe33 	bl	8000f60 <HAL_GetTick>
 80022fa:	4602      	mov	r2, r0
 80022fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	2b03      	cmp	r3, #3
 8002302:	d901      	bls.n	8002308 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8002304:	2303      	movs	r3, #3
 8002306:	e1ac      	b.n	8002662 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002308:	f7ff fc23 	bl	8001b52 <LL_RCC_LSI2_IsReady>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d1f1      	bne.n	80022f6 <HAL_RCC_OscConfig+0x36e>
 8002312:	e027      	b.n	8002364 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8002314:	f7ff fc0c 	bl	8001b30 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002318:	f7fe fe22 	bl	8000f60 <HAL_GetTick>
 800231c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800231e:	e008      	b.n	8002332 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002320:	f7fe fe1e 	bl	8000f60 <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	2b03      	cmp	r3, #3
 800232c:	d901      	bls.n	8002332 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e197      	b.n	8002662 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002332:	f7ff fc0e 	bl	8001b52 <LL_RCC_LSI2_IsReady>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d1f1      	bne.n	8002320 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800233c:	f7ff fbc4 	bl	8001ac8 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002340:	f7fe fe0e 	bl	8000f60 <HAL_GetTick>
 8002344:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002346:	e008      	b.n	800235a <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002348:	f7fe fe0a 	bl	8000f60 <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	2b02      	cmp	r3, #2
 8002354:	d901      	bls.n	800235a <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e183      	b.n	8002662 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800235a:	f7ff fbc6 	bl	8001aea <LL_RCC_LSI1_IsReady>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d1f1      	bne.n	8002348 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 0304 	and.w	r3, r3, #4
 800236c:	2b00      	cmp	r3, #0
 800236e:	d05b      	beq.n	8002428 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002370:	4ba7      	ldr	r3, [pc, #668]	; (8002610 <HAL_RCC_OscConfig+0x688>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002378:	2b00      	cmp	r3, #0
 800237a:	d114      	bne.n	80023a6 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800237c:	f7ff fa12 	bl	80017a4 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002380:	f7fe fdee 	bl	8000f60 <HAL_GetTick>
 8002384:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002386:	e008      	b.n	800239a <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002388:	f7fe fdea 	bl	8000f60 <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	2b02      	cmp	r3, #2
 8002394:	d901      	bls.n	800239a <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e163      	b.n	8002662 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800239a:	4b9d      	ldr	r3, [pc, #628]	; (8002610 <HAL_RCC_OscConfig+0x688>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d0f0      	beq.n	8002388 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d102      	bne.n	80023b4 <HAL_RCC_OscConfig+0x42c>
 80023ae:	f7ff fb24 	bl	80019fa <LL_RCC_LSE_Enable>
 80023b2:	e00c      	b.n	80023ce <HAL_RCC_OscConfig+0x446>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	2b05      	cmp	r3, #5
 80023ba:	d104      	bne.n	80023c6 <HAL_RCC_OscConfig+0x43e>
 80023bc:	f7ff fb3f 	bl	8001a3e <LL_RCC_LSE_EnableBypass>
 80023c0:	f7ff fb1b 	bl	80019fa <LL_RCC_LSE_Enable>
 80023c4:	e003      	b.n	80023ce <HAL_RCC_OscConfig+0x446>
 80023c6:	f7ff fb29 	bl	8001a1c <LL_RCC_LSE_Disable>
 80023ca:	f7ff fb49 	bl	8001a60 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d014      	beq.n	8002400 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023d6:	f7fe fdc3 	bl	8000f60 <HAL_GetTick>
 80023da:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80023dc:	e00a      	b.n	80023f4 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023de:	f7fe fdbf 	bl	8000f60 <HAL_GetTick>
 80023e2:	4602      	mov	r2, r0
 80023e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e6:	1ad3      	subs	r3, r2, r3
 80023e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d901      	bls.n	80023f4 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80023f0:	2303      	movs	r3, #3
 80023f2:	e136      	b.n	8002662 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80023f4:	f7ff fb45 	bl	8001a82 <LL_RCC_LSE_IsReady>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d0ef      	beq.n	80023de <HAL_RCC_OscConfig+0x456>
 80023fe:	e013      	b.n	8002428 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002400:	f7fe fdae 	bl	8000f60 <HAL_GetTick>
 8002404:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002406:	e00a      	b.n	800241e <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002408:	f7fe fdaa 	bl	8000f60 <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	f241 3288 	movw	r2, #5000	; 0x1388
 8002416:	4293      	cmp	r3, r2
 8002418:	d901      	bls.n	800241e <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e121      	b.n	8002662 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800241e:	f7ff fb30 	bl	8001a82 <LL_RCC_LSE_IsReady>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d1ef      	bne.n	8002408 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002430:	2b00      	cmp	r3, #0
 8002432:	d02c      	beq.n	800248e <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002438:	2b00      	cmp	r3, #0
 800243a:	d014      	beq.n	8002466 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800243c:	f7ff faa9 	bl	8001992 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002440:	f7fe fd8e 	bl	8000f60 <HAL_GetTick>
 8002444:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002446:	e008      	b.n	800245a <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002448:	f7fe fd8a 	bl	8000f60 <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	2b02      	cmp	r3, #2
 8002454:	d901      	bls.n	800245a <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e103      	b.n	8002662 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800245a:	f7ff fabc 	bl	80019d6 <LL_RCC_HSI48_IsReady>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d0f1      	beq.n	8002448 <HAL_RCC_OscConfig+0x4c0>
 8002464:	e013      	b.n	800248e <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002466:	f7ff faa5 	bl	80019b4 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800246a:	f7fe fd79 	bl	8000f60 <HAL_GetTick>
 800246e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002470:	e008      	b.n	8002484 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002472:	f7fe fd75 	bl	8000f60 <HAL_GetTick>
 8002476:	4602      	mov	r2, r0
 8002478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	2b02      	cmp	r3, #2
 800247e:	d901      	bls.n	8002484 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8002480:	2303      	movs	r3, #3
 8002482:	e0ee      	b.n	8002662 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002484:	f7ff faa7 	bl	80019d6 <LL_RCC_HSI48_IsReady>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d1f1      	bne.n	8002472 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002492:	2b00      	cmp	r3, #0
 8002494:	f000 80e4 	beq.w	8002660 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002498:	f7ff fc05 	bl	8001ca6 <LL_RCC_GetSysClkSource>
 800249c:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800249e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	f040 80b4 	bne.w	8002618 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f003 0203 	and.w	r2, r3, #3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d123      	bne.n	8002506 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d11c      	bne.n	8002506 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	0a1b      	lsrs	r3, r3, #8
 80024d0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80024d8:	429a      	cmp	r2, r3
 80024da:	d114      	bne.n	8002506 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d10d      	bne.n	8002506 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d106      	bne.n	8002506 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002502:	429a      	cmp	r2, r3
 8002504:	d05d      	beq.n	80025c2 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	2b0c      	cmp	r3, #12
 800250a:	d058      	beq.n	80025be <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800250c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d001      	beq.n	800251e <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e0a1      	b.n	8002662 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800251e:	f7ff fc85 	bl	8001e2c <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002522:	f7fe fd1d 	bl	8000f60 <HAL_GetTick>
 8002526:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002528:	e008      	b.n	800253c <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800252a:	f7fe fd19 	bl	8000f60 <HAL_GetTick>
 800252e:	4602      	mov	r2, r0
 8002530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	2b02      	cmp	r3, #2
 8002536:	d901      	bls.n	800253c <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8002538:	2303      	movs	r3, #3
 800253a:	e092      	b.n	8002662 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800253c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d1ef      	bne.n	800252a <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800254a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800254e:	68da      	ldr	r2, [r3, #12]
 8002550:	4b30      	ldr	r3, [pc, #192]	; (8002614 <HAL_RCC_OscConfig+0x68c>)
 8002552:	4013      	ands	r3, r2
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800255c:	4311      	orrs	r1, r2
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002562:	0212      	lsls	r2, r2, #8
 8002564:	4311      	orrs	r1, r2
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800256a:	4311      	orrs	r1, r2
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002570:	4311      	orrs	r1, r2
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002576:	430a      	orrs	r2, r1
 8002578:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800257c:	4313      	orrs	r3, r2
 800257e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002580:	f7ff fc45 	bl	8001e0e <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002584:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800258e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002592:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002594:	f7fe fce4 	bl	8000f60 <HAL_GetTick>
 8002598:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800259a:	e008      	b.n	80025ae <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800259c:	f7fe fce0 	bl	8000f60 <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d901      	bls.n	80025ae <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e059      	b.n	8002662 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d0ef      	beq.n	800259c <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025bc:	e050      	b.n	8002660 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e04f      	b.n	8002662 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d147      	bne.n	8002660 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80025d0:	f7ff fc1d 	bl	8001e0e <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80025d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025d8:	68db      	ldr	r3, [r3, #12]
 80025da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025e2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80025e4:	f7fe fcbc 	bl	8000f60 <HAL_GetTick>
 80025e8:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025ea:	e008      	b.n	80025fe <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025ec:	f7fe fcb8 	bl	8000f60 <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d901      	bls.n	80025fe <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e031      	b.n	8002662 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002608:	2b00      	cmp	r3, #0
 800260a:	d0ef      	beq.n	80025ec <HAL_RCC_OscConfig+0x664>
 800260c:	e028      	b.n	8002660 <HAL_RCC_OscConfig+0x6d8>
 800260e:	bf00      	nop
 8002610:	58000400 	.word	0x58000400
 8002614:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	2b0c      	cmp	r3, #12
 800261c:	d01e      	beq.n	800265c <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800261e:	f7ff fc05 	bl	8001e2c <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002622:	f7fe fc9d 	bl	8000f60 <HAL_GetTick>
 8002626:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002628:	e008      	b.n	800263c <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800262a:	f7fe fc99 	bl	8000f60 <HAL_GetTick>
 800262e:	4602      	mov	r2, r0
 8002630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	2b02      	cmp	r3, #2
 8002636:	d901      	bls.n	800263c <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8002638:	2303      	movs	r3, #3
 800263a:	e012      	b.n	8002662 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800263c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d1ef      	bne.n	800262a <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800264a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800264e:	68da      	ldr	r2, [r3, #12]
 8002650:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002654:	4b05      	ldr	r3, [pc, #20]	; (800266c <HAL_RCC_OscConfig+0x6e4>)
 8002656:	4013      	ands	r3, r2
 8002658:	60cb      	str	r3, [r1, #12]
 800265a:	e001      	b.n	8002660 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e000      	b.n	8002662 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8002660:	2300      	movs	r3, #0
}
 8002662:	4618      	mov	r0, r3
 8002664:	3734      	adds	r7, #52	; 0x34
 8002666:	46bd      	mov	sp, r7
 8002668:	bd90      	pop	{r4, r7, pc}
 800266a:	bf00      	nop
 800266c:	eefefffc 	.word	0xeefefffc

08002670 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b084      	sub	sp, #16
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d101      	bne.n	8002684 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e12d      	b.n	80028e0 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002684:	4b98      	ldr	r3, [pc, #608]	; (80028e8 <HAL_RCC_ClockConfig+0x278>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0307 	and.w	r3, r3, #7
 800268c:	683a      	ldr	r2, [r7, #0]
 800268e:	429a      	cmp	r2, r3
 8002690:	d91b      	bls.n	80026ca <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002692:	4b95      	ldr	r3, [pc, #596]	; (80028e8 <HAL_RCC_ClockConfig+0x278>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f023 0207 	bic.w	r2, r3, #7
 800269a:	4993      	ldr	r1, [pc, #588]	; (80028e8 <HAL_RCC_ClockConfig+0x278>)
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	4313      	orrs	r3, r2
 80026a0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026a2:	f7fe fc5d 	bl	8000f60 <HAL_GetTick>
 80026a6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026a8:	e008      	b.n	80026bc <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80026aa:	f7fe fc59 	bl	8000f60 <HAL_GetTick>
 80026ae:	4602      	mov	r2, r0
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	1ad3      	subs	r3, r2, r3
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d901      	bls.n	80026bc <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80026b8:	2303      	movs	r3, #3
 80026ba:	e111      	b.n	80028e0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026bc:	4b8a      	ldr	r3, [pc, #552]	; (80028e8 <HAL_RCC_ClockConfig+0x278>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0307 	and.w	r3, r3, #7
 80026c4:	683a      	ldr	r2, [r7, #0]
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d1ef      	bne.n	80026aa <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0302 	and.w	r3, r3, #2
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d016      	beq.n	8002704 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	4618      	mov	r0, r3
 80026dc:	f7ff faef 	bl	8001cbe <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80026e0:	f7fe fc3e 	bl	8000f60 <HAL_GetTick>
 80026e4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80026e6:	e008      	b.n	80026fa <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80026e8:	f7fe fc3a 	bl	8000f60 <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d901      	bls.n	80026fa <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e0f2      	b.n	80028e0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80026fa:	f7ff fbe9 	bl	8001ed0 <LL_RCC_IsActiveFlag_HPRE>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d0f1      	beq.n	80026e8 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0320 	and.w	r3, r3, #32
 800270c:	2b00      	cmp	r3, #0
 800270e:	d016      	beq.n	800273e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	695b      	ldr	r3, [r3, #20]
 8002714:	4618      	mov	r0, r3
 8002716:	f7ff fae6 	bl	8001ce6 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800271a:	f7fe fc21 	bl	8000f60 <HAL_GetTick>
 800271e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002720:	e008      	b.n	8002734 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002722:	f7fe fc1d 	bl	8000f60 <HAL_GetTick>
 8002726:	4602      	mov	r2, r0
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	2b02      	cmp	r3, #2
 800272e:	d901      	bls.n	8002734 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002730:	2303      	movs	r3, #3
 8002732:	e0d5      	b.n	80028e0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002734:	f7ff fbde 	bl	8001ef4 <LL_RCC_IsActiveFlag_C2HPRE>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d0f1      	beq.n	8002722 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002746:	2b00      	cmp	r3, #0
 8002748:	d016      	beq.n	8002778 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	699b      	ldr	r3, [r3, #24]
 800274e:	4618      	mov	r0, r3
 8002750:	f7ff fadf 	bl	8001d12 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002754:	f7fe fc04 	bl	8000f60 <HAL_GetTick>
 8002758:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800275a:	e008      	b.n	800276e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800275c:	f7fe fc00 	bl	8000f60 <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	2b02      	cmp	r3, #2
 8002768:	d901      	bls.n	800276e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e0b8      	b.n	80028e0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800276e:	f7ff fbd4 	bl	8001f1a <LL_RCC_IsActiveFlag_SHDHPRE>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d0f1      	beq.n	800275c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0304 	and.w	r3, r3, #4
 8002780:	2b00      	cmp	r3, #0
 8002782:	d016      	beq.n	80027b2 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	4618      	mov	r0, r3
 800278a:	f7ff fad9 	bl	8001d40 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800278e:	f7fe fbe7 	bl	8000f60 <HAL_GetTick>
 8002792:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002794:	e008      	b.n	80027a8 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002796:	f7fe fbe3 	bl	8000f60 <HAL_GetTick>
 800279a:	4602      	mov	r2, r0
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d901      	bls.n	80027a8 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80027a4:	2303      	movs	r3, #3
 80027a6:	e09b      	b.n	80028e0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80027a8:	f7ff fbca 	bl	8001f40 <LL_RCC_IsActiveFlag_PPRE1>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d0f1      	beq.n	8002796 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0308 	and.w	r3, r3, #8
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d017      	beq.n	80027ee <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	691b      	ldr	r3, [r3, #16]
 80027c2:	00db      	lsls	r3, r3, #3
 80027c4:	4618      	mov	r0, r3
 80027c6:	f7ff facf 	bl	8001d68 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80027ca:	f7fe fbc9 	bl	8000f60 <HAL_GetTick>
 80027ce:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80027d0:	e008      	b.n	80027e4 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80027d2:	f7fe fbc5 	bl	8000f60 <HAL_GetTick>
 80027d6:	4602      	mov	r2, r0
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d901      	bls.n	80027e4 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80027e0:	2303      	movs	r3, #3
 80027e2:	e07d      	b.n	80028e0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80027e4:	f7ff fbbe 	bl	8001f64 <LL_RCC_IsActiveFlag_PPRE2>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d0f1      	beq.n	80027d2 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0301 	and.w	r3, r3, #1
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d043      	beq.n	8002882 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d106      	bne.n	8002810 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002802:	f7ff f86f 	bl	80018e4 <LL_RCC_HSE_IsReady>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d11e      	bne.n	800284a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e067      	b.n	80028e0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	2b03      	cmp	r3, #3
 8002816:	d106      	bne.n	8002826 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002818:	f7ff fb17 	bl	8001e4a <LL_RCC_PLL_IsReady>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d113      	bne.n	800284a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e05c      	b.n	80028e0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d106      	bne.n	800283c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800282e:	f7ff f9d7 	bl	8001be0 <LL_RCC_MSI_IsReady>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d108      	bne.n	800284a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e051      	b.n	80028e0 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800283c:	f7ff f882 	bl	8001944 <LL_RCC_HSI_IsReady>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d101      	bne.n	800284a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e04a      	b.n	80028e0 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	4618      	mov	r0, r3
 8002850:	f7ff fa15 	bl	8001c7e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002854:	f7fe fb84 	bl	8000f60 <HAL_GetTick>
 8002858:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800285a:	e00a      	b.n	8002872 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800285c:	f7fe fb80 	bl	8000f60 <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	f241 3288 	movw	r2, #5000	; 0x1388
 800286a:	4293      	cmp	r3, r2
 800286c:	d901      	bls.n	8002872 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e036      	b.n	80028e0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002872:	f7ff fa18 	bl	8001ca6 <LL_RCC_GetSysClkSource>
 8002876:	4602      	mov	r2, r0
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	429a      	cmp	r2, r3
 8002880:	d1ec      	bne.n	800285c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002882:	4b19      	ldr	r3, [pc, #100]	; (80028e8 <HAL_RCC_ClockConfig+0x278>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 0307 	and.w	r3, r3, #7
 800288a:	683a      	ldr	r2, [r7, #0]
 800288c:	429a      	cmp	r2, r3
 800288e:	d21b      	bcs.n	80028c8 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002890:	4b15      	ldr	r3, [pc, #84]	; (80028e8 <HAL_RCC_ClockConfig+0x278>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f023 0207 	bic.w	r2, r3, #7
 8002898:	4913      	ldr	r1, [pc, #76]	; (80028e8 <HAL_RCC_ClockConfig+0x278>)
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	4313      	orrs	r3, r2
 800289e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028a0:	f7fe fb5e 	bl	8000f60 <HAL_GetTick>
 80028a4:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028a6:	e008      	b.n	80028ba <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80028a8:	f7fe fb5a 	bl	8000f60 <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d901      	bls.n	80028ba <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e012      	b.n	80028e0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ba:	4b0b      	ldr	r3, [pc, #44]	; (80028e8 <HAL_RCC_ClockConfig+0x278>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0307 	and.w	r3, r3, #7
 80028c2:	683a      	ldr	r2, [r7, #0]
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d1ef      	bne.n	80028a8 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80028c8:	f000 f87e 	bl	80029c8 <HAL_RCC_GetHCLKFreq>
 80028cc:	4603      	mov	r3, r0
 80028ce:	4a07      	ldr	r2, [pc, #28]	; (80028ec <HAL_RCC_ClockConfig+0x27c>)
 80028d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80028d2:	f7fe fb51 	bl	8000f78 <HAL_GetTickPrio>
 80028d6:	4603      	mov	r3, r0
 80028d8:	4618      	mov	r0, r3
 80028da:	f7fe f921 	bl	8000b20 <HAL_InitTick>
 80028de:	4603      	mov	r3, r0
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3710      	adds	r7, #16
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	58004000 	.word	0x58004000
 80028ec:	20000004 	.word	0x20000004

080028f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028f0:	b590      	push	{r4, r7, lr}
 80028f2:	b085      	sub	sp, #20
 80028f4:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028f6:	f7ff f9d6 	bl	8001ca6 <LL_RCC_GetSysClkSource>
 80028fa:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d10a      	bne.n	8002918 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002902:	f7ff f992 	bl	8001c2a <LL_RCC_MSI_GetRange>
 8002906:	4603      	mov	r3, r0
 8002908:	091b      	lsrs	r3, r3, #4
 800290a:	f003 030f 	and.w	r3, r3, #15
 800290e:	4a2b      	ldr	r2, [pc, #172]	; (80029bc <HAL_RCC_GetSysClockFreq+0xcc>)
 8002910:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002914:	60fb      	str	r3, [r7, #12]
 8002916:	e04b      	b.n	80029b0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2b04      	cmp	r3, #4
 800291c:	d102      	bne.n	8002924 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800291e:	4b28      	ldr	r3, [pc, #160]	; (80029c0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002920:	60fb      	str	r3, [r7, #12]
 8002922:	e045      	b.n	80029b0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2b08      	cmp	r3, #8
 8002928:	d10a      	bne.n	8002940 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800292a:	f7fe ffab 	bl	8001884 <LL_RCC_HSE_IsEnabledDiv2>
 800292e:	4603      	mov	r3, r0
 8002930:	2b01      	cmp	r3, #1
 8002932:	d102      	bne.n	800293a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002934:	4b22      	ldr	r3, [pc, #136]	; (80029c0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002936:	60fb      	str	r3, [r7, #12]
 8002938:	e03a      	b.n	80029b0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800293a:	4b22      	ldr	r3, [pc, #136]	; (80029c4 <HAL_RCC_GetSysClockFreq+0xd4>)
 800293c:	60fb      	str	r3, [r7, #12]
 800293e:	e037      	b.n	80029b0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002940:	f7ff faba 	bl	8001eb8 <LL_RCC_PLL_GetMainSource>
 8002944:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	2b02      	cmp	r3, #2
 800294a:	d003      	beq.n	8002954 <HAL_RCC_GetSysClockFreq+0x64>
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	2b03      	cmp	r3, #3
 8002950:	d003      	beq.n	800295a <HAL_RCC_GetSysClockFreq+0x6a>
 8002952:	e00d      	b.n	8002970 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002954:	4b1a      	ldr	r3, [pc, #104]	; (80029c0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002956:	60bb      	str	r3, [r7, #8]
        break;
 8002958:	e015      	b.n	8002986 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800295a:	f7fe ff93 	bl	8001884 <LL_RCC_HSE_IsEnabledDiv2>
 800295e:	4603      	mov	r3, r0
 8002960:	2b01      	cmp	r3, #1
 8002962:	d102      	bne.n	800296a <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002964:	4b16      	ldr	r3, [pc, #88]	; (80029c0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002966:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002968:	e00d      	b.n	8002986 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800296a:	4b16      	ldr	r3, [pc, #88]	; (80029c4 <HAL_RCC_GetSysClockFreq+0xd4>)
 800296c:	60bb      	str	r3, [r7, #8]
        break;
 800296e:	e00a      	b.n	8002986 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002970:	f7ff f95b 	bl	8001c2a <LL_RCC_MSI_GetRange>
 8002974:	4603      	mov	r3, r0
 8002976:	091b      	lsrs	r3, r3, #4
 8002978:	f003 030f 	and.w	r3, r3, #15
 800297c:	4a0f      	ldr	r2, [pc, #60]	; (80029bc <HAL_RCC_GetSysClockFreq+0xcc>)
 800297e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002982:	60bb      	str	r3, [r7, #8]
        break;
 8002984:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8002986:	f7ff fa72 	bl	8001e6e <LL_RCC_PLL_GetN>
 800298a:	4602      	mov	r2, r0
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	fb03 f402 	mul.w	r4, r3, r2
 8002992:	f7ff fa85 	bl	8001ea0 <LL_RCC_PLL_GetDivider>
 8002996:	4603      	mov	r3, r0
 8002998:	091b      	lsrs	r3, r3, #4
 800299a:	3301      	adds	r3, #1
 800299c:	fbb4 f4f3 	udiv	r4, r4, r3
 80029a0:	f7ff fa72 	bl	8001e88 <LL_RCC_PLL_GetR>
 80029a4:	4603      	mov	r3, r0
 80029a6:	0f5b      	lsrs	r3, r3, #29
 80029a8:	3301      	adds	r3, #1
 80029aa:	fbb4 f3f3 	udiv	r3, r4, r3
 80029ae:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80029b0:	68fb      	ldr	r3, [r7, #12]
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3714      	adds	r7, #20
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd90      	pop	{r4, r7, pc}
 80029ba:	bf00      	nop
 80029bc:	08007d2c 	.word	0x08007d2c
 80029c0:	00f42400 	.word	0x00f42400
 80029c4:	01e84800 	.word	0x01e84800

080029c8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029c8:	b598      	push	{r3, r4, r7, lr}
 80029ca:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80029cc:	f7ff ff90 	bl	80028f0 <HAL_RCC_GetSysClockFreq>
 80029d0:	4604      	mov	r4, r0
 80029d2:	f7ff f9dd 	bl	8001d90 <LL_RCC_GetAHBPrescaler>
 80029d6:	4603      	mov	r3, r0
 80029d8:	091b      	lsrs	r3, r3, #4
 80029da:	f003 030f 	and.w	r3, r3, #15
 80029de:	4a03      	ldr	r2, [pc, #12]	; (80029ec <HAL_RCC_GetHCLKFreq+0x24>)
 80029e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029e4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	bd98      	pop	{r3, r4, r7, pc}
 80029ec:	08007ccc 	.word	0x08007ccc

080029f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029f0:	b598      	push	{r3, r4, r7, lr}
 80029f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80029f4:	f7ff ffe8 	bl	80029c8 <HAL_RCC_GetHCLKFreq>
 80029f8:	4604      	mov	r4, r0
 80029fa:	f7ff f9f0 	bl	8001dde <LL_RCC_GetAPB1Prescaler>
 80029fe:	4603      	mov	r3, r0
 8002a00:	0a1b      	lsrs	r3, r3, #8
 8002a02:	f003 0307 	and.w	r3, r3, #7
 8002a06:	4a04      	ldr	r2, [pc, #16]	; (8002a18 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002a08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a0c:	f003 031f 	and.w	r3, r3, #31
 8002a10:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	bd98      	pop	{r3, r4, r7, pc}
 8002a18:	08007d0c 	.word	0x08007d0c

08002a1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a1c:	b598      	push	{r3, r4, r7, lr}
 8002a1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002a20:	f7ff ffd2 	bl	80029c8 <HAL_RCC_GetHCLKFreq>
 8002a24:	4604      	mov	r4, r0
 8002a26:	f7ff f9e6 	bl	8001df6 <LL_RCC_GetAPB2Prescaler>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	0adb      	lsrs	r3, r3, #11
 8002a2e:	f003 0307 	and.w	r3, r3, #7
 8002a32:	4a04      	ldr	r2, [pc, #16]	; (8002a44 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002a34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a38:	f003 031f 	and.w	r3, r3, #31
 8002a3c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	bd98      	pop	{r3, r4, r7, pc}
 8002a44:	08007d0c 	.word	0x08007d0c

08002a48 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 |
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	226f      	movs	r2, #111	; 0x6f
 8002a56:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 8002a58:	f7ff f925 	bl	8001ca6 <LL_RCC_GetSysClkSource>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 8002a62:	f7ff f995 	bl	8001d90 <LL_RCC_GetAHBPrescaler>
 8002a66:	4602      	mov	r2, r0
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 8002a6c:	f7ff f9b7 	bl	8001dde <LL_RCC_GetAPB1Prescaler>
 8002a70:	4602      	mov	r2, r0
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 8002a76:	f7ff f9be 	bl	8001df6 <LL_RCC_GetAPB2Prescaler>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 8002a80:	f7ff f992 	bl	8001da8 <LL_C2_RCC_GetAHBPrescaler>
 8002a84:	4602      	mov	r2, r0
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 8002a8a:	f7ff f99a 	bl	8001dc2 <LL_RCC_GetAHB4Prescaler>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002a94:	4b04      	ldr	r3, [pc, #16]	; (8002aa8 <HAL_RCC_GetClockConfig+0x60>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0207 	and.w	r2, r3, #7
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	601a      	str	r2, [r3, #0]
}
 8002aa0:	bf00      	nop
 8002aa2:	3708      	adds	r7, #8
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	58004000 	.word	0x58004000

08002aac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002aac:	b590      	push	{r4, r7, lr}
 8002aae:	b085      	sub	sp, #20
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2bb0      	cmp	r3, #176	; 0xb0
 8002ab8:	d903      	bls.n	8002ac2 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8002aba:	4b15      	ldr	r3, [pc, #84]	; (8002b10 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002abe:	60fb      	str	r3, [r7, #12]
 8002ac0:	e007      	b.n	8002ad2 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	091b      	lsrs	r3, r3, #4
 8002ac6:	f003 030f 	and.w	r3, r3, #15
 8002aca:	4a11      	ldr	r2, [pc, #68]	; (8002b10 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002acc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ad0:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8002ad2:	f7ff f976 	bl	8001dc2 <LL_RCC_GetAHB4Prescaler>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	091b      	lsrs	r3, r3, #4
 8002ada:	f003 030f 	and.w	r3, r3, #15
 8002ade:	4a0d      	ldr	r2, [pc, #52]	; (8002b14 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8002ae0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ae4:	68fa      	ldr	r2, [r7, #12]
 8002ae6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aea:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	4a0a      	ldr	r2, [pc, #40]	; (8002b18 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8002af0:	fba2 2303 	umull	r2, r3, r2, r3
 8002af4:	0c9c      	lsrs	r4, r3, #18
 8002af6:	f7fe feb7 	bl	8001868 <HAL_PWREx_GetVoltageRange>
 8002afa:	4603      	mov	r3, r0
 8002afc:	4619      	mov	r1, r3
 8002afe:	4620      	mov	r0, r4
 8002b00:	f000 f80c 	bl	8002b1c <RCC_SetFlashLatency>
 8002b04:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3714      	adds	r7, #20
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd90      	pop	{r4, r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	08007d2c 	.word	0x08007d2c
 8002b14:	08007ccc 	.word	0x08007ccc
 8002b18:	431bde83 	.word	0x431bde83

08002b1c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002b1c:	b590      	push	{r4, r7, lr}
 8002b1e:	b093      	sub	sp, #76	; 0x4c
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8002b26:	4b37      	ldr	r3, [pc, #220]	; (8002c04 <RCC_SetFlashLatency+0xe8>)
 8002b28:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002b2c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b2e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8002b32:	4a35      	ldr	r2, [pc, #212]	; (8002c08 <RCC_SetFlashLatency+0xec>)
 8002b34:	f107 031c 	add.w	r3, r7, #28
 8002b38:	ca07      	ldmia	r2, {r0, r1, r2}
 8002b3a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8002b3e:	4b33      	ldr	r3, [pc, #204]	; (8002c0c <RCC_SetFlashLatency+0xf0>)
 8002b40:	f107 040c 	add.w	r4, r7, #12
 8002b44:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b46:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b54:	d11a      	bne.n	8002b8c <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002b56:	2300      	movs	r3, #0
 8002b58:	643b      	str	r3, [r7, #64]	; 0x40
 8002b5a:	e013      	b.n	8002b84 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002b5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	3348      	adds	r3, #72	; 0x48
 8002b62:	443b      	add	r3, r7
 8002b64:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d807      	bhi.n	8002b7e <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002b6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	3348      	adds	r3, #72	; 0x48
 8002b74:	443b      	add	r3, r7
 8002b76:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002b7a:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002b7c:	e020      	b.n	8002bc0 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002b7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b80:	3301      	adds	r3, #1
 8002b82:	643b      	str	r3, [r7, #64]	; 0x40
 8002b84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b86:	2b03      	cmp	r3, #3
 8002b88:	d9e8      	bls.n	8002b5c <RCC_SetFlashLatency+0x40>
 8002b8a:	e019      	b.n	8002bc0 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b90:	e013      	b.n	8002bba <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002b92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	3348      	adds	r3, #72	; 0x48
 8002b98:	443b      	add	r3, r7
 8002b9a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d807      	bhi.n	8002bb4 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002ba4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	3348      	adds	r3, #72	; 0x48
 8002baa:	443b      	add	r3, r7
 8002bac:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002bb0:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002bb2:	e005      	b.n	8002bc0 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002bb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d9e8      	bls.n	8002b92 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8002bc0:	4b13      	ldr	r3, [pc, #76]	; (8002c10 <RCC_SetFlashLatency+0xf4>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f023 0207 	bic.w	r2, r3, #7
 8002bc8:	4911      	ldr	r1, [pc, #68]	; (8002c10 <RCC_SetFlashLatency+0xf4>)
 8002bca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002bd0:	f7fe f9c6 	bl	8000f60 <HAL_GetTick>
 8002bd4:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002bd6:	e008      	b.n	8002bea <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002bd8:	f7fe f9c2 	bl	8000f60 <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	d901      	bls.n	8002bea <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	e007      	b.n	8002bfa <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002bea:	4b09      	ldr	r3, [pc, #36]	; (8002c10 <RCC_SetFlashLatency+0xf4>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0307 	and.w	r3, r3, #7
 8002bf2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d1ef      	bne.n	8002bd8 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8002bf8:	2300      	movs	r3, #0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	374c      	adds	r7, #76	; 0x4c
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd90      	pop	{r4, r7, pc}
 8002c02:	bf00      	nop
 8002c04:	08007c88 	.word	0x08007c88
 8002c08:	08007c98 	.word	0x08007c98
 8002c0c:	08007ca4 	.word	0x08007ca4
 8002c10:	58004000 	.word	0x58004000

08002c14 <LL_RCC_LSE_IsEnabled>:
{
 8002c14:	b480      	push	{r7}
 8002c16:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8002c18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c20:	f003 0301 	and.w	r3, r3, #1
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d101      	bne.n	8002c2c <LL_RCC_LSE_IsEnabled+0x18>
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e000      	b.n	8002c2e <LL_RCC_LSE_IsEnabled+0x1a>
 8002c2c:	2300      	movs	r3, #0
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr

08002c38 <LL_RCC_LSE_IsReady>:
{
 8002c38:	b480      	push	{r7}
 8002c3a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002c3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c44:	f003 0302 	and.w	r3, r3, #2
 8002c48:	2b02      	cmp	r3, #2
 8002c4a:	d101      	bne.n	8002c50 <LL_RCC_LSE_IsReady+0x18>
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e000      	b.n	8002c52 <LL_RCC_LSE_IsReady+0x1a>
 8002c50:	2300      	movs	r3, #0
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr

08002c5c <LL_RCC_MSI_EnablePLLMode>:
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8002c60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c6a:	f043 0304 	orr.w	r3, r3, #4
 8002c6e:	6013      	str	r3, [r2, #0]
}
 8002c70:	bf00      	nop
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr

08002c7a <LL_RCC_SetRFWKPClockSource>:
{
 8002c7a:	b480      	push	{r7}
 8002c7c:	b083      	sub	sp, #12
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8002c82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c8a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c8e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002c9a:	bf00      	nop
 8002c9c:	370c      	adds	r7, #12
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr

08002ca6 <LL_RCC_SetSMPSClockSource>:
{
 8002ca6:	b480      	push	{r7}
 8002ca8:	b083      	sub	sp, #12
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8002cae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb4:	f023 0203 	bic.w	r2, r3, #3
 8002cb8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002cc2:	bf00      	nop
 8002cc4:	370c      	adds	r7, #12
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr

08002cce <LL_RCC_SetSMPSPrescaler>:
{
 8002cce:	b480      	push	{r7}
 8002cd0:	b083      	sub	sp, #12
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8002cd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cdc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002ce0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002cea:	bf00      	nop
 8002cec:	370c      	adds	r7, #12
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr

08002cf6 <LL_RCC_SetUSARTClockSource>:
{
 8002cf6:	b480      	push	{r7}
 8002cf8:	b083      	sub	sp, #12
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8002cfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d06:	f023 0203 	bic.w	r2, r3, #3
 8002d0a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002d16:	bf00      	nop
 8002d18:	370c      	adds	r7, #12
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr

08002d22 <LL_RCC_SetLPUARTClockSource>:
{
 8002d22:	b480      	push	{r7}
 8002d24:	b083      	sub	sp, #12
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002d2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d32:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002d36:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002d42:	bf00      	nop
 8002d44:	370c      	adds	r7, #12
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr

08002d4e <LL_RCC_SetI2CClockSource>:
{
 8002d4e:	b480      	push	{r7}
 8002d50:	b083      	sub	sp, #12
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002d56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d5a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	091b      	lsrs	r3, r3, #4
 8002d62:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002d66:	43db      	mvns	r3, r3
 8002d68:	401a      	ands	r2, r3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	011b      	lsls	r3, r3, #4
 8002d6e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002d72:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d76:	4313      	orrs	r3, r2
 8002d78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002d7c:	bf00      	nop
 8002d7e:	370c      	adds	r7, #12
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr

08002d88 <LL_RCC_SetLPTIMClockSource>:
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002d90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d94:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	0c1b      	lsrs	r3, r3, #16
 8002d9c:	041b      	lsls	r3, r3, #16
 8002d9e:	43db      	mvns	r3, r3
 8002da0:	401a      	ands	r2, r3
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	041b      	lsls	r3, r3, #16
 8002da6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002daa:	4313      	orrs	r3, r2
 8002dac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002db0:	bf00      	nop
 8002db2:	370c      	adds	r7, #12
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr

08002dbc <LL_RCC_SetSAIClockSource>:
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8002dc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dcc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002dd0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002ddc:	bf00      	nop
 8002dde:	370c      	adds	r7, #12
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr

08002de8 <LL_RCC_SetRNGClockSource>:
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002df0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002df4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002df8:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002dfc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002e08:	bf00      	nop
 8002e0a:	370c      	adds	r7, #12
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr

08002e14 <LL_RCC_SetCLK48ClockSource>:
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8002e1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e24:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e28:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002e34:	bf00      	nop
 8002e36:	370c      	adds	r7, #12
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr

08002e40 <LL_RCC_SetUSBClockSource>:
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	f7ff ffe3 	bl	8002e14 <LL_RCC_SetCLK48ClockSource>
}
 8002e4e:	bf00      	nop
 8002e50:	3708      	adds	r7, #8
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}

08002e56 <LL_RCC_SetADCClockSource>:
{
 8002e56:	b480      	push	{r7}
 8002e58:	b083      	sub	sp, #12
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002e5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e66:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002e6a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002e76:	bf00      	nop
 8002e78:	370c      	adds	r7, #12
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr

08002e82 <LL_RCC_SetRTCClockSource>:
{
 8002e82:	b480      	push	{r7}
 8002e84:	b083      	sub	sp, #12
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002e8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e92:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e96:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002ea2:	bf00      	nop
 8002ea4:	370c      	adds	r7, #12
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr

08002eae <LL_RCC_GetRTCClockSource>:
{
 8002eae:	b480      	push	{r7}
 8002eb0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002eb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eba:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr

08002ec8 <LL_RCC_ForceBackupDomainReset>:
{
 8002ec8:	b480      	push	{r7}
 8002eca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002ecc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ed4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ed8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002edc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002ee0:	bf00      	nop
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr

08002eea <LL_RCC_ReleaseBackupDomainReset>:
{
 8002eea:	b480      	push	{r7}
 8002eec:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002eee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ef6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002efa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002efe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002f02:	bf00      	nop
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr

08002f0c <LL_RCC_PLLSAI1_Enable>:
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002f10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f1a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002f1e:	6013      	str	r3, [r2, #0]
}
 8002f20:	bf00      	nop
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr

08002f2a <LL_RCC_PLLSAI1_Disable>:
{
 8002f2a:	b480      	push	{r7}
 8002f2c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002f2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f38:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002f3c:	6013      	str	r3, [r2, #0]
}
 8002f3e:	bf00      	nop
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr

08002f48 <LL_RCC_PLLSAI1_IsReady>:
{
 8002f48:	b480      	push	{r7}
 8002f4a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8002f4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f56:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f5a:	d101      	bne.n	8002f60 <LL_RCC_PLLSAI1_IsReady+0x18>
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e000      	b.n	8002f62 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8002f60:	2300      	movs	r3, #0
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr

08002f6c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b088      	sub	sp, #32
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8002f74:	2300      	movs	r3, #0
 8002f76:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002f78:	2300      	movs	r3, #0
 8002f7a:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d034      	beq.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002f90:	d021      	beq.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8002f92:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002f96:	d81b      	bhi.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002f98:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002f9c:	d01d      	beq.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8002f9e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002fa2:	d815      	bhi.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d00b      	beq.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8002fa8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fac:	d110      	bne.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8002fae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fbc:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8002fbe:	e00d      	b.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	3304      	adds	r3, #4
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f000 f94d 	bl	8003264 <RCCEx_PLLSAI1_ConfigNP>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002fce:	e005      	b.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	77fb      	strb	r3, [r7, #31]
        break;
 8002fd4:	e002      	b.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8002fd6:	bf00      	nop
 8002fd8:	e000      	b.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8002fda:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fdc:	7ffb      	ldrb	r3, [r7, #31]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d105      	bne.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f7ff fee8 	bl	8002dbc <LL_RCC_SetSAIClockSource>
 8002fec:	e001      	b.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fee:	7ffb      	ldrb	r3, [r7, #31]
 8002ff0:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d046      	beq.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8002ffe:	f7ff ff56 	bl	8002eae <LL_RCC_GetRTCClockSource>
 8003002:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003008:	69ba      	ldr	r2, [r7, #24]
 800300a:	429a      	cmp	r2, r3
 800300c:	d03c      	beq.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800300e:	f7fe fbc9 	bl	80017a4 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8003012:	69bb      	ldr	r3, [r7, #24]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d105      	bne.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301c:	4618      	mov	r0, r3
 800301e:	f7ff ff30 	bl	8002e82 <LL_RCC_SetRTCClockSource>
 8003022:	e02e      	b.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8003024:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003028:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800302c:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800302e:	f7ff ff4b 	bl	8002ec8 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8003032:	f7ff ff5a 	bl	8002eea <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003040:	4313      	orrs	r3, r2
 8003042:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8003044:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800304e:	f7ff fde1 	bl	8002c14 <LL_RCC_LSE_IsEnabled>
 8003052:	4603      	mov	r3, r0
 8003054:	2b01      	cmp	r3, #1
 8003056:	d114      	bne.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003058:	f7fd ff82 	bl	8000f60 <HAL_GetTick>
 800305c:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800305e:	e00b      	b.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003060:	f7fd ff7e 	bl	8000f60 <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	f241 3288 	movw	r2, #5000	; 0x1388
 800306e:	4293      	cmp	r3, r2
 8003070:	d902      	bls.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	77fb      	strb	r3, [r7, #31]
              break;
 8003076:	e004      	b.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8003078:	f7ff fdde 	bl	8002c38 <LL_RCC_LSE_IsReady>
 800307c:	4603      	mov	r3, r0
 800307e:	2b01      	cmp	r3, #1
 8003080:	d1ee      	bne.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8003082:	7ffb      	ldrb	r3, [r7, #31]
 8003084:	77bb      	strb	r3, [r7, #30]
 8003086:	e001      	b.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003088:	7ffb      	ldrb	r3, [r7, #31]
 800308a:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 0301 	and.w	r3, r3, #1
 8003094:	2b00      	cmp	r3, #0
 8003096:	d004      	beq.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	699b      	ldr	r3, [r3, #24]
 800309c:	4618      	mov	r0, r3
 800309e:	f7ff fe2a 	bl	8002cf6 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 0302 	and.w	r3, r3, #2
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d004      	beq.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	69db      	ldr	r3, [r3, #28]
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7ff fe35 	bl	8002d22 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0310 	and.w	r3, r3, #16
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d004      	beq.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c8:	4618      	mov	r0, r3
 80030ca:	f7ff fe5d 	bl	8002d88 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0320 	and.w	r3, r3, #32
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d004      	beq.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030de:	4618      	mov	r0, r3
 80030e0:	f7ff fe52 	bl	8002d88 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0304 	and.w	r3, r3, #4
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d004      	beq.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6a1b      	ldr	r3, [r3, #32]
 80030f4:	4618      	mov	r0, r3
 80030f6:	f7ff fe2a 	bl	8002d4e <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0308 	and.w	r3, r3, #8
 8003102:	2b00      	cmp	r3, #0
 8003104:	d004      	beq.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310a:	4618      	mov	r0, r3
 800310c:	f7ff fe1f 	bl	8002d4e <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003118:	2b00      	cmp	r3, #0
 800311a:	d022      	beq.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003120:	4618      	mov	r0, r3
 8003122:	f7ff fe8d 	bl	8002e40 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800312a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800312e:	d107      	bne.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8003130:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800313a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800313e:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003144:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003148:	d10b      	bne.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	3304      	adds	r3, #4
 800314e:	4618      	mov	r0, r3
 8003150:	f000 f8e3 	bl	800331a <RCCEx_PLLSAI1_ConfigNQ>
 8003154:	4603      	mov	r3, r0
 8003156:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003158:	7ffb      	ldrb	r3, [r7, #31]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d001      	beq.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800315e:	7ffb      	ldrb	r3, [r7, #31]
 8003160:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800316a:	2b00      	cmp	r3, #0
 800316c:	d02b      	beq.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003172:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003176:	d008      	beq.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800317c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003180:	d003      	beq.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003186:	2b00      	cmp	r3, #0
 8003188:	d105      	bne.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800318e:	4618      	mov	r0, r3
 8003190:	f7ff fe2a 	bl	8002de8 <LL_RCC_SetRNGClockSource>
 8003194:	e00a      	b.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x240>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800319a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800319e:	60fb      	str	r3, [r7, #12]
 80031a0:	2000      	movs	r0, #0
 80031a2:	f7ff fe21 	bl	8002de8 <LL_RCC_SetRNGClockSource>
 80031a6:	68f8      	ldr	r0, [r7, #12]
 80031a8:	f7ff fe34 	bl	8002e14 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031b0:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80031b4:	d107      	bne.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80031b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031c0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031c4:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d022      	beq.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031d6:	4618      	mov	r0, r3
 80031d8:	f7ff fe3d 	bl	8002e56 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031e4:	d107      	bne.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80031e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031f4:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80031fe:	d10b      	bne.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	3304      	adds	r3, #4
 8003204:	4618      	mov	r0, r3
 8003206:	f000 f8e3 	bl	80033d0 <RCCEx_PLLSAI1_ConfigNR>
 800320a:	4603      	mov	r3, r0
 800320c:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800320e:	7ffb      	ldrb	r3, [r7, #31]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d001      	beq.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8003214:	7ffb      	ldrb	r3, [r7, #31]
 8003216:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003220:	2b00      	cmp	r3, #0
 8003222:	d004      	beq.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003228:	4618      	mov	r0, r3
 800322a:	f7ff fd26 	bl	8002c7a <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d009      	beq.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800323e:	4618      	mov	r0, r3
 8003240:	f7ff fd45 	bl	8002cce <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003248:	4618      	mov	r0, r3
 800324a:	f7ff fd2c 	bl	8002ca6 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800324e:	7fbb      	ldrb	r3, [r7, #30]
}
 8003250:	4618      	mov	r0, r3
 8003252:	3720      	adds	r7, #32
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}

08003258 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 800325c:	f7ff fcfe 	bl	8002c5c <LL_RCC_MSI_EnablePLLMode>
}
 8003260:	bf00      	nop
 8003262:	bd80      	pop	{r7, pc}

08003264 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b084      	sub	sp, #16
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800326c:	2300      	movs	r3, #0
 800326e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003270:	f7ff fe5b 	bl	8002f2a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003274:	f7fd fe74 	bl	8000f60 <HAL_GetTick>
 8003278:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800327a:	e009      	b.n	8003290 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800327c:	f7fd fe70 	bl	8000f60 <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	2b02      	cmp	r3, #2
 8003288:	d902      	bls.n	8003290 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	73fb      	strb	r3, [r7, #15]
      break;
 800328e:	e004      	b.n	800329a <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003290:	f7ff fe5a 	bl	8002f48 <LL_RCC_PLLSAI1_IsReady>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d1f0      	bne.n	800327c <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800329a:	7bfb      	ldrb	r3, [r7, #15]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d137      	bne.n	8003310 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80032a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032a4:	691b      	ldr	r3, [r3, #16]
 80032a6:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	021b      	lsls	r3, r3, #8
 80032b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032b4:	4313      	orrs	r3, r2
 80032b6:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80032b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032bc:	691b      	ldr	r3, [r3, #16]
 80032be:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032ca:	4313      	orrs	r3, r2
 80032cc:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80032ce:	f7ff fe1d 	bl	8002f0c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032d2:	f7fd fe45 	bl	8000f60 <HAL_GetTick>
 80032d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80032d8:	e009      	b.n	80032ee <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80032da:	f7fd fe41 	bl	8000f60 <HAL_GetTick>
 80032de:	4602      	mov	r2, r0
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	2b02      	cmp	r3, #2
 80032e6:	d902      	bls.n	80032ee <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80032e8:	2303      	movs	r3, #3
 80032ea:	73fb      	strb	r3, [r7, #15]
        break;
 80032ec:	e004      	b.n	80032f8 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80032ee:	f7ff fe2b 	bl	8002f48 <LL_RCC_PLLSAI1_IsReady>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d1f0      	bne.n	80032da <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80032f8:	7bfb      	ldrb	r3, [r7, #15]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d108      	bne.n	8003310 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80032fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003302:	691a      	ldr	r2, [r3, #16]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	691b      	ldr	r3, [r3, #16]
 8003308:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800330c:	4313      	orrs	r3, r2
 800330e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003310:	7bfb      	ldrb	r3, [r7, #15]
}
 8003312:	4618      	mov	r0, r3
 8003314:	3710      	adds	r7, #16
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}

0800331a <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800331a:	b580      	push	{r7, lr}
 800331c:	b084      	sub	sp, #16
 800331e:	af00      	add	r7, sp, #0
 8003320:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003322:	2300      	movs	r3, #0
 8003324:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003326:	f7ff fe00 	bl	8002f2a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800332a:	f7fd fe19 	bl	8000f60 <HAL_GetTick>
 800332e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003330:	e009      	b.n	8003346 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003332:	f7fd fe15 	bl	8000f60 <HAL_GetTick>
 8003336:	4602      	mov	r2, r0
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	2b02      	cmp	r3, #2
 800333e:	d902      	bls.n	8003346 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8003340:	2303      	movs	r3, #3
 8003342:	73fb      	strb	r3, [r7, #15]
      break;
 8003344:	e004      	b.n	8003350 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003346:	f7ff fdff 	bl	8002f48 <LL_RCC_PLLSAI1_IsReady>
 800334a:	4603      	mov	r3, r0
 800334c:	2b00      	cmp	r3, #0
 800334e:	d1f0      	bne.n	8003332 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8003350:	7bfb      	ldrb	r3, [r7, #15]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d137      	bne.n	80033c6 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003356:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800335a:	691b      	ldr	r3, [r3, #16]
 800335c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	021b      	lsls	r3, r3, #8
 8003366:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800336a:	4313      	orrs	r3, r2
 800336c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800336e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003372:	691b      	ldr	r3, [r3, #16]
 8003374:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003380:	4313      	orrs	r3, r2
 8003382:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003384:	f7ff fdc2 	bl	8002f0c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003388:	f7fd fdea 	bl	8000f60 <HAL_GetTick>
 800338c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800338e:	e009      	b.n	80033a4 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003390:	f7fd fde6 	bl	8000f60 <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	2b02      	cmp	r3, #2
 800339c:	d902      	bls.n	80033a4 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	73fb      	strb	r3, [r7, #15]
        break;
 80033a2:	e004      	b.n	80033ae <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80033a4:	f7ff fdd0 	bl	8002f48 <LL_RCC_PLLSAI1_IsReady>
 80033a8:	4603      	mov	r3, r0
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d1f0      	bne.n	8003390 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80033ae:	7bfb      	ldrb	r3, [r7, #15]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d108      	bne.n	80033c6 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80033b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033b8:	691a      	ldr	r2, [r3, #16]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	691b      	ldr	r3, [r3, #16]
 80033be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033c2:	4313      	orrs	r3, r2
 80033c4:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80033c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3710      	adds	r7, #16
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b084      	sub	sp, #16
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80033d8:	2300      	movs	r3, #0
 80033da:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80033dc:	f7ff fda5 	bl	8002f2a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80033e0:	f7fd fdbe 	bl	8000f60 <HAL_GetTick>
 80033e4:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80033e6:	e009      	b.n	80033fc <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80033e8:	f7fd fdba 	bl	8000f60 <HAL_GetTick>
 80033ec:	4602      	mov	r2, r0
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	2b02      	cmp	r3, #2
 80033f4:	d902      	bls.n	80033fc <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	73fb      	strb	r3, [r7, #15]
      break;
 80033fa:	e004      	b.n	8003406 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80033fc:	f7ff fda4 	bl	8002f48 <LL_RCC_PLLSAI1_IsReady>
 8003400:	4603      	mov	r3, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	d1f0      	bne.n	80033e8 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8003406:	7bfb      	ldrb	r3, [r7, #15]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d137      	bne.n	800347c <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800340c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003410:	691b      	ldr	r3, [r3, #16]
 8003412:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	021b      	lsls	r3, r3, #8
 800341c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003420:	4313      	orrs	r3, r2
 8003422:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8003424:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003428:	691b      	ldr	r3, [r3, #16]
 800342a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003436:	4313      	orrs	r3, r2
 8003438:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800343a:	f7ff fd67 	bl	8002f0c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800343e:	f7fd fd8f 	bl	8000f60 <HAL_GetTick>
 8003442:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003444:	e009      	b.n	800345a <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003446:	f7fd fd8b 	bl	8000f60 <HAL_GetTick>
 800344a:	4602      	mov	r2, r0
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	1ad3      	subs	r3, r2, r3
 8003450:	2b02      	cmp	r3, #2
 8003452:	d902      	bls.n	800345a <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8003454:	2303      	movs	r3, #3
 8003456:	73fb      	strb	r3, [r7, #15]
        break;
 8003458:	e004      	b.n	8003464 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800345a:	f7ff fd75 	bl	8002f48 <LL_RCC_PLLSAI1_IsReady>
 800345e:	4603      	mov	r3, r0
 8003460:	2b01      	cmp	r3, #1
 8003462:	d1f0      	bne.n	8003446 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8003464:	7bfb      	ldrb	r3, [r7, #15]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d108      	bne.n	800347c <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800346a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800346e:	691a      	ldr	r2, [r3, #16]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	691b      	ldr	r3, [r3, #16]
 8003474:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003478:	4313      	orrs	r3, r2
 800347a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800347c:	7bfb      	ldrb	r3, [r7, #15]
}
 800347e:	4618      	mov	r0, r3
 8003480:	3710      	adds	r7, #16
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}

08003486 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003486:	b580      	push	{r7, lr}
 8003488:	b082      	sub	sp, #8
 800348a:	af00      	add	r7, sp, #0
 800348c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d101      	bne.n	8003498 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e049      	b.n	800352c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d106      	bne.n	80034b2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f000 f841 	bl	8003534 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2202      	movs	r2, #2
 80034b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	3304      	adds	r3, #4
 80034c2:	4619      	mov	r1, r3
 80034c4:	4610      	mov	r0, r2
 80034c6:	f000 f9d5 	bl	8003874 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2201      	movs	r2, #1
 80034ce:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2201      	movs	r2, #1
 80034d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2201      	movs	r2, #1
 80034de:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2201      	movs	r2, #1
 80034e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2201      	movs	r2, #1
 80034ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2201      	movs	r2, #1
 80034f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2201      	movs	r2, #1
 80034fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2201      	movs	r2, #1
 8003506:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2201      	movs	r2, #1
 800350e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2201      	movs	r2, #1
 8003516:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2201      	movs	r2, #1
 800351e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2201      	movs	r2, #1
 8003526:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800352a:	2300      	movs	r3, #0
}
 800352c:	4618      	mov	r0, r3
 800352e:	3708      	adds	r7, #8
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}

08003534 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800353c:	bf00      	nop
 800353e:	370c      	adds	r7, #12
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr

08003548 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003548:	b480      	push	{r7}
 800354a:	b085      	sub	sp, #20
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003556:	b2db      	uxtb	r3, r3
 8003558:	2b01      	cmp	r3, #1
 800355a:	d001      	beq.n	8003560 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e036      	b.n	80035ce <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2202      	movs	r2, #2
 8003564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	68da      	ldr	r2, [r3, #12]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f042 0201 	orr.w	r2, r2, #1
 8003576:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a17      	ldr	r2, [pc, #92]	; (80035dc <HAL_TIM_Base_Start_IT+0x94>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d004      	beq.n	800358c <HAL_TIM_Base_Start_IT+0x44>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800358a:	d115      	bne.n	80035b8 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	689a      	ldr	r2, [r3, #8]
 8003592:	4b13      	ldr	r3, [pc, #76]	; (80035e0 <HAL_TIM_Base_Start_IT+0x98>)
 8003594:	4013      	ands	r3, r2
 8003596:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2b06      	cmp	r3, #6
 800359c:	d015      	beq.n	80035ca <HAL_TIM_Base_Start_IT+0x82>
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035a4:	d011      	beq.n	80035ca <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f042 0201 	orr.w	r2, r2, #1
 80035b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035b6:	e008      	b.n	80035ca <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f042 0201 	orr.w	r2, r2, #1
 80035c6:	601a      	str	r2, [r3, #0]
 80035c8:	e000      	b.n	80035cc <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035ca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80035cc:	2300      	movs	r3, #0
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3714      	adds	r7, #20
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr
 80035da:	bf00      	nop
 80035dc:	40012c00 	.word	0x40012c00
 80035e0:	00010007 	.word	0x00010007

080035e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b082      	sub	sp, #8
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	691b      	ldr	r3, [r3, #16]
 80035f2:	f003 0302 	and.w	r3, r3, #2
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d122      	bne.n	8003640 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	f003 0302 	and.w	r3, r3, #2
 8003604:	2b02      	cmp	r3, #2
 8003606:	d11b      	bne.n	8003640 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f06f 0202 	mvn.w	r2, #2
 8003610:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2201      	movs	r2, #1
 8003616:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	699b      	ldr	r3, [r3, #24]
 800361e:	f003 0303 	and.w	r3, r3, #3
 8003622:	2b00      	cmp	r3, #0
 8003624:	d003      	beq.n	800362e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f000 f905 	bl	8003836 <HAL_TIM_IC_CaptureCallback>
 800362c:	e005      	b.n	800363a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f000 f8f7 	bl	8003822 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	f000 f908 	bl	800384a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2200      	movs	r2, #0
 800363e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	691b      	ldr	r3, [r3, #16]
 8003646:	f003 0304 	and.w	r3, r3, #4
 800364a:	2b04      	cmp	r3, #4
 800364c:	d122      	bne.n	8003694 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	f003 0304 	and.w	r3, r3, #4
 8003658:	2b04      	cmp	r3, #4
 800365a:	d11b      	bne.n	8003694 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f06f 0204 	mvn.w	r2, #4
 8003664:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2202      	movs	r2, #2
 800366a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	699b      	ldr	r3, [r3, #24]
 8003672:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003676:	2b00      	cmp	r3, #0
 8003678:	d003      	beq.n	8003682 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f000 f8db 	bl	8003836 <HAL_TIM_IC_CaptureCallback>
 8003680:	e005      	b.n	800368e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f000 f8cd 	bl	8003822 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f000 f8de 	bl	800384a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	691b      	ldr	r3, [r3, #16]
 800369a:	f003 0308 	and.w	r3, r3, #8
 800369e:	2b08      	cmp	r3, #8
 80036a0:	d122      	bne.n	80036e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	f003 0308 	and.w	r3, r3, #8
 80036ac:	2b08      	cmp	r3, #8
 80036ae:	d11b      	bne.n	80036e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f06f 0208 	mvn.w	r2, #8
 80036b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2204      	movs	r2, #4
 80036be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	69db      	ldr	r3, [r3, #28]
 80036c6:	f003 0303 	and.w	r3, r3, #3
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d003      	beq.n	80036d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f000 f8b1 	bl	8003836 <HAL_TIM_IC_CaptureCallback>
 80036d4:	e005      	b.n	80036e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f000 f8a3 	bl	8003822 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f000 f8b4 	bl	800384a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	691b      	ldr	r3, [r3, #16]
 80036ee:	f003 0310 	and.w	r3, r3, #16
 80036f2:	2b10      	cmp	r3, #16
 80036f4:	d122      	bne.n	800373c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	f003 0310 	and.w	r3, r3, #16
 8003700:	2b10      	cmp	r3, #16
 8003702:	d11b      	bne.n	800373c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f06f 0210 	mvn.w	r2, #16
 800370c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2208      	movs	r2, #8
 8003712:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	69db      	ldr	r3, [r3, #28]
 800371a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800371e:	2b00      	cmp	r3, #0
 8003720:	d003      	beq.n	800372a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f000 f887 	bl	8003836 <HAL_TIM_IC_CaptureCallback>
 8003728:	e005      	b.n	8003736 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f000 f879 	bl	8003822 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f000 f88a 	bl	800384a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	691b      	ldr	r3, [r3, #16]
 8003742:	f003 0301 	and.w	r3, r3, #1
 8003746:	2b01      	cmp	r3, #1
 8003748:	d10e      	bne.n	8003768 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	f003 0301 	and.w	r3, r3, #1
 8003754:	2b01      	cmp	r3, #1
 8003756:	d107      	bne.n	8003768 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f06f 0201 	mvn.w	r2, #1
 8003760:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f7fd f8aa 	bl	80008bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	691b      	ldr	r3, [r3, #16]
 800376e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003772:	2b80      	cmp	r3, #128	; 0x80
 8003774:	d10e      	bne.n	8003794 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003780:	2b80      	cmp	r3, #128	; 0x80
 8003782:	d107      	bne.n	8003794 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800378c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f000 f8de 	bl	8003950 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	691b      	ldr	r3, [r3, #16]
 800379a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800379e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037a2:	d10e      	bne.n	80037c2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037ae:	2b80      	cmp	r3, #128	; 0x80
 80037b0:	d107      	bne.n	80037c2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80037ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f000 f8d1 	bl	8003964 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	691b      	ldr	r3, [r3, #16]
 80037c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037cc:	2b40      	cmp	r3, #64	; 0x40
 80037ce:	d10e      	bne.n	80037ee <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	68db      	ldr	r3, [r3, #12]
 80037d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037da:	2b40      	cmp	r3, #64	; 0x40
 80037dc:	d107      	bne.n	80037ee <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80037e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f000 f838 	bl	800385e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	691b      	ldr	r3, [r3, #16]
 80037f4:	f003 0320 	and.w	r3, r3, #32
 80037f8:	2b20      	cmp	r3, #32
 80037fa:	d10e      	bne.n	800381a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	f003 0320 	and.w	r3, r3, #32
 8003806:	2b20      	cmp	r3, #32
 8003808:	d107      	bne.n	800381a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f06f 0220 	mvn.w	r2, #32
 8003812:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f000 f891 	bl	800393c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800381a:	bf00      	nop
 800381c:	3708      	adds	r7, #8
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}

08003822 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003822:	b480      	push	{r7}
 8003824:	b083      	sub	sp, #12
 8003826:	af00      	add	r7, sp, #0
 8003828:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800382a:	bf00      	nop
 800382c:	370c      	adds	r7, #12
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr

08003836 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003836:	b480      	push	{r7}
 8003838:	b083      	sub	sp, #12
 800383a:	af00      	add	r7, sp, #0
 800383c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800383e:	bf00      	nop
 8003840:	370c      	adds	r7, #12
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr

0800384a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800384a:	b480      	push	{r7}
 800384c:	b083      	sub	sp, #12
 800384e:	af00      	add	r7, sp, #0
 8003850:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003852:	bf00      	nop
 8003854:	370c      	adds	r7, #12
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr

0800385e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800385e:	b480      	push	{r7}
 8003860:	b083      	sub	sp, #12
 8003862:	af00      	add	r7, sp, #0
 8003864:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003866:	bf00      	nop
 8003868:	370c      	adds	r7, #12
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr
	...

08003874 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003874:	b480      	push	{r7}
 8003876:	b085      	sub	sp, #20
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	4a2a      	ldr	r2, [pc, #168]	; (8003930 <TIM_Base_SetConfig+0xbc>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d003      	beq.n	8003894 <TIM_Base_SetConfig+0x20>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003892:	d108      	bne.n	80038a6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800389a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	68fa      	ldr	r2, [r7, #12]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a21      	ldr	r2, [pc, #132]	; (8003930 <TIM_Base_SetConfig+0xbc>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d00b      	beq.n	80038c6 <TIM_Base_SetConfig+0x52>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038b4:	d007      	beq.n	80038c6 <TIM_Base_SetConfig+0x52>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a1e      	ldr	r2, [pc, #120]	; (8003934 <TIM_Base_SetConfig+0xc0>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d003      	beq.n	80038c6 <TIM_Base_SetConfig+0x52>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a1d      	ldr	r2, [pc, #116]	; (8003938 <TIM_Base_SetConfig+0xc4>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d108      	bne.n	80038d8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	68fa      	ldr	r2, [r7, #12]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	695b      	ldr	r3, [r3, #20]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	68fa      	ldr	r2, [r7, #12]
 80038ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	689a      	ldr	r2, [r3, #8]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	4a0c      	ldr	r2, [pc, #48]	; (8003930 <TIM_Base_SetConfig+0xbc>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d007      	beq.n	8003914 <TIM_Base_SetConfig+0xa0>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	4a0b      	ldr	r2, [pc, #44]	; (8003934 <TIM_Base_SetConfig+0xc0>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d003      	beq.n	8003914 <TIM_Base_SetConfig+0xa0>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	4a0a      	ldr	r2, [pc, #40]	; (8003938 <TIM_Base_SetConfig+0xc4>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d103      	bne.n	800391c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	691a      	ldr	r2, [r3, #16]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2201      	movs	r2, #1
 8003920:	615a      	str	r2, [r3, #20]
}
 8003922:	bf00      	nop
 8003924:	3714      	adds	r7, #20
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr
 800392e:	bf00      	nop
 8003930:	40012c00 	.word	0x40012c00
 8003934:	40014400 	.word	0x40014400
 8003938:	40014800 	.word	0x40014800

0800393c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003944:	bf00      	nop
 8003946:	370c      	adds	r7, #12
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr

08003950 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003958:	bf00      	nop
 800395a:	370c      	adds	r7, #12
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr

08003964 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003964:	b480      	push	{r7}
 8003966:	b083      	sub	sp, #12
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800396c:	bf00      	nop
 800396e:	370c      	adds	r7, #12
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr

08003978 <LL_RCC_GetUSARTClockSource>:
{
 8003978:	b480      	push	{r7}
 800397a:	b083      	sub	sp, #12
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8003980:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003984:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	4013      	ands	r3, r2
}
 800398c:	4618      	mov	r0, r3
 800398e:	370c      	adds	r7, #12
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr

08003998 <LL_RCC_GetLPUARTClockSource>:
{
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80039a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039a4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	4013      	ands	r3, r2
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	370c      	adds	r7, #12
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr

080039b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b082      	sub	sp, #8
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d101      	bne.n	80039ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e042      	b.n	8003a50 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d106      	bne.n	80039e2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f7fc ffeb 	bl	80009b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2224      	movs	r2, #36	; 0x24
 80039e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f022 0201 	bic.w	r2, r2, #1
 80039f8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f000 f82c 	bl	8003a58 <UART_SetConfig>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d101      	bne.n	8003a0a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e022      	b.n	8003a50 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d002      	beq.n	8003a18 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f000 fa46 	bl	8003ea4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	685a      	ldr	r2, [r3, #4]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a26:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	689a      	ldr	r2, [r3, #8]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a36:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f042 0201 	orr.w	r2, r2, #1
 8003a46:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f000 facd 	bl	8003fe8 <UART_CheckIdleState>
 8003a4e:	4603      	mov	r3, r0
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3708      	adds	r7, #8
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}

08003a58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a5c:	b08c      	sub	sp, #48	; 0x30
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003a62:	2300      	movs	r3, #0
 8003a64:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	689a      	ldr	r2, [r3, #8]
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	691b      	ldr	r3, [r3, #16]
 8003a70:	431a      	orrs	r2, r3
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	695b      	ldr	r3, [r3, #20]
 8003a76:	431a      	orrs	r2, r3
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	69db      	ldr	r3, [r3, #28]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	4baf      	ldr	r3, [pc, #700]	; (8003d44 <UART_SetConfig+0x2ec>)
 8003a88:	4013      	ands	r3, r2
 8003a8a:	697a      	ldr	r2, [r7, #20]
 8003a8c:	6812      	ldr	r2, [r2, #0]
 8003a8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a90:	430b      	orrs	r3, r1
 8003a92:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	68da      	ldr	r2, [r3, #12]
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	430a      	orrs	r2, r1
 8003aa8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	699b      	ldr	r3, [r3, #24]
 8003aae:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4aa4      	ldr	r2, [pc, #656]	; (8003d48 <UART_SetConfig+0x2f0>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d004      	beq.n	8003ac4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	6a1b      	ldr	r3, [r3, #32]
 8003abe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003ace:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003ad2:	697a      	ldr	r2, [r7, #20]
 8003ad4:	6812      	ldr	r2, [r2, #0]
 8003ad6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003ad8:	430b      	orrs	r3, r1
 8003ada:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae2:	f023 010f 	bic.w	r1, r3, #15
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	430a      	orrs	r2, r1
 8003af0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a95      	ldr	r2, [pc, #596]	; (8003d4c <UART_SetConfig+0x2f4>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d125      	bne.n	8003b48 <UART_SetConfig+0xf0>
 8003afc:	2003      	movs	r0, #3
 8003afe:	f7ff ff3b 	bl	8003978 <LL_RCC_GetUSARTClockSource>
 8003b02:	4603      	mov	r3, r0
 8003b04:	2b03      	cmp	r3, #3
 8003b06:	d81b      	bhi.n	8003b40 <UART_SetConfig+0xe8>
 8003b08:	a201      	add	r2, pc, #4	; (adr r2, 8003b10 <UART_SetConfig+0xb8>)
 8003b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b0e:	bf00      	nop
 8003b10:	08003b21 	.word	0x08003b21
 8003b14:	08003b31 	.word	0x08003b31
 8003b18:	08003b29 	.word	0x08003b29
 8003b1c:	08003b39 	.word	0x08003b39
 8003b20:	2301      	movs	r3, #1
 8003b22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b26:	e042      	b.n	8003bae <UART_SetConfig+0x156>
 8003b28:	2302      	movs	r3, #2
 8003b2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b2e:	e03e      	b.n	8003bae <UART_SetConfig+0x156>
 8003b30:	2304      	movs	r3, #4
 8003b32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b36:	e03a      	b.n	8003bae <UART_SetConfig+0x156>
 8003b38:	2308      	movs	r3, #8
 8003b3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b3e:	e036      	b.n	8003bae <UART_SetConfig+0x156>
 8003b40:	2310      	movs	r3, #16
 8003b42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b46:	e032      	b.n	8003bae <UART_SetConfig+0x156>
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a7e      	ldr	r2, [pc, #504]	; (8003d48 <UART_SetConfig+0x2f0>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d12a      	bne.n	8003ba8 <UART_SetConfig+0x150>
 8003b52:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8003b56:	f7ff ff1f 	bl	8003998 <LL_RCC_GetLPUARTClockSource>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b60:	d01a      	beq.n	8003b98 <UART_SetConfig+0x140>
 8003b62:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b66:	d81b      	bhi.n	8003ba0 <UART_SetConfig+0x148>
 8003b68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b6c:	d00c      	beq.n	8003b88 <UART_SetConfig+0x130>
 8003b6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b72:	d815      	bhi.n	8003ba0 <UART_SetConfig+0x148>
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d003      	beq.n	8003b80 <UART_SetConfig+0x128>
 8003b78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b7c:	d008      	beq.n	8003b90 <UART_SetConfig+0x138>
 8003b7e:	e00f      	b.n	8003ba0 <UART_SetConfig+0x148>
 8003b80:	2300      	movs	r3, #0
 8003b82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b86:	e012      	b.n	8003bae <UART_SetConfig+0x156>
 8003b88:	2302      	movs	r3, #2
 8003b8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b8e:	e00e      	b.n	8003bae <UART_SetConfig+0x156>
 8003b90:	2304      	movs	r3, #4
 8003b92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b96:	e00a      	b.n	8003bae <UART_SetConfig+0x156>
 8003b98:	2308      	movs	r3, #8
 8003b9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b9e:	e006      	b.n	8003bae <UART_SetConfig+0x156>
 8003ba0:	2310      	movs	r3, #16
 8003ba2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ba6:	e002      	b.n	8003bae <UART_SetConfig+0x156>
 8003ba8:	2310      	movs	r3, #16
 8003baa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a65      	ldr	r2, [pc, #404]	; (8003d48 <UART_SetConfig+0x2f0>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	f040 8097 	bne.w	8003ce8 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003bba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003bbe:	2b08      	cmp	r3, #8
 8003bc0:	d823      	bhi.n	8003c0a <UART_SetConfig+0x1b2>
 8003bc2:	a201      	add	r2, pc, #4	; (adr r2, 8003bc8 <UART_SetConfig+0x170>)
 8003bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bc8:	08003bed 	.word	0x08003bed
 8003bcc:	08003c0b 	.word	0x08003c0b
 8003bd0:	08003bf5 	.word	0x08003bf5
 8003bd4:	08003c0b 	.word	0x08003c0b
 8003bd8:	08003bfb 	.word	0x08003bfb
 8003bdc:	08003c0b 	.word	0x08003c0b
 8003be0:	08003c0b 	.word	0x08003c0b
 8003be4:	08003c0b 	.word	0x08003c0b
 8003be8:	08003c03 	.word	0x08003c03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bec:	f7fe ff00 	bl	80029f0 <HAL_RCC_GetPCLK1Freq>
 8003bf0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003bf2:	e010      	b.n	8003c16 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003bf4:	4b56      	ldr	r3, [pc, #344]	; (8003d50 <UART_SetConfig+0x2f8>)
 8003bf6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003bf8:	e00d      	b.n	8003c16 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bfa:	f7fe fe79 	bl	80028f0 <HAL_RCC_GetSysClockFreq>
 8003bfe:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003c00:	e009      	b.n	8003c16 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c06:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003c08:	e005      	b.n	8003c16 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003c14:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	f000 812a 	beq.w	8003e72 <UART_SetConfig+0x41a>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c22:	4a4c      	ldr	r2, [pc, #304]	; (8003d54 <UART_SetConfig+0x2fc>)
 8003c24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003c28:	461a      	mov	r2, r3
 8003c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003c30:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	685a      	ldr	r2, [r3, #4]
 8003c36:	4613      	mov	r3, r2
 8003c38:	005b      	lsls	r3, r3, #1
 8003c3a:	4413      	add	r3, r2
 8003c3c:	69ba      	ldr	r2, [r7, #24]
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d305      	bcc.n	8003c4e <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003c48:	69ba      	ldr	r2, [r7, #24]
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d903      	bls.n	8003c56 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003c54:	e10d      	b.n	8003e72 <UART_SetConfig+0x41a>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c58:	2200      	movs	r2, #0
 8003c5a:	60bb      	str	r3, [r7, #8]
 8003c5c:	60fa      	str	r2, [r7, #12]
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c62:	4a3c      	ldr	r2, [pc, #240]	; (8003d54 <UART_SetConfig+0x2fc>)
 8003c64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003c68:	b29b      	uxth	r3, r3
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	603b      	str	r3, [r7, #0]
 8003c6e:	607a      	str	r2, [r7, #4]
 8003c70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c74:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003c78:	f7fc fad2 	bl	8000220 <__aeabi_uldivmod>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	460b      	mov	r3, r1
 8003c80:	4610      	mov	r0, r2
 8003c82:	4619      	mov	r1, r3
 8003c84:	f04f 0200 	mov.w	r2, #0
 8003c88:	f04f 0300 	mov.w	r3, #0
 8003c8c:	020b      	lsls	r3, r1, #8
 8003c8e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003c92:	0202      	lsls	r2, r0, #8
 8003c94:	6979      	ldr	r1, [r7, #20]
 8003c96:	6849      	ldr	r1, [r1, #4]
 8003c98:	0849      	lsrs	r1, r1, #1
 8003c9a:	2000      	movs	r0, #0
 8003c9c:	460c      	mov	r4, r1
 8003c9e:	4605      	mov	r5, r0
 8003ca0:	eb12 0804 	adds.w	r8, r2, r4
 8003ca4:	eb43 0905 	adc.w	r9, r3, r5
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	2200      	movs	r2, #0
 8003cae:	469a      	mov	sl, r3
 8003cb0:	4693      	mov	fp, r2
 8003cb2:	4652      	mov	r2, sl
 8003cb4:	465b      	mov	r3, fp
 8003cb6:	4640      	mov	r0, r8
 8003cb8:	4649      	mov	r1, r9
 8003cba:	f7fc fab1 	bl	8000220 <__aeabi_uldivmod>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	460b      	mov	r3, r1
 8003cc2:	4613      	mov	r3, r2
 8003cc4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003cc6:	6a3b      	ldr	r3, [r7, #32]
 8003cc8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ccc:	d308      	bcc.n	8003ce0 <UART_SetConfig+0x288>
 8003cce:	6a3b      	ldr	r3, [r7, #32]
 8003cd0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003cd4:	d204      	bcs.n	8003ce0 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	6a3a      	ldr	r2, [r7, #32]
 8003cdc:	60da      	str	r2, [r3, #12]
 8003cde:	e0c8      	b.n	8003e72 <UART_SetConfig+0x41a>
        }
        else
        {
          ret = HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003ce6:	e0c4      	b.n	8003e72 <UART_SetConfig+0x41a>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	69db      	ldr	r3, [r3, #28]
 8003cec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cf0:	d16d      	bne.n	8003dce <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8003cf2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003cf6:	3b01      	subs	r3, #1
 8003cf8:	2b07      	cmp	r3, #7
 8003cfa:	d82d      	bhi.n	8003d58 <UART_SetConfig+0x300>
 8003cfc:	a201      	add	r2, pc, #4	; (adr r2, 8003d04 <UART_SetConfig+0x2ac>)
 8003cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d02:	bf00      	nop
 8003d04:	08003d25 	.word	0x08003d25
 8003d08:	08003d2d 	.word	0x08003d2d
 8003d0c:	08003d59 	.word	0x08003d59
 8003d10:	08003d33 	.word	0x08003d33
 8003d14:	08003d59 	.word	0x08003d59
 8003d18:	08003d59 	.word	0x08003d59
 8003d1c:	08003d59 	.word	0x08003d59
 8003d20:	08003d3b 	.word	0x08003d3b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d24:	f7fe fe7a 	bl	8002a1c <HAL_RCC_GetPCLK2Freq>
 8003d28:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003d2a:	e01b      	b.n	8003d64 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d2c:	4b08      	ldr	r3, [pc, #32]	; (8003d50 <UART_SetConfig+0x2f8>)
 8003d2e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003d30:	e018      	b.n	8003d64 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d32:	f7fe fddd 	bl	80028f0 <HAL_RCC_GetSysClockFreq>
 8003d36:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003d38:	e014      	b.n	8003d64 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d3e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003d40:	e010      	b.n	8003d64 <UART_SetConfig+0x30c>
 8003d42:	bf00      	nop
 8003d44:	cfff69f3 	.word	0xcfff69f3
 8003d48:	40008000 	.word	0x40008000
 8003d4c:	40013800 	.word	0x40013800
 8003d50:	00f42400 	.word	0x00f42400
 8003d54:	08007d6c 	.word	0x08007d6c
      default:
        pclk = 0U;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003d62:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	f000 8083 	beq.w	8003e72 <UART_SetConfig+0x41a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d70:	4a4a      	ldr	r2, [pc, #296]	; (8003e9c <UART_SetConfig+0x444>)
 8003d72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003d76:	461a      	mov	r2, r3
 8003d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7a:	fbb3 f3f2 	udiv	r3, r3, r2
 8003d7e:	005a      	lsls	r2, r3, #1
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	085b      	lsrs	r3, r3, #1
 8003d86:	441a      	add	r2, r3
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d90:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d92:	6a3b      	ldr	r3, [r7, #32]
 8003d94:	2b0f      	cmp	r3, #15
 8003d96:	d916      	bls.n	8003dc6 <UART_SetConfig+0x36e>
 8003d98:	6a3b      	ldr	r3, [r7, #32]
 8003d9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d9e:	d212      	bcs.n	8003dc6 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003da0:	6a3b      	ldr	r3, [r7, #32]
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	f023 030f 	bic.w	r3, r3, #15
 8003da8:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003daa:	6a3b      	ldr	r3, [r7, #32]
 8003dac:	085b      	lsrs	r3, r3, #1
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	f003 0307 	and.w	r3, r3, #7
 8003db4:	b29a      	uxth	r2, r3
 8003db6:	8bfb      	ldrh	r3, [r7, #30]
 8003db8:	4313      	orrs	r3, r2
 8003dba:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	8bfa      	ldrh	r2, [r7, #30]
 8003dc2:	60da      	str	r2, [r3, #12]
 8003dc4:	e055      	b.n	8003e72 <UART_SetConfig+0x41a>
      }
      else
      {
        ret = HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003dcc:	e051      	b.n	8003e72 <UART_SetConfig+0x41a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003dce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003dd2:	3b01      	subs	r3, #1
 8003dd4:	2b07      	cmp	r3, #7
 8003dd6:	d822      	bhi.n	8003e1e <UART_SetConfig+0x3c6>
 8003dd8:	a201      	add	r2, pc, #4	; (adr r2, 8003de0 <UART_SetConfig+0x388>)
 8003dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dde:	bf00      	nop
 8003de0:	08003e01 	.word	0x08003e01
 8003de4:	08003e09 	.word	0x08003e09
 8003de8:	08003e1f 	.word	0x08003e1f
 8003dec:	08003e0f 	.word	0x08003e0f
 8003df0:	08003e1f 	.word	0x08003e1f
 8003df4:	08003e1f 	.word	0x08003e1f
 8003df8:	08003e1f 	.word	0x08003e1f
 8003dfc:	08003e17 	.word	0x08003e17
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e00:	f7fe fe0c 	bl	8002a1c <HAL_RCC_GetPCLK2Freq>
 8003e04:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003e06:	e010      	b.n	8003e2a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e08:	4b25      	ldr	r3, [pc, #148]	; (8003ea0 <UART_SetConfig+0x448>)
 8003e0a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003e0c:	e00d      	b.n	8003e2a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e0e:	f7fe fd6f 	bl	80028f0 <HAL_RCC_GetSysClockFreq>
 8003e12:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003e14:	e009      	b.n	8003e2a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e1a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003e1c:	e005      	b.n	8003e2a <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003e28:	bf00      	nop
    }

    if (pclk != 0U)
 8003e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d020      	beq.n	8003e72 <UART_SetConfig+0x41a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e34:	4a19      	ldr	r2, [pc, #100]	; (8003e9c <UART_SetConfig+0x444>)
 8003e36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3e:	fbb3 f2f2 	udiv	r2, r3, r2
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	085b      	lsrs	r3, r3, #1
 8003e48:	441a      	add	r2, r3
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e52:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e54:	6a3b      	ldr	r3, [r7, #32]
 8003e56:	2b0f      	cmp	r3, #15
 8003e58:	d908      	bls.n	8003e6c <UART_SetConfig+0x414>
 8003e5a:	6a3b      	ldr	r3, [r7, #32]
 8003e5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e60:	d204      	bcs.n	8003e6c <UART_SetConfig+0x414>
      {
        huart->Instance->BRR = usartdiv;
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	6a3a      	ldr	r2, [r7, #32]
 8003e68:	60da      	str	r2, [r3, #12]
 8003e6a:	e002      	b.n	8003e72 <UART_SetConfig+0x41a>
      }
      else
      {
        ret = HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	2201      	movs	r2, #1
 8003e76:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	2200      	movs	r2, #0
 8003e86:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003e8e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3730      	adds	r7, #48	; 0x30
 8003e96:	46bd      	mov	sp, r7
 8003e98:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e9c:	08007d6c 	.word	0x08007d6c
 8003ea0:	00f42400 	.word	0x00f42400

08003ea4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b083      	sub	sp, #12
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb0:	f003 0301 	and.w	r3, r3, #1
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d00a      	beq.n	8003ece <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	430a      	orrs	r2, r1
 8003ecc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ed2:	f003 0302 	and.w	r3, r3, #2
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d00a      	beq.n	8003ef0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	430a      	orrs	r2, r1
 8003eee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef4:	f003 0304 	and.w	r3, r3, #4
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d00a      	beq.n	8003f12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	430a      	orrs	r2, r1
 8003f10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f16:	f003 0308 	and.w	r3, r3, #8
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d00a      	beq.n	8003f34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	430a      	orrs	r2, r1
 8003f32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f38:	f003 0310 	and.w	r3, r3, #16
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d00a      	beq.n	8003f56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	430a      	orrs	r2, r1
 8003f54:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f5a:	f003 0320 	and.w	r3, r3, #32
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d00a      	beq.n	8003f78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	430a      	orrs	r2, r1
 8003f76:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d01a      	beq.n	8003fba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	430a      	orrs	r2, r1
 8003f98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fa2:	d10a      	bne.n	8003fba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	430a      	orrs	r2, r1
 8003fb8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d00a      	beq.n	8003fdc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	430a      	orrs	r2, r1
 8003fda:	605a      	str	r2, [r3, #4]
  }
}
 8003fdc:	bf00      	nop
 8003fde:	370c      	adds	r7, #12
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr

08003fe8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b086      	sub	sp, #24
 8003fec:	af02      	add	r7, sp, #8
 8003fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003ff8:	f7fc ffb2 	bl	8000f60 <HAL_GetTick>
 8003ffc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 0308 	and.w	r3, r3, #8
 8004008:	2b08      	cmp	r3, #8
 800400a:	d10e      	bne.n	800402a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800400c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004010:	9300      	str	r3, [sp, #0]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2200      	movs	r2, #0
 8004016:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f000 f82f 	bl	800407e <UART_WaitOnFlagUntilTimeout>
 8004020:	4603      	mov	r3, r0
 8004022:	2b00      	cmp	r3, #0
 8004024:	d001      	beq.n	800402a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	e025      	b.n	8004076 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 0304 	and.w	r3, r3, #4
 8004034:	2b04      	cmp	r3, #4
 8004036:	d10e      	bne.n	8004056 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004038:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800403c:	9300      	str	r3, [sp, #0]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2200      	movs	r2, #0
 8004042:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f000 f819 	bl	800407e <UART_WaitOnFlagUntilTimeout>
 800404c:	4603      	mov	r3, r0
 800404e:	2b00      	cmp	r3, #0
 8004050:	d001      	beq.n	8004056 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e00f      	b.n	8004076 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2220      	movs	r2, #32
 800405a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2220      	movs	r2, #32
 8004062:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2200      	movs	r2, #0
 800406a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004074:	2300      	movs	r3, #0
}
 8004076:	4618      	mov	r0, r3
 8004078:	3710      	adds	r7, #16
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}

0800407e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800407e:	b580      	push	{r7, lr}
 8004080:	b09c      	sub	sp, #112	; 0x70
 8004082:	af00      	add	r7, sp, #0
 8004084:	60f8      	str	r0, [r7, #12]
 8004086:	60b9      	str	r1, [r7, #8]
 8004088:	603b      	str	r3, [r7, #0]
 800408a:	4613      	mov	r3, r2
 800408c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800408e:	e0a9      	b.n	80041e4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004090:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004092:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004096:	f000 80a5 	beq.w	80041e4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800409a:	f7fc ff61 	bl	8000f60 <HAL_GetTick>
 800409e:	4602      	mov	r2, r0
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	1ad3      	subs	r3, r2, r3
 80040a4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d302      	bcc.n	80040b0 <UART_WaitOnFlagUntilTimeout+0x32>
 80040aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d140      	bne.n	8004132 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040b8:	e853 3f00 	ldrex	r3, [r3]
 80040bc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80040be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040c0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80040c4:	667b      	str	r3, [r7, #100]	; 0x64
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	461a      	mov	r2, r3
 80040cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80040ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80040d0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040d2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80040d4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80040d6:	e841 2300 	strex	r3, r2, [r1]
 80040da:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80040dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d1e6      	bne.n	80040b0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	3308      	adds	r3, #8
 80040e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040ec:	e853 3f00 	ldrex	r3, [r3]
 80040f0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80040f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040f4:	f023 0301 	bic.w	r3, r3, #1
 80040f8:	663b      	str	r3, [r7, #96]	; 0x60
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	3308      	adds	r3, #8
 8004100:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004102:	64ba      	str	r2, [r7, #72]	; 0x48
 8004104:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004106:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004108:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800410a:	e841 2300 	strex	r3, r2, [r1]
 800410e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004110:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004112:	2b00      	cmp	r3, #0
 8004114:	d1e5      	bne.n	80040e2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2220      	movs	r2, #32
 800411a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2220      	movs	r2, #32
 8004122:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2200      	movs	r2, #0
 800412a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800412e:	2303      	movs	r3, #3
 8004130:	e069      	b.n	8004206 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 0304 	and.w	r3, r3, #4
 800413c:	2b00      	cmp	r3, #0
 800413e:	d051      	beq.n	80041e4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	69db      	ldr	r3, [r3, #28]
 8004146:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800414a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800414e:	d149      	bne.n	80041e4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004158:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004162:	e853 3f00 	ldrex	r3, [r3]
 8004166:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800416e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	461a      	mov	r2, r3
 8004176:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004178:	637b      	str	r3, [r7, #52]	; 0x34
 800417a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800417c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800417e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004180:	e841 2300 	strex	r3, r2, [r1]
 8004184:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004188:	2b00      	cmp	r3, #0
 800418a:	d1e6      	bne.n	800415a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	3308      	adds	r3, #8
 8004192:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	e853 3f00 	ldrex	r3, [r3]
 800419a:	613b      	str	r3, [r7, #16]
   return(result);
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	f023 0301 	bic.w	r3, r3, #1
 80041a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	3308      	adds	r3, #8
 80041aa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80041ac:	623a      	str	r2, [r7, #32]
 80041ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b0:	69f9      	ldr	r1, [r7, #28]
 80041b2:	6a3a      	ldr	r2, [r7, #32]
 80041b4:	e841 2300 	strex	r3, r2, [r1]
 80041b8:	61bb      	str	r3, [r7, #24]
   return(result);
 80041ba:	69bb      	ldr	r3, [r7, #24]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d1e5      	bne.n	800418c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2220      	movs	r2, #32
 80041c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2220      	movs	r2, #32
 80041cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2220      	movs	r2, #32
 80041d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2200      	movs	r2, #0
 80041dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80041e0:	2303      	movs	r3, #3
 80041e2:	e010      	b.n	8004206 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	69da      	ldr	r2, [r3, #28]
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	4013      	ands	r3, r2
 80041ee:	68ba      	ldr	r2, [r7, #8]
 80041f0:	429a      	cmp	r2, r3
 80041f2:	bf0c      	ite	eq
 80041f4:	2301      	moveq	r3, #1
 80041f6:	2300      	movne	r3, #0
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	461a      	mov	r2, r3
 80041fc:	79fb      	ldrb	r3, [r7, #7]
 80041fe:	429a      	cmp	r2, r3
 8004200:	f43f af46 	beq.w	8004090 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004204:	2300      	movs	r3, #0
}
 8004206:	4618      	mov	r0, r3
 8004208:	3770      	adds	r7, #112	; 0x70
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}

0800420e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800420e:	b480      	push	{r7}
 8004210:	b085      	sub	sp, #20
 8004212:	af00      	add	r7, sp, #0
 8004214:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004216:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800421a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004222:	b29a      	uxth	r2, r3
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	b29b      	uxth	r3, r3
 8004228:	43db      	mvns	r3, r3
 800422a:	b29b      	uxth	r3, r3
 800422c:	4013      	ands	r3, r2
 800422e:	b29a      	uxth	r2, r3
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004236:	2300      	movs	r3, #0
}
 8004238:	4618      	mov	r0, r3
 800423a:	3714      	adds	r7, #20
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr

08004244 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004244:	b084      	sub	sp, #16
 8004246:	b480      	push	{r7}
 8004248:	b083      	sub	sp, #12
 800424a:	af00      	add	r7, sp, #0
 800424c:	6078      	str	r0, [r7, #4]
 800424e:	f107 0014 	add.w	r0, r7, #20
 8004252:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2201      	movs	r2, #1
 800425a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2200      	movs	r2, #0
 8004262:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2200      	movs	r2, #0
 800426a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2200      	movs	r2, #0
 8004272:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004276:	2300      	movs	r3, #0
}
 8004278:	4618      	mov	r0, r3
 800427a:	370c      	adds	r7, #12
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	b004      	add	sp, #16
 8004284:	4770      	bx	lr
	...

08004288 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004288:	b580      	push	{r7, lr}
 800428a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800428c:	4b05      	ldr	r3, [pc, #20]	; (80042a4 <SysTick_Handler+0x1c>)
 800428e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004290:	f001 fbae 	bl	80059f0 <xTaskGetSchedulerState>
 8004294:	4603      	mov	r3, r0
 8004296:	2b01      	cmp	r3, #1
 8004298:	d001      	beq.n	800429e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800429a:	f002 f9f5 	bl	8006688 <xPortSysTickHandler>
  }
}
 800429e:	bf00      	nop
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	bf00      	nop
 80042a4:	e000e010 	.word	0xe000e010

080042a8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80042a8:	b480      	push	{r7}
 80042aa:	b085      	sub	sp, #20
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	60f8      	str	r0, [r7, #12]
 80042b0:	60b9      	str	r1, [r7, #8]
 80042b2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	4a07      	ldr	r2, [pc, #28]	; (80042d4 <vApplicationGetIdleTaskMemory+0x2c>)
 80042b8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	4a06      	ldr	r2, [pc, #24]	; (80042d8 <vApplicationGetIdleTaskMemory+0x30>)
 80042be:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2280      	movs	r2, #128	; 0x80
 80042c4:	601a      	str	r2, [r3, #0]
}
 80042c6:	bf00      	nop
 80042c8:	3714      	adds	r7, #20
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr
 80042d2:	bf00      	nop
 80042d4:	2000048c 	.word	0x2000048c
 80042d8:	20000548 	.word	0x20000548

080042dc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80042dc:	b480      	push	{r7}
 80042de:	b085      	sub	sp, #20
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	60f8      	str	r0, [r7, #12]
 80042e4:	60b9      	str	r1, [r7, #8]
 80042e6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	4a07      	ldr	r2, [pc, #28]	; (8004308 <vApplicationGetTimerTaskMemory+0x2c>)
 80042ec:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	4a06      	ldr	r2, [pc, #24]	; (800430c <vApplicationGetTimerTaskMemory+0x30>)
 80042f2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80042fa:	601a      	str	r2, [r3, #0]
}
 80042fc:	bf00      	nop
 80042fe:	3714      	adds	r7, #20
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr
 8004308:	20000748 	.word	0x20000748
 800430c:	20000804 	.word	0x20000804

08004310 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004310:	b480      	push	{r7}
 8004312:	b083      	sub	sp, #12
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f103 0208 	add.w	r2, r3, #8
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f04f 32ff 	mov.w	r2, #4294967295
 8004328:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	f103 0208 	add.w	r2, r3, #8
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	f103 0208 	add.w	r2, r3, #8
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2200      	movs	r2, #0
 8004342:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004344:	bf00      	nop
 8004346:	370c      	adds	r7, #12
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr

08004350 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004350:	b480      	push	{r7}
 8004352:	b083      	sub	sp, #12
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2200      	movs	r2, #0
 800435c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800435e:	bf00      	nop
 8004360:	370c      	adds	r7, #12
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr

0800436a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800436a:	b480      	push	{r7}
 800436c:	b085      	sub	sp, #20
 800436e:	af00      	add	r7, sp, #0
 8004370:	6078      	str	r0, [r7, #4]
 8004372:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	68fa      	ldr	r2, [r7, #12]
 800437e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	689a      	ldr	r2, [r3, #8]
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	683a      	ldr	r2, [r7, #0]
 800438e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	683a      	ldr	r2, [r7, #0]
 8004394:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	687a      	ldr	r2, [r7, #4]
 800439a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	1c5a      	adds	r2, r3, #1
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	601a      	str	r2, [r3, #0]
}
 80043a6:	bf00      	nop
 80043a8:	3714      	adds	r7, #20
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr

080043b2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80043b2:	b480      	push	{r7}
 80043b4:	b085      	sub	sp, #20
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	6078      	str	r0, [r7, #4]
 80043ba:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043c8:	d103      	bne.n	80043d2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	691b      	ldr	r3, [r3, #16]
 80043ce:	60fb      	str	r3, [r7, #12]
 80043d0:	e00c      	b.n	80043ec <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	3308      	adds	r3, #8
 80043d6:	60fb      	str	r3, [r7, #12]
 80043d8:	e002      	b.n	80043e0 <vListInsert+0x2e>
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	60fb      	str	r3, [r7, #12]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	68ba      	ldr	r2, [r7, #8]
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d2f6      	bcs.n	80043da <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	685a      	ldr	r2, [r3, #4]
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	683a      	ldr	r2, [r7, #0]
 80043fa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	68fa      	ldr	r2, [r7, #12]
 8004400:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	683a      	ldr	r2, [r7, #0]
 8004406:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	687a      	ldr	r2, [r7, #4]
 800440c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	1c5a      	adds	r2, r3, #1
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	601a      	str	r2, [r3, #0]
}
 8004418:	bf00      	nop
 800441a:	3714      	adds	r7, #20
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004424:	b480      	push	{r7}
 8004426:	b085      	sub	sp, #20
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	691b      	ldr	r3, [r3, #16]
 8004430:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	687a      	ldr	r2, [r7, #4]
 8004438:	6892      	ldr	r2, [r2, #8]
 800443a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	6852      	ldr	r2, [r2, #4]
 8004444:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	429a      	cmp	r2, r3
 800444e:	d103      	bne.n	8004458 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	689a      	ldr	r2, [r3, #8]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2200      	movs	r2, #0
 800445c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	1e5a      	subs	r2, r3, #1
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
}
 800446c:	4618      	mov	r0, r3
 800446e:	3714      	adds	r7, #20
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr

08004478 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b084      	sub	sp, #16
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
 8004480:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d10a      	bne.n	80044a2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800448c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004490:	f383 8811 	msr	BASEPRI, r3
 8004494:	f3bf 8f6f 	isb	sy
 8004498:	f3bf 8f4f 	dsb	sy
 800449c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800449e:	bf00      	nop
 80044a0:	e7fe      	b.n	80044a0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80044a2:	f002 f85f 	bl	8006564 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044ae:	68f9      	ldr	r1, [r7, #12]
 80044b0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80044b2:	fb01 f303 	mul.w	r3, r1, r3
 80044b6:	441a      	add	r2, r3
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2200      	movs	r2, #0
 80044c0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044d2:	3b01      	subs	r3, #1
 80044d4:	68f9      	ldr	r1, [r7, #12]
 80044d6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80044d8:	fb01 f303 	mul.w	r3, r1, r3
 80044dc:	441a      	add	r2, r3
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	22ff      	movs	r2, #255	; 0xff
 80044e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	22ff      	movs	r2, #255	; 0xff
 80044ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d114      	bne.n	8004522 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	691b      	ldr	r3, [r3, #16]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d01a      	beq.n	8004536 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	3310      	adds	r3, #16
 8004504:	4618      	mov	r0, r3
 8004506:	f001 f8b1 	bl	800566c <xTaskRemoveFromEventList>
 800450a:	4603      	mov	r3, r0
 800450c:	2b00      	cmp	r3, #0
 800450e:	d012      	beq.n	8004536 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004510:	4b0c      	ldr	r3, [pc, #48]	; (8004544 <xQueueGenericReset+0xcc>)
 8004512:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004516:	601a      	str	r2, [r3, #0]
 8004518:	f3bf 8f4f 	dsb	sy
 800451c:	f3bf 8f6f 	isb	sy
 8004520:	e009      	b.n	8004536 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	3310      	adds	r3, #16
 8004526:	4618      	mov	r0, r3
 8004528:	f7ff fef2 	bl	8004310 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	3324      	adds	r3, #36	; 0x24
 8004530:	4618      	mov	r0, r3
 8004532:	f7ff feed 	bl	8004310 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004536:	f002 f845 	bl	80065c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800453a:	2301      	movs	r3, #1
}
 800453c:	4618      	mov	r0, r3
 800453e:	3710      	adds	r7, #16
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}
 8004544:	e000ed04 	.word	0xe000ed04

08004548 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004548:	b580      	push	{r7, lr}
 800454a:	b08e      	sub	sp, #56	; 0x38
 800454c:	af02      	add	r7, sp, #8
 800454e:	60f8      	str	r0, [r7, #12]
 8004550:	60b9      	str	r1, [r7, #8]
 8004552:	607a      	str	r2, [r7, #4]
 8004554:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d10a      	bne.n	8004572 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800455c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004560:	f383 8811 	msr	BASEPRI, r3
 8004564:	f3bf 8f6f 	isb	sy
 8004568:	f3bf 8f4f 	dsb	sy
 800456c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800456e:	bf00      	nop
 8004570:	e7fe      	b.n	8004570 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d10a      	bne.n	800458e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800457c:	f383 8811 	msr	BASEPRI, r3
 8004580:	f3bf 8f6f 	isb	sy
 8004584:	f3bf 8f4f 	dsb	sy
 8004588:	627b      	str	r3, [r7, #36]	; 0x24
}
 800458a:	bf00      	nop
 800458c:	e7fe      	b.n	800458c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d002      	beq.n	800459a <xQueueGenericCreateStatic+0x52>
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d001      	beq.n	800459e <xQueueGenericCreateStatic+0x56>
 800459a:	2301      	movs	r3, #1
 800459c:	e000      	b.n	80045a0 <xQueueGenericCreateStatic+0x58>
 800459e:	2300      	movs	r3, #0
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d10a      	bne.n	80045ba <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80045a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045a8:	f383 8811 	msr	BASEPRI, r3
 80045ac:	f3bf 8f6f 	isb	sy
 80045b0:	f3bf 8f4f 	dsb	sy
 80045b4:	623b      	str	r3, [r7, #32]
}
 80045b6:	bf00      	nop
 80045b8:	e7fe      	b.n	80045b8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d102      	bne.n	80045c6 <xQueueGenericCreateStatic+0x7e>
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d101      	bne.n	80045ca <xQueueGenericCreateStatic+0x82>
 80045c6:	2301      	movs	r3, #1
 80045c8:	e000      	b.n	80045cc <xQueueGenericCreateStatic+0x84>
 80045ca:	2300      	movs	r3, #0
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d10a      	bne.n	80045e6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80045d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045d4:	f383 8811 	msr	BASEPRI, r3
 80045d8:	f3bf 8f6f 	isb	sy
 80045dc:	f3bf 8f4f 	dsb	sy
 80045e0:	61fb      	str	r3, [r7, #28]
}
 80045e2:	bf00      	nop
 80045e4:	e7fe      	b.n	80045e4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80045e6:	2350      	movs	r3, #80	; 0x50
 80045e8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	2b50      	cmp	r3, #80	; 0x50
 80045ee:	d00a      	beq.n	8004606 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80045f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f4:	f383 8811 	msr	BASEPRI, r3
 80045f8:	f3bf 8f6f 	isb	sy
 80045fc:	f3bf 8f4f 	dsb	sy
 8004600:	61bb      	str	r3, [r7, #24]
}
 8004602:	bf00      	nop
 8004604:	e7fe      	b.n	8004604 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004606:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800460c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800460e:	2b00      	cmp	r3, #0
 8004610:	d00d      	beq.n	800462e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004614:	2201      	movs	r2, #1
 8004616:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800461a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800461e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004620:	9300      	str	r3, [sp, #0]
 8004622:	4613      	mov	r3, r2
 8004624:	687a      	ldr	r2, [r7, #4]
 8004626:	68b9      	ldr	r1, [r7, #8]
 8004628:	68f8      	ldr	r0, [r7, #12]
 800462a:	f000 f805 	bl	8004638 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800462e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004630:	4618      	mov	r0, r3
 8004632:	3730      	adds	r7, #48	; 0x30
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}

08004638 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b084      	sub	sp, #16
 800463c:	af00      	add	r7, sp, #0
 800463e:	60f8      	str	r0, [r7, #12]
 8004640:	60b9      	str	r1, [r7, #8]
 8004642:	607a      	str	r2, [r7, #4]
 8004644:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d103      	bne.n	8004654 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800464c:	69bb      	ldr	r3, [r7, #24]
 800464e:	69ba      	ldr	r2, [r7, #24]
 8004650:	601a      	str	r2, [r3, #0]
 8004652:	e002      	b.n	800465a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004654:	69bb      	ldr	r3, [r7, #24]
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800465a:	69bb      	ldr	r3, [r7, #24]
 800465c:	68fa      	ldr	r2, [r7, #12]
 800465e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004660:	69bb      	ldr	r3, [r7, #24]
 8004662:	68ba      	ldr	r2, [r7, #8]
 8004664:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004666:	2101      	movs	r1, #1
 8004668:	69b8      	ldr	r0, [r7, #24]
 800466a:	f7ff ff05 	bl	8004478 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800466e:	69bb      	ldr	r3, [r7, #24]
 8004670:	78fa      	ldrb	r2, [r7, #3]
 8004672:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004676:	bf00      	nop
 8004678:	3710      	adds	r7, #16
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}
	...

08004680 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b08e      	sub	sp, #56	; 0x38
 8004684:	af00      	add	r7, sp, #0
 8004686:	60f8      	str	r0, [r7, #12]
 8004688:	60b9      	str	r1, [r7, #8]
 800468a:	607a      	str	r2, [r7, #4]
 800468c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800468e:	2300      	movs	r3, #0
 8004690:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004698:	2b00      	cmp	r3, #0
 800469a:	d10a      	bne.n	80046b2 <xQueueGenericSend+0x32>
	__asm volatile
 800469c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046a0:	f383 8811 	msr	BASEPRI, r3
 80046a4:	f3bf 8f6f 	isb	sy
 80046a8:	f3bf 8f4f 	dsb	sy
 80046ac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80046ae:	bf00      	nop
 80046b0:	e7fe      	b.n	80046b0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d103      	bne.n	80046c0 <xQueueGenericSend+0x40>
 80046b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d101      	bne.n	80046c4 <xQueueGenericSend+0x44>
 80046c0:	2301      	movs	r3, #1
 80046c2:	e000      	b.n	80046c6 <xQueueGenericSend+0x46>
 80046c4:	2300      	movs	r3, #0
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d10a      	bne.n	80046e0 <xQueueGenericSend+0x60>
	__asm volatile
 80046ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ce:	f383 8811 	msr	BASEPRI, r3
 80046d2:	f3bf 8f6f 	isb	sy
 80046d6:	f3bf 8f4f 	dsb	sy
 80046da:	627b      	str	r3, [r7, #36]	; 0x24
}
 80046dc:	bf00      	nop
 80046de:	e7fe      	b.n	80046de <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	2b02      	cmp	r3, #2
 80046e4:	d103      	bne.n	80046ee <xQueueGenericSend+0x6e>
 80046e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	d101      	bne.n	80046f2 <xQueueGenericSend+0x72>
 80046ee:	2301      	movs	r3, #1
 80046f0:	e000      	b.n	80046f4 <xQueueGenericSend+0x74>
 80046f2:	2300      	movs	r3, #0
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d10a      	bne.n	800470e <xQueueGenericSend+0x8e>
	__asm volatile
 80046f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046fc:	f383 8811 	msr	BASEPRI, r3
 8004700:	f3bf 8f6f 	isb	sy
 8004704:	f3bf 8f4f 	dsb	sy
 8004708:	623b      	str	r3, [r7, #32]
}
 800470a:	bf00      	nop
 800470c:	e7fe      	b.n	800470c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800470e:	f001 f96f 	bl	80059f0 <xTaskGetSchedulerState>
 8004712:	4603      	mov	r3, r0
 8004714:	2b00      	cmp	r3, #0
 8004716:	d102      	bne.n	800471e <xQueueGenericSend+0x9e>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d101      	bne.n	8004722 <xQueueGenericSend+0xa2>
 800471e:	2301      	movs	r3, #1
 8004720:	e000      	b.n	8004724 <xQueueGenericSend+0xa4>
 8004722:	2300      	movs	r3, #0
 8004724:	2b00      	cmp	r3, #0
 8004726:	d10a      	bne.n	800473e <xQueueGenericSend+0xbe>
	__asm volatile
 8004728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800472c:	f383 8811 	msr	BASEPRI, r3
 8004730:	f3bf 8f6f 	isb	sy
 8004734:	f3bf 8f4f 	dsb	sy
 8004738:	61fb      	str	r3, [r7, #28]
}
 800473a:	bf00      	nop
 800473c:	e7fe      	b.n	800473c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800473e:	f001 ff11 	bl	8006564 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004744:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800474a:	429a      	cmp	r2, r3
 800474c:	d302      	bcc.n	8004754 <xQueueGenericSend+0xd4>
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	2b02      	cmp	r3, #2
 8004752:	d129      	bne.n	80047a8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004754:	683a      	ldr	r2, [r7, #0]
 8004756:	68b9      	ldr	r1, [r7, #8]
 8004758:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800475a:	f000 fa0b 	bl	8004b74 <prvCopyDataToQueue>
 800475e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004764:	2b00      	cmp	r3, #0
 8004766:	d010      	beq.n	800478a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800476a:	3324      	adds	r3, #36	; 0x24
 800476c:	4618      	mov	r0, r3
 800476e:	f000 ff7d 	bl	800566c <xTaskRemoveFromEventList>
 8004772:	4603      	mov	r3, r0
 8004774:	2b00      	cmp	r3, #0
 8004776:	d013      	beq.n	80047a0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004778:	4b3f      	ldr	r3, [pc, #252]	; (8004878 <xQueueGenericSend+0x1f8>)
 800477a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800477e:	601a      	str	r2, [r3, #0]
 8004780:	f3bf 8f4f 	dsb	sy
 8004784:	f3bf 8f6f 	isb	sy
 8004788:	e00a      	b.n	80047a0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800478a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800478c:	2b00      	cmp	r3, #0
 800478e:	d007      	beq.n	80047a0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004790:	4b39      	ldr	r3, [pc, #228]	; (8004878 <xQueueGenericSend+0x1f8>)
 8004792:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004796:	601a      	str	r2, [r3, #0]
 8004798:	f3bf 8f4f 	dsb	sy
 800479c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80047a0:	f001 ff10 	bl	80065c4 <vPortExitCritical>
				return pdPASS;
 80047a4:	2301      	movs	r3, #1
 80047a6:	e063      	b.n	8004870 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d103      	bne.n	80047b6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80047ae:	f001 ff09 	bl	80065c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80047b2:	2300      	movs	r3, #0
 80047b4:	e05c      	b.n	8004870 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80047b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d106      	bne.n	80047ca <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80047bc:	f107 0314 	add.w	r3, r7, #20
 80047c0:	4618      	mov	r0, r3
 80047c2:	f000 ffb7 	bl	8005734 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80047c6:	2301      	movs	r3, #1
 80047c8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80047ca:	f001 fefb 	bl	80065c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80047ce:	f000 fd23 	bl	8005218 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80047d2:	f001 fec7 	bl	8006564 <vPortEnterCritical>
 80047d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80047dc:	b25b      	sxtb	r3, r3
 80047de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047e2:	d103      	bne.n	80047ec <xQueueGenericSend+0x16c>
 80047e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047e6:	2200      	movs	r2, #0
 80047e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80047f2:	b25b      	sxtb	r3, r3
 80047f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047f8:	d103      	bne.n	8004802 <xQueueGenericSend+0x182>
 80047fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047fc:	2200      	movs	r2, #0
 80047fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004802:	f001 fedf 	bl	80065c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004806:	1d3a      	adds	r2, r7, #4
 8004808:	f107 0314 	add.w	r3, r7, #20
 800480c:	4611      	mov	r1, r2
 800480e:	4618      	mov	r0, r3
 8004810:	f000 ffa6 	bl	8005760 <xTaskCheckForTimeOut>
 8004814:	4603      	mov	r3, r0
 8004816:	2b00      	cmp	r3, #0
 8004818:	d124      	bne.n	8004864 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800481a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800481c:	f000 faa2 	bl	8004d64 <prvIsQueueFull>
 8004820:	4603      	mov	r3, r0
 8004822:	2b00      	cmp	r3, #0
 8004824:	d018      	beq.n	8004858 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004828:	3310      	adds	r3, #16
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	4611      	mov	r1, r2
 800482e:	4618      	mov	r0, r3
 8004830:	f000 fecc 	bl	80055cc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004834:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004836:	f000 fa2d 	bl	8004c94 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800483a:	f000 fcfb 	bl	8005234 <xTaskResumeAll>
 800483e:	4603      	mov	r3, r0
 8004840:	2b00      	cmp	r3, #0
 8004842:	f47f af7c 	bne.w	800473e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004846:	4b0c      	ldr	r3, [pc, #48]	; (8004878 <xQueueGenericSend+0x1f8>)
 8004848:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800484c:	601a      	str	r2, [r3, #0]
 800484e:	f3bf 8f4f 	dsb	sy
 8004852:	f3bf 8f6f 	isb	sy
 8004856:	e772      	b.n	800473e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004858:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800485a:	f000 fa1b 	bl	8004c94 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800485e:	f000 fce9 	bl	8005234 <xTaskResumeAll>
 8004862:	e76c      	b.n	800473e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004864:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004866:	f000 fa15 	bl	8004c94 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800486a:	f000 fce3 	bl	8005234 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800486e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004870:	4618      	mov	r0, r3
 8004872:	3738      	adds	r7, #56	; 0x38
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}
 8004878:	e000ed04 	.word	0xe000ed04

0800487c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b090      	sub	sp, #64	; 0x40
 8004880:	af00      	add	r7, sp, #0
 8004882:	60f8      	str	r0, [r7, #12]
 8004884:	60b9      	str	r1, [r7, #8]
 8004886:	607a      	str	r2, [r7, #4]
 8004888:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800488e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004890:	2b00      	cmp	r3, #0
 8004892:	d10a      	bne.n	80048aa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004898:	f383 8811 	msr	BASEPRI, r3
 800489c:	f3bf 8f6f 	isb	sy
 80048a0:	f3bf 8f4f 	dsb	sy
 80048a4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80048a6:	bf00      	nop
 80048a8:	e7fe      	b.n	80048a8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d103      	bne.n	80048b8 <xQueueGenericSendFromISR+0x3c>
 80048b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d101      	bne.n	80048bc <xQueueGenericSendFromISR+0x40>
 80048b8:	2301      	movs	r3, #1
 80048ba:	e000      	b.n	80048be <xQueueGenericSendFromISR+0x42>
 80048bc:	2300      	movs	r3, #0
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d10a      	bne.n	80048d8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80048c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c6:	f383 8811 	msr	BASEPRI, r3
 80048ca:	f3bf 8f6f 	isb	sy
 80048ce:	f3bf 8f4f 	dsb	sy
 80048d2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80048d4:	bf00      	nop
 80048d6:	e7fe      	b.n	80048d6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	2b02      	cmp	r3, #2
 80048dc:	d103      	bne.n	80048e6 <xQueueGenericSendFromISR+0x6a>
 80048de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	d101      	bne.n	80048ea <xQueueGenericSendFromISR+0x6e>
 80048e6:	2301      	movs	r3, #1
 80048e8:	e000      	b.n	80048ec <xQueueGenericSendFromISR+0x70>
 80048ea:	2300      	movs	r3, #0
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d10a      	bne.n	8004906 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80048f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f4:	f383 8811 	msr	BASEPRI, r3
 80048f8:	f3bf 8f6f 	isb	sy
 80048fc:	f3bf 8f4f 	dsb	sy
 8004900:	623b      	str	r3, [r7, #32]
}
 8004902:	bf00      	nop
 8004904:	e7fe      	b.n	8004904 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004906:	f001 ff0f 	bl	8006728 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800490a:	f3ef 8211 	mrs	r2, BASEPRI
 800490e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004912:	f383 8811 	msr	BASEPRI, r3
 8004916:	f3bf 8f6f 	isb	sy
 800491a:	f3bf 8f4f 	dsb	sy
 800491e:	61fa      	str	r2, [r7, #28]
 8004920:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004922:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004924:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004928:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800492a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800492c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800492e:	429a      	cmp	r2, r3
 8004930:	d302      	bcc.n	8004938 <xQueueGenericSendFromISR+0xbc>
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	2b02      	cmp	r3, #2
 8004936:	d12f      	bne.n	8004998 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800493a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800493e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004946:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004948:	683a      	ldr	r2, [r7, #0]
 800494a:	68b9      	ldr	r1, [r7, #8]
 800494c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800494e:	f000 f911 	bl	8004b74 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004952:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004956:	f1b3 3fff 	cmp.w	r3, #4294967295
 800495a:	d112      	bne.n	8004982 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800495c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800495e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004960:	2b00      	cmp	r3, #0
 8004962:	d016      	beq.n	8004992 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004966:	3324      	adds	r3, #36	; 0x24
 8004968:	4618      	mov	r0, r3
 800496a:	f000 fe7f 	bl	800566c <xTaskRemoveFromEventList>
 800496e:	4603      	mov	r3, r0
 8004970:	2b00      	cmp	r3, #0
 8004972:	d00e      	beq.n	8004992 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d00b      	beq.n	8004992 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2201      	movs	r2, #1
 800497e:	601a      	str	r2, [r3, #0]
 8004980:	e007      	b.n	8004992 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004982:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004986:	3301      	adds	r3, #1
 8004988:	b2db      	uxtb	r3, r3
 800498a:	b25a      	sxtb	r2, r3
 800498c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800498e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004992:	2301      	movs	r3, #1
 8004994:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004996:	e001      	b.n	800499c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004998:	2300      	movs	r3, #0
 800499a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800499c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800499e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80049a6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80049a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3740      	adds	r7, #64	; 0x40
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}
	...

080049b4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b08c      	sub	sp, #48	; 0x30
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	60f8      	str	r0, [r7, #12]
 80049bc:	60b9      	str	r1, [r7, #8]
 80049be:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80049c0:	2300      	movs	r3, #0
 80049c2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80049c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d10a      	bne.n	80049e4 <xQueueReceive+0x30>
	__asm volatile
 80049ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d2:	f383 8811 	msr	BASEPRI, r3
 80049d6:	f3bf 8f6f 	isb	sy
 80049da:	f3bf 8f4f 	dsb	sy
 80049de:	623b      	str	r3, [r7, #32]
}
 80049e0:	bf00      	nop
 80049e2:	e7fe      	b.n	80049e2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d103      	bne.n	80049f2 <xQueueReceive+0x3e>
 80049ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d101      	bne.n	80049f6 <xQueueReceive+0x42>
 80049f2:	2301      	movs	r3, #1
 80049f4:	e000      	b.n	80049f8 <xQueueReceive+0x44>
 80049f6:	2300      	movs	r3, #0
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d10a      	bne.n	8004a12 <xQueueReceive+0x5e>
	__asm volatile
 80049fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a00:	f383 8811 	msr	BASEPRI, r3
 8004a04:	f3bf 8f6f 	isb	sy
 8004a08:	f3bf 8f4f 	dsb	sy
 8004a0c:	61fb      	str	r3, [r7, #28]
}
 8004a0e:	bf00      	nop
 8004a10:	e7fe      	b.n	8004a10 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004a12:	f000 ffed 	bl	80059f0 <xTaskGetSchedulerState>
 8004a16:	4603      	mov	r3, r0
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d102      	bne.n	8004a22 <xQueueReceive+0x6e>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d101      	bne.n	8004a26 <xQueueReceive+0x72>
 8004a22:	2301      	movs	r3, #1
 8004a24:	e000      	b.n	8004a28 <xQueueReceive+0x74>
 8004a26:	2300      	movs	r3, #0
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d10a      	bne.n	8004a42 <xQueueReceive+0x8e>
	__asm volatile
 8004a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a30:	f383 8811 	msr	BASEPRI, r3
 8004a34:	f3bf 8f6f 	isb	sy
 8004a38:	f3bf 8f4f 	dsb	sy
 8004a3c:	61bb      	str	r3, [r7, #24]
}
 8004a3e:	bf00      	nop
 8004a40:	e7fe      	b.n	8004a40 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004a42:	f001 fd8f 	bl	8006564 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a4a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d01f      	beq.n	8004a92 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004a52:	68b9      	ldr	r1, [r7, #8]
 8004a54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a56:	f000 f8f7 	bl	8004c48 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5c:	1e5a      	subs	r2, r3, #1
 8004a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a60:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a64:	691b      	ldr	r3, [r3, #16]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d00f      	beq.n	8004a8a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a6c:	3310      	adds	r3, #16
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f000 fdfc 	bl	800566c <xTaskRemoveFromEventList>
 8004a74:	4603      	mov	r3, r0
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d007      	beq.n	8004a8a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004a7a:	4b3d      	ldr	r3, [pc, #244]	; (8004b70 <xQueueReceive+0x1bc>)
 8004a7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a80:	601a      	str	r2, [r3, #0]
 8004a82:	f3bf 8f4f 	dsb	sy
 8004a86:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004a8a:	f001 fd9b 	bl	80065c4 <vPortExitCritical>
				return pdPASS;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e069      	b.n	8004b66 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d103      	bne.n	8004aa0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004a98:	f001 fd94 	bl	80065c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	e062      	b.n	8004b66 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d106      	bne.n	8004ab4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004aa6:	f107 0310 	add.w	r3, r7, #16
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f000 fe42 	bl	8005734 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004ab4:	f001 fd86 	bl	80065c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004ab8:	f000 fbae 	bl	8005218 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004abc:	f001 fd52 	bl	8006564 <vPortEnterCritical>
 8004ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ac6:	b25b      	sxtb	r3, r3
 8004ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004acc:	d103      	bne.n	8004ad6 <xQueueReceive+0x122>
 8004ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ad8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004adc:	b25b      	sxtb	r3, r3
 8004ade:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ae2:	d103      	bne.n	8004aec <xQueueReceive+0x138>
 8004ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004aec:	f001 fd6a 	bl	80065c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004af0:	1d3a      	adds	r2, r7, #4
 8004af2:	f107 0310 	add.w	r3, r7, #16
 8004af6:	4611      	mov	r1, r2
 8004af8:	4618      	mov	r0, r3
 8004afa:	f000 fe31 	bl	8005760 <xTaskCheckForTimeOut>
 8004afe:	4603      	mov	r3, r0
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d123      	bne.n	8004b4c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004b04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b06:	f000 f917 	bl	8004d38 <prvIsQueueEmpty>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d017      	beq.n	8004b40 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b12:	3324      	adds	r3, #36	; 0x24
 8004b14:	687a      	ldr	r2, [r7, #4]
 8004b16:	4611      	mov	r1, r2
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f000 fd57 	bl	80055cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004b1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b20:	f000 f8b8 	bl	8004c94 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004b24:	f000 fb86 	bl	8005234 <xTaskResumeAll>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d189      	bne.n	8004a42 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004b2e:	4b10      	ldr	r3, [pc, #64]	; (8004b70 <xQueueReceive+0x1bc>)
 8004b30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b34:	601a      	str	r2, [r3, #0]
 8004b36:	f3bf 8f4f 	dsb	sy
 8004b3a:	f3bf 8f6f 	isb	sy
 8004b3e:	e780      	b.n	8004a42 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004b40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b42:	f000 f8a7 	bl	8004c94 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004b46:	f000 fb75 	bl	8005234 <xTaskResumeAll>
 8004b4a:	e77a      	b.n	8004a42 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004b4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b4e:	f000 f8a1 	bl	8004c94 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004b52:	f000 fb6f 	bl	8005234 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004b56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b58:	f000 f8ee 	bl	8004d38 <prvIsQueueEmpty>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	f43f af6f 	beq.w	8004a42 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004b64:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3730      	adds	r7, #48	; 0x30
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}
 8004b6e:	bf00      	nop
 8004b70:	e000ed04 	.word	0xe000ed04

08004b74 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b086      	sub	sp, #24
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	60f8      	str	r0, [r7, #12]
 8004b7c:	60b9      	str	r1, [r7, #8]
 8004b7e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004b80:	2300      	movs	r3, #0
 8004b82:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b88:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d10d      	bne.n	8004bae <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d14d      	bne.n	8004c36 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f000 ff44 	bl	8005a2c <xTaskPriorityDisinherit>
 8004ba4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	609a      	str	r2, [r3, #8]
 8004bac:	e043      	b.n	8004c36 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d119      	bne.n	8004be8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	6858      	ldr	r0, [r3, #4]
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bbc:	461a      	mov	r2, r3
 8004bbe:	68b9      	ldr	r1, [r7, #8]
 8004bc0:	f002 f8ff 	bl	8006dc2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	685a      	ldr	r2, [r3, #4]
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bcc:	441a      	add	r2, r3
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	685a      	ldr	r2, [r3, #4]
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	d32b      	bcc.n	8004c36 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	605a      	str	r2, [r3, #4]
 8004be6:	e026      	b.n	8004c36 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	68d8      	ldr	r0, [r3, #12]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf0:	461a      	mov	r2, r3
 8004bf2:	68b9      	ldr	r1, [r7, #8]
 8004bf4:	f002 f8e5 	bl	8006dc2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	68da      	ldr	r2, [r3, #12]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c00:	425b      	negs	r3, r3
 8004c02:	441a      	add	r2, r3
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	68da      	ldr	r2, [r3, #12]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d207      	bcs.n	8004c24 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	689a      	ldr	r2, [r3, #8]
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c1c:	425b      	negs	r3, r3
 8004c1e:	441a      	add	r2, r3
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2b02      	cmp	r3, #2
 8004c28:	d105      	bne.n	8004c36 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d002      	beq.n	8004c36 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	3b01      	subs	r3, #1
 8004c34:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	1c5a      	adds	r2, r3, #1
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004c3e:	697b      	ldr	r3, [r7, #20]
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3718      	adds	r7, #24
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}

08004c48 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b082      	sub	sp, #8
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d018      	beq.n	8004c8c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	68da      	ldr	r2, [r3, #12]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c62:	441a      	add	r2, r3
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	68da      	ldr	r2, [r3, #12]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d303      	bcc.n	8004c7c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	68d9      	ldr	r1, [r3, #12]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c84:	461a      	mov	r2, r3
 8004c86:	6838      	ldr	r0, [r7, #0]
 8004c88:	f002 f89b 	bl	8006dc2 <memcpy>
	}
}
 8004c8c:	bf00      	nop
 8004c8e:	3708      	adds	r7, #8
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}

08004c94 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b084      	sub	sp, #16
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004c9c:	f001 fc62 	bl	8006564 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ca6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004ca8:	e011      	b.n	8004cce <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d012      	beq.n	8004cd8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	3324      	adds	r3, #36	; 0x24
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f000 fcd8 	bl	800566c <xTaskRemoveFromEventList>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d001      	beq.n	8004cc6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004cc2:	f000 fdaf 	bl	8005824 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004cc6:	7bfb      	ldrb	r3, [r7, #15]
 8004cc8:	3b01      	subs	r3, #1
 8004cca:	b2db      	uxtb	r3, r3
 8004ccc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004cce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	dce9      	bgt.n	8004caa <prvUnlockQueue+0x16>
 8004cd6:	e000      	b.n	8004cda <prvUnlockQueue+0x46>
					break;
 8004cd8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	22ff      	movs	r2, #255	; 0xff
 8004cde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004ce2:	f001 fc6f 	bl	80065c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004ce6:	f001 fc3d 	bl	8006564 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004cf0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004cf2:	e011      	b.n	8004d18 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	691b      	ldr	r3, [r3, #16]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d012      	beq.n	8004d22 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	3310      	adds	r3, #16
 8004d00:	4618      	mov	r0, r3
 8004d02:	f000 fcb3 	bl	800566c <xTaskRemoveFromEventList>
 8004d06:	4603      	mov	r3, r0
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d001      	beq.n	8004d10 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004d0c:	f000 fd8a 	bl	8005824 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004d10:	7bbb      	ldrb	r3, [r7, #14]
 8004d12:	3b01      	subs	r3, #1
 8004d14:	b2db      	uxtb	r3, r3
 8004d16:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004d18:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	dce9      	bgt.n	8004cf4 <prvUnlockQueue+0x60>
 8004d20:	e000      	b.n	8004d24 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004d22:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	22ff      	movs	r2, #255	; 0xff
 8004d28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004d2c:	f001 fc4a 	bl	80065c4 <vPortExitCritical>
}
 8004d30:	bf00      	nop
 8004d32:	3710      	adds	r7, #16
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}

08004d38 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b084      	sub	sp, #16
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004d40:	f001 fc10 	bl	8006564 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d102      	bne.n	8004d52 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	60fb      	str	r3, [r7, #12]
 8004d50:	e001      	b.n	8004d56 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004d52:	2300      	movs	r3, #0
 8004d54:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004d56:	f001 fc35 	bl	80065c4 <vPortExitCritical>

	return xReturn;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3710      	adds	r7, #16
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}

08004d64 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b084      	sub	sp, #16
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004d6c:	f001 fbfa 	bl	8006564 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	d102      	bne.n	8004d82 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	60fb      	str	r3, [r7, #12]
 8004d80:	e001      	b.n	8004d86 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004d82:	2300      	movs	r3, #0
 8004d84:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004d86:	f001 fc1d 	bl	80065c4 <vPortExitCritical>

	return xReturn;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3710      	adds	r7, #16
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}

08004d94 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004d94:	b480      	push	{r7}
 8004d96:	b085      	sub	sp, #20
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
 8004d9c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004d9e:	2300      	movs	r3, #0
 8004da0:	60fb      	str	r3, [r7, #12]
 8004da2:	e014      	b.n	8004dce <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004da4:	4a0f      	ldr	r2, [pc, #60]	; (8004de4 <vQueueAddToRegistry+0x50>)
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d10b      	bne.n	8004dc8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004db0:	490c      	ldr	r1, [pc, #48]	; (8004de4 <vQueueAddToRegistry+0x50>)
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	683a      	ldr	r2, [r7, #0]
 8004db6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004dba:	4a0a      	ldr	r2, [pc, #40]	; (8004de4 <vQueueAddToRegistry+0x50>)
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	00db      	lsls	r3, r3, #3
 8004dc0:	4413      	add	r3, r2
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004dc6:	e006      	b.n	8004dd6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	3301      	adds	r3, #1
 8004dcc:	60fb      	str	r3, [r7, #12]
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2b07      	cmp	r3, #7
 8004dd2:	d9e7      	bls.n	8004da4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004dd4:	bf00      	nop
 8004dd6:	bf00      	nop
 8004dd8:	3714      	adds	r7, #20
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr
 8004de2:	bf00      	nop
 8004de4:	20000c04 	.word	0x20000c04

08004de8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b086      	sub	sp, #24
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	60f8      	str	r0, [r7, #12]
 8004df0:	60b9      	str	r1, [r7, #8]
 8004df2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004df8:	f001 fbb4 	bl	8006564 <vPortEnterCritical>
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e02:	b25b      	sxtb	r3, r3
 8004e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e08:	d103      	bne.n	8004e12 <vQueueWaitForMessageRestricted+0x2a>
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e18:	b25b      	sxtb	r3, r3
 8004e1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e1e:	d103      	bne.n	8004e28 <vQueueWaitForMessageRestricted+0x40>
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	2200      	movs	r2, #0
 8004e24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e28:	f001 fbcc 	bl	80065c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d106      	bne.n	8004e42 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	3324      	adds	r3, #36	; 0x24
 8004e38:	687a      	ldr	r2, [r7, #4]
 8004e3a:	68b9      	ldr	r1, [r7, #8]
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f000 fbe9 	bl	8005614 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004e42:	6978      	ldr	r0, [r7, #20]
 8004e44:	f7ff ff26 	bl	8004c94 <prvUnlockQueue>
	}
 8004e48:	bf00      	nop
 8004e4a:	3718      	adds	r7, #24
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}

08004e50 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b08e      	sub	sp, #56	; 0x38
 8004e54:	af04      	add	r7, sp, #16
 8004e56:	60f8      	str	r0, [r7, #12]
 8004e58:	60b9      	str	r1, [r7, #8]
 8004e5a:	607a      	str	r2, [r7, #4]
 8004e5c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004e5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d10a      	bne.n	8004e7a <xTaskCreateStatic+0x2a>
	__asm volatile
 8004e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e68:	f383 8811 	msr	BASEPRI, r3
 8004e6c:	f3bf 8f6f 	isb	sy
 8004e70:	f3bf 8f4f 	dsb	sy
 8004e74:	623b      	str	r3, [r7, #32]
}
 8004e76:	bf00      	nop
 8004e78:	e7fe      	b.n	8004e78 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d10a      	bne.n	8004e96 <xTaskCreateStatic+0x46>
	__asm volatile
 8004e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e84:	f383 8811 	msr	BASEPRI, r3
 8004e88:	f3bf 8f6f 	isb	sy
 8004e8c:	f3bf 8f4f 	dsb	sy
 8004e90:	61fb      	str	r3, [r7, #28]
}
 8004e92:	bf00      	nop
 8004e94:	e7fe      	b.n	8004e94 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004e96:	23bc      	movs	r3, #188	; 0xbc
 8004e98:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	2bbc      	cmp	r3, #188	; 0xbc
 8004e9e:	d00a      	beq.n	8004eb6 <xTaskCreateStatic+0x66>
	__asm volatile
 8004ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea4:	f383 8811 	msr	BASEPRI, r3
 8004ea8:	f3bf 8f6f 	isb	sy
 8004eac:	f3bf 8f4f 	dsb	sy
 8004eb0:	61bb      	str	r3, [r7, #24]
}
 8004eb2:	bf00      	nop
 8004eb4:	e7fe      	b.n	8004eb4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004eb6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d01e      	beq.n	8004efc <xTaskCreateStatic+0xac>
 8004ebe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d01b      	beq.n	8004efc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ec6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ecc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed0:	2202      	movs	r2, #2
 8004ed2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	9303      	str	r3, [sp, #12]
 8004eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004edc:	9302      	str	r3, [sp, #8]
 8004ede:	f107 0314 	add.w	r3, r7, #20
 8004ee2:	9301      	str	r3, [sp, #4]
 8004ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ee6:	9300      	str	r3, [sp, #0]
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	687a      	ldr	r2, [r7, #4]
 8004eec:	68b9      	ldr	r1, [r7, #8]
 8004eee:	68f8      	ldr	r0, [r7, #12]
 8004ef0:	f000 f80c 	bl	8004f0c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004ef4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004ef6:	f000 f8af 	bl	8005058 <prvAddNewTaskToReadyList>
 8004efa:	e001      	b.n	8004f00 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004efc:	2300      	movs	r3, #0
 8004efe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004f00:	697b      	ldr	r3, [r7, #20]
	}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3728      	adds	r7, #40	; 0x28
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
	...

08004f0c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b088      	sub	sp, #32
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	60f8      	str	r0, [r7, #12]
 8004f14:	60b9      	str	r1, [r7, #8]
 8004f16:	607a      	str	r2, [r7, #4]
 8004f18:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f1c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	009b      	lsls	r3, r3, #2
 8004f22:	461a      	mov	r2, r3
 8004f24:	21a5      	movs	r1, #165	; 0xa5
 8004f26:	f001 ff5a 	bl	8006dde <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004f34:	3b01      	subs	r3, #1
 8004f36:	009b      	lsls	r3, r3, #2
 8004f38:	4413      	add	r3, r2
 8004f3a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004f3c:	69bb      	ldr	r3, [r7, #24]
 8004f3e:	f023 0307 	bic.w	r3, r3, #7
 8004f42:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004f44:	69bb      	ldr	r3, [r7, #24]
 8004f46:	f003 0307 	and.w	r3, r3, #7
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d00a      	beq.n	8004f64 <prvInitialiseNewTask+0x58>
	__asm volatile
 8004f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f52:	f383 8811 	msr	BASEPRI, r3
 8004f56:	f3bf 8f6f 	isb	sy
 8004f5a:	f3bf 8f4f 	dsb	sy
 8004f5e:	617b      	str	r3, [r7, #20]
}
 8004f60:	bf00      	nop
 8004f62:	e7fe      	b.n	8004f62 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d01f      	beq.n	8004faa <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	61fb      	str	r3, [r7, #28]
 8004f6e:	e012      	b.n	8004f96 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004f70:	68ba      	ldr	r2, [r7, #8]
 8004f72:	69fb      	ldr	r3, [r7, #28]
 8004f74:	4413      	add	r3, r2
 8004f76:	7819      	ldrb	r1, [r3, #0]
 8004f78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f7a:	69fb      	ldr	r3, [r7, #28]
 8004f7c:	4413      	add	r3, r2
 8004f7e:	3334      	adds	r3, #52	; 0x34
 8004f80:	460a      	mov	r2, r1
 8004f82:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004f84:	68ba      	ldr	r2, [r7, #8]
 8004f86:	69fb      	ldr	r3, [r7, #28]
 8004f88:	4413      	add	r3, r2
 8004f8a:	781b      	ldrb	r3, [r3, #0]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d006      	beq.n	8004f9e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004f90:	69fb      	ldr	r3, [r7, #28]
 8004f92:	3301      	adds	r3, #1
 8004f94:	61fb      	str	r3, [r7, #28]
 8004f96:	69fb      	ldr	r3, [r7, #28]
 8004f98:	2b0f      	cmp	r3, #15
 8004f9a:	d9e9      	bls.n	8004f70 <prvInitialiseNewTask+0x64>
 8004f9c:	e000      	b.n	8004fa0 <prvInitialiseNewTask+0x94>
			{
				break;
 8004f9e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004fa8:	e003      	b.n	8004fb2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fac:	2200      	movs	r2, #0
 8004fae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fb4:	2b37      	cmp	r3, #55	; 0x37
 8004fb6:	d901      	bls.n	8004fbc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004fb8:	2337      	movs	r3, #55	; 0x37
 8004fba:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fbe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004fc0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fc4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004fc6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fca:	2200      	movs	r2, #0
 8004fcc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fd0:	3304      	adds	r3, #4
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f7ff f9bc 	bl	8004350 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fda:	3318      	adds	r3, #24
 8004fdc:	4618      	mov	r0, r3
 8004fde:	f7ff f9b7 	bl	8004350 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fe4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fe6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fea:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ff0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ff4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ff6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005002:	2200      	movs	r2, #0
 8005004:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800500a:	3354      	adds	r3, #84	; 0x54
 800500c:	2260      	movs	r2, #96	; 0x60
 800500e:	2100      	movs	r1, #0
 8005010:	4618      	mov	r0, r3
 8005012:	f001 fee4 	bl	8006dde <memset>
 8005016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005018:	4a0c      	ldr	r2, [pc, #48]	; (800504c <prvInitialiseNewTask+0x140>)
 800501a:	659a      	str	r2, [r3, #88]	; 0x58
 800501c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800501e:	4a0c      	ldr	r2, [pc, #48]	; (8005050 <prvInitialiseNewTask+0x144>)
 8005020:	65da      	str	r2, [r3, #92]	; 0x5c
 8005022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005024:	4a0b      	ldr	r2, [pc, #44]	; (8005054 <prvInitialiseNewTask+0x148>)
 8005026:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005028:	683a      	ldr	r2, [r7, #0]
 800502a:	68f9      	ldr	r1, [r7, #12]
 800502c:	69b8      	ldr	r0, [r7, #24]
 800502e:	f001 f969 	bl	8006304 <pxPortInitialiseStack>
 8005032:	4602      	mov	r2, r0
 8005034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005036:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800503a:	2b00      	cmp	r3, #0
 800503c:	d002      	beq.n	8005044 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800503e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005040:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005042:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005044:	bf00      	nop
 8005046:	3720      	adds	r7, #32
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}
 800504c:	08007da4 	.word	0x08007da4
 8005050:	08007dc4 	.word	0x08007dc4
 8005054:	08007d84 	.word	0x08007d84

08005058 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b082      	sub	sp, #8
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005060:	f001 fa80 	bl	8006564 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005064:	4b2d      	ldr	r3, [pc, #180]	; (800511c <prvAddNewTaskToReadyList+0xc4>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	3301      	adds	r3, #1
 800506a:	4a2c      	ldr	r2, [pc, #176]	; (800511c <prvAddNewTaskToReadyList+0xc4>)
 800506c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800506e:	4b2c      	ldr	r3, [pc, #176]	; (8005120 <prvAddNewTaskToReadyList+0xc8>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d109      	bne.n	800508a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005076:	4a2a      	ldr	r2, [pc, #168]	; (8005120 <prvAddNewTaskToReadyList+0xc8>)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800507c:	4b27      	ldr	r3, [pc, #156]	; (800511c <prvAddNewTaskToReadyList+0xc4>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	2b01      	cmp	r3, #1
 8005082:	d110      	bne.n	80050a6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005084:	f000 fbf2 	bl	800586c <prvInitialiseTaskLists>
 8005088:	e00d      	b.n	80050a6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800508a:	4b26      	ldr	r3, [pc, #152]	; (8005124 <prvAddNewTaskToReadyList+0xcc>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d109      	bne.n	80050a6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005092:	4b23      	ldr	r3, [pc, #140]	; (8005120 <prvAddNewTaskToReadyList+0xc8>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800509c:	429a      	cmp	r2, r3
 800509e:	d802      	bhi.n	80050a6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80050a0:	4a1f      	ldr	r2, [pc, #124]	; (8005120 <prvAddNewTaskToReadyList+0xc8>)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80050a6:	4b20      	ldr	r3, [pc, #128]	; (8005128 <prvAddNewTaskToReadyList+0xd0>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	3301      	adds	r3, #1
 80050ac:	4a1e      	ldr	r2, [pc, #120]	; (8005128 <prvAddNewTaskToReadyList+0xd0>)
 80050ae:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80050b0:	4b1d      	ldr	r3, [pc, #116]	; (8005128 <prvAddNewTaskToReadyList+0xd0>)
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050bc:	4b1b      	ldr	r3, [pc, #108]	; (800512c <prvAddNewTaskToReadyList+0xd4>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d903      	bls.n	80050cc <prvAddNewTaskToReadyList+0x74>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050c8:	4a18      	ldr	r2, [pc, #96]	; (800512c <prvAddNewTaskToReadyList+0xd4>)
 80050ca:	6013      	str	r3, [r2, #0]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050d0:	4613      	mov	r3, r2
 80050d2:	009b      	lsls	r3, r3, #2
 80050d4:	4413      	add	r3, r2
 80050d6:	009b      	lsls	r3, r3, #2
 80050d8:	4a15      	ldr	r2, [pc, #84]	; (8005130 <prvAddNewTaskToReadyList+0xd8>)
 80050da:	441a      	add	r2, r3
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	3304      	adds	r3, #4
 80050e0:	4619      	mov	r1, r3
 80050e2:	4610      	mov	r0, r2
 80050e4:	f7ff f941 	bl	800436a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80050e8:	f001 fa6c 	bl	80065c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80050ec:	4b0d      	ldr	r3, [pc, #52]	; (8005124 <prvAddNewTaskToReadyList+0xcc>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d00e      	beq.n	8005112 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80050f4:	4b0a      	ldr	r3, [pc, #40]	; (8005120 <prvAddNewTaskToReadyList+0xc8>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050fe:	429a      	cmp	r2, r3
 8005100:	d207      	bcs.n	8005112 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005102:	4b0c      	ldr	r3, [pc, #48]	; (8005134 <prvAddNewTaskToReadyList+0xdc>)
 8005104:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005108:	601a      	str	r2, [r3, #0]
 800510a:	f3bf 8f4f 	dsb	sy
 800510e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005112:	bf00      	nop
 8005114:	3708      	adds	r7, #8
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}
 800511a:	bf00      	nop
 800511c:	20001118 	.word	0x20001118
 8005120:	20000c44 	.word	0x20000c44
 8005124:	20001124 	.word	0x20001124
 8005128:	20001134 	.word	0x20001134
 800512c:	20001120 	.word	0x20001120
 8005130:	20000c48 	.word	0x20000c48
 8005134:	e000ed04 	.word	0xe000ed04

08005138 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b08a      	sub	sp, #40	; 0x28
 800513c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800513e:	2300      	movs	r3, #0
 8005140:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005142:	2300      	movs	r3, #0
 8005144:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005146:	463a      	mov	r2, r7
 8005148:	1d39      	adds	r1, r7, #4
 800514a:	f107 0308 	add.w	r3, r7, #8
 800514e:	4618      	mov	r0, r3
 8005150:	f7ff f8aa 	bl	80042a8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005154:	6839      	ldr	r1, [r7, #0]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	68ba      	ldr	r2, [r7, #8]
 800515a:	9202      	str	r2, [sp, #8]
 800515c:	9301      	str	r3, [sp, #4]
 800515e:	2300      	movs	r3, #0
 8005160:	9300      	str	r3, [sp, #0]
 8005162:	2300      	movs	r3, #0
 8005164:	460a      	mov	r2, r1
 8005166:	4924      	ldr	r1, [pc, #144]	; (80051f8 <vTaskStartScheduler+0xc0>)
 8005168:	4824      	ldr	r0, [pc, #144]	; (80051fc <vTaskStartScheduler+0xc4>)
 800516a:	f7ff fe71 	bl	8004e50 <xTaskCreateStatic>
 800516e:	4603      	mov	r3, r0
 8005170:	4a23      	ldr	r2, [pc, #140]	; (8005200 <vTaskStartScheduler+0xc8>)
 8005172:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005174:	4b22      	ldr	r3, [pc, #136]	; (8005200 <vTaskStartScheduler+0xc8>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d002      	beq.n	8005182 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800517c:	2301      	movs	r3, #1
 800517e:	617b      	str	r3, [r7, #20]
 8005180:	e001      	b.n	8005186 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005182:	2300      	movs	r3, #0
 8005184:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	2b01      	cmp	r3, #1
 800518a:	d102      	bne.n	8005192 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800518c:	f000 fd10 	bl	8005bb0 <xTimerCreateTimerTask>
 8005190:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	2b01      	cmp	r3, #1
 8005196:	d11b      	bne.n	80051d0 <vTaskStartScheduler+0x98>
	__asm volatile
 8005198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800519c:	f383 8811 	msr	BASEPRI, r3
 80051a0:	f3bf 8f6f 	isb	sy
 80051a4:	f3bf 8f4f 	dsb	sy
 80051a8:	613b      	str	r3, [r7, #16]
}
 80051aa:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80051ac:	4b15      	ldr	r3, [pc, #84]	; (8005204 <vTaskStartScheduler+0xcc>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	3354      	adds	r3, #84	; 0x54
 80051b2:	4a15      	ldr	r2, [pc, #84]	; (8005208 <vTaskStartScheduler+0xd0>)
 80051b4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80051b6:	4b15      	ldr	r3, [pc, #84]	; (800520c <vTaskStartScheduler+0xd4>)
 80051b8:	f04f 32ff 	mov.w	r2, #4294967295
 80051bc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80051be:	4b14      	ldr	r3, [pc, #80]	; (8005210 <vTaskStartScheduler+0xd8>)
 80051c0:	2201      	movs	r2, #1
 80051c2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80051c4:	4b13      	ldr	r3, [pc, #76]	; (8005214 <vTaskStartScheduler+0xdc>)
 80051c6:	2200      	movs	r2, #0
 80051c8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80051ca:	f001 f929 	bl	8006420 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80051ce:	e00e      	b.n	80051ee <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051d6:	d10a      	bne.n	80051ee <vTaskStartScheduler+0xb6>
	__asm volatile
 80051d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051dc:	f383 8811 	msr	BASEPRI, r3
 80051e0:	f3bf 8f6f 	isb	sy
 80051e4:	f3bf 8f4f 	dsb	sy
 80051e8:	60fb      	str	r3, [r7, #12]
}
 80051ea:	bf00      	nop
 80051ec:	e7fe      	b.n	80051ec <vTaskStartScheduler+0xb4>
}
 80051ee:	bf00      	nop
 80051f0:	3718      	adds	r7, #24
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}
 80051f6:	bf00      	nop
 80051f8:	08007cb4 	.word	0x08007cb4
 80051fc:	0800583d 	.word	0x0800583d
 8005200:	2000113c 	.word	0x2000113c
 8005204:	20000c44 	.word	0x20000c44
 8005208:	20000014 	.word	0x20000014
 800520c:	20001138 	.word	0x20001138
 8005210:	20001124 	.word	0x20001124
 8005214:	2000111c 	.word	0x2000111c

08005218 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005218:	b480      	push	{r7}
 800521a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800521c:	4b04      	ldr	r3, [pc, #16]	; (8005230 <vTaskSuspendAll+0x18>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	3301      	adds	r3, #1
 8005222:	4a03      	ldr	r2, [pc, #12]	; (8005230 <vTaskSuspendAll+0x18>)
 8005224:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005226:	bf00      	nop
 8005228:	46bd      	mov	sp, r7
 800522a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522e:	4770      	bx	lr
 8005230:	20001140 	.word	0x20001140

08005234 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b084      	sub	sp, #16
 8005238:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800523a:	2300      	movs	r3, #0
 800523c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800523e:	2300      	movs	r3, #0
 8005240:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005242:	4b42      	ldr	r3, [pc, #264]	; (800534c <xTaskResumeAll+0x118>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d10a      	bne.n	8005260 <xTaskResumeAll+0x2c>
	__asm volatile
 800524a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800524e:	f383 8811 	msr	BASEPRI, r3
 8005252:	f3bf 8f6f 	isb	sy
 8005256:	f3bf 8f4f 	dsb	sy
 800525a:	603b      	str	r3, [r7, #0]
}
 800525c:	bf00      	nop
 800525e:	e7fe      	b.n	800525e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005260:	f001 f980 	bl	8006564 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005264:	4b39      	ldr	r3, [pc, #228]	; (800534c <xTaskResumeAll+0x118>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	3b01      	subs	r3, #1
 800526a:	4a38      	ldr	r2, [pc, #224]	; (800534c <xTaskResumeAll+0x118>)
 800526c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800526e:	4b37      	ldr	r3, [pc, #220]	; (800534c <xTaskResumeAll+0x118>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d162      	bne.n	800533c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005276:	4b36      	ldr	r3, [pc, #216]	; (8005350 <xTaskResumeAll+0x11c>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d05e      	beq.n	800533c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800527e:	e02f      	b.n	80052e0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005280:	4b34      	ldr	r3, [pc, #208]	; (8005354 <xTaskResumeAll+0x120>)
 8005282:	68db      	ldr	r3, [r3, #12]
 8005284:	68db      	ldr	r3, [r3, #12]
 8005286:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	3318      	adds	r3, #24
 800528c:	4618      	mov	r0, r3
 800528e:	f7ff f8c9 	bl	8004424 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	3304      	adds	r3, #4
 8005296:	4618      	mov	r0, r3
 8005298:	f7ff f8c4 	bl	8004424 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052a0:	4b2d      	ldr	r3, [pc, #180]	; (8005358 <xTaskResumeAll+0x124>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	429a      	cmp	r2, r3
 80052a6:	d903      	bls.n	80052b0 <xTaskResumeAll+0x7c>
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ac:	4a2a      	ldr	r2, [pc, #168]	; (8005358 <xTaskResumeAll+0x124>)
 80052ae:	6013      	str	r3, [r2, #0]
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052b4:	4613      	mov	r3, r2
 80052b6:	009b      	lsls	r3, r3, #2
 80052b8:	4413      	add	r3, r2
 80052ba:	009b      	lsls	r3, r3, #2
 80052bc:	4a27      	ldr	r2, [pc, #156]	; (800535c <xTaskResumeAll+0x128>)
 80052be:	441a      	add	r2, r3
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	3304      	adds	r3, #4
 80052c4:	4619      	mov	r1, r3
 80052c6:	4610      	mov	r0, r2
 80052c8:	f7ff f84f 	bl	800436a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052d0:	4b23      	ldr	r3, [pc, #140]	; (8005360 <xTaskResumeAll+0x12c>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d302      	bcc.n	80052e0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80052da:	4b22      	ldr	r3, [pc, #136]	; (8005364 <xTaskResumeAll+0x130>)
 80052dc:	2201      	movs	r2, #1
 80052de:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80052e0:	4b1c      	ldr	r3, [pc, #112]	; (8005354 <xTaskResumeAll+0x120>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d1cb      	bne.n	8005280 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d001      	beq.n	80052f2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80052ee:	f000 fb5f 	bl	80059b0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80052f2:	4b1d      	ldr	r3, [pc, #116]	; (8005368 <xTaskResumeAll+0x134>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d010      	beq.n	8005320 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80052fe:	f000 f847 	bl	8005390 <xTaskIncrementTick>
 8005302:	4603      	mov	r3, r0
 8005304:	2b00      	cmp	r3, #0
 8005306:	d002      	beq.n	800530e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005308:	4b16      	ldr	r3, [pc, #88]	; (8005364 <xTaskResumeAll+0x130>)
 800530a:	2201      	movs	r2, #1
 800530c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	3b01      	subs	r3, #1
 8005312:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d1f1      	bne.n	80052fe <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800531a:	4b13      	ldr	r3, [pc, #76]	; (8005368 <xTaskResumeAll+0x134>)
 800531c:	2200      	movs	r2, #0
 800531e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005320:	4b10      	ldr	r3, [pc, #64]	; (8005364 <xTaskResumeAll+0x130>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d009      	beq.n	800533c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005328:	2301      	movs	r3, #1
 800532a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800532c:	4b0f      	ldr	r3, [pc, #60]	; (800536c <xTaskResumeAll+0x138>)
 800532e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005332:	601a      	str	r2, [r3, #0]
 8005334:	f3bf 8f4f 	dsb	sy
 8005338:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800533c:	f001 f942 	bl	80065c4 <vPortExitCritical>

	return xAlreadyYielded;
 8005340:	68bb      	ldr	r3, [r7, #8]
}
 8005342:	4618      	mov	r0, r3
 8005344:	3710      	adds	r7, #16
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
 800534a:	bf00      	nop
 800534c:	20001140 	.word	0x20001140
 8005350:	20001118 	.word	0x20001118
 8005354:	200010d8 	.word	0x200010d8
 8005358:	20001120 	.word	0x20001120
 800535c:	20000c48 	.word	0x20000c48
 8005360:	20000c44 	.word	0x20000c44
 8005364:	2000112c 	.word	0x2000112c
 8005368:	20001128 	.word	0x20001128
 800536c:	e000ed04 	.word	0xe000ed04

08005370 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005370:	b480      	push	{r7}
 8005372:	b083      	sub	sp, #12
 8005374:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005376:	4b05      	ldr	r3, [pc, #20]	; (800538c <xTaskGetTickCount+0x1c>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800537c:	687b      	ldr	r3, [r7, #4]
}
 800537e:	4618      	mov	r0, r3
 8005380:	370c      	adds	r7, #12
 8005382:	46bd      	mov	sp, r7
 8005384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005388:	4770      	bx	lr
 800538a:	bf00      	nop
 800538c:	2000111c 	.word	0x2000111c

08005390 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b086      	sub	sp, #24
 8005394:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005396:	2300      	movs	r3, #0
 8005398:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800539a:	4b4f      	ldr	r3, [pc, #316]	; (80054d8 <xTaskIncrementTick+0x148>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	f040 808f 	bne.w	80054c2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80053a4:	4b4d      	ldr	r3, [pc, #308]	; (80054dc <xTaskIncrementTick+0x14c>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	3301      	adds	r3, #1
 80053aa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80053ac:	4a4b      	ldr	r2, [pc, #300]	; (80054dc <xTaskIncrementTick+0x14c>)
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d120      	bne.n	80053fa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80053b8:	4b49      	ldr	r3, [pc, #292]	; (80054e0 <xTaskIncrementTick+0x150>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d00a      	beq.n	80053d8 <xTaskIncrementTick+0x48>
	__asm volatile
 80053c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053c6:	f383 8811 	msr	BASEPRI, r3
 80053ca:	f3bf 8f6f 	isb	sy
 80053ce:	f3bf 8f4f 	dsb	sy
 80053d2:	603b      	str	r3, [r7, #0]
}
 80053d4:	bf00      	nop
 80053d6:	e7fe      	b.n	80053d6 <xTaskIncrementTick+0x46>
 80053d8:	4b41      	ldr	r3, [pc, #260]	; (80054e0 <xTaskIncrementTick+0x150>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	60fb      	str	r3, [r7, #12]
 80053de:	4b41      	ldr	r3, [pc, #260]	; (80054e4 <xTaskIncrementTick+0x154>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a3f      	ldr	r2, [pc, #252]	; (80054e0 <xTaskIncrementTick+0x150>)
 80053e4:	6013      	str	r3, [r2, #0]
 80053e6:	4a3f      	ldr	r2, [pc, #252]	; (80054e4 <xTaskIncrementTick+0x154>)
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	6013      	str	r3, [r2, #0]
 80053ec:	4b3e      	ldr	r3, [pc, #248]	; (80054e8 <xTaskIncrementTick+0x158>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	3301      	adds	r3, #1
 80053f2:	4a3d      	ldr	r2, [pc, #244]	; (80054e8 <xTaskIncrementTick+0x158>)
 80053f4:	6013      	str	r3, [r2, #0]
 80053f6:	f000 fadb 	bl	80059b0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80053fa:	4b3c      	ldr	r3, [pc, #240]	; (80054ec <xTaskIncrementTick+0x15c>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	693a      	ldr	r2, [r7, #16]
 8005400:	429a      	cmp	r2, r3
 8005402:	d349      	bcc.n	8005498 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005404:	4b36      	ldr	r3, [pc, #216]	; (80054e0 <xTaskIncrementTick+0x150>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d104      	bne.n	8005418 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800540e:	4b37      	ldr	r3, [pc, #220]	; (80054ec <xTaskIncrementTick+0x15c>)
 8005410:	f04f 32ff 	mov.w	r2, #4294967295
 8005414:	601a      	str	r2, [r3, #0]
					break;
 8005416:	e03f      	b.n	8005498 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005418:	4b31      	ldr	r3, [pc, #196]	; (80054e0 <xTaskIncrementTick+0x150>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	68db      	ldr	r3, [r3, #12]
 800541e:	68db      	ldr	r3, [r3, #12]
 8005420:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005428:	693a      	ldr	r2, [r7, #16]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	429a      	cmp	r2, r3
 800542e:	d203      	bcs.n	8005438 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005430:	4a2e      	ldr	r2, [pc, #184]	; (80054ec <xTaskIncrementTick+0x15c>)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005436:	e02f      	b.n	8005498 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	3304      	adds	r3, #4
 800543c:	4618      	mov	r0, r3
 800543e:	f7fe fff1 	bl	8004424 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005446:	2b00      	cmp	r3, #0
 8005448:	d004      	beq.n	8005454 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	3318      	adds	r3, #24
 800544e:	4618      	mov	r0, r3
 8005450:	f7fe ffe8 	bl	8004424 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005458:	4b25      	ldr	r3, [pc, #148]	; (80054f0 <xTaskIncrementTick+0x160>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	429a      	cmp	r2, r3
 800545e:	d903      	bls.n	8005468 <xTaskIncrementTick+0xd8>
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005464:	4a22      	ldr	r2, [pc, #136]	; (80054f0 <xTaskIncrementTick+0x160>)
 8005466:	6013      	str	r3, [r2, #0]
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800546c:	4613      	mov	r3, r2
 800546e:	009b      	lsls	r3, r3, #2
 8005470:	4413      	add	r3, r2
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	4a1f      	ldr	r2, [pc, #124]	; (80054f4 <xTaskIncrementTick+0x164>)
 8005476:	441a      	add	r2, r3
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	3304      	adds	r3, #4
 800547c:	4619      	mov	r1, r3
 800547e:	4610      	mov	r0, r2
 8005480:	f7fe ff73 	bl	800436a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005488:	4b1b      	ldr	r3, [pc, #108]	; (80054f8 <xTaskIncrementTick+0x168>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800548e:	429a      	cmp	r2, r3
 8005490:	d3b8      	bcc.n	8005404 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005492:	2301      	movs	r3, #1
 8005494:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005496:	e7b5      	b.n	8005404 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005498:	4b17      	ldr	r3, [pc, #92]	; (80054f8 <xTaskIncrementTick+0x168>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800549e:	4915      	ldr	r1, [pc, #84]	; (80054f4 <xTaskIncrementTick+0x164>)
 80054a0:	4613      	mov	r3, r2
 80054a2:	009b      	lsls	r3, r3, #2
 80054a4:	4413      	add	r3, r2
 80054a6:	009b      	lsls	r3, r3, #2
 80054a8:	440b      	add	r3, r1
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	d901      	bls.n	80054b4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80054b0:	2301      	movs	r3, #1
 80054b2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80054b4:	4b11      	ldr	r3, [pc, #68]	; (80054fc <xTaskIncrementTick+0x16c>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d007      	beq.n	80054cc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80054bc:	2301      	movs	r3, #1
 80054be:	617b      	str	r3, [r7, #20]
 80054c0:	e004      	b.n	80054cc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80054c2:	4b0f      	ldr	r3, [pc, #60]	; (8005500 <xTaskIncrementTick+0x170>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	3301      	adds	r3, #1
 80054c8:	4a0d      	ldr	r2, [pc, #52]	; (8005500 <xTaskIncrementTick+0x170>)
 80054ca:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80054cc:	697b      	ldr	r3, [r7, #20]
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3718      	adds	r7, #24
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}
 80054d6:	bf00      	nop
 80054d8:	20001140 	.word	0x20001140
 80054dc:	2000111c 	.word	0x2000111c
 80054e0:	200010d0 	.word	0x200010d0
 80054e4:	200010d4 	.word	0x200010d4
 80054e8:	20001130 	.word	0x20001130
 80054ec:	20001138 	.word	0x20001138
 80054f0:	20001120 	.word	0x20001120
 80054f4:	20000c48 	.word	0x20000c48
 80054f8:	20000c44 	.word	0x20000c44
 80054fc:	2000112c 	.word	0x2000112c
 8005500:	20001128 	.word	0x20001128

08005504 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005504:	b480      	push	{r7}
 8005506:	b085      	sub	sp, #20
 8005508:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800550a:	4b2a      	ldr	r3, [pc, #168]	; (80055b4 <vTaskSwitchContext+0xb0>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d003      	beq.n	800551a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005512:	4b29      	ldr	r3, [pc, #164]	; (80055b8 <vTaskSwitchContext+0xb4>)
 8005514:	2201      	movs	r2, #1
 8005516:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005518:	e046      	b.n	80055a8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800551a:	4b27      	ldr	r3, [pc, #156]	; (80055b8 <vTaskSwitchContext+0xb4>)
 800551c:	2200      	movs	r2, #0
 800551e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005520:	4b26      	ldr	r3, [pc, #152]	; (80055bc <vTaskSwitchContext+0xb8>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	60fb      	str	r3, [r7, #12]
 8005526:	e010      	b.n	800554a <vTaskSwitchContext+0x46>
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d10a      	bne.n	8005544 <vTaskSwitchContext+0x40>
	__asm volatile
 800552e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005532:	f383 8811 	msr	BASEPRI, r3
 8005536:	f3bf 8f6f 	isb	sy
 800553a:	f3bf 8f4f 	dsb	sy
 800553e:	607b      	str	r3, [r7, #4]
}
 8005540:	bf00      	nop
 8005542:	e7fe      	b.n	8005542 <vTaskSwitchContext+0x3e>
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	3b01      	subs	r3, #1
 8005548:	60fb      	str	r3, [r7, #12]
 800554a:	491d      	ldr	r1, [pc, #116]	; (80055c0 <vTaskSwitchContext+0xbc>)
 800554c:	68fa      	ldr	r2, [r7, #12]
 800554e:	4613      	mov	r3, r2
 8005550:	009b      	lsls	r3, r3, #2
 8005552:	4413      	add	r3, r2
 8005554:	009b      	lsls	r3, r3, #2
 8005556:	440b      	add	r3, r1
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d0e4      	beq.n	8005528 <vTaskSwitchContext+0x24>
 800555e:	68fa      	ldr	r2, [r7, #12]
 8005560:	4613      	mov	r3, r2
 8005562:	009b      	lsls	r3, r3, #2
 8005564:	4413      	add	r3, r2
 8005566:	009b      	lsls	r3, r3, #2
 8005568:	4a15      	ldr	r2, [pc, #84]	; (80055c0 <vTaskSwitchContext+0xbc>)
 800556a:	4413      	add	r3, r2
 800556c:	60bb      	str	r3, [r7, #8]
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	685a      	ldr	r2, [r3, #4]
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	605a      	str	r2, [r3, #4]
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	685a      	ldr	r2, [r3, #4]
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	3308      	adds	r3, #8
 8005580:	429a      	cmp	r2, r3
 8005582:	d104      	bne.n	800558e <vTaskSwitchContext+0x8a>
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	685a      	ldr	r2, [r3, #4]
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	605a      	str	r2, [r3, #4]
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	4a0b      	ldr	r2, [pc, #44]	; (80055c4 <vTaskSwitchContext+0xc0>)
 8005596:	6013      	str	r3, [r2, #0]
 8005598:	4a08      	ldr	r2, [pc, #32]	; (80055bc <vTaskSwitchContext+0xb8>)
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800559e:	4b09      	ldr	r3, [pc, #36]	; (80055c4 <vTaskSwitchContext+0xc0>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	3354      	adds	r3, #84	; 0x54
 80055a4:	4a08      	ldr	r2, [pc, #32]	; (80055c8 <vTaskSwitchContext+0xc4>)
 80055a6:	6013      	str	r3, [r2, #0]
}
 80055a8:	bf00      	nop
 80055aa:	3714      	adds	r7, #20
 80055ac:	46bd      	mov	sp, r7
 80055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b2:	4770      	bx	lr
 80055b4:	20001140 	.word	0x20001140
 80055b8:	2000112c 	.word	0x2000112c
 80055bc:	20001120 	.word	0x20001120
 80055c0:	20000c48 	.word	0x20000c48
 80055c4:	20000c44 	.word	0x20000c44
 80055c8:	20000014 	.word	0x20000014

080055cc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b084      	sub	sp, #16
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
 80055d4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d10a      	bne.n	80055f2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80055dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e0:	f383 8811 	msr	BASEPRI, r3
 80055e4:	f3bf 8f6f 	isb	sy
 80055e8:	f3bf 8f4f 	dsb	sy
 80055ec:	60fb      	str	r3, [r7, #12]
}
 80055ee:	bf00      	nop
 80055f0:	e7fe      	b.n	80055f0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80055f2:	4b07      	ldr	r3, [pc, #28]	; (8005610 <vTaskPlaceOnEventList+0x44>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	3318      	adds	r3, #24
 80055f8:	4619      	mov	r1, r3
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f7fe fed9 	bl	80043b2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005600:	2101      	movs	r1, #1
 8005602:	6838      	ldr	r0, [r7, #0]
 8005604:	f000 fa80 	bl	8005b08 <prvAddCurrentTaskToDelayedList>
}
 8005608:	bf00      	nop
 800560a:	3710      	adds	r7, #16
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}
 8005610:	20000c44 	.word	0x20000c44

08005614 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005614:	b580      	push	{r7, lr}
 8005616:	b086      	sub	sp, #24
 8005618:	af00      	add	r7, sp, #0
 800561a:	60f8      	str	r0, [r7, #12]
 800561c:	60b9      	str	r1, [r7, #8]
 800561e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d10a      	bne.n	800563c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800562a:	f383 8811 	msr	BASEPRI, r3
 800562e:	f3bf 8f6f 	isb	sy
 8005632:	f3bf 8f4f 	dsb	sy
 8005636:	617b      	str	r3, [r7, #20]
}
 8005638:	bf00      	nop
 800563a:	e7fe      	b.n	800563a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800563c:	4b0a      	ldr	r3, [pc, #40]	; (8005668 <vTaskPlaceOnEventListRestricted+0x54>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	3318      	adds	r3, #24
 8005642:	4619      	mov	r1, r3
 8005644:	68f8      	ldr	r0, [r7, #12]
 8005646:	f7fe fe90 	bl	800436a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d002      	beq.n	8005656 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005650:	f04f 33ff 	mov.w	r3, #4294967295
 8005654:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005656:	6879      	ldr	r1, [r7, #4]
 8005658:	68b8      	ldr	r0, [r7, #8]
 800565a:	f000 fa55 	bl	8005b08 <prvAddCurrentTaskToDelayedList>
	}
 800565e:	bf00      	nop
 8005660:	3718      	adds	r7, #24
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}
 8005666:	bf00      	nop
 8005668:	20000c44 	.word	0x20000c44

0800566c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b086      	sub	sp, #24
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	68db      	ldr	r3, [r3, #12]
 8005678:	68db      	ldr	r3, [r3, #12]
 800567a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d10a      	bne.n	8005698 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005686:	f383 8811 	msr	BASEPRI, r3
 800568a:	f3bf 8f6f 	isb	sy
 800568e:	f3bf 8f4f 	dsb	sy
 8005692:	60fb      	str	r3, [r7, #12]
}
 8005694:	bf00      	nop
 8005696:	e7fe      	b.n	8005696 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	3318      	adds	r3, #24
 800569c:	4618      	mov	r0, r3
 800569e:	f7fe fec1 	bl	8004424 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056a2:	4b1e      	ldr	r3, [pc, #120]	; (800571c <xTaskRemoveFromEventList+0xb0>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d11d      	bne.n	80056e6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	3304      	adds	r3, #4
 80056ae:	4618      	mov	r0, r3
 80056b0:	f7fe feb8 	bl	8004424 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056b8:	4b19      	ldr	r3, [pc, #100]	; (8005720 <xTaskRemoveFromEventList+0xb4>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	429a      	cmp	r2, r3
 80056be:	d903      	bls.n	80056c8 <xTaskRemoveFromEventList+0x5c>
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056c4:	4a16      	ldr	r2, [pc, #88]	; (8005720 <xTaskRemoveFromEventList+0xb4>)
 80056c6:	6013      	str	r3, [r2, #0]
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056cc:	4613      	mov	r3, r2
 80056ce:	009b      	lsls	r3, r3, #2
 80056d0:	4413      	add	r3, r2
 80056d2:	009b      	lsls	r3, r3, #2
 80056d4:	4a13      	ldr	r2, [pc, #76]	; (8005724 <xTaskRemoveFromEventList+0xb8>)
 80056d6:	441a      	add	r2, r3
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	3304      	adds	r3, #4
 80056dc:	4619      	mov	r1, r3
 80056de:	4610      	mov	r0, r2
 80056e0:	f7fe fe43 	bl	800436a <vListInsertEnd>
 80056e4:	e005      	b.n	80056f2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	3318      	adds	r3, #24
 80056ea:	4619      	mov	r1, r3
 80056ec:	480e      	ldr	r0, [pc, #56]	; (8005728 <xTaskRemoveFromEventList+0xbc>)
 80056ee:	f7fe fe3c 	bl	800436a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056f6:	4b0d      	ldr	r3, [pc, #52]	; (800572c <xTaskRemoveFromEventList+0xc0>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056fc:	429a      	cmp	r2, r3
 80056fe:	d905      	bls.n	800570c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005700:	2301      	movs	r3, #1
 8005702:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005704:	4b0a      	ldr	r3, [pc, #40]	; (8005730 <xTaskRemoveFromEventList+0xc4>)
 8005706:	2201      	movs	r2, #1
 8005708:	601a      	str	r2, [r3, #0]
 800570a:	e001      	b.n	8005710 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800570c:	2300      	movs	r3, #0
 800570e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005710:	697b      	ldr	r3, [r7, #20]
}
 8005712:	4618      	mov	r0, r3
 8005714:	3718      	adds	r7, #24
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}
 800571a:	bf00      	nop
 800571c:	20001140 	.word	0x20001140
 8005720:	20001120 	.word	0x20001120
 8005724:	20000c48 	.word	0x20000c48
 8005728:	200010d8 	.word	0x200010d8
 800572c:	20000c44 	.word	0x20000c44
 8005730:	2000112c 	.word	0x2000112c

08005734 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005734:	b480      	push	{r7}
 8005736:	b083      	sub	sp, #12
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800573c:	4b06      	ldr	r3, [pc, #24]	; (8005758 <vTaskInternalSetTimeOutState+0x24>)
 800573e:	681a      	ldr	r2, [r3, #0]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005744:	4b05      	ldr	r3, [pc, #20]	; (800575c <vTaskInternalSetTimeOutState+0x28>)
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	605a      	str	r2, [r3, #4]
}
 800574c:	bf00      	nop
 800574e:	370c      	adds	r7, #12
 8005750:	46bd      	mov	sp, r7
 8005752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005756:	4770      	bx	lr
 8005758:	20001130 	.word	0x20001130
 800575c:	2000111c 	.word	0x2000111c

08005760 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b088      	sub	sp, #32
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
 8005768:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d10a      	bne.n	8005786 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005774:	f383 8811 	msr	BASEPRI, r3
 8005778:	f3bf 8f6f 	isb	sy
 800577c:	f3bf 8f4f 	dsb	sy
 8005780:	613b      	str	r3, [r7, #16]
}
 8005782:	bf00      	nop
 8005784:	e7fe      	b.n	8005784 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d10a      	bne.n	80057a2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800578c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005790:	f383 8811 	msr	BASEPRI, r3
 8005794:	f3bf 8f6f 	isb	sy
 8005798:	f3bf 8f4f 	dsb	sy
 800579c:	60fb      	str	r3, [r7, #12]
}
 800579e:	bf00      	nop
 80057a0:	e7fe      	b.n	80057a0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80057a2:	f000 fedf 	bl	8006564 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80057a6:	4b1d      	ldr	r3, [pc, #116]	; (800581c <xTaskCheckForTimeOut+0xbc>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	69ba      	ldr	r2, [r7, #24]
 80057b2:	1ad3      	subs	r3, r2, r3
 80057b4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057be:	d102      	bne.n	80057c6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80057c0:	2300      	movs	r3, #0
 80057c2:	61fb      	str	r3, [r7, #28]
 80057c4:	e023      	b.n	800580e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681a      	ldr	r2, [r3, #0]
 80057ca:	4b15      	ldr	r3, [pc, #84]	; (8005820 <xTaskCheckForTimeOut+0xc0>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	429a      	cmp	r2, r3
 80057d0:	d007      	beq.n	80057e2 <xTaskCheckForTimeOut+0x82>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	69ba      	ldr	r2, [r7, #24]
 80057d8:	429a      	cmp	r2, r3
 80057da:	d302      	bcc.n	80057e2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80057dc:	2301      	movs	r3, #1
 80057de:	61fb      	str	r3, [r7, #28]
 80057e0:	e015      	b.n	800580e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	697a      	ldr	r2, [r7, #20]
 80057e8:	429a      	cmp	r2, r3
 80057ea:	d20b      	bcs.n	8005804 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	681a      	ldr	r2, [r3, #0]
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	1ad2      	subs	r2, r2, r3
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	f7ff ff9b 	bl	8005734 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80057fe:	2300      	movs	r3, #0
 8005800:	61fb      	str	r3, [r7, #28]
 8005802:	e004      	b.n	800580e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	2200      	movs	r2, #0
 8005808:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800580a:	2301      	movs	r3, #1
 800580c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800580e:	f000 fed9 	bl	80065c4 <vPortExitCritical>

	return xReturn;
 8005812:	69fb      	ldr	r3, [r7, #28]
}
 8005814:	4618      	mov	r0, r3
 8005816:	3720      	adds	r7, #32
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}
 800581c:	2000111c 	.word	0x2000111c
 8005820:	20001130 	.word	0x20001130

08005824 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005824:	b480      	push	{r7}
 8005826:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005828:	4b03      	ldr	r3, [pc, #12]	; (8005838 <vTaskMissedYield+0x14>)
 800582a:	2201      	movs	r2, #1
 800582c:	601a      	str	r2, [r3, #0]
}
 800582e:	bf00      	nop
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr
 8005838:	2000112c 	.word	0x2000112c

0800583c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b082      	sub	sp, #8
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005844:	f000 f852 	bl	80058ec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005848:	4b06      	ldr	r3, [pc, #24]	; (8005864 <prvIdleTask+0x28>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	2b01      	cmp	r3, #1
 800584e:	d9f9      	bls.n	8005844 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005850:	4b05      	ldr	r3, [pc, #20]	; (8005868 <prvIdleTask+0x2c>)
 8005852:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005856:	601a      	str	r2, [r3, #0]
 8005858:	f3bf 8f4f 	dsb	sy
 800585c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005860:	e7f0      	b.n	8005844 <prvIdleTask+0x8>
 8005862:	bf00      	nop
 8005864:	20000c48 	.word	0x20000c48
 8005868:	e000ed04 	.word	0xe000ed04

0800586c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b082      	sub	sp, #8
 8005870:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005872:	2300      	movs	r3, #0
 8005874:	607b      	str	r3, [r7, #4]
 8005876:	e00c      	b.n	8005892 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005878:	687a      	ldr	r2, [r7, #4]
 800587a:	4613      	mov	r3, r2
 800587c:	009b      	lsls	r3, r3, #2
 800587e:	4413      	add	r3, r2
 8005880:	009b      	lsls	r3, r3, #2
 8005882:	4a12      	ldr	r2, [pc, #72]	; (80058cc <prvInitialiseTaskLists+0x60>)
 8005884:	4413      	add	r3, r2
 8005886:	4618      	mov	r0, r3
 8005888:	f7fe fd42 	bl	8004310 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	3301      	adds	r3, #1
 8005890:	607b      	str	r3, [r7, #4]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2b37      	cmp	r3, #55	; 0x37
 8005896:	d9ef      	bls.n	8005878 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005898:	480d      	ldr	r0, [pc, #52]	; (80058d0 <prvInitialiseTaskLists+0x64>)
 800589a:	f7fe fd39 	bl	8004310 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800589e:	480d      	ldr	r0, [pc, #52]	; (80058d4 <prvInitialiseTaskLists+0x68>)
 80058a0:	f7fe fd36 	bl	8004310 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80058a4:	480c      	ldr	r0, [pc, #48]	; (80058d8 <prvInitialiseTaskLists+0x6c>)
 80058a6:	f7fe fd33 	bl	8004310 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80058aa:	480c      	ldr	r0, [pc, #48]	; (80058dc <prvInitialiseTaskLists+0x70>)
 80058ac:	f7fe fd30 	bl	8004310 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80058b0:	480b      	ldr	r0, [pc, #44]	; (80058e0 <prvInitialiseTaskLists+0x74>)
 80058b2:	f7fe fd2d 	bl	8004310 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80058b6:	4b0b      	ldr	r3, [pc, #44]	; (80058e4 <prvInitialiseTaskLists+0x78>)
 80058b8:	4a05      	ldr	r2, [pc, #20]	; (80058d0 <prvInitialiseTaskLists+0x64>)
 80058ba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80058bc:	4b0a      	ldr	r3, [pc, #40]	; (80058e8 <prvInitialiseTaskLists+0x7c>)
 80058be:	4a05      	ldr	r2, [pc, #20]	; (80058d4 <prvInitialiseTaskLists+0x68>)
 80058c0:	601a      	str	r2, [r3, #0]
}
 80058c2:	bf00      	nop
 80058c4:	3708      	adds	r7, #8
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}
 80058ca:	bf00      	nop
 80058cc:	20000c48 	.word	0x20000c48
 80058d0:	200010a8 	.word	0x200010a8
 80058d4:	200010bc 	.word	0x200010bc
 80058d8:	200010d8 	.word	0x200010d8
 80058dc:	200010ec 	.word	0x200010ec
 80058e0:	20001104 	.word	0x20001104
 80058e4:	200010d0 	.word	0x200010d0
 80058e8:	200010d4 	.word	0x200010d4

080058ec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b082      	sub	sp, #8
 80058f0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80058f2:	e019      	b.n	8005928 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80058f4:	f000 fe36 	bl	8006564 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058f8:	4b10      	ldr	r3, [pc, #64]	; (800593c <prvCheckTasksWaitingTermination+0x50>)
 80058fa:	68db      	ldr	r3, [r3, #12]
 80058fc:	68db      	ldr	r3, [r3, #12]
 80058fe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	3304      	adds	r3, #4
 8005904:	4618      	mov	r0, r3
 8005906:	f7fe fd8d 	bl	8004424 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800590a:	4b0d      	ldr	r3, [pc, #52]	; (8005940 <prvCheckTasksWaitingTermination+0x54>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	3b01      	subs	r3, #1
 8005910:	4a0b      	ldr	r2, [pc, #44]	; (8005940 <prvCheckTasksWaitingTermination+0x54>)
 8005912:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005914:	4b0b      	ldr	r3, [pc, #44]	; (8005944 <prvCheckTasksWaitingTermination+0x58>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	3b01      	subs	r3, #1
 800591a:	4a0a      	ldr	r2, [pc, #40]	; (8005944 <prvCheckTasksWaitingTermination+0x58>)
 800591c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800591e:	f000 fe51 	bl	80065c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f000 f810 	bl	8005948 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005928:	4b06      	ldr	r3, [pc, #24]	; (8005944 <prvCheckTasksWaitingTermination+0x58>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d1e1      	bne.n	80058f4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005930:	bf00      	nop
 8005932:	bf00      	nop
 8005934:	3708      	adds	r7, #8
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}
 800593a:	bf00      	nop
 800593c:	200010ec 	.word	0x200010ec
 8005940:	20001118 	.word	0x20001118
 8005944:	20001100 	.word	0x20001100

08005948 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005948:	b580      	push	{r7, lr}
 800594a:	b084      	sub	sp, #16
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	3354      	adds	r3, #84	; 0x54
 8005954:	4618      	mov	r0, r3
 8005956:	f001 fb05 	bl	8006f64 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005960:	2b00      	cmp	r3, #0
 8005962:	d108      	bne.n	8005976 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005968:	4618      	mov	r0, r3
 800596a:	f000 ffe9 	bl	8006940 <vPortFree>
				vPortFree( pxTCB );
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f000 ffe6 	bl	8006940 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005974:	e018      	b.n	80059a8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800597c:	2b01      	cmp	r3, #1
 800597e:	d103      	bne.n	8005988 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	f000 ffdd 	bl	8006940 <vPortFree>
	}
 8005986:	e00f      	b.n	80059a8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800598e:	2b02      	cmp	r3, #2
 8005990:	d00a      	beq.n	80059a8 <prvDeleteTCB+0x60>
	__asm volatile
 8005992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005996:	f383 8811 	msr	BASEPRI, r3
 800599a:	f3bf 8f6f 	isb	sy
 800599e:	f3bf 8f4f 	dsb	sy
 80059a2:	60fb      	str	r3, [r7, #12]
}
 80059a4:	bf00      	nop
 80059a6:	e7fe      	b.n	80059a6 <prvDeleteTCB+0x5e>
	}
 80059a8:	bf00      	nop
 80059aa:	3710      	adds	r7, #16
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}

080059b0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80059b0:	b480      	push	{r7}
 80059b2:	b083      	sub	sp, #12
 80059b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80059b6:	4b0c      	ldr	r3, [pc, #48]	; (80059e8 <prvResetNextTaskUnblockTime+0x38>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d104      	bne.n	80059ca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80059c0:	4b0a      	ldr	r3, [pc, #40]	; (80059ec <prvResetNextTaskUnblockTime+0x3c>)
 80059c2:	f04f 32ff 	mov.w	r2, #4294967295
 80059c6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80059c8:	e008      	b.n	80059dc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059ca:	4b07      	ldr	r3, [pc, #28]	; (80059e8 <prvResetNextTaskUnblockTime+0x38>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	68db      	ldr	r3, [r3, #12]
 80059d0:	68db      	ldr	r3, [r3, #12]
 80059d2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	4a04      	ldr	r2, [pc, #16]	; (80059ec <prvResetNextTaskUnblockTime+0x3c>)
 80059da:	6013      	str	r3, [r2, #0]
}
 80059dc:	bf00      	nop
 80059de:	370c      	adds	r7, #12
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr
 80059e8:	200010d0 	.word	0x200010d0
 80059ec:	20001138 	.word	0x20001138

080059f0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80059f0:	b480      	push	{r7}
 80059f2:	b083      	sub	sp, #12
 80059f4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80059f6:	4b0b      	ldr	r3, [pc, #44]	; (8005a24 <xTaskGetSchedulerState+0x34>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d102      	bne.n	8005a04 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80059fe:	2301      	movs	r3, #1
 8005a00:	607b      	str	r3, [r7, #4]
 8005a02:	e008      	b.n	8005a16 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a04:	4b08      	ldr	r3, [pc, #32]	; (8005a28 <xTaskGetSchedulerState+0x38>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d102      	bne.n	8005a12 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005a0c:	2302      	movs	r3, #2
 8005a0e:	607b      	str	r3, [r7, #4]
 8005a10:	e001      	b.n	8005a16 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005a12:	2300      	movs	r3, #0
 8005a14:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005a16:	687b      	ldr	r3, [r7, #4]
	}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	370c      	adds	r7, #12
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr
 8005a24:	20001124 	.word	0x20001124
 8005a28:	20001140 	.word	0x20001140

08005a2c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b086      	sub	sp, #24
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d056      	beq.n	8005af0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005a42:	4b2e      	ldr	r3, [pc, #184]	; (8005afc <xTaskPriorityDisinherit+0xd0>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	693a      	ldr	r2, [r7, #16]
 8005a48:	429a      	cmp	r2, r3
 8005a4a:	d00a      	beq.n	8005a62 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a50:	f383 8811 	msr	BASEPRI, r3
 8005a54:	f3bf 8f6f 	isb	sy
 8005a58:	f3bf 8f4f 	dsb	sy
 8005a5c:	60fb      	str	r3, [r7, #12]
}
 8005a5e:	bf00      	nop
 8005a60:	e7fe      	b.n	8005a60 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d10a      	bne.n	8005a80 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a6e:	f383 8811 	msr	BASEPRI, r3
 8005a72:	f3bf 8f6f 	isb	sy
 8005a76:	f3bf 8f4f 	dsb	sy
 8005a7a:	60bb      	str	r3, [r7, #8]
}
 8005a7c:	bf00      	nop
 8005a7e:	e7fe      	b.n	8005a7e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a84:	1e5a      	subs	r2, r3, #1
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a92:	429a      	cmp	r2, r3
 8005a94:	d02c      	beq.n	8005af0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d128      	bne.n	8005af0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	3304      	adds	r3, #4
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	f7fe fcbe 	bl	8004424 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ab4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ac0:	4b0f      	ldr	r3, [pc, #60]	; (8005b00 <xTaskPriorityDisinherit+0xd4>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	d903      	bls.n	8005ad0 <xTaskPriorityDisinherit+0xa4>
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005acc:	4a0c      	ldr	r2, [pc, #48]	; (8005b00 <xTaskPriorityDisinherit+0xd4>)
 8005ace:	6013      	str	r3, [r2, #0]
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ad4:	4613      	mov	r3, r2
 8005ad6:	009b      	lsls	r3, r3, #2
 8005ad8:	4413      	add	r3, r2
 8005ada:	009b      	lsls	r3, r3, #2
 8005adc:	4a09      	ldr	r2, [pc, #36]	; (8005b04 <xTaskPriorityDisinherit+0xd8>)
 8005ade:	441a      	add	r2, r3
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	3304      	adds	r3, #4
 8005ae4:	4619      	mov	r1, r3
 8005ae6:	4610      	mov	r0, r2
 8005ae8:	f7fe fc3f 	bl	800436a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005aec:	2301      	movs	r3, #1
 8005aee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005af0:	697b      	ldr	r3, [r7, #20]
	}
 8005af2:	4618      	mov	r0, r3
 8005af4:	3718      	adds	r7, #24
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}
 8005afa:	bf00      	nop
 8005afc:	20000c44 	.word	0x20000c44
 8005b00:	20001120 	.word	0x20001120
 8005b04:	20000c48 	.word	0x20000c48

08005b08 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b084      	sub	sp, #16
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
 8005b10:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005b12:	4b21      	ldr	r3, [pc, #132]	; (8005b98 <prvAddCurrentTaskToDelayedList+0x90>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005b18:	4b20      	ldr	r3, [pc, #128]	; (8005b9c <prvAddCurrentTaskToDelayedList+0x94>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	3304      	adds	r3, #4
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f7fe fc80 	bl	8004424 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b2a:	d10a      	bne.n	8005b42 <prvAddCurrentTaskToDelayedList+0x3a>
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d007      	beq.n	8005b42 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b32:	4b1a      	ldr	r3, [pc, #104]	; (8005b9c <prvAddCurrentTaskToDelayedList+0x94>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	3304      	adds	r3, #4
 8005b38:	4619      	mov	r1, r3
 8005b3a:	4819      	ldr	r0, [pc, #100]	; (8005ba0 <prvAddCurrentTaskToDelayedList+0x98>)
 8005b3c:	f7fe fc15 	bl	800436a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005b40:	e026      	b.n	8005b90 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005b42:	68fa      	ldr	r2, [r7, #12]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	4413      	add	r3, r2
 8005b48:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005b4a:	4b14      	ldr	r3, [pc, #80]	; (8005b9c <prvAddCurrentTaskToDelayedList+0x94>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	68ba      	ldr	r2, [r7, #8]
 8005b50:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005b52:	68ba      	ldr	r2, [r7, #8]
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	429a      	cmp	r2, r3
 8005b58:	d209      	bcs.n	8005b6e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b5a:	4b12      	ldr	r3, [pc, #72]	; (8005ba4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005b5c:	681a      	ldr	r2, [r3, #0]
 8005b5e:	4b0f      	ldr	r3, [pc, #60]	; (8005b9c <prvAddCurrentTaskToDelayedList+0x94>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	3304      	adds	r3, #4
 8005b64:	4619      	mov	r1, r3
 8005b66:	4610      	mov	r0, r2
 8005b68:	f7fe fc23 	bl	80043b2 <vListInsert>
}
 8005b6c:	e010      	b.n	8005b90 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b6e:	4b0e      	ldr	r3, [pc, #56]	; (8005ba8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005b70:	681a      	ldr	r2, [r3, #0]
 8005b72:	4b0a      	ldr	r3, [pc, #40]	; (8005b9c <prvAddCurrentTaskToDelayedList+0x94>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	3304      	adds	r3, #4
 8005b78:	4619      	mov	r1, r3
 8005b7a:	4610      	mov	r0, r2
 8005b7c:	f7fe fc19 	bl	80043b2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005b80:	4b0a      	ldr	r3, [pc, #40]	; (8005bac <prvAddCurrentTaskToDelayedList+0xa4>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	68ba      	ldr	r2, [r7, #8]
 8005b86:	429a      	cmp	r2, r3
 8005b88:	d202      	bcs.n	8005b90 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005b8a:	4a08      	ldr	r2, [pc, #32]	; (8005bac <prvAddCurrentTaskToDelayedList+0xa4>)
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	6013      	str	r3, [r2, #0]
}
 8005b90:	bf00      	nop
 8005b92:	3710      	adds	r7, #16
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}
 8005b98:	2000111c 	.word	0x2000111c
 8005b9c:	20000c44 	.word	0x20000c44
 8005ba0:	20001104 	.word	0x20001104
 8005ba4:	200010d4 	.word	0x200010d4
 8005ba8:	200010d0 	.word	0x200010d0
 8005bac:	20001138 	.word	0x20001138

08005bb0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b08a      	sub	sp, #40	; 0x28
 8005bb4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005bba:	f000 fb63 	bl	8006284 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005bbe:	4b1c      	ldr	r3, [pc, #112]	; (8005c30 <xTimerCreateTimerTask+0x80>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d021      	beq.n	8005c0a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005bce:	1d3a      	adds	r2, r7, #4
 8005bd0:	f107 0108 	add.w	r1, r7, #8
 8005bd4:	f107 030c 	add.w	r3, r7, #12
 8005bd8:	4618      	mov	r0, r3
 8005bda:	f7fe fb7f 	bl	80042dc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005bde:	6879      	ldr	r1, [r7, #4]
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	68fa      	ldr	r2, [r7, #12]
 8005be4:	9202      	str	r2, [sp, #8]
 8005be6:	9301      	str	r3, [sp, #4]
 8005be8:	2302      	movs	r3, #2
 8005bea:	9300      	str	r3, [sp, #0]
 8005bec:	2300      	movs	r3, #0
 8005bee:	460a      	mov	r2, r1
 8005bf0:	4910      	ldr	r1, [pc, #64]	; (8005c34 <xTimerCreateTimerTask+0x84>)
 8005bf2:	4811      	ldr	r0, [pc, #68]	; (8005c38 <xTimerCreateTimerTask+0x88>)
 8005bf4:	f7ff f92c 	bl	8004e50 <xTaskCreateStatic>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	4a10      	ldr	r2, [pc, #64]	; (8005c3c <xTimerCreateTimerTask+0x8c>)
 8005bfc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005bfe:	4b0f      	ldr	r3, [pc, #60]	; (8005c3c <xTimerCreateTimerTask+0x8c>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d001      	beq.n	8005c0a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005c06:	2301      	movs	r3, #1
 8005c08:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d10a      	bne.n	8005c26 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c14:	f383 8811 	msr	BASEPRI, r3
 8005c18:	f3bf 8f6f 	isb	sy
 8005c1c:	f3bf 8f4f 	dsb	sy
 8005c20:	613b      	str	r3, [r7, #16]
}
 8005c22:	bf00      	nop
 8005c24:	e7fe      	b.n	8005c24 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005c26:	697b      	ldr	r3, [r7, #20]
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3718      	adds	r7, #24
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}
 8005c30:	20001174 	.word	0x20001174
 8005c34:	08007cbc 	.word	0x08007cbc
 8005c38:	08005e2d 	.word	0x08005e2d
 8005c3c:	20001178 	.word	0x20001178

08005c40 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b088      	sub	sp, #32
 8005c44:	af02      	add	r7, sp, #8
 8005c46:	60f8      	str	r0, [r7, #12]
 8005c48:	60b9      	str	r1, [r7, #8]
 8005c4a:	607a      	str	r2, [r7, #4]
 8005c4c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8005c4e:	202c      	movs	r0, #44	; 0x2c
 8005c50:	f000 fdaa 	bl	80067a8 <pvPortMalloc>
 8005c54:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d00d      	beq.n	8005c78 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	9301      	str	r3, [sp, #4]
 8005c68:	6a3b      	ldr	r3, [r7, #32]
 8005c6a:	9300      	str	r3, [sp, #0]
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	68b9      	ldr	r1, [r7, #8]
 8005c72:	68f8      	ldr	r0, [r7, #12]
 8005c74:	f000 f805 	bl	8005c82 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8005c78:	697b      	ldr	r3, [r7, #20]
	}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3718      	adds	r7, #24
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}

08005c82 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8005c82:	b580      	push	{r7, lr}
 8005c84:	b086      	sub	sp, #24
 8005c86:	af00      	add	r7, sp, #0
 8005c88:	60f8      	str	r0, [r7, #12]
 8005c8a:	60b9      	str	r1, [r7, #8]
 8005c8c:	607a      	str	r2, [r7, #4]
 8005c8e:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d10a      	bne.n	8005cac <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8005c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c9a:	f383 8811 	msr	BASEPRI, r3
 8005c9e:	f3bf 8f6f 	isb	sy
 8005ca2:	f3bf 8f4f 	dsb	sy
 8005ca6:	617b      	str	r3, [r7, #20]
}
 8005ca8:	bf00      	nop
 8005caa:	e7fe      	b.n	8005caa <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8005cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d01e      	beq.n	8005cf0 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8005cb2:	f000 fae7 	bl	8006284 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8005cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb8:	68fa      	ldr	r2, [r7, #12]
 8005cba:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8005cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cbe:	68ba      	ldr	r2, [r7, #8]
 8005cc0:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8005cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc4:	683a      	ldr	r2, [r7, #0]
 8005cc6:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8005cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cca:	6a3a      	ldr	r2, [r7, #32]
 8005ccc:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8005cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd0:	3304      	adds	r3, #4
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f7fe fb3c 	bl	8004350 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d008      	beq.n	8005cf0 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8005cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ce4:	f043 0304 	orr.w	r3, r3, #4
 8005ce8:	b2da      	uxtb	r2, r3
 8005cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8005cf0:	bf00      	nop
 8005cf2:	3718      	adds	r7, #24
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}

08005cf8 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b08a      	sub	sp, #40	; 0x28
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	60f8      	str	r0, [r7, #12]
 8005d00:	60b9      	str	r1, [r7, #8]
 8005d02:	607a      	str	r2, [r7, #4]
 8005d04:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005d06:	2300      	movs	r3, #0
 8005d08:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d10a      	bne.n	8005d26 <xTimerGenericCommand+0x2e>
	__asm volatile
 8005d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d14:	f383 8811 	msr	BASEPRI, r3
 8005d18:	f3bf 8f6f 	isb	sy
 8005d1c:	f3bf 8f4f 	dsb	sy
 8005d20:	623b      	str	r3, [r7, #32]
}
 8005d22:	bf00      	nop
 8005d24:	e7fe      	b.n	8005d24 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005d26:	4b1a      	ldr	r3, [pc, #104]	; (8005d90 <xTimerGenericCommand+0x98>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d02a      	beq.n	8005d84 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	2b05      	cmp	r3, #5
 8005d3e:	dc18      	bgt.n	8005d72 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005d40:	f7ff fe56 	bl	80059f0 <xTaskGetSchedulerState>
 8005d44:	4603      	mov	r3, r0
 8005d46:	2b02      	cmp	r3, #2
 8005d48:	d109      	bne.n	8005d5e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005d4a:	4b11      	ldr	r3, [pc, #68]	; (8005d90 <xTimerGenericCommand+0x98>)
 8005d4c:	6818      	ldr	r0, [r3, #0]
 8005d4e:	f107 0110 	add.w	r1, r7, #16
 8005d52:	2300      	movs	r3, #0
 8005d54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d56:	f7fe fc93 	bl	8004680 <xQueueGenericSend>
 8005d5a:	6278      	str	r0, [r7, #36]	; 0x24
 8005d5c:	e012      	b.n	8005d84 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005d5e:	4b0c      	ldr	r3, [pc, #48]	; (8005d90 <xTimerGenericCommand+0x98>)
 8005d60:	6818      	ldr	r0, [r3, #0]
 8005d62:	f107 0110 	add.w	r1, r7, #16
 8005d66:	2300      	movs	r3, #0
 8005d68:	2200      	movs	r2, #0
 8005d6a:	f7fe fc89 	bl	8004680 <xQueueGenericSend>
 8005d6e:	6278      	str	r0, [r7, #36]	; 0x24
 8005d70:	e008      	b.n	8005d84 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005d72:	4b07      	ldr	r3, [pc, #28]	; (8005d90 <xTimerGenericCommand+0x98>)
 8005d74:	6818      	ldr	r0, [r3, #0]
 8005d76:	f107 0110 	add.w	r1, r7, #16
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	683a      	ldr	r2, [r7, #0]
 8005d7e:	f7fe fd7d 	bl	800487c <xQueueGenericSendFromISR>
 8005d82:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3728      	adds	r7, #40	; 0x28
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}
 8005d8e:	bf00      	nop
 8005d90:	20001174 	.word	0x20001174

08005d94 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b088      	sub	sp, #32
 8005d98:	af02      	add	r7, sp, #8
 8005d9a:	6078      	str	r0, [r7, #4]
 8005d9c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d9e:	4b22      	ldr	r3, [pc, #136]	; (8005e28 <prvProcessExpiredTimer+0x94>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	68db      	ldr	r3, [r3, #12]
 8005da4:	68db      	ldr	r3, [r3, #12]
 8005da6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	3304      	adds	r3, #4
 8005dac:	4618      	mov	r0, r3
 8005dae:	f7fe fb39 	bl	8004424 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005db8:	f003 0304 	and.w	r3, r3, #4
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d022      	beq.n	8005e06 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	699a      	ldr	r2, [r3, #24]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	18d1      	adds	r1, r2, r3
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	683a      	ldr	r2, [r7, #0]
 8005dcc:	6978      	ldr	r0, [r7, #20]
 8005dce:	f000 f8d1 	bl	8005f74 <prvInsertTimerInActiveList>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d01f      	beq.n	8005e18 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005dd8:	2300      	movs	r3, #0
 8005dda:	9300      	str	r3, [sp, #0]
 8005ddc:	2300      	movs	r3, #0
 8005dde:	687a      	ldr	r2, [r7, #4]
 8005de0:	2100      	movs	r1, #0
 8005de2:	6978      	ldr	r0, [r7, #20]
 8005de4:	f7ff ff88 	bl	8005cf8 <xTimerGenericCommand>
 8005de8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d113      	bne.n	8005e18 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005df4:	f383 8811 	msr	BASEPRI, r3
 8005df8:	f3bf 8f6f 	isb	sy
 8005dfc:	f3bf 8f4f 	dsb	sy
 8005e00:	60fb      	str	r3, [r7, #12]
}
 8005e02:	bf00      	nop
 8005e04:	e7fe      	b.n	8005e04 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e0c:	f023 0301 	bic.w	r3, r3, #1
 8005e10:	b2da      	uxtb	r2, r3
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	6a1b      	ldr	r3, [r3, #32]
 8005e1c:	6978      	ldr	r0, [r7, #20]
 8005e1e:	4798      	blx	r3
}
 8005e20:	bf00      	nop
 8005e22:	3718      	adds	r7, #24
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}
 8005e28:	2000116c 	.word	0x2000116c

08005e2c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b084      	sub	sp, #16
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005e34:	f107 0308 	add.w	r3, r7, #8
 8005e38:	4618      	mov	r0, r3
 8005e3a:	f000 f857 	bl	8005eec <prvGetNextExpireTime>
 8005e3e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	4619      	mov	r1, r3
 8005e44:	68f8      	ldr	r0, [r7, #12]
 8005e46:	f000 f803 	bl	8005e50 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005e4a:	f000 f8d5 	bl	8005ff8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005e4e:	e7f1      	b.n	8005e34 <prvTimerTask+0x8>

08005e50 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b084      	sub	sp, #16
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
 8005e58:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005e5a:	f7ff f9dd 	bl	8005218 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005e5e:	f107 0308 	add.w	r3, r7, #8
 8005e62:	4618      	mov	r0, r3
 8005e64:	f000 f866 	bl	8005f34 <prvSampleTimeNow>
 8005e68:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d130      	bne.n	8005ed2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d10a      	bne.n	8005e8c <prvProcessTimerOrBlockTask+0x3c>
 8005e76:	687a      	ldr	r2, [r7, #4]
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	429a      	cmp	r2, r3
 8005e7c:	d806      	bhi.n	8005e8c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005e7e:	f7ff f9d9 	bl	8005234 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005e82:	68f9      	ldr	r1, [r7, #12]
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f7ff ff85 	bl	8005d94 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005e8a:	e024      	b.n	8005ed6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d008      	beq.n	8005ea4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005e92:	4b13      	ldr	r3, [pc, #76]	; (8005ee0 <prvProcessTimerOrBlockTask+0x90>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d101      	bne.n	8005ea0 <prvProcessTimerOrBlockTask+0x50>
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	e000      	b.n	8005ea2 <prvProcessTimerOrBlockTask+0x52>
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005ea4:	4b0f      	ldr	r3, [pc, #60]	; (8005ee4 <prvProcessTimerOrBlockTask+0x94>)
 8005ea6:	6818      	ldr	r0, [r3, #0]
 8005ea8:	687a      	ldr	r2, [r7, #4]
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	1ad3      	subs	r3, r2, r3
 8005eae:	683a      	ldr	r2, [r7, #0]
 8005eb0:	4619      	mov	r1, r3
 8005eb2:	f7fe ff99 	bl	8004de8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005eb6:	f7ff f9bd 	bl	8005234 <xTaskResumeAll>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d10a      	bne.n	8005ed6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005ec0:	4b09      	ldr	r3, [pc, #36]	; (8005ee8 <prvProcessTimerOrBlockTask+0x98>)
 8005ec2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ec6:	601a      	str	r2, [r3, #0]
 8005ec8:	f3bf 8f4f 	dsb	sy
 8005ecc:	f3bf 8f6f 	isb	sy
}
 8005ed0:	e001      	b.n	8005ed6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005ed2:	f7ff f9af 	bl	8005234 <xTaskResumeAll>
}
 8005ed6:	bf00      	nop
 8005ed8:	3710      	adds	r7, #16
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}
 8005ede:	bf00      	nop
 8005ee0:	20001170 	.word	0x20001170
 8005ee4:	20001174 	.word	0x20001174
 8005ee8:	e000ed04 	.word	0xe000ed04

08005eec <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005eec:	b480      	push	{r7}
 8005eee:	b085      	sub	sp, #20
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005ef4:	4b0e      	ldr	r3, [pc, #56]	; (8005f30 <prvGetNextExpireTime+0x44>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d101      	bne.n	8005f02 <prvGetNextExpireTime+0x16>
 8005efe:	2201      	movs	r2, #1
 8005f00:	e000      	b.n	8005f04 <prvGetNextExpireTime+0x18>
 8005f02:	2200      	movs	r2, #0
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d105      	bne.n	8005f1c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005f10:	4b07      	ldr	r3, [pc, #28]	; (8005f30 <prvGetNextExpireTime+0x44>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	68db      	ldr	r3, [r3, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	60fb      	str	r3, [r7, #12]
 8005f1a:	e001      	b.n	8005f20 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005f20:	68fb      	ldr	r3, [r7, #12]
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	3714      	adds	r7, #20
 8005f26:	46bd      	mov	sp, r7
 8005f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2c:	4770      	bx	lr
 8005f2e:	bf00      	nop
 8005f30:	2000116c 	.word	0x2000116c

08005f34 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b084      	sub	sp, #16
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005f3c:	f7ff fa18 	bl	8005370 <xTaskGetTickCount>
 8005f40:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005f42:	4b0b      	ldr	r3, [pc, #44]	; (8005f70 <prvSampleTimeNow+0x3c>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	68fa      	ldr	r2, [r7, #12]
 8005f48:	429a      	cmp	r2, r3
 8005f4a:	d205      	bcs.n	8005f58 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005f4c:	f000 f936 	bl	80061bc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2201      	movs	r2, #1
 8005f54:	601a      	str	r2, [r3, #0]
 8005f56:	e002      	b.n	8005f5e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005f5e:	4a04      	ldr	r2, [pc, #16]	; (8005f70 <prvSampleTimeNow+0x3c>)
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005f64:	68fb      	ldr	r3, [r7, #12]
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	3710      	adds	r7, #16
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}
 8005f6e:	bf00      	nop
 8005f70:	2000117c 	.word	0x2000117c

08005f74 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b086      	sub	sp, #24
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	60f8      	str	r0, [r7, #12]
 8005f7c:	60b9      	str	r1, [r7, #8]
 8005f7e:	607a      	str	r2, [r7, #4]
 8005f80:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005f82:	2300      	movs	r3, #0
 8005f84:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	68ba      	ldr	r2, [r7, #8]
 8005f8a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	68fa      	ldr	r2, [r7, #12]
 8005f90:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005f92:	68ba      	ldr	r2, [r7, #8]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	429a      	cmp	r2, r3
 8005f98:	d812      	bhi.n	8005fc0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f9a:	687a      	ldr	r2, [r7, #4]
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	1ad2      	subs	r2, r2, r3
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	699b      	ldr	r3, [r3, #24]
 8005fa4:	429a      	cmp	r2, r3
 8005fa6:	d302      	bcc.n	8005fae <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005fa8:	2301      	movs	r3, #1
 8005faa:	617b      	str	r3, [r7, #20]
 8005fac:	e01b      	b.n	8005fe6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005fae:	4b10      	ldr	r3, [pc, #64]	; (8005ff0 <prvInsertTimerInActiveList+0x7c>)
 8005fb0:	681a      	ldr	r2, [r3, #0]
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	3304      	adds	r3, #4
 8005fb6:	4619      	mov	r1, r3
 8005fb8:	4610      	mov	r0, r2
 8005fba:	f7fe f9fa 	bl	80043b2 <vListInsert>
 8005fbe:	e012      	b.n	8005fe6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005fc0:	687a      	ldr	r2, [r7, #4]
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	429a      	cmp	r2, r3
 8005fc6:	d206      	bcs.n	8005fd6 <prvInsertTimerInActiveList+0x62>
 8005fc8:	68ba      	ldr	r2, [r7, #8]
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	d302      	bcc.n	8005fd6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	617b      	str	r3, [r7, #20]
 8005fd4:	e007      	b.n	8005fe6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005fd6:	4b07      	ldr	r3, [pc, #28]	; (8005ff4 <prvInsertTimerInActiveList+0x80>)
 8005fd8:	681a      	ldr	r2, [r3, #0]
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	3304      	adds	r3, #4
 8005fde:	4619      	mov	r1, r3
 8005fe0:	4610      	mov	r0, r2
 8005fe2:	f7fe f9e6 	bl	80043b2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005fe6:	697b      	ldr	r3, [r7, #20]
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	3718      	adds	r7, #24
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}
 8005ff0:	20001170 	.word	0x20001170
 8005ff4:	2000116c 	.word	0x2000116c

08005ff8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b08e      	sub	sp, #56	; 0x38
 8005ffc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005ffe:	e0ca      	b.n	8006196 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2b00      	cmp	r3, #0
 8006004:	da18      	bge.n	8006038 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006006:	1d3b      	adds	r3, r7, #4
 8006008:	3304      	adds	r3, #4
 800600a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800600c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800600e:	2b00      	cmp	r3, #0
 8006010:	d10a      	bne.n	8006028 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006016:	f383 8811 	msr	BASEPRI, r3
 800601a:	f3bf 8f6f 	isb	sy
 800601e:	f3bf 8f4f 	dsb	sy
 8006022:	61fb      	str	r3, [r7, #28]
}
 8006024:	bf00      	nop
 8006026:	e7fe      	b.n	8006026 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800602e:	6850      	ldr	r0, [r2, #4]
 8006030:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006032:	6892      	ldr	r2, [r2, #8]
 8006034:	4611      	mov	r1, r2
 8006036:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2b00      	cmp	r3, #0
 800603c:	f2c0 80aa 	blt.w	8006194 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006046:	695b      	ldr	r3, [r3, #20]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d004      	beq.n	8006056 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800604c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800604e:	3304      	adds	r3, #4
 8006050:	4618      	mov	r0, r3
 8006052:	f7fe f9e7 	bl	8004424 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006056:	463b      	mov	r3, r7
 8006058:	4618      	mov	r0, r3
 800605a:	f7ff ff6b 	bl	8005f34 <prvSampleTimeNow>
 800605e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2b09      	cmp	r3, #9
 8006064:	f200 8097 	bhi.w	8006196 <prvProcessReceivedCommands+0x19e>
 8006068:	a201      	add	r2, pc, #4	; (adr r2, 8006070 <prvProcessReceivedCommands+0x78>)
 800606a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800606e:	bf00      	nop
 8006070:	08006099 	.word	0x08006099
 8006074:	08006099 	.word	0x08006099
 8006078:	08006099 	.word	0x08006099
 800607c:	0800610d 	.word	0x0800610d
 8006080:	08006121 	.word	0x08006121
 8006084:	0800616b 	.word	0x0800616b
 8006088:	08006099 	.word	0x08006099
 800608c:	08006099 	.word	0x08006099
 8006090:	0800610d 	.word	0x0800610d
 8006094:	08006121 	.word	0x08006121
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800609a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800609e:	f043 0301 	orr.w	r3, r3, #1
 80060a2:	b2da      	uxtb	r2, r3
 80060a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80060aa:	68ba      	ldr	r2, [r7, #8]
 80060ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ae:	699b      	ldr	r3, [r3, #24]
 80060b0:	18d1      	adds	r1, r2, r3
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060b8:	f7ff ff5c 	bl	8005f74 <prvInsertTimerInActiveList>
 80060bc:	4603      	mov	r3, r0
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d069      	beq.n	8006196 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80060c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060c4:	6a1b      	ldr	r3, [r3, #32]
 80060c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060c8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80060ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80060d0:	f003 0304 	and.w	r3, r3, #4
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d05e      	beq.n	8006196 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80060d8:	68ba      	ldr	r2, [r7, #8]
 80060da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060dc:	699b      	ldr	r3, [r3, #24]
 80060de:	441a      	add	r2, r3
 80060e0:	2300      	movs	r3, #0
 80060e2:	9300      	str	r3, [sp, #0]
 80060e4:	2300      	movs	r3, #0
 80060e6:	2100      	movs	r1, #0
 80060e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060ea:	f7ff fe05 	bl	8005cf8 <xTimerGenericCommand>
 80060ee:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80060f0:	6a3b      	ldr	r3, [r7, #32]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d14f      	bne.n	8006196 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80060f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060fa:	f383 8811 	msr	BASEPRI, r3
 80060fe:	f3bf 8f6f 	isb	sy
 8006102:	f3bf 8f4f 	dsb	sy
 8006106:	61bb      	str	r3, [r7, #24]
}
 8006108:	bf00      	nop
 800610a:	e7fe      	b.n	800610a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800610c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800610e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006112:	f023 0301 	bic.w	r3, r3, #1
 8006116:	b2da      	uxtb	r2, r3
 8006118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800611a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800611e:	e03a      	b.n	8006196 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006122:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006126:	f043 0301 	orr.w	r3, r3, #1
 800612a:	b2da      	uxtb	r2, r3
 800612c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800612e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006132:	68ba      	ldr	r2, [r7, #8]
 8006134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006136:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800613a:	699b      	ldr	r3, [r3, #24]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d10a      	bne.n	8006156 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006144:	f383 8811 	msr	BASEPRI, r3
 8006148:	f3bf 8f6f 	isb	sy
 800614c:	f3bf 8f4f 	dsb	sy
 8006150:	617b      	str	r3, [r7, #20]
}
 8006152:	bf00      	nop
 8006154:	e7fe      	b.n	8006154 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006158:	699a      	ldr	r2, [r3, #24]
 800615a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800615c:	18d1      	adds	r1, r2, r3
 800615e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006160:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006162:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006164:	f7ff ff06 	bl	8005f74 <prvInsertTimerInActiveList>
					break;
 8006168:	e015      	b.n	8006196 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800616a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800616c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006170:	f003 0302 	and.w	r3, r3, #2
 8006174:	2b00      	cmp	r3, #0
 8006176:	d103      	bne.n	8006180 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006178:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800617a:	f000 fbe1 	bl	8006940 <vPortFree>
 800617e:	e00a      	b.n	8006196 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006182:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006186:	f023 0301 	bic.w	r3, r3, #1
 800618a:	b2da      	uxtb	r2, r3
 800618c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800618e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006192:	e000      	b.n	8006196 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006194:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006196:	4b08      	ldr	r3, [pc, #32]	; (80061b8 <prvProcessReceivedCommands+0x1c0>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	1d39      	adds	r1, r7, #4
 800619c:	2200      	movs	r2, #0
 800619e:	4618      	mov	r0, r3
 80061a0:	f7fe fc08 	bl	80049b4 <xQueueReceive>
 80061a4:	4603      	mov	r3, r0
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	f47f af2a 	bne.w	8006000 <prvProcessReceivedCommands+0x8>
	}
}
 80061ac:	bf00      	nop
 80061ae:	bf00      	nop
 80061b0:	3730      	adds	r7, #48	; 0x30
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}
 80061b6:	bf00      	nop
 80061b8:	20001174 	.word	0x20001174

080061bc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b088      	sub	sp, #32
 80061c0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80061c2:	e048      	b.n	8006256 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80061c4:	4b2d      	ldr	r3, [pc, #180]	; (800627c <prvSwitchTimerLists+0xc0>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	68db      	ldr	r3, [r3, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061ce:	4b2b      	ldr	r3, [pc, #172]	; (800627c <prvSwitchTimerLists+0xc0>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	68db      	ldr	r3, [r3, #12]
 80061d4:	68db      	ldr	r3, [r3, #12]
 80061d6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	3304      	adds	r3, #4
 80061dc:	4618      	mov	r0, r3
 80061de:	f7fe f921 	bl	8004424 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	6a1b      	ldr	r3, [r3, #32]
 80061e6:	68f8      	ldr	r0, [r7, #12]
 80061e8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80061f0:	f003 0304 	and.w	r3, r3, #4
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d02e      	beq.n	8006256 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	699b      	ldr	r3, [r3, #24]
 80061fc:	693a      	ldr	r2, [r7, #16]
 80061fe:	4413      	add	r3, r2
 8006200:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006202:	68ba      	ldr	r2, [r7, #8]
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	429a      	cmp	r2, r3
 8006208:	d90e      	bls.n	8006228 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	68ba      	ldr	r2, [r7, #8]
 800620e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	68fa      	ldr	r2, [r7, #12]
 8006214:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006216:	4b19      	ldr	r3, [pc, #100]	; (800627c <prvSwitchTimerLists+0xc0>)
 8006218:	681a      	ldr	r2, [r3, #0]
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	3304      	adds	r3, #4
 800621e:	4619      	mov	r1, r3
 8006220:	4610      	mov	r0, r2
 8006222:	f7fe f8c6 	bl	80043b2 <vListInsert>
 8006226:	e016      	b.n	8006256 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006228:	2300      	movs	r3, #0
 800622a:	9300      	str	r3, [sp, #0]
 800622c:	2300      	movs	r3, #0
 800622e:	693a      	ldr	r2, [r7, #16]
 8006230:	2100      	movs	r1, #0
 8006232:	68f8      	ldr	r0, [r7, #12]
 8006234:	f7ff fd60 	bl	8005cf8 <xTimerGenericCommand>
 8006238:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d10a      	bne.n	8006256 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006244:	f383 8811 	msr	BASEPRI, r3
 8006248:	f3bf 8f6f 	isb	sy
 800624c:	f3bf 8f4f 	dsb	sy
 8006250:	603b      	str	r3, [r7, #0]
}
 8006252:	bf00      	nop
 8006254:	e7fe      	b.n	8006254 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006256:	4b09      	ldr	r3, [pc, #36]	; (800627c <prvSwitchTimerLists+0xc0>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d1b1      	bne.n	80061c4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006260:	4b06      	ldr	r3, [pc, #24]	; (800627c <prvSwitchTimerLists+0xc0>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006266:	4b06      	ldr	r3, [pc, #24]	; (8006280 <prvSwitchTimerLists+0xc4>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a04      	ldr	r2, [pc, #16]	; (800627c <prvSwitchTimerLists+0xc0>)
 800626c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800626e:	4a04      	ldr	r2, [pc, #16]	; (8006280 <prvSwitchTimerLists+0xc4>)
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	6013      	str	r3, [r2, #0]
}
 8006274:	bf00      	nop
 8006276:	3718      	adds	r7, #24
 8006278:	46bd      	mov	sp, r7
 800627a:	bd80      	pop	{r7, pc}
 800627c:	2000116c 	.word	0x2000116c
 8006280:	20001170 	.word	0x20001170

08006284 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b082      	sub	sp, #8
 8006288:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800628a:	f000 f96b 	bl	8006564 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800628e:	4b15      	ldr	r3, [pc, #84]	; (80062e4 <prvCheckForValidListAndQueue+0x60>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d120      	bne.n	80062d8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006296:	4814      	ldr	r0, [pc, #80]	; (80062e8 <prvCheckForValidListAndQueue+0x64>)
 8006298:	f7fe f83a 	bl	8004310 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800629c:	4813      	ldr	r0, [pc, #76]	; (80062ec <prvCheckForValidListAndQueue+0x68>)
 800629e:	f7fe f837 	bl	8004310 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80062a2:	4b13      	ldr	r3, [pc, #76]	; (80062f0 <prvCheckForValidListAndQueue+0x6c>)
 80062a4:	4a10      	ldr	r2, [pc, #64]	; (80062e8 <prvCheckForValidListAndQueue+0x64>)
 80062a6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80062a8:	4b12      	ldr	r3, [pc, #72]	; (80062f4 <prvCheckForValidListAndQueue+0x70>)
 80062aa:	4a10      	ldr	r2, [pc, #64]	; (80062ec <prvCheckForValidListAndQueue+0x68>)
 80062ac:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80062ae:	2300      	movs	r3, #0
 80062b0:	9300      	str	r3, [sp, #0]
 80062b2:	4b11      	ldr	r3, [pc, #68]	; (80062f8 <prvCheckForValidListAndQueue+0x74>)
 80062b4:	4a11      	ldr	r2, [pc, #68]	; (80062fc <prvCheckForValidListAndQueue+0x78>)
 80062b6:	2110      	movs	r1, #16
 80062b8:	200a      	movs	r0, #10
 80062ba:	f7fe f945 	bl	8004548 <xQueueGenericCreateStatic>
 80062be:	4603      	mov	r3, r0
 80062c0:	4a08      	ldr	r2, [pc, #32]	; (80062e4 <prvCheckForValidListAndQueue+0x60>)
 80062c2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80062c4:	4b07      	ldr	r3, [pc, #28]	; (80062e4 <prvCheckForValidListAndQueue+0x60>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d005      	beq.n	80062d8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80062cc:	4b05      	ldr	r3, [pc, #20]	; (80062e4 <prvCheckForValidListAndQueue+0x60>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	490b      	ldr	r1, [pc, #44]	; (8006300 <prvCheckForValidListAndQueue+0x7c>)
 80062d2:	4618      	mov	r0, r3
 80062d4:	f7fe fd5e 	bl	8004d94 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80062d8:	f000 f974 	bl	80065c4 <vPortExitCritical>
}
 80062dc:	bf00      	nop
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}
 80062e2:	bf00      	nop
 80062e4:	20001174 	.word	0x20001174
 80062e8:	20001144 	.word	0x20001144
 80062ec:	20001158 	.word	0x20001158
 80062f0:	2000116c 	.word	0x2000116c
 80062f4:	20001170 	.word	0x20001170
 80062f8:	20001220 	.word	0x20001220
 80062fc:	20001180 	.word	0x20001180
 8006300:	08007cc4 	.word	0x08007cc4

08006304 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006304:	b480      	push	{r7}
 8006306:	b085      	sub	sp, #20
 8006308:	af00      	add	r7, sp, #0
 800630a:	60f8      	str	r0, [r7, #12]
 800630c:	60b9      	str	r1, [r7, #8]
 800630e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	3b04      	subs	r3, #4
 8006314:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800631c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	3b04      	subs	r3, #4
 8006322:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	f023 0201 	bic.w	r2, r3, #1
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	3b04      	subs	r3, #4
 8006332:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006334:	4a0c      	ldr	r2, [pc, #48]	; (8006368 <pxPortInitialiseStack+0x64>)
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	3b14      	subs	r3, #20
 800633e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006340:	687a      	ldr	r2, [r7, #4]
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	3b04      	subs	r3, #4
 800634a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	f06f 0202 	mvn.w	r2, #2
 8006352:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	3b20      	subs	r3, #32
 8006358:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800635a:	68fb      	ldr	r3, [r7, #12]
}
 800635c:	4618      	mov	r0, r3
 800635e:	3714      	adds	r7, #20
 8006360:	46bd      	mov	sp, r7
 8006362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006366:	4770      	bx	lr
 8006368:	0800636d 	.word	0x0800636d

0800636c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800636c:	b480      	push	{r7}
 800636e:	b085      	sub	sp, #20
 8006370:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006372:	2300      	movs	r3, #0
 8006374:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006376:	4b12      	ldr	r3, [pc, #72]	; (80063c0 <prvTaskExitError+0x54>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800637e:	d00a      	beq.n	8006396 <prvTaskExitError+0x2a>
	__asm volatile
 8006380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006384:	f383 8811 	msr	BASEPRI, r3
 8006388:	f3bf 8f6f 	isb	sy
 800638c:	f3bf 8f4f 	dsb	sy
 8006390:	60fb      	str	r3, [r7, #12]
}
 8006392:	bf00      	nop
 8006394:	e7fe      	b.n	8006394 <prvTaskExitError+0x28>
	__asm volatile
 8006396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800639a:	f383 8811 	msr	BASEPRI, r3
 800639e:	f3bf 8f6f 	isb	sy
 80063a2:	f3bf 8f4f 	dsb	sy
 80063a6:	60bb      	str	r3, [r7, #8]
}
 80063a8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80063aa:	bf00      	nop
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d0fc      	beq.n	80063ac <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80063b2:	bf00      	nop
 80063b4:	bf00      	nop
 80063b6:	3714      	adds	r7, #20
 80063b8:	46bd      	mov	sp, r7
 80063ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063be:	4770      	bx	lr
 80063c0:	20000010 	.word	0x20000010
	...

080063d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80063d0:	4b07      	ldr	r3, [pc, #28]	; (80063f0 <pxCurrentTCBConst2>)
 80063d2:	6819      	ldr	r1, [r3, #0]
 80063d4:	6808      	ldr	r0, [r1, #0]
 80063d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063da:	f380 8809 	msr	PSP, r0
 80063de:	f3bf 8f6f 	isb	sy
 80063e2:	f04f 0000 	mov.w	r0, #0
 80063e6:	f380 8811 	msr	BASEPRI, r0
 80063ea:	4770      	bx	lr
 80063ec:	f3af 8000 	nop.w

080063f0 <pxCurrentTCBConst2>:
 80063f0:	20000c44 	.word	0x20000c44
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80063f4:	bf00      	nop
 80063f6:	bf00      	nop

080063f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80063f8:	4808      	ldr	r0, [pc, #32]	; (800641c <prvPortStartFirstTask+0x24>)
 80063fa:	6800      	ldr	r0, [r0, #0]
 80063fc:	6800      	ldr	r0, [r0, #0]
 80063fe:	f380 8808 	msr	MSP, r0
 8006402:	f04f 0000 	mov.w	r0, #0
 8006406:	f380 8814 	msr	CONTROL, r0
 800640a:	b662      	cpsie	i
 800640c:	b661      	cpsie	f
 800640e:	f3bf 8f4f 	dsb	sy
 8006412:	f3bf 8f6f 	isb	sy
 8006416:	df00      	svc	0
 8006418:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800641a:	bf00      	nop
 800641c:	e000ed08 	.word	0xe000ed08

08006420 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b086      	sub	sp, #24
 8006424:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006426:	4b46      	ldr	r3, [pc, #280]	; (8006540 <xPortStartScheduler+0x120>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a46      	ldr	r2, [pc, #280]	; (8006544 <xPortStartScheduler+0x124>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d10a      	bne.n	8006446 <xPortStartScheduler+0x26>
	__asm volatile
 8006430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006434:	f383 8811 	msr	BASEPRI, r3
 8006438:	f3bf 8f6f 	isb	sy
 800643c:	f3bf 8f4f 	dsb	sy
 8006440:	613b      	str	r3, [r7, #16]
}
 8006442:	bf00      	nop
 8006444:	e7fe      	b.n	8006444 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006446:	4b3e      	ldr	r3, [pc, #248]	; (8006540 <xPortStartScheduler+0x120>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a3f      	ldr	r2, [pc, #252]	; (8006548 <xPortStartScheduler+0x128>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d10a      	bne.n	8006466 <xPortStartScheduler+0x46>
	__asm volatile
 8006450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006454:	f383 8811 	msr	BASEPRI, r3
 8006458:	f3bf 8f6f 	isb	sy
 800645c:	f3bf 8f4f 	dsb	sy
 8006460:	60fb      	str	r3, [r7, #12]
}
 8006462:	bf00      	nop
 8006464:	e7fe      	b.n	8006464 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006466:	4b39      	ldr	r3, [pc, #228]	; (800654c <xPortStartScheduler+0x12c>)
 8006468:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	781b      	ldrb	r3, [r3, #0]
 800646e:	b2db      	uxtb	r3, r3
 8006470:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	22ff      	movs	r2, #255	; 0xff
 8006476:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006478:	697b      	ldr	r3, [r7, #20]
 800647a:	781b      	ldrb	r3, [r3, #0]
 800647c:	b2db      	uxtb	r3, r3
 800647e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006480:	78fb      	ldrb	r3, [r7, #3]
 8006482:	b2db      	uxtb	r3, r3
 8006484:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006488:	b2da      	uxtb	r2, r3
 800648a:	4b31      	ldr	r3, [pc, #196]	; (8006550 <xPortStartScheduler+0x130>)
 800648c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800648e:	4b31      	ldr	r3, [pc, #196]	; (8006554 <xPortStartScheduler+0x134>)
 8006490:	2207      	movs	r2, #7
 8006492:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006494:	e009      	b.n	80064aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006496:	4b2f      	ldr	r3, [pc, #188]	; (8006554 <xPortStartScheduler+0x134>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	3b01      	subs	r3, #1
 800649c:	4a2d      	ldr	r2, [pc, #180]	; (8006554 <xPortStartScheduler+0x134>)
 800649e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80064a0:	78fb      	ldrb	r3, [r7, #3]
 80064a2:	b2db      	uxtb	r3, r3
 80064a4:	005b      	lsls	r3, r3, #1
 80064a6:	b2db      	uxtb	r3, r3
 80064a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80064aa:	78fb      	ldrb	r3, [r7, #3]
 80064ac:	b2db      	uxtb	r3, r3
 80064ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064b2:	2b80      	cmp	r3, #128	; 0x80
 80064b4:	d0ef      	beq.n	8006496 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80064b6:	4b27      	ldr	r3, [pc, #156]	; (8006554 <xPortStartScheduler+0x134>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f1c3 0307 	rsb	r3, r3, #7
 80064be:	2b04      	cmp	r3, #4
 80064c0:	d00a      	beq.n	80064d8 <xPortStartScheduler+0xb8>
	__asm volatile
 80064c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c6:	f383 8811 	msr	BASEPRI, r3
 80064ca:	f3bf 8f6f 	isb	sy
 80064ce:	f3bf 8f4f 	dsb	sy
 80064d2:	60bb      	str	r3, [r7, #8]
}
 80064d4:	bf00      	nop
 80064d6:	e7fe      	b.n	80064d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80064d8:	4b1e      	ldr	r3, [pc, #120]	; (8006554 <xPortStartScheduler+0x134>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	021b      	lsls	r3, r3, #8
 80064de:	4a1d      	ldr	r2, [pc, #116]	; (8006554 <xPortStartScheduler+0x134>)
 80064e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80064e2:	4b1c      	ldr	r3, [pc, #112]	; (8006554 <xPortStartScheduler+0x134>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80064ea:	4a1a      	ldr	r2, [pc, #104]	; (8006554 <xPortStartScheduler+0x134>)
 80064ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	b2da      	uxtb	r2, r3
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80064f6:	4b18      	ldr	r3, [pc, #96]	; (8006558 <xPortStartScheduler+0x138>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a17      	ldr	r2, [pc, #92]	; (8006558 <xPortStartScheduler+0x138>)
 80064fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006500:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006502:	4b15      	ldr	r3, [pc, #84]	; (8006558 <xPortStartScheduler+0x138>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a14      	ldr	r2, [pc, #80]	; (8006558 <xPortStartScheduler+0x138>)
 8006508:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800650c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800650e:	f000 f8dd 	bl	80066cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006512:	4b12      	ldr	r3, [pc, #72]	; (800655c <xPortStartScheduler+0x13c>)
 8006514:	2200      	movs	r2, #0
 8006516:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006518:	f000 f8fc 	bl	8006714 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800651c:	4b10      	ldr	r3, [pc, #64]	; (8006560 <xPortStartScheduler+0x140>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a0f      	ldr	r2, [pc, #60]	; (8006560 <xPortStartScheduler+0x140>)
 8006522:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006526:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006528:	f7ff ff66 	bl	80063f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800652c:	f7fe ffea 	bl	8005504 <vTaskSwitchContext>
	prvTaskExitError();
 8006530:	f7ff ff1c 	bl	800636c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006534:	2300      	movs	r3, #0
}
 8006536:	4618      	mov	r0, r3
 8006538:	3718      	adds	r7, #24
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}
 800653e:	bf00      	nop
 8006540:	e000ed00 	.word	0xe000ed00
 8006544:	410fc271 	.word	0x410fc271
 8006548:	410fc270 	.word	0x410fc270
 800654c:	e000e400 	.word	0xe000e400
 8006550:	20001270 	.word	0x20001270
 8006554:	20001274 	.word	0x20001274
 8006558:	e000ed20 	.word	0xe000ed20
 800655c:	20000010 	.word	0x20000010
 8006560:	e000ef34 	.word	0xe000ef34

08006564 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006564:	b480      	push	{r7}
 8006566:	b083      	sub	sp, #12
 8006568:	af00      	add	r7, sp, #0
	__asm volatile
 800656a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800656e:	f383 8811 	msr	BASEPRI, r3
 8006572:	f3bf 8f6f 	isb	sy
 8006576:	f3bf 8f4f 	dsb	sy
 800657a:	607b      	str	r3, [r7, #4]
}
 800657c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800657e:	4b0f      	ldr	r3, [pc, #60]	; (80065bc <vPortEnterCritical+0x58>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	3301      	adds	r3, #1
 8006584:	4a0d      	ldr	r2, [pc, #52]	; (80065bc <vPortEnterCritical+0x58>)
 8006586:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006588:	4b0c      	ldr	r3, [pc, #48]	; (80065bc <vPortEnterCritical+0x58>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	2b01      	cmp	r3, #1
 800658e:	d10f      	bne.n	80065b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006590:	4b0b      	ldr	r3, [pc, #44]	; (80065c0 <vPortEnterCritical+0x5c>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	b2db      	uxtb	r3, r3
 8006596:	2b00      	cmp	r3, #0
 8006598:	d00a      	beq.n	80065b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800659a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800659e:	f383 8811 	msr	BASEPRI, r3
 80065a2:	f3bf 8f6f 	isb	sy
 80065a6:	f3bf 8f4f 	dsb	sy
 80065aa:	603b      	str	r3, [r7, #0]
}
 80065ac:	bf00      	nop
 80065ae:	e7fe      	b.n	80065ae <vPortEnterCritical+0x4a>
	}
}
 80065b0:	bf00      	nop
 80065b2:	370c      	adds	r7, #12
 80065b4:	46bd      	mov	sp, r7
 80065b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ba:	4770      	bx	lr
 80065bc:	20000010 	.word	0x20000010
 80065c0:	e000ed04 	.word	0xe000ed04

080065c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80065c4:	b480      	push	{r7}
 80065c6:	b083      	sub	sp, #12
 80065c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80065ca:	4b12      	ldr	r3, [pc, #72]	; (8006614 <vPortExitCritical+0x50>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d10a      	bne.n	80065e8 <vPortExitCritical+0x24>
	__asm volatile
 80065d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065d6:	f383 8811 	msr	BASEPRI, r3
 80065da:	f3bf 8f6f 	isb	sy
 80065de:	f3bf 8f4f 	dsb	sy
 80065e2:	607b      	str	r3, [r7, #4]
}
 80065e4:	bf00      	nop
 80065e6:	e7fe      	b.n	80065e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80065e8:	4b0a      	ldr	r3, [pc, #40]	; (8006614 <vPortExitCritical+0x50>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	3b01      	subs	r3, #1
 80065ee:	4a09      	ldr	r2, [pc, #36]	; (8006614 <vPortExitCritical+0x50>)
 80065f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80065f2:	4b08      	ldr	r3, [pc, #32]	; (8006614 <vPortExitCritical+0x50>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d105      	bne.n	8006606 <vPortExitCritical+0x42>
 80065fa:	2300      	movs	r3, #0
 80065fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	f383 8811 	msr	BASEPRI, r3
}
 8006604:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006606:	bf00      	nop
 8006608:	370c      	adds	r7, #12
 800660a:	46bd      	mov	sp, r7
 800660c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006610:	4770      	bx	lr
 8006612:	bf00      	nop
 8006614:	20000010 	.word	0x20000010
	...

08006620 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006620:	f3ef 8009 	mrs	r0, PSP
 8006624:	f3bf 8f6f 	isb	sy
 8006628:	4b15      	ldr	r3, [pc, #84]	; (8006680 <pxCurrentTCBConst>)
 800662a:	681a      	ldr	r2, [r3, #0]
 800662c:	f01e 0f10 	tst.w	lr, #16
 8006630:	bf08      	it	eq
 8006632:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006636:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800663a:	6010      	str	r0, [r2, #0]
 800663c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006640:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006644:	f380 8811 	msr	BASEPRI, r0
 8006648:	f3bf 8f4f 	dsb	sy
 800664c:	f3bf 8f6f 	isb	sy
 8006650:	f7fe ff58 	bl	8005504 <vTaskSwitchContext>
 8006654:	f04f 0000 	mov.w	r0, #0
 8006658:	f380 8811 	msr	BASEPRI, r0
 800665c:	bc09      	pop	{r0, r3}
 800665e:	6819      	ldr	r1, [r3, #0]
 8006660:	6808      	ldr	r0, [r1, #0]
 8006662:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006666:	f01e 0f10 	tst.w	lr, #16
 800666a:	bf08      	it	eq
 800666c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006670:	f380 8809 	msr	PSP, r0
 8006674:	f3bf 8f6f 	isb	sy
 8006678:	4770      	bx	lr
 800667a:	bf00      	nop
 800667c:	f3af 8000 	nop.w

08006680 <pxCurrentTCBConst>:
 8006680:	20000c44 	.word	0x20000c44
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006684:	bf00      	nop
 8006686:	bf00      	nop

08006688 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b082      	sub	sp, #8
 800668c:	af00      	add	r7, sp, #0
	__asm volatile
 800668e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006692:	f383 8811 	msr	BASEPRI, r3
 8006696:	f3bf 8f6f 	isb	sy
 800669a:	f3bf 8f4f 	dsb	sy
 800669e:	607b      	str	r3, [r7, #4]
}
 80066a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80066a2:	f7fe fe75 	bl	8005390 <xTaskIncrementTick>
 80066a6:	4603      	mov	r3, r0
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d003      	beq.n	80066b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80066ac:	4b06      	ldr	r3, [pc, #24]	; (80066c8 <xPortSysTickHandler+0x40>)
 80066ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066b2:	601a      	str	r2, [r3, #0]
 80066b4:	2300      	movs	r3, #0
 80066b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	f383 8811 	msr	BASEPRI, r3
}
 80066be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80066c0:	bf00      	nop
 80066c2:	3708      	adds	r7, #8
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}
 80066c8:	e000ed04 	.word	0xe000ed04

080066cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80066cc:	b480      	push	{r7}
 80066ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80066d0:	4b0b      	ldr	r3, [pc, #44]	; (8006700 <vPortSetupTimerInterrupt+0x34>)
 80066d2:	2200      	movs	r2, #0
 80066d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80066d6:	4b0b      	ldr	r3, [pc, #44]	; (8006704 <vPortSetupTimerInterrupt+0x38>)
 80066d8:	2200      	movs	r2, #0
 80066da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80066dc:	4b0a      	ldr	r3, [pc, #40]	; (8006708 <vPortSetupTimerInterrupt+0x3c>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a0a      	ldr	r2, [pc, #40]	; (800670c <vPortSetupTimerInterrupt+0x40>)
 80066e2:	fba2 2303 	umull	r2, r3, r2, r3
 80066e6:	099b      	lsrs	r3, r3, #6
 80066e8:	4a09      	ldr	r2, [pc, #36]	; (8006710 <vPortSetupTimerInterrupt+0x44>)
 80066ea:	3b01      	subs	r3, #1
 80066ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80066ee:	4b04      	ldr	r3, [pc, #16]	; (8006700 <vPortSetupTimerInterrupt+0x34>)
 80066f0:	2207      	movs	r2, #7
 80066f2:	601a      	str	r2, [r3, #0]
}
 80066f4:	bf00      	nop
 80066f6:	46bd      	mov	sp, r7
 80066f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fc:	4770      	bx	lr
 80066fe:	bf00      	nop
 8006700:	e000e010 	.word	0xe000e010
 8006704:	e000e018 	.word	0xe000e018
 8006708:	20000004 	.word	0x20000004
 800670c:	10624dd3 	.word	0x10624dd3
 8006710:	e000e014 	.word	0xe000e014

08006714 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006714:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006724 <vPortEnableVFP+0x10>
 8006718:	6801      	ldr	r1, [r0, #0]
 800671a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800671e:	6001      	str	r1, [r0, #0]
 8006720:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006722:	bf00      	nop
 8006724:	e000ed88 	.word	0xe000ed88

08006728 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006728:	b480      	push	{r7}
 800672a:	b085      	sub	sp, #20
 800672c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800672e:	f3ef 8305 	mrs	r3, IPSR
 8006732:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	2b0f      	cmp	r3, #15
 8006738:	d914      	bls.n	8006764 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800673a:	4a17      	ldr	r2, [pc, #92]	; (8006798 <vPortValidateInterruptPriority+0x70>)
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	4413      	add	r3, r2
 8006740:	781b      	ldrb	r3, [r3, #0]
 8006742:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006744:	4b15      	ldr	r3, [pc, #84]	; (800679c <vPortValidateInterruptPriority+0x74>)
 8006746:	781b      	ldrb	r3, [r3, #0]
 8006748:	7afa      	ldrb	r2, [r7, #11]
 800674a:	429a      	cmp	r2, r3
 800674c:	d20a      	bcs.n	8006764 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800674e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006752:	f383 8811 	msr	BASEPRI, r3
 8006756:	f3bf 8f6f 	isb	sy
 800675a:	f3bf 8f4f 	dsb	sy
 800675e:	607b      	str	r3, [r7, #4]
}
 8006760:	bf00      	nop
 8006762:	e7fe      	b.n	8006762 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006764:	4b0e      	ldr	r3, [pc, #56]	; (80067a0 <vPortValidateInterruptPriority+0x78>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800676c:	4b0d      	ldr	r3, [pc, #52]	; (80067a4 <vPortValidateInterruptPriority+0x7c>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	429a      	cmp	r2, r3
 8006772:	d90a      	bls.n	800678a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006778:	f383 8811 	msr	BASEPRI, r3
 800677c:	f3bf 8f6f 	isb	sy
 8006780:	f3bf 8f4f 	dsb	sy
 8006784:	603b      	str	r3, [r7, #0]
}
 8006786:	bf00      	nop
 8006788:	e7fe      	b.n	8006788 <vPortValidateInterruptPriority+0x60>
	}
 800678a:	bf00      	nop
 800678c:	3714      	adds	r7, #20
 800678e:	46bd      	mov	sp, r7
 8006790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006794:	4770      	bx	lr
 8006796:	bf00      	nop
 8006798:	e000e3f0 	.word	0xe000e3f0
 800679c:	20001270 	.word	0x20001270
 80067a0:	e000ed0c 	.word	0xe000ed0c
 80067a4:	20001274 	.word	0x20001274

080067a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b08a      	sub	sp, #40	; 0x28
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80067b0:	2300      	movs	r3, #0
 80067b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80067b4:	f7fe fd30 	bl	8005218 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80067b8:	4b5b      	ldr	r3, [pc, #364]	; (8006928 <pvPortMalloc+0x180>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d101      	bne.n	80067c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80067c0:	f000 f920 	bl	8006a04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80067c4:	4b59      	ldr	r3, [pc, #356]	; (800692c <pvPortMalloc+0x184>)
 80067c6:	681a      	ldr	r2, [r3, #0]
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	4013      	ands	r3, r2
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	f040 8093 	bne.w	80068f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d01d      	beq.n	8006814 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80067d8:	2208      	movs	r2, #8
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	4413      	add	r3, r2
 80067de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f003 0307 	and.w	r3, r3, #7
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d014      	beq.n	8006814 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f023 0307 	bic.w	r3, r3, #7
 80067f0:	3308      	adds	r3, #8
 80067f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f003 0307 	and.w	r3, r3, #7
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d00a      	beq.n	8006814 <pvPortMalloc+0x6c>
	__asm volatile
 80067fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006802:	f383 8811 	msr	BASEPRI, r3
 8006806:	f3bf 8f6f 	isb	sy
 800680a:	f3bf 8f4f 	dsb	sy
 800680e:	617b      	str	r3, [r7, #20]
}
 8006810:	bf00      	nop
 8006812:	e7fe      	b.n	8006812 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d06e      	beq.n	80068f8 <pvPortMalloc+0x150>
 800681a:	4b45      	ldr	r3, [pc, #276]	; (8006930 <pvPortMalloc+0x188>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	687a      	ldr	r2, [r7, #4]
 8006820:	429a      	cmp	r2, r3
 8006822:	d869      	bhi.n	80068f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006824:	4b43      	ldr	r3, [pc, #268]	; (8006934 <pvPortMalloc+0x18c>)
 8006826:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006828:	4b42      	ldr	r3, [pc, #264]	; (8006934 <pvPortMalloc+0x18c>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800682e:	e004      	b.n	800683a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006832:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800683a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800683c:	685b      	ldr	r3, [r3, #4]
 800683e:	687a      	ldr	r2, [r7, #4]
 8006840:	429a      	cmp	r2, r3
 8006842:	d903      	bls.n	800684c <pvPortMalloc+0xa4>
 8006844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d1f1      	bne.n	8006830 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800684c:	4b36      	ldr	r3, [pc, #216]	; (8006928 <pvPortMalloc+0x180>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006852:	429a      	cmp	r2, r3
 8006854:	d050      	beq.n	80068f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006856:	6a3b      	ldr	r3, [r7, #32]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	2208      	movs	r2, #8
 800685c:	4413      	add	r3, r2
 800685e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006862:	681a      	ldr	r2, [r3, #0]
 8006864:	6a3b      	ldr	r3, [r7, #32]
 8006866:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800686a:	685a      	ldr	r2, [r3, #4]
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	1ad2      	subs	r2, r2, r3
 8006870:	2308      	movs	r3, #8
 8006872:	005b      	lsls	r3, r3, #1
 8006874:	429a      	cmp	r2, r3
 8006876:	d91f      	bls.n	80068b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006878:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	4413      	add	r3, r2
 800687e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006880:	69bb      	ldr	r3, [r7, #24]
 8006882:	f003 0307 	and.w	r3, r3, #7
 8006886:	2b00      	cmp	r3, #0
 8006888:	d00a      	beq.n	80068a0 <pvPortMalloc+0xf8>
	__asm volatile
 800688a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800688e:	f383 8811 	msr	BASEPRI, r3
 8006892:	f3bf 8f6f 	isb	sy
 8006896:	f3bf 8f4f 	dsb	sy
 800689a:	613b      	str	r3, [r7, #16]
}
 800689c:	bf00      	nop
 800689e:	e7fe      	b.n	800689e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80068a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a2:	685a      	ldr	r2, [r3, #4]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	1ad2      	subs	r2, r2, r3
 80068a8:	69bb      	ldr	r3, [r7, #24]
 80068aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80068ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ae:	687a      	ldr	r2, [r7, #4]
 80068b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80068b2:	69b8      	ldr	r0, [r7, #24]
 80068b4:	f000 f908 	bl	8006ac8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80068b8:	4b1d      	ldr	r3, [pc, #116]	; (8006930 <pvPortMalloc+0x188>)
 80068ba:	681a      	ldr	r2, [r3, #0]
 80068bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	1ad3      	subs	r3, r2, r3
 80068c2:	4a1b      	ldr	r2, [pc, #108]	; (8006930 <pvPortMalloc+0x188>)
 80068c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80068c6:	4b1a      	ldr	r3, [pc, #104]	; (8006930 <pvPortMalloc+0x188>)
 80068c8:	681a      	ldr	r2, [r3, #0]
 80068ca:	4b1b      	ldr	r3, [pc, #108]	; (8006938 <pvPortMalloc+0x190>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	429a      	cmp	r2, r3
 80068d0:	d203      	bcs.n	80068da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80068d2:	4b17      	ldr	r3, [pc, #92]	; (8006930 <pvPortMalloc+0x188>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a18      	ldr	r2, [pc, #96]	; (8006938 <pvPortMalloc+0x190>)
 80068d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80068da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068dc:	685a      	ldr	r2, [r3, #4]
 80068de:	4b13      	ldr	r3, [pc, #76]	; (800692c <pvPortMalloc+0x184>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	431a      	orrs	r2, r3
 80068e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80068e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ea:	2200      	movs	r2, #0
 80068ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80068ee:	4b13      	ldr	r3, [pc, #76]	; (800693c <pvPortMalloc+0x194>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	3301      	adds	r3, #1
 80068f4:	4a11      	ldr	r2, [pc, #68]	; (800693c <pvPortMalloc+0x194>)
 80068f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80068f8:	f7fe fc9c 	bl	8005234 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80068fc:	69fb      	ldr	r3, [r7, #28]
 80068fe:	f003 0307 	and.w	r3, r3, #7
 8006902:	2b00      	cmp	r3, #0
 8006904:	d00a      	beq.n	800691c <pvPortMalloc+0x174>
	__asm volatile
 8006906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800690a:	f383 8811 	msr	BASEPRI, r3
 800690e:	f3bf 8f6f 	isb	sy
 8006912:	f3bf 8f4f 	dsb	sy
 8006916:	60fb      	str	r3, [r7, #12]
}
 8006918:	bf00      	nop
 800691a:	e7fe      	b.n	800691a <pvPortMalloc+0x172>
	return pvReturn;
 800691c:	69fb      	ldr	r3, [r7, #28]
}
 800691e:	4618      	mov	r0, r3
 8006920:	3728      	adds	r7, #40	; 0x28
 8006922:	46bd      	mov	sp, r7
 8006924:	bd80      	pop	{r7, pc}
 8006926:	bf00      	nop
 8006928:	20001e80 	.word	0x20001e80
 800692c:	20001e94 	.word	0x20001e94
 8006930:	20001e84 	.word	0x20001e84
 8006934:	20001e78 	.word	0x20001e78
 8006938:	20001e88 	.word	0x20001e88
 800693c:	20001e8c 	.word	0x20001e8c

08006940 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b086      	sub	sp, #24
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d04d      	beq.n	80069ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006952:	2308      	movs	r3, #8
 8006954:	425b      	negs	r3, r3
 8006956:	697a      	ldr	r2, [r7, #20]
 8006958:	4413      	add	r3, r2
 800695a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	685a      	ldr	r2, [r3, #4]
 8006964:	4b24      	ldr	r3, [pc, #144]	; (80069f8 <vPortFree+0xb8>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4013      	ands	r3, r2
 800696a:	2b00      	cmp	r3, #0
 800696c:	d10a      	bne.n	8006984 <vPortFree+0x44>
	__asm volatile
 800696e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006972:	f383 8811 	msr	BASEPRI, r3
 8006976:	f3bf 8f6f 	isb	sy
 800697a:	f3bf 8f4f 	dsb	sy
 800697e:	60fb      	str	r3, [r7, #12]
}
 8006980:	bf00      	nop
 8006982:	e7fe      	b.n	8006982 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d00a      	beq.n	80069a2 <vPortFree+0x62>
	__asm volatile
 800698c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006990:	f383 8811 	msr	BASEPRI, r3
 8006994:	f3bf 8f6f 	isb	sy
 8006998:	f3bf 8f4f 	dsb	sy
 800699c:	60bb      	str	r3, [r7, #8]
}
 800699e:	bf00      	nop
 80069a0:	e7fe      	b.n	80069a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	685a      	ldr	r2, [r3, #4]
 80069a6:	4b14      	ldr	r3, [pc, #80]	; (80069f8 <vPortFree+0xb8>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4013      	ands	r3, r2
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d01e      	beq.n	80069ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80069b0:	693b      	ldr	r3, [r7, #16]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d11a      	bne.n	80069ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	685a      	ldr	r2, [r3, #4]
 80069bc:	4b0e      	ldr	r3, [pc, #56]	; (80069f8 <vPortFree+0xb8>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	43db      	mvns	r3, r3
 80069c2:	401a      	ands	r2, r3
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80069c8:	f7fe fc26 	bl	8005218 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80069cc:	693b      	ldr	r3, [r7, #16]
 80069ce:	685a      	ldr	r2, [r3, #4]
 80069d0:	4b0a      	ldr	r3, [pc, #40]	; (80069fc <vPortFree+0xbc>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4413      	add	r3, r2
 80069d6:	4a09      	ldr	r2, [pc, #36]	; (80069fc <vPortFree+0xbc>)
 80069d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80069da:	6938      	ldr	r0, [r7, #16]
 80069dc:	f000 f874 	bl	8006ac8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80069e0:	4b07      	ldr	r3, [pc, #28]	; (8006a00 <vPortFree+0xc0>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	3301      	adds	r3, #1
 80069e6:	4a06      	ldr	r2, [pc, #24]	; (8006a00 <vPortFree+0xc0>)
 80069e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80069ea:	f7fe fc23 	bl	8005234 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80069ee:	bf00      	nop
 80069f0:	3718      	adds	r7, #24
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}
 80069f6:	bf00      	nop
 80069f8:	20001e94 	.word	0x20001e94
 80069fc:	20001e84 	.word	0x20001e84
 8006a00:	20001e90 	.word	0x20001e90

08006a04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006a04:	b480      	push	{r7}
 8006a06:	b085      	sub	sp, #20
 8006a08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006a0a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006a0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006a10:	4b27      	ldr	r3, [pc, #156]	; (8006ab0 <prvHeapInit+0xac>)
 8006a12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f003 0307 	and.w	r3, r3, #7
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d00c      	beq.n	8006a38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	3307      	adds	r3, #7
 8006a22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	f023 0307 	bic.w	r3, r3, #7
 8006a2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006a2c:	68ba      	ldr	r2, [r7, #8]
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	1ad3      	subs	r3, r2, r3
 8006a32:	4a1f      	ldr	r2, [pc, #124]	; (8006ab0 <prvHeapInit+0xac>)
 8006a34:	4413      	add	r3, r2
 8006a36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006a3c:	4a1d      	ldr	r2, [pc, #116]	; (8006ab4 <prvHeapInit+0xb0>)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006a42:	4b1c      	ldr	r3, [pc, #112]	; (8006ab4 <prvHeapInit+0xb0>)
 8006a44:	2200      	movs	r2, #0
 8006a46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	68ba      	ldr	r2, [r7, #8]
 8006a4c:	4413      	add	r3, r2
 8006a4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006a50:	2208      	movs	r2, #8
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	1a9b      	subs	r3, r3, r2
 8006a56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	f023 0307 	bic.w	r3, r3, #7
 8006a5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	4a15      	ldr	r2, [pc, #84]	; (8006ab8 <prvHeapInit+0xb4>)
 8006a64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006a66:	4b14      	ldr	r3, [pc, #80]	; (8006ab8 <prvHeapInit+0xb4>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006a6e:	4b12      	ldr	r3, [pc, #72]	; (8006ab8 <prvHeapInit+0xb4>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	2200      	movs	r2, #0
 8006a74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	68fa      	ldr	r2, [r7, #12]
 8006a7e:	1ad2      	subs	r2, r2, r3
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006a84:	4b0c      	ldr	r3, [pc, #48]	; (8006ab8 <prvHeapInit+0xb4>)
 8006a86:	681a      	ldr	r2, [r3, #0]
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	685b      	ldr	r3, [r3, #4]
 8006a90:	4a0a      	ldr	r2, [pc, #40]	; (8006abc <prvHeapInit+0xb8>)
 8006a92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	4a09      	ldr	r2, [pc, #36]	; (8006ac0 <prvHeapInit+0xbc>)
 8006a9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006a9c:	4b09      	ldr	r3, [pc, #36]	; (8006ac4 <prvHeapInit+0xc0>)
 8006a9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006aa2:	601a      	str	r2, [r3, #0]
}
 8006aa4:	bf00      	nop
 8006aa6:	3714      	adds	r7, #20
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aae:	4770      	bx	lr
 8006ab0:	20001278 	.word	0x20001278
 8006ab4:	20001e78 	.word	0x20001e78
 8006ab8:	20001e80 	.word	0x20001e80
 8006abc:	20001e88 	.word	0x20001e88
 8006ac0:	20001e84 	.word	0x20001e84
 8006ac4:	20001e94 	.word	0x20001e94

08006ac8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b085      	sub	sp, #20
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006ad0:	4b28      	ldr	r3, [pc, #160]	; (8006b74 <prvInsertBlockIntoFreeList+0xac>)
 8006ad2:	60fb      	str	r3, [r7, #12]
 8006ad4:	e002      	b.n	8006adc <prvInsertBlockIntoFreeList+0x14>
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	60fb      	str	r3, [r7, #12]
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	687a      	ldr	r2, [r7, #4]
 8006ae2:	429a      	cmp	r2, r3
 8006ae4:	d8f7      	bhi.n	8006ad6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	685b      	ldr	r3, [r3, #4]
 8006aee:	68ba      	ldr	r2, [r7, #8]
 8006af0:	4413      	add	r3, r2
 8006af2:	687a      	ldr	r2, [r7, #4]
 8006af4:	429a      	cmp	r2, r3
 8006af6:	d108      	bne.n	8006b0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	685a      	ldr	r2, [r3, #4]
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	685b      	ldr	r3, [r3, #4]
 8006b00:	441a      	add	r2, r3
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	685b      	ldr	r3, [r3, #4]
 8006b12:	68ba      	ldr	r2, [r7, #8]
 8006b14:	441a      	add	r2, r3
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	429a      	cmp	r2, r3
 8006b1c:	d118      	bne.n	8006b50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681a      	ldr	r2, [r3, #0]
 8006b22:	4b15      	ldr	r3, [pc, #84]	; (8006b78 <prvInsertBlockIntoFreeList+0xb0>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	429a      	cmp	r2, r3
 8006b28:	d00d      	beq.n	8006b46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	685a      	ldr	r2, [r3, #4]
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	685b      	ldr	r3, [r3, #4]
 8006b34:	441a      	add	r2, r3
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	681a      	ldr	r2, [r3, #0]
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	601a      	str	r2, [r3, #0]
 8006b44:	e008      	b.n	8006b58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006b46:	4b0c      	ldr	r3, [pc, #48]	; (8006b78 <prvInsertBlockIntoFreeList+0xb0>)
 8006b48:	681a      	ldr	r2, [r3, #0]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	601a      	str	r2, [r3, #0]
 8006b4e:	e003      	b.n	8006b58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681a      	ldr	r2, [r3, #0]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006b58:	68fa      	ldr	r2, [r7, #12]
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	429a      	cmp	r2, r3
 8006b5e:	d002      	beq.n	8006b66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	687a      	ldr	r2, [r7, #4]
 8006b64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006b66:	bf00      	nop
 8006b68:	3714      	adds	r7, #20
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b70:	4770      	bx	lr
 8006b72:	bf00      	nop
 8006b74:	20001e78 	.word	0x20001e78
 8006b78:	20001e80 	.word	0x20001e80

08006b7c <__errno>:
 8006b7c:	4b01      	ldr	r3, [pc, #4]	; (8006b84 <__errno+0x8>)
 8006b7e:	6818      	ldr	r0, [r3, #0]
 8006b80:	4770      	bx	lr
 8006b82:	bf00      	nop
 8006b84:	20000014 	.word	0x20000014

08006b88 <std>:
 8006b88:	2300      	movs	r3, #0
 8006b8a:	b510      	push	{r4, lr}
 8006b8c:	4604      	mov	r4, r0
 8006b8e:	e9c0 3300 	strd	r3, r3, [r0]
 8006b92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006b96:	6083      	str	r3, [r0, #8]
 8006b98:	8181      	strh	r1, [r0, #12]
 8006b9a:	6643      	str	r3, [r0, #100]	; 0x64
 8006b9c:	81c2      	strh	r2, [r0, #14]
 8006b9e:	6183      	str	r3, [r0, #24]
 8006ba0:	4619      	mov	r1, r3
 8006ba2:	2208      	movs	r2, #8
 8006ba4:	305c      	adds	r0, #92	; 0x5c
 8006ba6:	f000 f91a 	bl	8006dde <memset>
 8006baa:	4b05      	ldr	r3, [pc, #20]	; (8006bc0 <std+0x38>)
 8006bac:	6263      	str	r3, [r4, #36]	; 0x24
 8006bae:	4b05      	ldr	r3, [pc, #20]	; (8006bc4 <std+0x3c>)
 8006bb0:	62a3      	str	r3, [r4, #40]	; 0x28
 8006bb2:	4b05      	ldr	r3, [pc, #20]	; (8006bc8 <std+0x40>)
 8006bb4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006bb6:	4b05      	ldr	r3, [pc, #20]	; (8006bcc <std+0x44>)
 8006bb8:	6224      	str	r4, [r4, #32]
 8006bba:	6323      	str	r3, [r4, #48]	; 0x30
 8006bbc:	bd10      	pop	{r4, pc}
 8006bbe:	bf00      	nop
 8006bc0:	0800703d 	.word	0x0800703d
 8006bc4:	0800705f 	.word	0x0800705f
 8006bc8:	08007097 	.word	0x08007097
 8006bcc:	080070bb 	.word	0x080070bb

08006bd0 <_cleanup_r>:
 8006bd0:	4901      	ldr	r1, [pc, #4]	; (8006bd8 <_cleanup_r+0x8>)
 8006bd2:	f000 b8af 	b.w	8006d34 <_fwalk_reent>
 8006bd6:	bf00      	nop
 8006bd8:	08007215 	.word	0x08007215

08006bdc <__sfmoreglue>:
 8006bdc:	b570      	push	{r4, r5, r6, lr}
 8006bde:	2268      	movs	r2, #104	; 0x68
 8006be0:	1e4d      	subs	r5, r1, #1
 8006be2:	4355      	muls	r5, r2
 8006be4:	460e      	mov	r6, r1
 8006be6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006bea:	f000 f921 	bl	8006e30 <_malloc_r>
 8006bee:	4604      	mov	r4, r0
 8006bf0:	b140      	cbz	r0, 8006c04 <__sfmoreglue+0x28>
 8006bf2:	2100      	movs	r1, #0
 8006bf4:	e9c0 1600 	strd	r1, r6, [r0]
 8006bf8:	300c      	adds	r0, #12
 8006bfa:	60a0      	str	r0, [r4, #8]
 8006bfc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006c00:	f000 f8ed 	bl	8006dde <memset>
 8006c04:	4620      	mov	r0, r4
 8006c06:	bd70      	pop	{r4, r5, r6, pc}

08006c08 <__sfp_lock_acquire>:
 8006c08:	4801      	ldr	r0, [pc, #4]	; (8006c10 <__sfp_lock_acquire+0x8>)
 8006c0a:	f000 b8d8 	b.w	8006dbe <__retarget_lock_acquire_recursive>
 8006c0e:	bf00      	nop
 8006c10:	20001e99 	.word	0x20001e99

08006c14 <__sfp_lock_release>:
 8006c14:	4801      	ldr	r0, [pc, #4]	; (8006c1c <__sfp_lock_release+0x8>)
 8006c16:	f000 b8d3 	b.w	8006dc0 <__retarget_lock_release_recursive>
 8006c1a:	bf00      	nop
 8006c1c:	20001e99 	.word	0x20001e99

08006c20 <__sinit_lock_acquire>:
 8006c20:	4801      	ldr	r0, [pc, #4]	; (8006c28 <__sinit_lock_acquire+0x8>)
 8006c22:	f000 b8cc 	b.w	8006dbe <__retarget_lock_acquire_recursive>
 8006c26:	bf00      	nop
 8006c28:	20001e9a 	.word	0x20001e9a

08006c2c <__sinit_lock_release>:
 8006c2c:	4801      	ldr	r0, [pc, #4]	; (8006c34 <__sinit_lock_release+0x8>)
 8006c2e:	f000 b8c7 	b.w	8006dc0 <__retarget_lock_release_recursive>
 8006c32:	bf00      	nop
 8006c34:	20001e9a 	.word	0x20001e9a

08006c38 <__sinit>:
 8006c38:	b510      	push	{r4, lr}
 8006c3a:	4604      	mov	r4, r0
 8006c3c:	f7ff fff0 	bl	8006c20 <__sinit_lock_acquire>
 8006c40:	69a3      	ldr	r3, [r4, #24]
 8006c42:	b11b      	cbz	r3, 8006c4c <__sinit+0x14>
 8006c44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c48:	f7ff bff0 	b.w	8006c2c <__sinit_lock_release>
 8006c4c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006c50:	6523      	str	r3, [r4, #80]	; 0x50
 8006c52:	4b13      	ldr	r3, [pc, #76]	; (8006ca0 <__sinit+0x68>)
 8006c54:	4a13      	ldr	r2, [pc, #76]	; (8006ca4 <__sinit+0x6c>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	62a2      	str	r2, [r4, #40]	; 0x28
 8006c5a:	42a3      	cmp	r3, r4
 8006c5c:	bf04      	itt	eq
 8006c5e:	2301      	moveq	r3, #1
 8006c60:	61a3      	streq	r3, [r4, #24]
 8006c62:	4620      	mov	r0, r4
 8006c64:	f000 f820 	bl	8006ca8 <__sfp>
 8006c68:	6060      	str	r0, [r4, #4]
 8006c6a:	4620      	mov	r0, r4
 8006c6c:	f000 f81c 	bl	8006ca8 <__sfp>
 8006c70:	60a0      	str	r0, [r4, #8]
 8006c72:	4620      	mov	r0, r4
 8006c74:	f000 f818 	bl	8006ca8 <__sfp>
 8006c78:	2200      	movs	r2, #0
 8006c7a:	60e0      	str	r0, [r4, #12]
 8006c7c:	2104      	movs	r1, #4
 8006c7e:	6860      	ldr	r0, [r4, #4]
 8006c80:	f7ff ff82 	bl	8006b88 <std>
 8006c84:	68a0      	ldr	r0, [r4, #8]
 8006c86:	2201      	movs	r2, #1
 8006c88:	2109      	movs	r1, #9
 8006c8a:	f7ff ff7d 	bl	8006b88 <std>
 8006c8e:	68e0      	ldr	r0, [r4, #12]
 8006c90:	2202      	movs	r2, #2
 8006c92:	2112      	movs	r1, #18
 8006c94:	f7ff ff78 	bl	8006b88 <std>
 8006c98:	2301      	movs	r3, #1
 8006c9a:	61a3      	str	r3, [r4, #24]
 8006c9c:	e7d2      	b.n	8006c44 <__sinit+0xc>
 8006c9e:	bf00      	nop
 8006ca0:	08007de4 	.word	0x08007de4
 8006ca4:	08006bd1 	.word	0x08006bd1

08006ca8 <__sfp>:
 8006ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006caa:	4607      	mov	r7, r0
 8006cac:	f7ff ffac 	bl	8006c08 <__sfp_lock_acquire>
 8006cb0:	4b1e      	ldr	r3, [pc, #120]	; (8006d2c <__sfp+0x84>)
 8006cb2:	681e      	ldr	r6, [r3, #0]
 8006cb4:	69b3      	ldr	r3, [r6, #24]
 8006cb6:	b913      	cbnz	r3, 8006cbe <__sfp+0x16>
 8006cb8:	4630      	mov	r0, r6
 8006cba:	f7ff ffbd 	bl	8006c38 <__sinit>
 8006cbe:	3648      	adds	r6, #72	; 0x48
 8006cc0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006cc4:	3b01      	subs	r3, #1
 8006cc6:	d503      	bpl.n	8006cd0 <__sfp+0x28>
 8006cc8:	6833      	ldr	r3, [r6, #0]
 8006cca:	b30b      	cbz	r3, 8006d10 <__sfp+0x68>
 8006ccc:	6836      	ldr	r6, [r6, #0]
 8006cce:	e7f7      	b.n	8006cc0 <__sfp+0x18>
 8006cd0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006cd4:	b9d5      	cbnz	r5, 8006d0c <__sfp+0x64>
 8006cd6:	4b16      	ldr	r3, [pc, #88]	; (8006d30 <__sfp+0x88>)
 8006cd8:	60e3      	str	r3, [r4, #12]
 8006cda:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006cde:	6665      	str	r5, [r4, #100]	; 0x64
 8006ce0:	f000 f86c 	bl	8006dbc <__retarget_lock_init_recursive>
 8006ce4:	f7ff ff96 	bl	8006c14 <__sfp_lock_release>
 8006ce8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006cec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006cf0:	6025      	str	r5, [r4, #0]
 8006cf2:	61a5      	str	r5, [r4, #24]
 8006cf4:	2208      	movs	r2, #8
 8006cf6:	4629      	mov	r1, r5
 8006cf8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006cfc:	f000 f86f 	bl	8006dde <memset>
 8006d00:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006d04:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006d08:	4620      	mov	r0, r4
 8006d0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d0c:	3468      	adds	r4, #104	; 0x68
 8006d0e:	e7d9      	b.n	8006cc4 <__sfp+0x1c>
 8006d10:	2104      	movs	r1, #4
 8006d12:	4638      	mov	r0, r7
 8006d14:	f7ff ff62 	bl	8006bdc <__sfmoreglue>
 8006d18:	4604      	mov	r4, r0
 8006d1a:	6030      	str	r0, [r6, #0]
 8006d1c:	2800      	cmp	r0, #0
 8006d1e:	d1d5      	bne.n	8006ccc <__sfp+0x24>
 8006d20:	f7ff ff78 	bl	8006c14 <__sfp_lock_release>
 8006d24:	230c      	movs	r3, #12
 8006d26:	603b      	str	r3, [r7, #0]
 8006d28:	e7ee      	b.n	8006d08 <__sfp+0x60>
 8006d2a:	bf00      	nop
 8006d2c:	08007de4 	.word	0x08007de4
 8006d30:	ffff0001 	.word	0xffff0001

08006d34 <_fwalk_reent>:
 8006d34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d38:	4606      	mov	r6, r0
 8006d3a:	4688      	mov	r8, r1
 8006d3c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006d40:	2700      	movs	r7, #0
 8006d42:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006d46:	f1b9 0901 	subs.w	r9, r9, #1
 8006d4a:	d505      	bpl.n	8006d58 <_fwalk_reent+0x24>
 8006d4c:	6824      	ldr	r4, [r4, #0]
 8006d4e:	2c00      	cmp	r4, #0
 8006d50:	d1f7      	bne.n	8006d42 <_fwalk_reent+0xe>
 8006d52:	4638      	mov	r0, r7
 8006d54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d58:	89ab      	ldrh	r3, [r5, #12]
 8006d5a:	2b01      	cmp	r3, #1
 8006d5c:	d907      	bls.n	8006d6e <_fwalk_reent+0x3a>
 8006d5e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006d62:	3301      	adds	r3, #1
 8006d64:	d003      	beq.n	8006d6e <_fwalk_reent+0x3a>
 8006d66:	4629      	mov	r1, r5
 8006d68:	4630      	mov	r0, r6
 8006d6a:	47c0      	blx	r8
 8006d6c:	4307      	orrs	r7, r0
 8006d6e:	3568      	adds	r5, #104	; 0x68
 8006d70:	e7e9      	b.n	8006d46 <_fwalk_reent+0x12>
	...

08006d74 <__libc_init_array>:
 8006d74:	b570      	push	{r4, r5, r6, lr}
 8006d76:	4d0d      	ldr	r5, [pc, #52]	; (8006dac <__libc_init_array+0x38>)
 8006d78:	4c0d      	ldr	r4, [pc, #52]	; (8006db0 <__libc_init_array+0x3c>)
 8006d7a:	1b64      	subs	r4, r4, r5
 8006d7c:	10a4      	asrs	r4, r4, #2
 8006d7e:	2600      	movs	r6, #0
 8006d80:	42a6      	cmp	r6, r4
 8006d82:	d109      	bne.n	8006d98 <__libc_init_array+0x24>
 8006d84:	4d0b      	ldr	r5, [pc, #44]	; (8006db4 <__libc_init_array+0x40>)
 8006d86:	4c0c      	ldr	r4, [pc, #48]	; (8006db8 <__libc_init_array+0x44>)
 8006d88:	f000 ff32 	bl	8007bf0 <_init>
 8006d8c:	1b64      	subs	r4, r4, r5
 8006d8e:	10a4      	asrs	r4, r4, #2
 8006d90:	2600      	movs	r6, #0
 8006d92:	42a6      	cmp	r6, r4
 8006d94:	d105      	bne.n	8006da2 <__libc_init_array+0x2e>
 8006d96:	bd70      	pop	{r4, r5, r6, pc}
 8006d98:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d9c:	4798      	blx	r3
 8006d9e:	3601      	adds	r6, #1
 8006da0:	e7ee      	b.n	8006d80 <__libc_init_array+0xc>
 8006da2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006da6:	4798      	blx	r3
 8006da8:	3601      	adds	r6, #1
 8006daa:	e7f2      	b.n	8006d92 <__libc_init_array+0x1e>
 8006dac:	08007e24 	.word	0x08007e24
 8006db0:	08007e24 	.word	0x08007e24
 8006db4:	08007e24 	.word	0x08007e24
 8006db8:	08007e28 	.word	0x08007e28

08006dbc <__retarget_lock_init_recursive>:
 8006dbc:	4770      	bx	lr

08006dbe <__retarget_lock_acquire_recursive>:
 8006dbe:	4770      	bx	lr

08006dc0 <__retarget_lock_release_recursive>:
 8006dc0:	4770      	bx	lr

08006dc2 <memcpy>:
 8006dc2:	440a      	add	r2, r1
 8006dc4:	4291      	cmp	r1, r2
 8006dc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8006dca:	d100      	bne.n	8006dce <memcpy+0xc>
 8006dcc:	4770      	bx	lr
 8006dce:	b510      	push	{r4, lr}
 8006dd0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006dd4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006dd8:	4291      	cmp	r1, r2
 8006dda:	d1f9      	bne.n	8006dd0 <memcpy+0xe>
 8006ddc:	bd10      	pop	{r4, pc}

08006dde <memset>:
 8006dde:	4402      	add	r2, r0
 8006de0:	4603      	mov	r3, r0
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d100      	bne.n	8006de8 <memset+0xa>
 8006de6:	4770      	bx	lr
 8006de8:	f803 1b01 	strb.w	r1, [r3], #1
 8006dec:	e7f9      	b.n	8006de2 <memset+0x4>
	...

08006df0 <sbrk_aligned>:
 8006df0:	b570      	push	{r4, r5, r6, lr}
 8006df2:	4e0e      	ldr	r6, [pc, #56]	; (8006e2c <sbrk_aligned+0x3c>)
 8006df4:	460c      	mov	r4, r1
 8006df6:	6831      	ldr	r1, [r6, #0]
 8006df8:	4605      	mov	r5, r0
 8006dfa:	b911      	cbnz	r1, 8006e02 <sbrk_aligned+0x12>
 8006dfc:	f000 f90e 	bl	800701c <_sbrk_r>
 8006e00:	6030      	str	r0, [r6, #0]
 8006e02:	4621      	mov	r1, r4
 8006e04:	4628      	mov	r0, r5
 8006e06:	f000 f909 	bl	800701c <_sbrk_r>
 8006e0a:	1c43      	adds	r3, r0, #1
 8006e0c:	d00a      	beq.n	8006e24 <sbrk_aligned+0x34>
 8006e0e:	1cc4      	adds	r4, r0, #3
 8006e10:	f024 0403 	bic.w	r4, r4, #3
 8006e14:	42a0      	cmp	r0, r4
 8006e16:	d007      	beq.n	8006e28 <sbrk_aligned+0x38>
 8006e18:	1a21      	subs	r1, r4, r0
 8006e1a:	4628      	mov	r0, r5
 8006e1c:	f000 f8fe 	bl	800701c <_sbrk_r>
 8006e20:	3001      	adds	r0, #1
 8006e22:	d101      	bne.n	8006e28 <sbrk_aligned+0x38>
 8006e24:	f04f 34ff 	mov.w	r4, #4294967295
 8006e28:	4620      	mov	r0, r4
 8006e2a:	bd70      	pop	{r4, r5, r6, pc}
 8006e2c:	20001ea0 	.word	0x20001ea0

08006e30 <_malloc_r>:
 8006e30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e34:	1ccd      	adds	r5, r1, #3
 8006e36:	f025 0503 	bic.w	r5, r5, #3
 8006e3a:	3508      	adds	r5, #8
 8006e3c:	2d0c      	cmp	r5, #12
 8006e3e:	bf38      	it	cc
 8006e40:	250c      	movcc	r5, #12
 8006e42:	2d00      	cmp	r5, #0
 8006e44:	4607      	mov	r7, r0
 8006e46:	db01      	blt.n	8006e4c <_malloc_r+0x1c>
 8006e48:	42a9      	cmp	r1, r5
 8006e4a:	d905      	bls.n	8006e58 <_malloc_r+0x28>
 8006e4c:	230c      	movs	r3, #12
 8006e4e:	603b      	str	r3, [r7, #0]
 8006e50:	2600      	movs	r6, #0
 8006e52:	4630      	mov	r0, r6
 8006e54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e58:	4e2e      	ldr	r6, [pc, #184]	; (8006f14 <_malloc_r+0xe4>)
 8006e5a:	f000 fa29 	bl	80072b0 <__malloc_lock>
 8006e5e:	6833      	ldr	r3, [r6, #0]
 8006e60:	461c      	mov	r4, r3
 8006e62:	bb34      	cbnz	r4, 8006eb2 <_malloc_r+0x82>
 8006e64:	4629      	mov	r1, r5
 8006e66:	4638      	mov	r0, r7
 8006e68:	f7ff ffc2 	bl	8006df0 <sbrk_aligned>
 8006e6c:	1c43      	adds	r3, r0, #1
 8006e6e:	4604      	mov	r4, r0
 8006e70:	d14d      	bne.n	8006f0e <_malloc_r+0xde>
 8006e72:	6834      	ldr	r4, [r6, #0]
 8006e74:	4626      	mov	r6, r4
 8006e76:	2e00      	cmp	r6, #0
 8006e78:	d140      	bne.n	8006efc <_malloc_r+0xcc>
 8006e7a:	6823      	ldr	r3, [r4, #0]
 8006e7c:	4631      	mov	r1, r6
 8006e7e:	4638      	mov	r0, r7
 8006e80:	eb04 0803 	add.w	r8, r4, r3
 8006e84:	f000 f8ca 	bl	800701c <_sbrk_r>
 8006e88:	4580      	cmp	r8, r0
 8006e8a:	d13a      	bne.n	8006f02 <_malloc_r+0xd2>
 8006e8c:	6821      	ldr	r1, [r4, #0]
 8006e8e:	3503      	adds	r5, #3
 8006e90:	1a6d      	subs	r5, r5, r1
 8006e92:	f025 0503 	bic.w	r5, r5, #3
 8006e96:	3508      	adds	r5, #8
 8006e98:	2d0c      	cmp	r5, #12
 8006e9a:	bf38      	it	cc
 8006e9c:	250c      	movcc	r5, #12
 8006e9e:	4629      	mov	r1, r5
 8006ea0:	4638      	mov	r0, r7
 8006ea2:	f7ff ffa5 	bl	8006df0 <sbrk_aligned>
 8006ea6:	3001      	adds	r0, #1
 8006ea8:	d02b      	beq.n	8006f02 <_malloc_r+0xd2>
 8006eaa:	6823      	ldr	r3, [r4, #0]
 8006eac:	442b      	add	r3, r5
 8006eae:	6023      	str	r3, [r4, #0]
 8006eb0:	e00e      	b.n	8006ed0 <_malloc_r+0xa0>
 8006eb2:	6822      	ldr	r2, [r4, #0]
 8006eb4:	1b52      	subs	r2, r2, r5
 8006eb6:	d41e      	bmi.n	8006ef6 <_malloc_r+0xc6>
 8006eb8:	2a0b      	cmp	r2, #11
 8006eba:	d916      	bls.n	8006eea <_malloc_r+0xba>
 8006ebc:	1961      	adds	r1, r4, r5
 8006ebe:	42a3      	cmp	r3, r4
 8006ec0:	6025      	str	r5, [r4, #0]
 8006ec2:	bf18      	it	ne
 8006ec4:	6059      	strne	r1, [r3, #4]
 8006ec6:	6863      	ldr	r3, [r4, #4]
 8006ec8:	bf08      	it	eq
 8006eca:	6031      	streq	r1, [r6, #0]
 8006ecc:	5162      	str	r2, [r4, r5]
 8006ece:	604b      	str	r3, [r1, #4]
 8006ed0:	4638      	mov	r0, r7
 8006ed2:	f104 060b 	add.w	r6, r4, #11
 8006ed6:	f000 f9f1 	bl	80072bc <__malloc_unlock>
 8006eda:	f026 0607 	bic.w	r6, r6, #7
 8006ede:	1d23      	adds	r3, r4, #4
 8006ee0:	1af2      	subs	r2, r6, r3
 8006ee2:	d0b6      	beq.n	8006e52 <_malloc_r+0x22>
 8006ee4:	1b9b      	subs	r3, r3, r6
 8006ee6:	50a3      	str	r3, [r4, r2]
 8006ee8:	e7b3      	b.n	8006e52 <_malloc_r+0x22>
 8006eea:	6862      	ldr	r2, [r4, #4]
 8006eec:	42a3      	cmp	r3, r4
 8006eee:	bf0c      	ite	eq
 8006ef0:	6032      	streq	r2, [r6, #0]
 8006ef2:	605a      	strne	r2, [r3, #4]
 8006ef4:	e7ec      	b.n	8006ed0 <_malloc_r+0xa0>
 8006ef6:	4623      	mov	r3, r4
 8006ef8:	6864      	ldr	r4, [r4, #4]
 8006efa:	e7b2      	b.n	8006e62 <_malloc_r+0x32>
 8006efc:	4634      	mov	r4, r6
 8006efe:	6876      	ldr	r6, [r6, #4]
 8006f00:	e7b9      	b.n	8006e76 <_malloc_r+0x46>
 8006f02:	230c      	movs	r3, #12
 8006f04:	603b      	str	r3, [r7, #0]
 8006f06:	4638      	mov	r0, r7
 8006f08:	f000 f9d8 	bl	80072bc <__malloc_unlock>
 8006f0c:	e7a1      	b.n	8006e52 <_malloc_r+0x22>
 8006f0e:	6025      	str	r5, [r4, #0]
 8006f10:	e7de      	b.n	8006ed0 <_malloc_r+0xa0>
 8006f12:	bf00      	nop
 8006f14:	20001e9c 	.word	0x20001e9c

08006f18 <iprintf>:
 8006f18:	b40f      	push	{r0, r1, r2, r3}
 8006f1a:	4b0a      	ldr	r3, [pc, #40]	; (8006f44 <iprintf+0x2c>)
 8006f1c:	b513      	push	{r0, r1, r4, lr}
 8006f1e:	681c      	ldr	r4, [r3, #0]
 8006f20:	b124      	cbz	r4, 8006f2c <iprintf+0x14>
 8006f22:	69a3      	ldr	r3, [r4, #24]
 8006f24:	b913      	cbnz	r3, 8006f2c <iprintf+0x14>
 8006f26:	4620      	mov	r0, r4
 8006f28:	f7ff fe86 	bl	8006c38 <__sinit>
 8006f2c:	ab05      	add	r3, sp, #20
 8006f2e:	9a04      	ldr	r2, [sp, #16]
 8006f30:	68a1      	ldr	r1, [r4, #8]
 8006f32:	9301      	str	r3, [sp, #4]
 8006f34:	4620      	mov	r0, r4
 8006f36:	f000 fa3d 	bl	80073b4 <_vfiprintf_r>
 8006f3a:	b002      	add	sp, #8
 8006f3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f40:	b004      	add	sp, #16
 8006f42:	4770      	bx	lr
 8006f44:	20000014 	.word	0x20000014

08006f48 <cleanup_glue>:
 8006f48:	b538      	push	{r3, r4, r5, lr}
 8006f4a:	460c      	mov	r4, r1
 8006f4c:	6809      	ldr	r1, [r1, #0]
 8006f4e:	4605      	mov	r5, r0
 8006f50:	b109      	cbz	r1, 8006f56 <cleanup_glue+0xe>
 8006f52:	f7ff fff9 	bl	8006f48 <cleanup_glue>
 8006f56:	4621      	mov	r1, r4
 8006f58:	4628      	mov	r0, r5
 8006f5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f5e:	f000 b9b3 	b.w	80072c8 <_free_r>
	...

08006f64 <_reclaim_reent>:
 8006f64:	4b2c      	ldr	r3, [pc, #176]	; (8007018 <_reclaim_reent+0xb4>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4283      	cmp	r3, r0
 8006f6a:	b570      	push	{r4, r5, r6, lr}
 8006f6c:	4604      	mov	r4, r0
 8006f6e:	d051      	beq.n	8007014 <_reclaim_reent+0xb0>
 8006f70:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006f72:	b143      	cbz	r3, 8006f86 <_reclaim_reent+0x22>
 8006f74:	68db      	ldr	r3, [r3, #12]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d14a      	bne.n	8007010 <_reclaim_reent+0xac>
 8006f7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f7c:	6819      	ldr	r1, [r3, #0]
 8006f7e:	b111      	cbz	r1, 8006f86 <_reclaim_reent+0x22>
 8006f80:	4620      	mov	r0, r4
 8006f82:	f000 f9a1 	bl	80072c8 <_free_r>
 8006f86:	6961      	ldr	r1, [r4, #20]
 8006f88:	b111      	cbz	r1, 8006f90 <_reclaim_reent+0x2c>
 8006f8a:	4620      	mov	r0, r4
 8006f8c:	f000 f99c 	bl	80072c8 <_free_r>
 8006f90:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006f92:	b111      	cbz	r1, 8006f9a <_reclaim_reent+0x36>
 8006f94:	4620      	mov	r0, r4
 8006f96:	f000 f997 	bl	80072c8 <_free_r>
 8006f9a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006f9c:	b111      	cbz	r1, 8006fa4 <_reclaim_reent+0x40>
 8006f9e:	4620      	mov	r0, r4
 8006fa0:	f000 f992 	bl	80072c8 <_free_r>
 8006fa4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006fa6:	b111      	cbz	r1, 8006fae <_reclaim_reent+0x4a>
 8006fa8:	4620      	mov	r0, r4
 8006faa:	f000 f98d 	bl	80072c8 <_free_r>
 8006fae:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006fb0:	b111      	cbz	r1, 8006fb8 <_reclaim_reent+0x54>
 8006fb2:	4620      	mov	r0, r4
 8006fb4:	f000 f988 	bl	80072c8 <_free_r>
 8006fb8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006fba:	b111      	cbz	r1, 8006fc2 <_reclaim_reent+0x5e>
 8006fbc:	4620      	mov	r0, r4
 8006fbe:	f000 f983 	bl	80072c8 <_free_r>
 8006fc2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006fc4:	b111      	cbz	r1, 8006fcc <_reclaim_reent+0x68>
 8006fc6:	4620      	mov	r0, r4
 8006fc8:	f000 f97e 	bl	80072c8 <_free_r>
 8006fcc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006fce:	b111      	cbz	r1, 8006fd6 <_reclaim_reent+0x72>
 8006fd0:	4620      	mov	r0, r4
 8006fd2:	f000 f979 	bl	80072c8 <_free_r>
 8006fd6:	69a3      	ldr	r3, [r4, #24]
 8006fd8:	b1e3      	cbz	r3, 8007014 <_reclaim_reent+0xb0>
 8006fda:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006fdc:	4620      	mov	r0, r4
 8006fde:	4798      	blx	r3
 8006fe0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006fe2:	b1b9      	cbz	r1, 8007014 <_reclaim_reent+0xb0>
 8006fe4:	4620      	mov	r0, r4
 8006fe6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006fea:	f7ff bfad 	b.w	8006f48 <cleanup_glue>
 8006fee:	5949      	ldr	r1, [r1, r5]
 8006ff0:	b941      	cbnz	r1, 8007004 <_reclaim_reent+0xa0>
 8006ff2:	3504      	adds	r5, #4
 8006ff4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ff6:	2d80      	cmp	r5, #128	; 0x80
 8006ff8:	68d9      	ldr	r1, [r3, #12]
 8006ffa:	d1f8      	bne.n	8006fee <_reclaim_reent+0x8a>
 8006ffc:	4620      	mov	r0, r4
 8006ffe:	f000 f963 	bl	80072c8 <_free_r>
 8007002:	e7ba      	b.n	8006f7a <_reclaim_reent+0x16>
 8007004:	680e      	ldr	r6, [r1, #0]
 8007006:	4620      	mov	r0, r4
 8007008:	f000 f95e 	bl	80072c8 <_free_r>
 800700c:	4631      	mov	r1, r6
 800700e:	e7ef      	b.n	8006ff0 <_reclaim_reent+0x8c>
 8007010:	2500      	movs	r5, #0
 8007012:	e7ef      	b.n	8006ff4 <_reclaim_reent+0x90>
 8007014:	bd70      	pop	{r4, r5, r6, pc}
 8007016:	bf00      	nop
 8007018:	20000014 	.word	0x20000014

0800701c <_sbrk_r>:
 800701c:	b538      	push	{r3, r4, r5, lr}
 800701e:	4d06      	ldr	r5, [pc, #24]	; (8007038 <_sbrk_r+0x1c>)
 8007020:	2300      	movs	r3, #0
 8007022:	4604      	mov	r4, r0
 8007024:	4608      	mov	r0, r1
 8007026:	602b      	str	r3, [r5, #0]
 8007028:	f7f9 fe54 	bl	8000cd4 <_sbrk>
 800702c:	1c43      	adds	r3, r0, #1
 800702e:	d102      	bne.n	8007036 <_sbrk_r+0x1a>
 8007030:	682b      	ldr	r3, [r5, #0]
 8007032:	b103      	cbz	r3, 8007036 <_sbrk_r+0x1a>
 8007034:	6023      	str	r3, [r4, #0]
 8007036:	bd38      	pop	{r3, r4, r5, pc}
 8007038:	20001ea4 	.word	0x20001ea4

0800703c <__sread>:
 800703c:	b510      	push	{r4, lr}
 800703e:	460c      	mov	r4, r1
 8007040:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007044:	f000 fc7a 	bl	800793c <_read_r>
 8007048:	2800      	cmp	r0, #0
 800704a:	bfab      	itete	ge
 800704c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800704e:	89a3      	ldrhlt	r3, [r4, #12]
 8007050:	181b      	addge	r3, r3, r0
 8007052:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007056:	bfac      	ite	ge
 8007058:	6563      	strge	r3, [r4, #84]	; 0x54
 800705a:	81a3      	strhlt	r3, [r4, #12]
 800705c:	bd10      	pop	{r4, pc}

0800705e <__swrite>:
 800705e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007062:	461f      	mov	r7, r3
 8007064:	898b      	ldrh	r3, [r1, #12]
 8007066:	05db      	lsls	r3, r3, #23
 8007068:	4605      	mov	r5, r0
 800706a:	460c      	mov	r4, r1
 800706c:	4616      	mov	r6, r2
 800706e:	d505      	bpl.n	800707c <__swrite+0x1e>
 8007070:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007074:	2302      	movs	r3, #2
 8007076:	2200      	movs	r2, #0
 8007078:	f000 f908 	bl	800728c <_lseek_r>
 800707c:	89a3      	ldrh	r3, [r4, #12]
 800707e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007082:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007086:	81a3      	strh	r3, [r4, #12]
 8007088:	4632      	mov	r2, r6
 800708a:	463b      	mov	r3, r7
 800708c:	4628      	mov	r0, r5
 800708e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007092:	f000 b817 	b.w	80070c4 <_write_r>

08007096 <__sseek>:
 8007096:	b510      	push	{r4, lr}
 8007098:	460c      	mov	r4, r1
 800709a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800709e:	f000 f8f5 	bl	800728c <_lseek_r>
 80070a2:	1c43      	adds	r3, r0, #1
 80070a4:	89a3      	ldrh	r3, [r4, #12]
 80070a6:	bf15      	itete	ne
 80070a8:	6560      	strne	r0, [r4, #84]	; 0x54
 80070aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80070ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80070b2:	81a3      	strheq	r3, [r4, #12]
 80070b4:	bf18      	it	ne
 80070b6:	81a3      	strhne	r3, [r4, #12]
 80070b8:	bd10      	pop	{r4, pc}

080070ba <__sclose>:
 80070ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070be:	f000 b813 	b.w	80070e8 <_close_r>
	...

080070c4 <_write_r>:
 80070c4:	b538      	push	{r3, r4, r5, lr}
 80070c6:	4d07      	ldr	r5, [pc, #28]	; (80070e4 <_write_r+0x20>)
 80070c8:	4604      	mov	r4, r0
 80070ca:	4608      	mov	r0, r1
 80070cc:	4611      	mov	r1, r2
 80070ce:	2200      	movs	r2, #0
 80070d0:	602a      	str	r2, [r5, #0]
 80070d2:	461a      	mov	r2, r3
 80070d4:	f7f9 fdad 	bl	8000c32 <_write>
 80070d8:	1c43      	adds	r3, r0, #1
 80070da:	d102      	bne.n	80070e2 <_write_r+0x1e>
 80070dc:	682b      	ldr	r3, [r5, #0]
 80070de:	b103      	cbz	r3, 80070e2 <_write_r+0x1e>
 80070e0:	6023      	str	r3, [r4, #0]
 80070e2:	bd38      	pop	{r3, r4, r5, pc}
 80070e4:	20001ea4 	.word	0x20001ea4

080070e8 <_close_r>:
 80070e8:	b538      	push	{r3, r4, r5, lr}
 80070ea:	4d06      	ldr	r5, [pc, #24]	; (8007104 <_close_r+0x1c>)
 80070ec:	2300      	movs	r3, #0
 80070ee:	4604      	mov	r4, r0
 80070f0:	4608      	mov	r0, r1
 80070f2:	602b      	str	r3, [r5, #0]
 80070f4:	f7f9 fdb9 	bl	8000c6a <_close>
 80070f8:	1c43      	adds	r3, r0, #1
 80070fa:	d102      	bne.n	8007102 <_close_r+0x1a>
 80070fc:	682b      	ldr	r3, [r5, #0]
 80070fe:	b103      	cbz	r3, 8007102 <_close_r+0x1a>
 8007100:	6023      	str	r3, [r4, #0]
 8007102:	bd38      	pop	{r3, r4, r5, pc}
 8007104:	20001ea4 	.word	0x20001ea4

08007108 <__sflush_r>:
 8007108:	898a      	ldrh	r2, [r1, #12]
 800710a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800710e:	4605      	mov	r5, r0
 8007110:	0710      	lsls	r0, r2, #28
 8007112:	460c      	mov	r4, r1
 8007114:	d458      	bmi.n	80071c8 <__sflush_r+0xc0>
 8007116:	684b      	ldr	r3, [r1, #4]
 8007118:	2b00      	cmp	r3, #0
 800711a:	dc05      	bgt.n	8007128 <__sflush_r+0x20>
 800711c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800711e:	2b00      	cmp	r3, #0
 8007120:	dc02      	bgt.n	8007128 <__sflush_r+0x20>
 8007122:	2000      	movs	r0, #0
 8007124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007128:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800712a:	2e00      	cmp	r6, #0
 800712c:	d0f9      	beq.n	8007122 <__sflush_r+0x1a>
 800712e:	2300      	movs	r3, #0
 8007130:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007134:	682f      	ldr	r7, [r5, #0]
 8007136:	602b      	str	r3, [r5, #0]
 8007138:	d032      	beq.n	80071a0 <__sflush_r+0x98>
 800713a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800713c:	89a3      	ldrh	r3, [r4, #12]
 800713e:	075a      	lsls	r2, r3, #29
 8007140:	d505      	bpl.n	800714e <__sflush_r+0x46>
 8007142:	6863      	ldr	r3, [r4, #4]
 8007144:	1ac0      	subs	r0, r0, r3
 8007146:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007148:	b10b      	cbz	r3, 800714e <__sflush_r+0x46>
 800714a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800714c:	1ac0      	subs	r0, r0, r3
 800714e:	2300      	movs	r3, #0
 8007150:	4602      	mov	r2, r0
 8007152:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007154:	6a21      	ldr	r1, [r4, #32]
 8007156:	4628      	mov	r0, r5
 8007158:	47b0      	blx	r6
 800715a:	1c43      	adds	r3, r0, #1
 800715c:	89a3      	ldrh	r3, [r4, #12]
 800715e:	d106      	bne.n	800716e <__sflush_r+0x66>
 8007160:	6829      	ldr	r1, [r5, #0]
 8007162:	291d      	cmp	r1, #29
 8007164:	d82c      	bhi.n	80071c0 <__sflush_r+0xb8>
 8007166:	4a2a      	ldr	r2, [pc, #168]	; (8007210 <__sflush_r+0x108>)
 8007168:	40ca      	lsrs	r2, r1
 800716a:	07d6      	lsls	r6, r2, #31
 800716c:	d528      	bpl.n	80071c0 <__sflush_r+0xb8>
 800716e:	2200      	movs	r2, #0
 8007170:	6062      	str	r2, [r4, #4]
 8007172:	04d9      	lsls	r1, r3, #19
 8007174:	6922      	ldr	r2, [r4, #16]
 8007176:	6022      	str	r2, [r4, #0]
 8007178:	d504      	bpl.n	8007184 <__sflush_r+0x7c>
 800717a:	1c42      	adds	r2, r0, #1
 800717c:	d101      	bne.n	8007182 <__sflush_r+0x7a>
 800717e:	682b      	ldr	r3, [r5, #0]
 8007180:	b903      	cbnz	r3, 8007184 <__sflush_r+0x7c>
 8007182:	6560      	str	r0, [r4, #84]	; 0x54
 8007184:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007186:	602f      	str	r7, [r5, #0]
 8007188:	2900      	cmp	r1, #0
 800718a:	d0ca      	beq.n	8007122 <__sflush_r+0x1a>
 800718c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007190:	4299      	cmp	r1, r3
 8007192:	d002      	beq.n	800719a <__sflush_r+0x92>
 8007194:	4628      	mov	r0, r5
 8007196:	f000 f897 	bl	80072c8 <_free_r>
 800719a:	2000      	movs	r0, #0
 800719c:	6360      	str	r0, [r4, #52]	; 0x34
 800719e:	e7c1      	b.n	8007124 <__sflush_r+0x1c>
 80071a0:	6a21      	ldr	r1, [r4, #32]
 80071a2:	2301      	movs	r3, #1
 80071a4:	4628      	mov	r0, r5
 80071a6:	47b0      	blx	r6
 80071a8:	1c41      	adds	r1, r0, #1
 80071aa:	d1c7      	bne.n	800713c <__sflush_r+0x34>
 80071ac:	682b      	ldr	r3, [r5, #0]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d0c4      	beq.n	800713c <__sflush_r+0x34>
 80071b2:	2b1d      	cmp	r3, #29
 80071b4:	d001      	beq.n	80071ba <__sflush_r+0xb2>
 80071b6:	2b16      	cmp	r3, #22
 80071b8:	d101      	bne.n	80071be <__sflush_r+0xb6>
 80071ba:	602f      	str	r7, [r5, #0]
 80071bc:	e7b1      	b.n	8007122 <__sflush_r+0x1a>
 80071be:	89a3      	ldrh	r3, [r4, #12]
 80071c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071c4:	81a3      	strh	r3, [r4, #12]
 80071c6:	e7ad      	b.n	8007124 <__sflush_r+0x1c>
 80071c8:	690f      	ldr	r7, [r1, #16]
 80071ca:	2f00      	cmp	r7, #0
 80071cc:	d0a9      	beq.n	8007122 <__sflush_r+0x1a>
 80071ce:	0793      	lsls	r3, r2, #30
 80071d0:	680e      	ldr	r6, [r1, #0]
 80071d2:	bf08      	it	eq
 80071d4:	694b      	ldreq	r3, [r1, #20]
 80071d6:	600f      	str	r7, [r1, #0]
 80071d8:	bf18      	it	ne
 80071da:	2300      	movne	r3, #0
 80071dc:	eba6 0807 	sub.w	r8, r6, r7
 80071e0:	608b      	str	r3, [r1, #8]
 80071e2:	f1b8 0f00 	cmp.w	r8, #0
 80071e6:	dd9c      	ble.n	8007122 <__sflush_r+0x1a>
 80071e8:	6a21      	ldr	r1, [r4, #32]
 80071ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80071ec:	4643      	mov	r3, r8
 80071ee:	463a      	mov	r2, r7
 80071f0:	4628      	mov	r0, r5
 80071f2:	47b0      	blx	r6
 80071f4:	2800      	cmp	r0, #0
 80071f6:	dc06      	bgt.n	8007206 <__sflush_r+0xfe>
 80071f8:	89a3      	ldrh	r3, [r4, #12]
 80071fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071fe:	81a3      	strh	r3, [r4, #12]
 8007200:	f04f 30ff 	mov.w	r0, #4294967295
 8007204:	e78e      	b.n	8007124 <__sflush_r+0x1c>
 8007206:	4407      	add	r7, r0
 8007208:	eba8 0800 	sub.w	r8, r8, r0
 800720c:	e7e9      	b.n	80071e2 <__sflush_r+0xda>
 800720e:	bf00      	nop
 8007210:	20400001 	.word	0x20400001

08007214 <_fflush_r>:
 8007214:	b538      	push	{r3, r4, r5, lr}
 8007216:	690b      	ldr	r3, [r1, #16]
 8007218:	4605      	mov	r5, r0
 800721a:	460c      	mov	r4, r1
 800721c:	b913      	cbnz	r3, 8007224 <_fflush_r+0x10>
 800721e:	2500      	movs	r5, #0
 8007220:	4628      	mov	r0, r5
 8007222:	bd38      	pop	{r3, r4, r5, pc}
 8007224:	b118      	cbz	r0, 800722e <_fflush_r+0x1a>
 8007226:	6983      	ldr	r3, [r0, #24]
 8007228:	b90b      	cbnz	r3, 800722e <_fflush_r+0x1a>
 800722a:	f7ff fd05 	bl	8006c38 <__sinit>
 800722e:	4b14      	ldr	r3, [pc, #80]	; (8007280 <_fflush_r+0x6c>)
 8007230:	429c      	cmp	r4, r3
 8007232:	d11b      	bne.n	800726c <_fflush_r+0x58>
 8007234:	686c      	ldr	r4, [r5, #4]
 8007236:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d0ef      	beq.n	800721e <_fflush_r+0xa>
 800723e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007240:	07d0      	lsls	r0, r2, #31
 8007242:	d404      	bmi.n	800724e <_fflush_r+0x3a>
 8007244:	0599      	lsls	r1, r3, #22
 8007246:	d402      	bmi.n	800724e <_fflush_r+0x3a>
 8007248:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800724a:	f7ff fdb8 	bl	8006dbe <__retarget_lock_acquire_recursive>
 800724e:	4628      	mov	r0, r5
 8007250:	4621      	mov	r1, r4
 8007252:	f7ff ff59 	bl	8007108 <__sflush_r>
 8007256:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007258:	07da      	lsls	r2, r3, #31
 800725a:	4605      	mov	r5, r0
 800725c:	d4e0      	bmi.n	8007220 <_fflush_r+0xc>
 800725e:	89a3      	ldrh	r3, [r4, #12]
 8007260:	059b      	lsls	r3, r3, #22
 8007262:	d4dd      	bmi.n	8007220 <_fflush_r+0xc>
 8007264:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007266:	f7ff fdab 	bl	8006dc0 <__retarget_lock_release_recursive>
 800726a:	e7d9      	b.n	8007220 <_fflush_r+0xc>
 800726c:	4b05      	ldr	r3, [pc, #20]	; (8007284 <_fflush_r+0x70>)
 800726e:	429c      	cmp	r4, r3
 8007270:	d101      	bne.n	8007276 <_fflush_r+0x62>
 8007272:	68ac      	ldr	r4, [r5, #8]
 8007274:	e7df      	b.n	8007236 <_fflush_r+0x22>
 8007276:	4b04      	ldr	r3, [pc, #16]	; (8007288 <_fflush_r+0x74>)
 8007278:	429c      	cmp	r4, r3
 800727a:	bf08      	it	eq
 800727c:	68ec      	ldreq	r4, [r5, #12]
 800727e:	e7da      	b.n	8007236 <_fflush_r+0x22>
 8007280:	08007da4 	.word	0x08007da4
 8007284:	08007dc4 	.word	0x08007dc4
 8007288:	08007d84 	.word	0x08007d84

0800728c <_lseek_r>:
 800728c:	b538      	push	{r3, r4, r5, lr}
 800728e:	4d07      	ldr	r5, [pc, #28]	; (80072ac <_lseek_r+0x20>)
 8007290:	4604      	mov	r4, r0
 8007292:	4608      	mov	r0, r1
 8007294:	4611      	mov	r1, r2
 8007296:	2200      	movs	r2, #0
 8007298:	602a      	str	r2, [r5, #0]
 800729a:	461a      	mov	r2, r3
 800729c:	f7f9 fd0c 	bl	8000cb8 <_lseek>
 80072a0:	1c43      	adds	r3, r0, #1
 80072a2:	d102      	bne.n	80072aa <_lseek_r+0x1e>
 80072a4:	682b      	ldr	r3, [r5, #0]
 80072a6:	b103      	cbz	r3, 80072aa <_lseek_r+0x1e>
 80072a8:	6023      	str	r3, [r4, #0]
 80072aa:	bd38      	pop	{r3, r4, r5, pc}
 80072ac:	20001ea4 	.word	0x20001ea4

080072b0 <__malloc_lock>:
 80072b0:	4801      	ldr	r0, [pc, #4]	; (80072b8 <__malloc_lock+0x8>)
 80072b2:	f7ff bd84 	b.w	8006dbe <__retarget_lock_acquire_recursive>
 80072b6:	bf00      	nop
 80072b8:	20001e98 	.word	0x20001e98

080072bc <__malloc_unlock>:
 80072bc:	4801      	ldr	r0, [pc, #4]	; (80072c4 <__malloc_unlock+0x8>)
 80072be:	f7ff bd7f 	b.w	8006dc0 <__retarget_lock_release_recursive>
 80072c2:	bf00      	nop
 80072c4:	20001e98 	.word	0x20001e98

080072c8 <_free_r>:
 80072c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80072ca:	2900      	cmp	r1, #0
 80072cc:	d044      	beq.n	8007358 <_free_r+0x90>
 80072ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072d2:	9001      	str	r0, [sp, #4]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	f1a1 0404 	sub.w	r4, r1, #4
 80072da:	bfb8      	it	lt
 80072dc:	18e4      	addlt	r4, r4, r3
 80072de:	f7ff ffe7 	bl	80072b0 <__malloc_lock>
 80072e2:	4a1e      	ldr	r2, [pc, #120]	; (800735c <_free_r+0x94>)
 80072e4:	9801      	ldr	r0, [sp, #4]
 80072e6:	6813      	ldr	r3, [r2, #0]
 80072e8:	b933      	cbnz	r3, 80072f8 <_free_r+0x30>
 80072ea:	6063      	str	r3, [r4, #4]
 80072ec:	6014      	str	r4, [r2, #0]
 80072ee:	b003      	add	sp, #12
 80072f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80072f4:	f7ff bfe2 	b.w	80072bc <__malloc_unlock>
 80072f8:	42a3      	cmp	r3, r4
 80072fa:	d908      	bls.n	800730e <_free_r+0x46>
 80072fc:	6825      	ldr	r5, [r4, #0]
 80072fe:	1961      	adds	r1, r4, r5
 8007300:	428b      	cmp	r3, r1
 8007302:	bf01      	itttt	eq
 8007304:	6819      	ldreq	r1, [r3, #0]
 8007306:	685b      	ldreq	r3, [r3, #4]
 8007308:	1949      	addeq	r1, r1, r5
 800730a:	6021      	streq	r1, [r4, #0]
 800730c:	e7ed      	b.n	80072ea <_free_r+0x22>
 800730e:	461a      	mov	r2, r3
 8007310:	685b      	ldr	r3, [r3, #4]
 8007312:	b10b      	cbz	r3, 8007318 <_free_r+0x50>
 8007314:	42a3      	cmp	r3, r4
 8007316:	d9fa      	bls.n	800730e <_free_r+0x46>
 8007318:	6811      	ldr	r1, [r2, #0]
 800731a:	1855      	adds	r5, r2, r1
 800731c:	42a5      	cmp	r5, r4
 800731e:	d10b      	bne.n	8007338 <_free_r+0x70>
 8007320:	6824      	ldr	r4, [r4, #0]
 8007322:	4421      	add	r1, r4
 8007324:	1854      	adds	r4, r2, r1
 8007326:	42a3      	cmp	r3, r4
 8007328:	6011      	str	r1, [r2, #0]
 800732a:	d1e0      	bne.n	80072ee <_free_r+0x26>
 800732c:	681c      	ldr	r4, [r3, #0]
 800732e:	685b      	ldr	r3, [r3, #4]
 8007330:	6053      	str	r3, [r2, #4]
 8007332:	4421      	add	r1, r4
 8007334:	6011      	str	r1, [r2, #0]
 8007336:	e7da      	b.n	80072ee <_free_r+0x26>
 8007338:	d902      	bls.n	8007340 <_free_r+0x78>
 800733a:	230c      	movs	r3, #12
 800733c:	6003      	str	r3, [r0, #0]
 800733e:	e7d6      	b.n	80072ee <_free_r+0x26>
 8007340:	6825      	ldr	r5, [r4, #0]
 8007342:	1961      	adds	r1, r4, r5
 8007344:	428b      	cmp	r3, r1
 8007346:	bf04      	itt	eq
 8007348:	6819      	ldreq	r1, [r3, #0]
 800734a:	685b      	ldreq	r3, [r3, #4]
 800734c:	6063      	str	r3, [r4, #4]
 800734e:	bf04      	itt	eq
 8007350:	1949      	addeq	r1, r1, r5
 8007352:	6021      	streq	r1, [r4, #0]
 8007354:	6054      	str	r4, [r2, #4]
 8007356:	e7ca      	b.n	80072ee <_free_r+0x26>
 8007358:	b003      	add	sp, #12
 800735a:	bd30      	pop	{r4, r5, pc}
 800735c:	20001e9c 	.word	0x20001e9c

08007360 <__sfputc_r>:
 8007360:	6893      	ldr	r3, [r2, #8]
 8007362:	3b01      	subs	r3, #1
 8007364:	2b00      	cmp	r3, #0
 8007366:	b410      	push	{r4}
 8007368:	6093      	str	r3, [r2, #8]
 800736a:	da08      	bge.n	800737e <__sfputc_r+0x1e>
 800736c:	6994      	ldr	r4, [r2, #24]
 800736e:	42a3      	cmp	r3, r4
 8007370:	db01      	blt.n	8007376 <__sfputc_r+0x16>
 8007372:	290a      	cmp	r1, #10
 8007374:	d103      	bne.n	800737e <__sfputc_r+0x1e>
 8007376:	f85d 4b04 	ldr.w	r4, [sp], #4
 800737a:	f000 baf1 	b.w	8007960 <__swbuf_r>
 800737e:	6813      	ldr	r3, [r2, #0]
 8007380:	1c58      	adds	r0, r3, #1
 8007382:	6010      	str	r0, [r2, #0]
 8007384:	7019      	strb	r1, [r3, #0]
 8007386:	4608      	mov	r0, r1
 8007388:	f85d 4b04 	ldr.w	r4, [sp], #4
 800738c:	4770      	bx	lr

0800738e <__sfputs_r>:
 800738e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007390:	4606      	mov	r6, r0
 8007392:	460f      	mov	r7, r1
 8007394:	4614      	mov	r4, r2
 8007396:	18d5      	adds	r5, r2, r3
 8007398:	42ac      	cmp	r4, r5
 800739a:	d101      	bne.n	80073a0 <__sfputs_r+0x12>
 800739c:	2000      	movs	r0, #0
 800739e:	e007      	b.n	80073b0 <__sfputs_r+0x22>
 80073a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073a4:	463a      	mov	r2, r7
 80073a6:	4630      	mov	r0, r6
 80073a8:	f7ff ffda 	bl	8007360 <__sfputc_r>
 80073ac:	1c43      	adds	r3, r0, #1
 80073ae:	d1f3      	bne.n	8007398 <__sfputs_r+0xa>
 80073b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080073b4 <_vfiprintf_r>:
 80073b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073b8:	460d      	mov	r5, r1
 80073ba:	b09d      	sub	sp, #116	; 0x74
 80073bc:	4614      	mov	r4, r2
 80073be:	4698      	mov	r8, r3
 80073c0:	4606      	mov	r6, r0
 80073c2:	b118      	cbz	r0, 80073cc <_vfiprintf_r+0x18>
 80073c4:	6983      	ldr	r3, [r0, #24]
 80073c6:	b90b      	cbnz	r3, 80073cc <_vfiprintf_r+0x18>
 80073c8:	f7ff fc36 	bl	8006c38 <__sinit>
 80073cc:	4b89      	ldr	r3, [pc, #548]	; (80075f4 <_vfiprintf_r+0x240>)
 80073ce:	429d      	cmp	r5, r3
 80073d0:	d11b      	bne.n	800740a <_vfiprintf_r+0x56>
 80073d2:	6875      	ldr	r5, [r6, #4]
 80073d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80073d6:	07d9      	lsls	r1, r3, #31
 80073d8:	d405      	bmi.n	80073e6 <_vfiprintf_r+0x32>
 80073da:	89ab      	ldrh	r3, [r5, #12]
 80073dc:	059a      	lsls	r2, r3, #22
 80073de:	d402      	bmi.n	80073e6 <_vfiprintf_r+0x32>
 80073e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80073e2:	f7ff fcec 	bl	8006dbe <__retarget_lock_acquire_recursive>
 80073e6:	89ab      	ldrh	r3, [r5, #12]
 80073e8:	071b      	lsls	r3, r3, #28
 80073ea:	d501      	bpl.n	80073f0 <_vfiprintf_r+0x3c>
 80073ec:	692b      	ldr	r3, [r5, #16]
 80073ee:	b9eb      	cbnz	r3, 800742c <_vfiprintf_r+0x78>
 80073f0:	4629      	mov	r1, r5
 80073f2:	4630      	mov	r0, r6
 80073f4:	f000 fb06 	bl	8007a04 <__swsetup_r>
 80073f8:	b1c0      	cbz	r0, 800742c <_vfiprintf_r+0x78>
 80073fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80073fc:	07dc      	lsls	r4, r3, #31
 80073fe:	d50e      	bpl.n	800741e <_vfiprintf_r+0x6a>
 8007400:	f04f 30ff 	mov.w	r0, #4294967295
 8007404:	b01d      	add	sp, #116	; 0x74
 8007406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800740a:	4b7b      	ldr	r3, [pc, #492]	; (80075f8 <_vfiprintf_r+0x244>)
 800740c:	429d      	cmp	r5, r3
 800740e:	d101      	bne.n	8007414 <_vfiprintf_r+0x60>
 8007410:	68b5      	ldr	r5, [r6, #8]
 8007412:	e7df      	b.n	80073d4 <_vfiprintf_r+0x20>
 8007414:	4b79      	ldr	r3, [pc, #484]	; (80075fc <_vfiprintf_r+0x248>)
 8007416:	429d      	cmp	r5, r3
 8007418:	bf08      	it	eq
 800741a:	68f5      	ldreq	r5, [r6, #12]
 800741c:	e7da      	b.n	80073d4 <_vfiprintf_r+0x20>
 800741e:	89ab      	ldrh	r3, [r5, #12]
 8007420:	0598      	lsls	r0, r3, #22
 8007422:	d4ed      	bmi.n	8007400 <_vfiprintf_r+0x4c>
 8007424:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007426:	f7ff fccb 	bl	8006dc0 <__retarget_lock_release_recursive>
 800742a:	e7e9      	b.n	8007400 <_vfiprintf_r+0x4c>
 800742c:	2300      	movs	r3, #0
 800742e:	9309      	str	r3, [sp, #36]	; 0x24
 8007430:	2320      	movs	r3, #32
 8007432:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007436:	f8cd 800c 	str.w	r8, [sp, #12]
 800743a:	2330      	movs	r3, #48	; 0x30
 800743c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007600 <_vfiprintf_r+0x24c>
 8007440:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007444:	f04f 0901 	mov.w	r9, #1
 8007448:	4623      	mov	r3, r4
 800744a:	469a      	mov	sl, r3
 800744c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007450:	b10a      	cbz	r2, 8007456 <_vfiprintf_r+0xa2>
 8007452:	2a25      	cmp	r2, #37	; 0x25
 8007454:	d1f9      	bne.n	800744a <_vfiprintf_r+0x96>
 8007456:	ebba 0b04 	subs.w	fp, sl, r4
 800745a:	d00b      	beq.n	8007474 <_vfiprintf_r+0xc0>
 800745c:	465b      	mov	r3, fp
 800745e:	4622      	mov	r2, r4
 8007460:	4629      	mov	r1, r5
 8007462:	4630      	mov	r0, r6
 8007464:	f7ff ff93 	bl	800738e <__sfputs_r>
 8007468:	3001      	adds	r0, #1
 800746a:	f000 80aa 	beq.w	80075c2 <_vfiprintf_r+0x20e>
 800746e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007470:	445a      	add	r2, fp
 8007472:	9209      	str	r2, [sp, #36]	; 0x24
 8007474:	f89a 3000 	ldrb.w	r3, [sl]
 8007478:	2b00      	cmp	r3, #0
 800747a:	f000 80a2 	beq.w	80075c2 <_vfiprintf_r+0x20e>
 800747e:	2300      	movs	r3, #0
 8007480:	f04f 32ff 	mov.w	r2, #4294967295
 8007484:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007488:	f10a 0a01 	add.w	sl, sl, #1
 800748c:	9304      	str	r3, [sp, #16]
 800748e:	9307      	str	r3, [sp, #28]
 8007490:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007494:	931a      	str	r3, [sp, #104]	; 0x68
 8007496:	4654      	mov	r4, sl
 8007498:	2205      	movs	r2, #5
 800749a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800749e:	4858      	ldr	r0, [pc, #352]	; (8007600 <_vfiprintf_r+0x24c>)
 80074a0:	f7f8 fe6e 	bl	8000180 <memchr>
 80074a4:	9a04      	ldr	r2, [sp, #16]
 80074a6:	b9d8      	cbnz	r0, 80074e0 <_vfiprintf_r+0x12c>
 80074a8:	06d1      	lsls	r1, r2, #27
 80074aa:	bf44      	itt	mi
 80074ac:	2320      	movmi	r3, #32
 80074ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80074b2:	0713      	lsls	r3, r2, #28
 80074b4:	bf44      	itt	mi
 80074b6:	232b      	movmi	r3, #43	; 0x2b
 80074b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80074bc:	f89a 3000 	ldrb.w	r3, [sl]
 80074c0:	2b2a      	cmp	r3, #42	; 0x2a
 80074c2:	d015      	beq.n	80074f0 <_vfiprintf_r+0x13c>
 80074c4:	9a07      	ldr	r2, [sp, #28]
 80074c6:	4654      	mov	r4, sl
 80074c8:	2000      	movs	r0, #0
 80074ca:	f04f 0c0a 	mov.w	ip, #10
 80074ce:	4621      	mov	r1, r4
 80074d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80074d4:	3b30      	subs	r3, #48	; 0x30
 80074d6:	2b09      	cmp	r3, #9
 80074d8:	d94e      	bls.n	8007578 <_vfiprintf_r+0x1c4>
 80074da:	b1b0      	cbz	r0, 800750a <_vfiprintf_r+0x156>
 80074dc:	9207      	str	r2, [sp, #28]
 80074de:	e014      	b.n	800750a <_vfiprintf_r+0x156>
 80074e0:	eba0 0308 	sub.w	r3, r0, r8
 80074e4:	fa09 f303 	lsl.w	r3, r9, r3
 80074e8:	4313      	orrs	r3, r2
 80074ea:	9304      	str	r3, [sp, #16]
 80074ec:	46a2      	mov	sl, r4
 80074ee:	e7d2      	b.n	8007496 <_vfiprintf_r+0xe2>
 80074f0:	9b03      	ldr	r3, [sp, #12]
 80074f2:	1d19      	adds	r1, r3, #4
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	9103      	str	r1, [sp, #12]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	bfbb      	ittet	lt
 80074fc:	425b      	neglt	r3, r3
 80074fe:	f042 0202 	orrlt.w	r2, r2, #2
 8007502:	9307      	strge	r3, [sp, #28]
 8007504:	9307      	strlt	r3, [sp, #28]
 8007506:	bfb8      	it	lt
 8007508:	9204      	strlt	r2, [sp, #16]
 800750a:	7823      	ldrb	r3, [r4, #0]
 800750c:	2b2e      	cmp	r3, #46	; 0x2e
 800750e:	d10c      	bne.n	800752a <_vfiprintf_r+0x176>
 8007510:	7863      	ldrb	r3, [r4, #1]
 8007512:	2b2a      	cmp	r3, #42	; 0x2a
 8007514:	d135      	bne.n	8007582 <_vfiprintf_r+0x1ce>
 8007516:	9b03      	ldr	r3, [sp, #12]
 8007518:	1d1a      	adds	r2, r3, #4
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	9203      	str	r2, [sp, #12]
 800751e:	2b00      	cmp	r3, #0
 8007520:	bfb8      	it	lt
 8007522:	f04f 33ff 	movlt.w	r3, #4294967295
 8007526:	3402      	adds	r4, #2
 8007528:	9305      	str	r3, [sp, #20]
 800752a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007610 <_vfiprintf_r+0x25c>
 800752e:	7821      	ldrb	r1, [r4, #0]
 8007530:	2203      	movs	r2, #3
 8007532:	4650      	mov	r0, sl
 8007534:	f7f8 fe24 	bl	8000180 <memchr>
 8007538:	b140      	cbz	r0, 800754c <_vfiprintf_r+0x198>
 800753a:	2340      	movs	r3, #64	; 0x40
 800753c:	eba0 000a 	sub.w	r0, r0, sl
 8007540:	fa03 f000 	lsl.w	r0, r3, r0
 8007544:	9b04      	ldr	r3, [sp, #16]
 8007546:	4303      	orrs	r3, r0
 8007548:	3401      	adds	r4, #1
 800754a:	9304      	str	r3, [sp, #16]
 800754c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007550:	482c      	ldr	r0, [pc, #176]	; (8007604 <_vfiprintf_r+0x250>)
 8007552:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007556:	2206      	movs	r2, #6
 8007558:	f7f8 fe12 	bl	8000180 <memchr>
 800755c:	2800      	cmp	r0, #0
 800755e:	d03f      	beq.n	80075e0 <_vfiprintf_r+0x22c>
 8007560:	4b29      	ldr	r3, [pc, #164]	; (8007608 <_vfiprintf_r+0x254>)
 8007562:	bb1b      	cbnz	r3, 80075ac <_vfiprintf_r+0x1f8>
 8007564:	9b03      	ldr	r3, [sp, #12]
 8007566:	3307      	adds	r3, #7
 8007568:	f023 0307 	bic.w	r3, r3, #7
 800756c:	3308      	adds	r3, #8
 800756e:	9303      	str	r3, [sp, #12]
 8007570:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007572:	443b      	add	r3, r7
 8007574:	9309      	str	r3, [sp, #36]	; 0x24
 8007576:	e767      	b.n	8007448 <_vfiprintf_r+0x94>
 8007578:	fb0c 3202 	mla	r2, ip, r2, r3
 800757c:	460c      	mov	r4, r1
 800757e:	2001      	movs	r0, #1
 8007580:	e7a5      	b.n	80074ce <_vfiprintf_r+0x11a>
 8007582:	2300      	movs	r3, #0
 8007584:	3401      	adds	r4, #1
 8007586:	9305      	str	r3, [sp, #20]
 8007588:	4619      	mov	r1, r3
 800758a:	f04f 0c0a 	mov.w	ip, #10
 800758e:	4620      	mov	r0, r4
 8007590:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007594:	3a30      	subs	r2, #48	; 0x30
 8007596:	2a09      	cmp	r2, #9
 8007598:	d903      	bls.n	80075a2 <_vfiprintf_r+0x1ee>
 800759a:	2b00      	cmp	r3, #0
 800759c:	d0c5      	beq.n	800752a <_vfiprintf_r+0x176>
 800759e:	9105      	str	r1, [sp, #20]
 80075a0:	e7c3      	b.n	800752a <_vfiprintf_r+0x176>
 80075a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80075a6:	4604      	mov	r4, r0
 80075a8:	2301      	movs	r3, #1
 80075aa:	e7f0      	b.n	800758e <_vfiprintf_r+0x1da>
 80075ac:	ab03      	add	r3, sp, #12
 80075ae:	9300      	str	r3, [sp, #0]
 80075b0:	462a      	mov	r2, r5
 80075b2:	4b16      	ldr	r3, [pc, #88]	; (800760c <_vfiprintf_r+0x258>)
 80075b4:	a904      	add	r1, sp, #16
 80075b6:	4630      	mov	r0, r6
 80075b8:	f3af 8000 	nop.w
 80075bc:	4607      	mov	r7, r0
 80075be:	1c78      	adds	r0, r7, #1
 80075c0:	d1d6      	bne.n	8007570 <_vfiprintf_r+0x1bc>
 80075c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80075c4:	07d9      	lsls	r1, r3, #31
 80075c6:	d405      	bmi.n	80075d4 <_vfiprintf_r+0x220>
 80075c8:	89ab      	ldrh	r3, [r5, #12]
 80075ca:	059a      	lsls	r2, r3, #22
 80075cc:	d402      	bmi.n	80075d4 <_vfiprintf_r+0x220>
 80075ce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80075d0:	f7ff fbf6 	bl	8006dc0 <__retarget_lock_release_recursive>
 80075d4:	89ab      	ldrh	r3, [r5, #12]
 80075d6:	065b      	lsls	r3, r3, #25
 80075d8:	f53f af12 	bmi.w	8007400 <_vfiprintf_r+0x4c>
 80075dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80075de:	e711      	b.n	8007404 <_vfiprintf_r+0x50>
 80075e0:	ab03      	add	r3, sp, #12
 80075e2:	9300      	str	r3, [sp, #0]
 80075e4:	462a      	mov	r2, r5
 80075e6:	4b09      	ldr	r3, [pc, #36]	; (800760c <_vfiprintf_r+0x258>)
 80075e8:	a904      	add	r1, sp, #16
 80075ea:	4630      	mov	r0, r6
 80075ec:	f000 f880 	bl	80076f0 <_printf_i>
 80075f0:	e7e4      	b.n	80075bc <_vfiprintf_r+0x208>
 80075f2:	bf00      	nop
 80075f4:	08007da4 	.word	0x08007da4
 80075f8:	08007dc4 	.word	0x08007dc4
 80075fc:	08007d84 	.word	0x08007d84
 8007600:	08007de8 	.word	0x08007de8
 8007604:	08007df2 	.word	0x08007df2
 8007608:	00000000 	.word	0x00000000
 800760c:	0800738f 	.word	0x0800738f
 8007610:	08007dee 	.word	0x08007dee

08007614 <_printf_common>:
 8007614:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007618:	4616      	mov	r6, r2
 800761a:	4699      	mov	r9, r3
 800761c:	688a      	ldr	r2, [r1, #8]
 800761e:	690b      	ldr	r3, [r1, #16]
 8007620:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007624:	4293      	cmp	r3, r2
 8007626:	bfb8      	it	lt
 8007628:	4613      	movlt	r3, r2
 800762a:	6033      	str	r3, [r6, #0]
 800762c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007630:	4607      	mov	r7, r0
 8007632:	460c      	mov	r4, r1
 8007634:	b10a      	cbz	r2, 800763a <_printf_common+0x26>
 8007636:	3301      	adds	r3, #1
 8007638:	6033      	str	r3, [r6, #0]
 800763a:	6823      	ldr	r3, [r4, #0]
 800763c:	0699      	lsls	r1, r3, #26
 800763e:	bf42      	ittt	mi
 8007640:	6833      	ldrmi	r3, [r6, #0]
 8007642:	3302      	addmi	r3, #2
 8007644:	6033      	strmi	r3, [r6, #0]
 8007646:	6825      	ldr	r5, [r4, #0]
 8007648:	f015 0506 	ands.w	r5, r5, #6
 800764c:	d106      	bne.n	800765c <_printf_common+0x48>
 800764e:	f104 0a19 	add.w	sl, r4, #25
 8007652:	68e3      	ldr	r3, [r4, #12]
 8007654:	6832      	ldr	r2, [r6, #0]
 8007656:	1a9b      	subs	r3, r3, r2
 8007658:	42ab      	cmp	r3, r5
 800765a:	dc26      	bgt.n	80076aa <_printf_common+0x96>
 800765c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007660:	1e13      	subs	r3, r2, #0
 8007662:	6822      	ldr	r2, [r4, #0]
 8007664:	bf18      	it	ne
 8007666:	2301      	movne	r3, #1
 8007668:	0692      	lsls	r2, r2, #26
 800766a:	d42b      	bmi.n	80076c4 <_printf_common+0xb0>
 800766c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007670:	4649      	mov	r1, r9
 8007672:	4638      	mov	r0, r7
 8007674:	47c0      	blx	r8
 8007676:	3001      	adds	r0, #1
 8007678:	d01e      	beq.n	80076b8 <_printf_common+0xa4>
 800767a:	6823      	ldr	r3, [r4, #0]
 800767c:	68e5      	ldr	r5, [r4, #12]
 800767e:	6832      	ldr	r2, [r6, #0]
 8007680:	f003 0306 	and.w	r3, r3, #6
 8007684:	2b04      	cmp	r3, #4
 8007686:	bf08      	it	eq
 8007688:	1aad      	subeq	r5, r5, r2
 800768a:	68a3      	ldr	r3, [r4, #8]
 800768c:	6922      	ldr	r2, [r4, #16]
 800768e:	bf0c      	ite	eq
 8007690:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007694:	2500      	movne	r5, #0
 8007696:	4293      	cmp	r3, r2
 8007698:	bfc4      	itt	gt
 800769a:	1a9b      	subgt	r3, r3, r2
 800769c:	18ed      	addgt	r5, r5, r3
 800769e:	2600      	movs	r6, #0
 80076a0:	341a      	adds	r4, #26
 80076a2:	42b5      	cmp	r5, r6
 80076a4:	d11a      	bne.n	80076dc <_printf_common+0xc8>
 80076a6:	2000      	movs	r0, #0
 80076a8:	e008      	b.n	80076bc <_printf_common+0xa8>
 80076aa:	2301      	movs	r3, #1
 80076ac:	4652      	mov	r2, sl
 80076ae:	4649      	mov	r1, r9
 80076b0:	4638      	mov	r0, r7
 80076b2:	47c0      	blx	r8
 80076b4:	3001      	adds	r0, #1
 80076b6:	d103      	bne.n	80076c0 <_printf_common+0xac>
 80076b8:	f04f 30ff 	mov.w	r0, #4294967295
 80076bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076c0:	3501      	adds	r5, #1
 80076c2:	e7c6      	b.n	8007652 <_printf_common+0x3e>
 80076c4:	18e1      	adds	r1, r4, r3
 80076c6:	1c5a      	adds	r2, r3, #1
 80076c8:	2030      	movs	r0, #48	; 0x30
 80076ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80076ce:	4422      	add	r2, r4
 80076d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80076d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80076d8:	3302      	adds	r3, #2
 80076da:	e7c7      	b.n	800766c <_printf_common+0x58>
 80076dc:	2301      	movs	r3, #1
 80076de:	4622      	mov	r2, r4
 80076e0:	4649      	mov	r1, r9
 80076e2:	4638      	mov	r0, r7
 80076e4:	47c0      	blx	r8
 80076e6:	3001      	adds	r0, #1
 80076e8:	d0e6      	beq.n	80076b8 <_printf_common+0xa4>
 80076ea:	3601      	adds	r6, #1
 80076ec:	e7d9      	b.n	80076a2 <_printf_common+0x8e>
	...

080076f0 <_printf_i>:
 80076f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80076f4:	7e0f      	ldrb	r7, [r1, #24]
 80076f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80076f8:	2f78      	cmp	r7, #120	; 0x78
 80076fa:	4691      	mov	r9, r2
 80076fc:	4680      	mov	r8, r0
 80076fe:	460c      	mov	r4, r1
 8007700:	469a      	mov	sl, r3
 8007702:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007706:	d807      	bhi.n	8007718 <_printf_i+0x28>
 8007708:	2f62      	cmp	r7, #98	; 0x62
 800770a:	d80a      	bhi.n	8007722 <_printf_i+0x32>
 800770c:	2f00      	cmp	r7, #0
 800770e:	f000 80d8 	beq.w	80078c2 <_printf_i+0x1d2>
 8007712:	2f58      	cmp	r7, #88	; 0x58
 8007714:	f000 80a3 	beq.w	800785e <_printf_i+0x16e>
 8007718:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800771c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007720:	e03a      	b.n	8007798 <_printf_i+0xa8>
 8007722:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007726:	2b15      	cmp	r3, #21
 8007728:	d8f6      	bhi.n	8007718 <_printf_i+0x28>
 800772a:	a101      	add	r1, pc, #4	; (adr r1, 8007730 <_printf_i+0x40>)
 800772c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007730:	08007789 	.word	0x08007789
 8007734:	0800779d 	.word	0x0800779d
 8007738:	08007719 	.word	0x08007719
 800773c:	08007719 	.word	0x08007719
 8007740:	08007719 	.word	0x08007719
 8007744:	08007719 	.word	0x08007719
 8007748:	0800779d 	.word	0x0800779d
 800774c:	08007719 	.word	0x08007719
 8007750:	08007719 	.word	0x08007719
 8007754:	08007719 	.word	0x08007719
 8007758:	08007719 	.word	0x08007719
 800775c:	080078a9 	.word	0x080078a9
 8007760:	080077cd 	.word	0x080077cd
 8007764:	0800788b 	.word	0x0800788b
 8007768:	08007719 	.word	0x08007719
 800776c:	08007719 	.word	0x08007719
 8007770:	080078cb 	.word	0x080078cb
 8007774:	08007719 	.word	0x08007719
 8007778:	080077cd 	.word	0x080077cd
 800777c:	08007719 	.word	0x08007719
 8007780:	08007719 	.word	0x08007719
 8007784:	08007893 	.word	0x08007893
 8007788:	682b      	ldr	r3, [r5, #0]
 800778a:	1d1a      	adds	r2, r3, #4
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	602a      	str	r2, [r5, #0]
 8007790:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007794:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007798:	2301      	movs	r3, #1
 800779a:	e0a3      	b.n	80078e4 <_printf_i+0x1f4>
 800779c:	6820      	ldr	r0, [r4, #0]
 800779e:	6829      	ldr	r1, [r5, #0]
 80077a0:	0606      	lsls	r6, r0, #24
 80077a2:	f101 0304 	add.w	r3, r1, #4
 80077a6:	d50a      	bpl.n	80077be <_printf_i+0xce>
 80077a8:	680e      	ldr	r6, [r1, #0]
 80077aa:	602b      	str	r3, [r5, #0]
 80077ac:	2e00      	cmp	r6, #0
 80077ae:	da03      	bge.n	80077b8 <_printf_i+0xc8>
 80077b0:	232d      	movs	r3, #45	; 0x2d
 80077b2:	4276      	negs	r6, r6
 80077b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077b8:	485e      	ldr	r0, [pc, #376]	; (8007934 <_printf_i+0x244>)
 80077ba:	230a      	movs	r3, #10
 80077bc:	e019      	b.n	80077f2 <_printf_i+0x102>
 80077be:	680e      	ldr	r6, [r1, #0]
 80077c0:	602b      	str	r3, [r5, #0]
 80077c2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80077c6:	bf18      	it	ne
 80077c8:	b236      	sxthne	r6, r6
 80077ca:	e7ef      	b.n	80077ac <_printf_i+0xbc>
 80077cc:	682b      	ldr	r3, [r5, #0]
 80077ce:	6820      	ldr	r0, [r4, #0]
 80077d0:	1d19      	adds	r1, r3, #4
 80077d2:	6029      	str	r1, [r5, #0]
 80077d4:	0601      	lsls	r1, r0, #24
 80077d6:	d501      	bpl.n	80077dc <_printf_i+0xec>
 80077d8:	681e      	ldr	r6, [r3, #0]
 80077da:	e002      	b.n	80077e2 <_printf_i+0xf2>
 80077dc:	0646      	lsls	r6, r0, #25
 80077de:	d5fb      	bpl.n	80077d8 <_printf_i+0xe8>
 80077e0:	881e      	ldrh	r6, [r3, #0]
 80077e2:	4854      	ldr	r0, [pc, #336]	; (8007934 <_printf_i+0x244>)
 80077e4:	2f6f      	cmp	r7, #111	; 0x6f
 80077e6:	bf0c      	ite	eq
 80077e8:	2308      	moveq	r3, #8
 80077ea:	230a      	movne	r3, #10
 80077ec:	2100      	movs	r1, #0
 80077ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80077f2:	6865      	ldr	r5, [r4, #4]
 80077f4:	60a5      	str	r5, [r4, #8]
 80077f6:	2d00      	cmp	r5, #0
 80077f8:	bfa2      	ittt	ge
 80077fa:	6821      	ldrge	r1, [r4, #0]
 80077fc:	f021 0104 	bicge.w	r1, r1, #4
 8007800:	6021      	strge	r1, [r4, #0]
 8007802:	b90e      	cbnz	r6, 8007808 <_printf_i+0x118>
 8007804:	2d00      	cmp	r5, #0
 8007806:	d04d      	beq.n	80078a4 <_printf_i+0x1b4>
 8007808:	4615      	mov	r5, r2
 800780a:	fbb6 f1f3 	udiv	r1, r6, r3
 800780e:	fb03 6711 	mls	r7, r3, r1, r6
 8007812:	5dc7      	ldrb	r7, [r0, r7]
 8007814:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007818:	4637      	mov	r7, r6
 800781a:	42bb      	cmp	r3, r7
 800781c:	460e      	mov	r6, r1
 800781e:	d9f4      	bls.n	800780a <_printf_i+0x11a>
 8007820:	2b08      	cmp	r3, #8
 8007822:	d10b      	bne.n	800783c <_printf_i+0x14c>
 8007824:	6823      	ldr	r3, [r4, #0]
 8007826:	07de      	lsls	r6, r3, #31
 8007828:	d508      	bpl.n	800783c <_printf_i+0x14c>
 800782a:	6923      	ldr	r3, [r4, #16]
 800782c:	6861      	ldr	r1, [r4, #4]
 800782e:	4299      	cmp	r1, r3
 8007830:	bfde      	ittt	le
 8007832:	2330      	movle	r3, #48	; 0x30
 8007834:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007838:	f105 35ff 	addle.w	r5, r5, #4294967295
 800783c:	1b52      	subs	r2, r2, r5
 800783e:	6122      	str	r2, [r4, #16]
 8007840:	f8cd a000 	str.w	sl, [sp]
 8007844:	464b      	mov	r3, r9
 8007846:	aa03      	add	r2, sp, #12
 8007848:	4621      	mov	r1, r4
 800784a:	4640      	mov	r0, r8
 800784c:	f7ff fee2 	bl	8007614 <_printf_common>
 8007850:	3001      	adds	r0, #1
 8007852:	d14c      	bne.n	80078ee <_printf_i+0x1fe>
 8007854:	f04f 30ff 	mov.w	r0, #4294967295
 8007858:	b004      	add	sp, #16
 800785a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800785e:	4835      	ldr	r0, [pc, #212]	; (8007934 <_printf_i+0x244>)
 8007860:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007864:	6829      	ldr	r1, [r5, #0]
 8007866:	6823      	ldr	r3, [r4, #0]
 8007868:	f851 6b04 	ldr.w	r6, [r1], #4
 800786c:	6029      	str	r1, [r5, #0]
 800786e:	061d      	lsls	r5, r3, #24
 8007870:	d514      	bpl.n	800789c <_printf_i+0x1ac>
 8007872:	07df      	lsls	r7, r3, #31
 8007874:	bf44      	itt	mi
 8007876:	f043 0320 	orrmi.w	r3, r3, #32
 800787a:	6023      	strmi	r3, [r4, #0]
 800787c:	b91e      	cbnz	r6, 8007886 <_printf_i+0x196>
 800787e:	6823      	ldr	r3, [r4, #0]
 8007880:	f023 0320 	bic.w	r3, r3, #32
 8007884:	6023      	str	r3, [r4, #0]
 8007886:	2310      	movs	r3, #16
 8007888:	e7b0      	b.n	80077ec <_printf_i+0xfc>
 800788a:	6823      	ldr	r3, [r4, #0]
 800788c:	f043 0320 	orr.w	r3, r3, #32
 8007890:	6023      	str	r3, [r4, #0]
 8007892:	2378      	movs	r3, #120	; 0x78
 8007894:	4828      	ldr	r0, [pc, #160]	; (8007938 <_printf_i+0x248>)
 8007896:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800789a:	e7e3      	b.n	8007864 <_printf_i+0x174>
 800789c:	0659      	lsls	r1, r3, #25
 800789e:	bf48      	it	mi
 80078a0:	b2b6      	uxthmi	r6, r6
 80078a2:	e7e6      	b.n	8007872 <_printf_i+0x182>
 80078a4:	4615      	mov	r5, r2
 80078a6:	e7bb      	b.n	8007820 <_printf_i+0x130>
 80078a8:	682b      	ldr	r3, [r5, #0]
 80078aa:	6826      	ldr	r6, [r4, #0]
 80078ac:	6961      	ldr	r1, [r4, #20]
 80078ae:	1d18      	adds	r0, r3, #4
 80078b0:	6028      	str	r0, [r5, #0]
 80078b2:	0635      	lsls	r5, r6, #24
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	d501      	bpl.n	80078bc <_printf_i+0x1cc>
 80078b8:	6019      	str	r1, [r3, #0]
 80078ba:	e002      	b.n	80078c2 <_printf_i+0x1d2>
 80078bc:	0670      	lsls	r0, r6, #25
 80078be:	d5fb      	bpl.n	80078b8 <_printf_i+0x1c8>
 80078c0:	8019      	strh	r1, [r3, #0]
 80078c2:	2300      	movs	r3, #0
 80078c4:	6123      	str	r3, [r4, #16]
 80078c6:	4615      	mov	r5, r2
 80078c8:	e7ba      	b.n	8007840 <_printf_i+0x150>
 80078ca:	682b      	ldr	r3, [r5, #0]
 80078cc:	1d1a      	adds	r2, r3, #4
 80078ce:	602a      	str	r2, [r5, #0]
 80078d0:	681d      	ldr	r5, [r3, #0]
 80078d2:	6862      	ldr	r2, [r4, #4]
 80078d4:	2100      	movs	r1, #0
 80078d6:	4628      	mov	r0, r5
 80078d8:	f7f8 fc52 	bl	8000180 <memchr>
 80078dc:	b108      	cbz	r0, 80078e2 <_printf_i+0x1f2>
 80078de:	1b40      	subs	r0, r0, r5
 80078e0:	6060      	str	r0, [r4, #4]
 80078e2:	6863      	ldr	r3, [r4, #4]
 80078e4:	6123      	str	r3, [r4, #16]
 80078e6:	2300      	movs	r3, #0
 80078e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80078ec:	e7a8      	b.n	8007840 <_printf_i+0x150>
 80078ee:	6923      	ldr	r3, [r4, #16]
 80078f0:	462a      	mov	r2, r5
 80078f2:	4649      	mov	r1, r9
 80078f4:	4640      	mov	r0, r8
 80078f6:	47d0      	blx	sl
 80078f8:	3001      	adds	r0, #1
 80078fa:	d0ab      	beq.n	8007854 <_printf_i+0x164>
 80078fc:	6823      	ldr	r3, [r4, #0]
 80078fe:	079b      	lsls	r3, r3, #30
 8007900:	d413      	bmi.n	800792a <_printf_i+0x23a>
 8007902:	68e0      	ldr	r0, [r4, #12]
 8007904:	9b03      	ldr	r3, [sp, #12]
 8007906:	4298      	cmp	r0, r3
 8007908:	bfb8      	it	lt
 800790a:	4618      	movlt	r0, r3
 800790c:	e7a4      	b.n	8007858 <_printf_i+0x168>
 800790e:	2301      	movs	r3, #1
 8007910:	4632      	mov	r2, r6
 8007912:	4649      	mov	r1, r9
 8007914:	4640      	mov	r0, r8
 8007916:	47d0      	blx	sl
 8007918:	3001      	adds	r0, #1
 800791a:	d09b      	beq.n	8007854 <_printf_i+0x164>
 800791c:	3501      	adds	r5, #1
 800791e:	68e3      	ldr	r3, [r4, #12]
 8007920:	9903      	ldr	r1, [sp, #12]
 8007922:	1a5b      	subs	r3, r3, r1
 8007924:	42ab      	cmp	r3, r5
 8007926:	dcf2      	bgt.n	800790e <_printf_i+0x21e>
 8007928:	e7eb      	b.n	8007902 <_printf_i+0x212>
 800792a:	2500      	movs	r5, #0
 800792c:	f104 0619 	add.w	r6, r4, #25
 8007930:	e7f5      	b.n	800791e <_printf_i+0x22e>
 8007932:	bf00      	nop
 8007934:	08007df9 	.word	0x08007df9
 8007938:	08007e0a 	.word	0x08007e0a

0800793c <_read_r>:
 800793c:	b538      	push	{r3, r4, r5, lr}
 800793e:	4d07      	ldr	r5, [pc, #28]	; (800795c <_read_r+0x20>)
 8007940:	4604      	mov	r4, r0
 8007942:	4608      	mov	r0, r1
 8007944:	4611      	mov	r1, r2
 8007946:	2200      	movs	r2, #0
 8007948:	602a      	str	r2, [r5, #0]
 800794a:	461a      	mov	r2, r3
 800794c:	f7f9 f954 	bl	8000bf8 <_read>
 8007950:	1c43      	adds	r3, r0, #1
 8007952:	d102      	bne.n	800795a <_read_r+0x1e>
 8007954:	682b      	ldr	r3, [r5, #0]
 8007956:	b103      	cbz	r3, 800795a <_read_r+0x1e>
 8007958:	6023      	str	r3, [r4, #0]
 800795a:	bd38      	pop	{r3, r4, r5, pc}
 800795c:	20001ea4 	.word	0x20001ea4

08007960 <__swbuf_r>:
 8007960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007962:	460e      	mov	r6, r1
 8007964:	4614      	mov	r4, r2
 8007966:	4605      	mov	r5, r0
 8007968:	b118      	cbz	r0, 8007972 <__swbuf_r+0x12>
 800796a:	6983      	ldr	r3, [r0, #24]
 800796c:	b90b      	cbnz	r3, 8007972 <__swbuf_r+0x12>
 800796e:	f7ff f963 	bl	8006c38 <__sinit>
 8007972:	4b21      	ldr	r3, [pc, #132]	; (80079f8 <__swbuf_r+0x98>)
 8007974:	429c      	cmp	r4, r3
 8007976:	d12b      	bne.n	80079d0 <__swbuf_r+0x70>
 8007978:	686c      	ldr	r4, [r5, #4]
 800797a:	69a3      	ldr	r3, [r4, #24]
 800797c:	60a3      	str	r3, [r4, #8]
 800797e:	89a3      	ldrh	r3, [r4, #12]
 8007980:	071a      	lsls	r2, r3, #28
 8007982:	d52f      	bpl.n	80079e4 <__swbuf_r+0x84>
 8007984:	6923      	ldr	r3, [r4, #16]
 8007986:	b36b      	cbz	r3, 80079e4 <__swbuf_r+0x84>
 8007988:	6923      	ldr	r3, [r4, #16]
 800798a:	6820      	ldr	r0, [r4, #0]
 800798c:	1ac0      	subs	r0, r0, r3
 800798e:	6963      	ldr	r3, [r4, #20]
 8007990:	b2f6      	uxtb	r6, r6
 8007992:	4283      	cmp	r3, r0
 8007994:	4637      	mov	r7, r6
 8007996:	dc04      	bgt.n	80079a2 <__swbuf_r+0x42>
 8007998:	4621      	mov	r1, r4
 800799a:	4628      	mov	r0, r5
 800799c:	f7ff fc3a 	bl	8007214 <_fflush_r>
 80079a0:	bb30      	cbnz	r0, 80079f0 <__swbuf_r+0x90>
 80079a2:	68a3      	ldr	r3, [r4, #8]
 80079a4:	3b01      	subs	r3, #1
 80079a6:	60a3      	str	r3, [r4, #8]
 80079a8:	6823      	ldr	r3, [r4, #0]
 80079aa:	1c5a      	adds	r2, r3, #1
 80079ac:	6022      	str	r2, [r4, #0]
 80079ae:	701e      	strb	r6, [r3, #0]
 80079b0:	6963      	ldr	r3, [r4, #20]
 80079b2:	3001      	adds	r0, #1
 80079b4:	4283      	cmp	r3, r0
 80079b6:	d004      	beq.n	80079c2 <__swbuf_r+0x62>
 80079b8:	89a3      	ldrh	r3, [r4, #12]
 80079ba:	07db      	lsls	r3, r3, #31
 80079bc:	d506      	bpl.n	80079cc <__swbuf_r+0x6c>
 80079be:	2e0a      	cmp	r6, #10
 80079c0:	d104      	bne.n	80079cc <__swbuf_r+0x6c>
 80079c2:	4621      	mov	r1, r4
 80079c4:	4628      	mov	r0, r5
 80079c6:	f7ff fc25 	bl	8007214 <_fflush_r>
 80079ca:	b988      	cbnz	r0, 80079f0 <__swbuf_r+0x90>
 80079cc:	4638      	mov	r0, r7
 80079ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079d0:	4b0a      	ldr	r3, [pc, #40]	; (80079fc <__swbuf_r+0x9c>)
 80079d2:	429c      	cmp	r4, r3
 80079d4:	d101      	bne.n	80079da <__swbuf_r+0x7a>
 80079d6:	68ac      	ldr	r4, [r5, #8]
 80079d8:	e7cf      	b.n	800797a <__swbuf_r+0x1a>
 80079da:	4b09      	ldr	r3, [pc, #36]	; (8007a00 <__swbuf_r+0xa0>)
 80079dc:	429c      	cmp	r4, r3
 80079de:	bf08      	it	eq
 80079e0:	68ec      	ldreq	r4, [r5, #12]
 80079e2:	e7ca      	b.n	800797a <__swbuf_r+0x1a>
 80079e4:	4621      	mov	r1, r4
 80079e6:	4628      	mov	r0, r5
 80079e8:	f000 f80c 	bl	8007a04 <__swsetup_r>
 80079ec:	2800      	cmp	r0, #0
 80079ee:	d0cb      	beq.n	8007988 <__swbuf_r+0x28>
 80079f0:	f04f 37ff 	mov.w	r7, #4294967295
 80079f4:	e7ea      	b.n	80079cc <__swbuf_r+0x6c>
 80079f6:	bf00      	nop
 80079f8:	08007da4 	.word	0x08007da4
 80079fc:	08007dc4 	.word	0x08007dc4
 8007a00:	08007d84 	.word	0x08007d84

08007a04 <__swsetup_r>:
 8007a04:	4b32      	ldr	r3, [pc, #200]	; (8007ad0 <__swsetup_r+0xcc>)
 8007a06:	b570      	push	{r4, r5, r6, lr}
 8007a08:	681d      	ldr	r5, [r3, #0]
 8007a0a:	4606      	mov	r6, r0
 8007a0c:	460c      	mov	r4, r1
 8007a0e:	b125      	cbz	r5, 8007a1a <__swsetup_r+0x16>
 8007a10:	69ab      	ldr	r3, [r5, #24]
 8007a12:	b913      	cbnz	r3, 8007a1a <__swsetup_r+0x16>
 8007a14:	4628      	mov	r0, r5
 8007a16:	f7ff f90f 	bl	8006c38 <__sinit>
 8007a1a:	4b2e      	ldr	r3, [pc, #184]	; (8007ad4 <__swsetup_r+0xd0>)
 8007a1c:	429c      	cmp	r4, r3
 8007a1e:	d10f      	bne.n	8007a40 <__swsetup_r+0x3c>
 8007a20:	686c      	ldr	r4, [r5, #4]
 8007a22:	89a3      	ldrh	r3, [r4, #12]
 8007a24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007a28:	0719      	lsls	r1, r3, #28
 8007a2a:	d42c      	bmi.n	8007a86 <__swsetup_r+0x82>
 8007a2c:	06dd      	lsls	r5, r3, #27
 8007a2e:	d411      	bmi.n	8007a54 <__swsetup_r+0x50>
 8007a30:	2309      	movs	r3, #9
 8007a32:	6033      	str	r3, [r6, #0]
 8007a34:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007a38:	81a3      	strh	r3, [r4, #12]
 8007a3a:	f04f 30ff 	mov.w	r0, #4294967295
 8007a3e:	e03e      	b.n	8007abe <__swsetup_r+0xba>
 8007a40:	4b25      	ldr	r3, [pc, #148]	; (8007ad8 <__swsetup_r+0xd4>)
 8007a42:	429c      	cmp	r4, r3
 8007a44:	d101      	bne.n	8007a4a <__swsetup_r+0x46>
 8007a46:	68ac      	ldr	r4, [r5, #8]
 8007a48:	e7eb      	b.n	8007a22 <__swsetup_r+0x1e>
 8007a4a:	4b24      	ldr	r3, [pc, #144]	; (8007adc <__swsetup_r+0xd8>)
 8007a4c:	429c      	cmp	r4, r3
 8007a4e:	bf08      	it	eq
 8007a50:	68ec      	ldreq	r4, [r5, #12]
 8007a52:	e7e6      	b.n	8007a22 <__swsetup_r+0x1e>
 8007a54:	0758      	lsls	r0, r3, #29
 8007a56:	d512      	bpl.n	8007a7e <__swsetup_r+0x7a>
 8007a58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007a5a:	b141      	cbz	r1, 8007a6e <__swsetup_r+0x6a>
 8007a5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007a60:	4299      	cmp	r1, r3
 8007a62:	d002      	beq.n	8007a6a <__swsetup_r+0x66>
 8007a64:	4630      	mov	r0, r6
 8007a66:	f7ff fc2f 	bl	80072c8 <_free_r>
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	6363      	str	r3, [r4, #52]	; 0x34
 8007a6e:	89a3      	ldrh	r3, [r4, #12]
 8007a70:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007a74:	81a3      	strh	r3, [r4, #12]
 8007a76:	2300      	movs	r3, #0
 8007a78:	6063      	str	r3, [r4, #4]
 8007a7a:	6923      	ldr	r3, [r4, #16]
 8007a7c:	6023      	str	r3, [r4, #0]
 8007a7e:	89a3      	ldrh	r3, [r4, #12]
 8007a80:	f043 0308 	orr.w	r3, r3, #8
 8007a84:	81a3      	strh	r3, [r4, #12]
 8007a86:	6923      	ldr	r3, [r4, #16]
 8007a88:	b94b      	cbnz	r3, 8007a9e <__swsetup_r+0x9a>
 8007a8a:	89a3      	ldrh	r3, [r4, #12]
 8007a8c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007a90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a94:	d003      	beq.n	8007a9e <__swsetup_r+0x9a>
 8007a96:	4621      	mov	r1, r4
 8007a98:	4630      	mov	r0, r6
 8007a9a:	f000 f847 	bl	8007b2c <__smakebuf_r>
 8007a9e:	89a0      	ldrh	r0, [r4, #12]
 8007aa0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007aa4:	f010 0301 	ands.w	r3, r0, #1
 8007aa8:	d00a      	beq.n	8007ac0 <__swsetup_r+0xbc>
 8007aaa:	2300      	movs	r3, #0
 8007aac:	60a3      	str	r3, [r4, #8]
 8007aae:	6963      	ldr	r3, [r4, #20]
 8007ab0:	425b      	negs	r3, r3
 8007ab2:	61a3      	str	r3, [r4, #24]
 8007ab4:	6923      	ldr	r3, [r4, #16]
 8007ab6:	b943      	cbnz	r3, 8007aca <__swsetup_r+0xc6>
 8007ab8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007abc:	d1ba      	bne.n	8007a34 <__swsetup_r+0x30>
 8007abe:	bd70      	pop	{r4, r5, r6, pc}
 8007ac0:	0781      	lsls	r1, r0, #30
 8007ac2:	bf58      	it	pl
 8007ac4:	6963      	ldrpl	r3, [r4, #20]
 8007ac6:	60a3      	str	r3, [r4, #8]
 8007ac8:	e7f4      	b.n	8007ab4 <__swsetup_r+0xb0>
 8007aca:	2000      	movs	r0, #0
 8007acc:	e7f7      	b.n	8007abe <__swsetup_r+0xba>
 8007ace:	bf00      	nop
 8007ad0:	20000014 	.word	0x20000014
 8007ad4:	08007da4 	.word	0x08007da4
 8007ad8:	08007dc4 	.word	0x08007dc4
 8007adc:	08007d84 	.word	0x08007d84

08007ae0 <__swhatbuf_r>:
 8007ae0:	b570      	push	{r4, r5, r6, lr}
 8007ae2:	460e      	mov	r6, r1
 8007ae4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ae8:	2900      	cmp	r1, #0
 8007aea:	b096      	sub	sp, #88	; 0x58
 8007aec:	4614      	mov	r4, r2
 8007aee:	461d      	mov	r5, r3
 8007af0:	da08      	bge.n	8007b04 <__swhatbuf_r+0x24>
 8007af2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007af6:	2200      	movs	r2, #0
 8007af8:	602a      	str	r2, [r5, #0]
 8007afa:	061a      	lsls	r2, r3, #24
 8007afc:	d410      	bmi.n	8007b20 <__swhatbuf_r+0x40>
 8007afe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b02:	e00e      	b.n	8007b22 <__swhatbuf_r+0x42>
 8007b04:	466a      	mov	r2, sp
 8007b06:	f000 f851 	bl	8007bac <_fstat_r>
 8007b0a:	2800      	cmp	r0, #0
 8007b0c:	dbf1      	blt.n	8007af2 <__swhatbuf_r+0x12>
 8007b0e:	9a01      	ldr	r2, [sp, #4]
 8007b10:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007b14:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007b18:	425a      	negs	r2, r3
 8007b1a:	415a      	adcs	r2, r3
 8007b1c:	602a      	str	r2, [r5, #0]
 8007b1e:	e7ee      	b.n	8007afe <__swhatbuf_r+0x1e>
 8007b20:	2340      	movs	r3, #64	; 0x40
 8007b22:	2000      	movs	r0, #0
 8007b24:	6023      	str	r3, [r4, #0]
 8007b26:	b016      	add	sp, #88	; 0x58
 8007b28:	bd70      	pop	{r4, r5, r6, pc}
	...

08007b2c <__smakebuf_r>:
 8007b2c:	898b      	ldrh	r3, [r1, #12]
 8007b2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007b30:	079d      	lsls	r5, r3, #30
 8007b32:	4606      	mov	r6, r0
 8007b34:	460c      	mov	r4, r1
 8007b36:	d507      	bpl.n	8007b48 <__smakebuf_r+0x1c>
 8007b38:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007b3c:	6023      	str	r3, [r4, #0]
 8007b3e:	6123      	str	r3, [r4, #16]
 8007b40:	2301      	movs	r3, #1
 8007b42:	6163      	str	r3, [r4, #20]
 8007b44:	b002      	add	sp, #8
 8007b46:	bd70      	pop	{r4, r5, r6, pc}
 8007b48:	ab01      	add	r3, sp, #4
 8007b4a:	466a      	mov	r2, sp
 8007b4c:	f7ff ffc8 	bl	8007ae0 <__swhatbuf_r>
 8007b50:	9900      	ldr	r1, [sp, #0]
 8007b52:	4605      	mov	r5, r0
 8007b54:	4630      	mov	r0, r6
 8007b56:	f7ff f96b 	bl	8006e30 <_malloc_r>
 8007b5a:	b948      	cbnz	r0, 8007b70 <__smakebuf_r+0x44>
 8007b5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b60:	059a      	lsls	r2, r3, #22
 8007b62:	d4ef      	bmi.n	8007b44 <__smakebuf_r+0x18>
 8007b64:	f023 0303 	bic.w	r3, r3, #3
 8007b68:	f043 0302 	orr.w	r3, r3, #2
 8007b6c:	81a3      	strh	r3, [r4, #12]
 8007b6e:	e7e3      	b.n	8007b38 <__smakebuf_r+0xc>
 8007b70:	4b0d      	ldr	r3, [pc, #52]	; (8007ba8 <__smakebuf_r+0x7c>)
 8007b72:	62b3      	str	r3, [r6, #40]	; 0x28
 8007b74:	89a3      	ldrh	r3, [r4, #12]
 8007b76:	6020      	str	r0, [r4, #0]
 8007b78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b7c:	81a3      	strh	r3, [r4, #12]
 8007b7e:	9b00      	ldr	r3, [sp, #0]
 8007b80:	6163      	str	r3, [r4, #20]
 8007b82:	9b01      	ldr	r3, [sp, #4]
 8007b84:	6120      	str	r0, [r4, #16]
 8007b86:	b15b      	cbz	r3, 8007ba0 <__smakebuf_r+0x74>
 8007b88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b8c:	4630      	mov	r0, r6
 8007b8e:	f000 f81f 	bl	8007bd0 <_isatty_r>
 8007b92:	b128      	cbz	r0, 8007ba0 <__smakebuf_r+0x74>
 8007b94:	89a3      	ldrh	r3, [r4, #12]
 8007b96:	f023 0303 	bic.w	r3, r3, #3
 8007b9a:	f043 0301 	orr.w	r3, r3, #1
 8007b9e:	81a3      	strh	r3, [r4, #12]
 8007ba0:	89a0      	ldrh	r0, [r4, #12]
 8007ba2:	4305      	orrs	r5, r0
 8007ba4:	81a5      	strh	r5, [r4, #12]
 8007ba6:	e7cd      	b.n	8007b44 <__smakebuf_r+0x18>
 8007ba8:	08006bd1 	.word	0x08006bd1

08007bac <_fstat_r>:
 8007bac:	b538      	push	{r3, r4, r5, lr}
 8007bae:	4d07      	ldr	r5, [pc, #28]	; (8007bcc <_fstat_r+0x20>)
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	4604      	mov	r4, r0
 8007bb4:	4608      	mov	r0, r1
 8007bb6:	4611      	mov	r1, r2
 8007bb8:	602b      	str	r3, [r5, #0]
 8007bba:	f7f9 f862 	bl	8000c82 <_fstat>
 8007bbe:	1c43      	adds	r3, r0, #1
 8007bc0:	d102      	bne.n	8007bc8 <_fstat_r+0x1c>
 8007bc2:	682b      	ldr	r3, [r5, #0]
 8007bc4:	b103      	cbz	r3, 8007bc8 <_fstat_r+0x1c>
 8007bc6:	6023      	str	r3, [r4, #0]
 8007bc8:	bd38      	pop	{r3, r4, r5, pc}
 8007bca:	bf00      	nop
 8007bcc:	20001ea4 	.word	0x20001ea4

08007bd0 <_isatty_r>:
 8007bd0:	b538      	push	{r3, r4, r5, lr}
 8007bd2:	4d06      	ldr	r5, [pc, #24]	; (8007bec <_isatty_r+0x1c>)
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	4604      	mov	r4, r0
 8007bd8:	4608      	mov	r0, r1
 8007bda:	602b      	str	r3, [r5, #0]
 8007bdc:	f7f9 f861 	bl	8000ca2 <_isatty>
 8007be0:	1c43      	adds	r3, r0, #1
 8007be2:	d102      	bne.n	8007bea <_isatty_r+0x1a>
 8007be4:	682b      	ldr	r3, [r5, #0]
 8007be6:	b103      	cbz	r3, 8007bea <_isatty_r+0x1a>
 8007be8:	6023      	str	r3, [r4, #0]
 8007bea:	bd38      	pop	{r3, r4, r5, pc}
 8007bec:	20001ea4 	.word	0x20001ea4

08007bf0 <_init>:
 8007bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bf2:	bf00      	nop
 8007bf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bf6:	bc08      	pop	{r3}
 8007bf8:	469e      	mov	lr, r3
 8007bfa:	4770      	bx	lr

08007bfc <_fini>:
 8007bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bfe:	bf00      	nop
 8007c00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c02:	bc08      	pop	{r3}
 8007c04:	469e      	mov	lr, r3
 8007c06:	4770      	bx	lr
