
4_Task_Priority.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007798  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c4  080078d8  080078d8  000178d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007a9c  08007a9c  00017a9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007aa4  08007aa4  00017aa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007aa8  08007aa8  00017aa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  20000004  08007aac  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001e20  20000078  08007b20  00020078  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20001e98  08007b20  00021e98  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 10 .debug_info   00025f09  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000047b9  00000000  00000000  00045fb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000022b8  00000000  00000000  0004a770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002120  00000000  00000000  0004ca28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00005c07  00000000  00000000  0004eb48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000206c7  00000000  00000000  0005474f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000ef7d9  00000000  00000000  00074e16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001645ef  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009a3c  00000000  00000000  00164640  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000078 	.word	0x20000078
 800015c:	00000000 	.word	0x00000000
 8000160:	080078c0 	.word	0x080078c0

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000007c 	.word	0x2000007c
 800017c:	080078c0 	.word	0x080078c0

08000180 <__aeabi_uldivmod>:
 8000180:	b953      	cbnz	r3, 8000198 <__aeabi_uldivmod+0x18>
 8000182:	b94a      	cbnz	r2, 8000198 <__aeabi_uldivmod+0x18>
 8000184:	2900      	cmp	r1, #0
 8000186:	bf08      	it	eq
 8000188:	2800      	cmpeq	r0, #0
 800018a:	bf1c      	itt	ne
 800018c:	f04f 31ff 	movne.w	r1, #4294967295
 8000190:	f04f 30ff 	movne.w	r0, #4294967295
 8000194:	f000 b974 	b.w	8000480 <__aeabi_idiv0>
 8000198:	f1ad 0c08 	sub.w	ip, sp, #8
 800019c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001a0:	f000 f806 	bl	80001b0 <__udivmoddi4>
 80001a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001ac:	b004      	add	sp, #16
 80001ae:	4770      	bx	lr

080001b0 <__udivmoddi4>:
 80001b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b4:	9d08      	ldr	r5, [sp, #32]
 80001b6:	4604      	mov	r4, r0
 80001b8:	468e      	mov	lr, r1
 80001ba:	2b00      	cmp	r3, #0
 80001bc:	d14d      	bne.n	800025a <__udivmoddi4+0xaa>
 80001be:	428a      	cmp	r2, r1
 80001c0:	4694      	mov	ip, r2
 80001c2:	d969      	bls.n	8000298 <__udivmoddi4+0xe8>
 80001c4:	fab2 f282 	clz	r2, r2
 80001c8:	b152      	cbz	r2, 80001e0 <__udivmoddi4+0x30>
 80001ca:	fa01 f302 	lsl.w	r3, r1, r2
 80001ce:	f1c2 0120 	rsb	r1, r2, #32
 80001d2:	fa20 f101 	lsr.w	r1, r0, r1
 80001d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80001da:	ea41 0e03 	orr.w	lr, r1, r3
 80001de:	4094      	lsls	r4, r2
 80001e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80001e4:	0c21      	lsrs	r1, r4, #16
 80001e6:	fbbe f6f8 	udiv	r6, lr, r8
 80001ea:	fa1f f78c 	uxth.w	r7, ip
 80001ee:	fb08 e316 	mls	r3, r8, r6, lr
 80001f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80001f6:	fb06 f107 	mul.w	r1, r6, r7
 80001fa:	4299      	cmp	r1, r3
 80001fc:	d90a      	bls.n	8000214 <__udivmoddi4+0x64>
 80001fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000202:	f106 30ff 	add.w	r0, r6, #4294967295
 8000206:	f080 811f 	bcs.w	8000448 <__udivmoddi4+0x298>
 800020a:	4299      	cmp	r1, r3
 800020c:	f240 811c 	bls.w	8000448 <__udivmoddi4+0x298>
 8000210:	3e02      	subs	r6, #2
 8000212:	4463      	add	r3, ip
 8000214:	1a5b      	subs	r3, r3, r1
 8000216:	b2a4      	uxth	r4, r4
 8000218:	fbb3 f0f8 	udiv	r0, r3, r8
 800021c:	fb08 3310 	mls	r3, r8, r0, r3
 8000220:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000224:	fb00 f707 	mul.w	r7, r0, r7
 8000228:	42a7      	cmp	r7, r4
 800022a:	d90a      	bls.n	8000242 <__udivmoddi4+0x92>
 800022c:	eb1c 0404 	adds.w	r4, ip, r4
 8000230:	f100 33ff 	add.w	r3, r0, #4294967295
 8000234:	f080 810a 	bcs.w	800044c <__udivmoddi4+0x29c>
 8000238:	42a7      	cmp	r7, r4
 800023a:	f240 8107 	bls.w	800044c <__udivmoddi4+0x29c>
 800023e:	4464      	add	r4, ip
 8000240:	3802      	subs	r0, #2
 8000242:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000246:	1be4      	subs	r4, r4, r7
 8000248:	2600      	movs	r6, #0
 800024a:	b11d      	cbz	r5, 8000254 <__udivmoddi4+0xa4>
 800024c:	40d4      	lsrs	r4, r2
 800024e:	2300      	movs	r3, #0
 8000250:	e9c5 4300 	strd	r4, r3, [r5]
 8000254:	4631      	mov	r1, r6
 8000256:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800025a:	428b      	cmp	r3, r1
 800025c:	d909      	bls.n	8000272 <__udivmoddi4+0xc2>
 800025e:	2d00      	cmp	r5, #0
 8000260:	f000 80ef 	beq.w	8000442 <__udivmoddi4+0x292>
 8000264:	2600      	movs	r6, #0
 8000266:	e9c5 0100 	strd	r0, r1, [r5]
 800026a:	4630      	mov	r0, r6
 800026c:	4631      	mov	r1, r6
 800026e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000272:	fab3 f683 	clz	r6, r3
 8000276:	2e00      	cmp	r6, #0
 8000278:	d14a      	bne.n	8000310 <__udivmoddi4+0x160>
 800027a:	428b      	cmp	r3, r1
 800027c:	d302      	bcc.n	8000284 <__udivmoddi4+0xd4>
 800027e:	4282      	cmp	r2, r0
 8000280:	f200 80f9 	bhi.w	8000476 <__udivmoddi4+0x2c6>
 8000284:	1a84      	subs	r4, r0, r2
 8000286:	eb61 0303 	sbc.w	r3, r1, r3
 800028a:	2001      	movs	r0, #1
 800028c:	469e      	mov	lr, r3
 800028e:	2d00      	cmp	r5, #0
 8000290:	d0e0      	beq.n	8000254 <__udivmoddi4+0xa4>
 8000292:	e9c5 4e00 	strd	r4, lr, [r5]
 8000296:	e7dd      	b.n	8000254 <__udivmoddi4+0xa4>
 8000298:	b902      	cbnz	r2, 800029c <__udivmoddi4+0xec>
 800029a:	deff      	udf	#255	; 0xff
 800029c:	fab2 f282 	clz	r2, r2
 80002a0:	2a00      	cmp	r2, #0
 80002a2:	f040 8092 	bne.w	80003ca <__udivmoddi4+0x21a>
 80002a6:	eba1 010c 	sub.w	r1, r1, ip
 80002aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ae:	fa1f fe8c 	uxth.w	lr, ip
 80002b2:	2601      	movs	r6, #1
 80002b4:	0c20      	lsrs	r0, r4, #16
 80002b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80002ba:	fb07 1113 	mls	r1, r7, r3, r1
 80002be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80002c2:	fb0e f003 	mul.w	r0, lr, r3
 80002c6:	4288      	cmp	r0, r1
 80002c8:	d908      	bls.n	80002dc <__udivmoddi4+0x12c>
 80002ca:	eb1c 0101 	adds.w	r1, ip, r1
 80002ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0x12a>
 80002d4:	4288      	cmp	r0, r1
 80002d6:	f200 80cb 	bhi.w	8000470 <__udivmoddi4+0x2c0>
 80002da:	4643      	mov	r3, r8
 80002dc:	1a09      	subs	r1, r1, r0
 80002de:	b2a4      	uxth	r4, r4
 80002e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80002e4:	fb07 1110 	mls	r1, r7, r0, r1
 80002e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80002ec:	fb0e fe00 	mul.w	lr, lr, r0
 80002f0:	45a6      	cmp	lr, r4
 80002f2:	d908      	bls.n	8000306 <__udivmoddi4+0x156>
 80002f4:	eb1c 0404 	adds.w	r4, ip, r4
 80002f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80002fc:	d202      	bcs.n	8000304 <__udivmoddi4+0x154>
 80002fe:	45a6      	cmp	lr, r4
 8000300:	f200 80bb 	bhi.w	800047a <__udivmoddi4+0x2ca>
 8000304:	4608      	mov	r0, r1
 8000306:	eba4 040e 	sub.w	r4, r4, lr
 800030a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800030e:	e79c      	b.n	800024a <__udivmoddi4+0x9a>
 8000310:	f1c6 0720 	rsb	r7, r6, #32
 8000314:	40b3      	lsls	r3, r6
 8000316:	fa22 fc07 	lsr.w	ip, r2, r7
 800031a:	ea4c 0c03 	orr.w	ip, ip, r3
 800031e:	fa20 f407 	lsr.w	r4, r0, r7
 8000322:	fa01 f306 	lsl.w	r3, r1, r6
 8000326:	431c      	orrs	r4, r3
 8000328:	40f9      	lsrs	r1, r7
 800032a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800032e:	fa00 f306 	lsl.w	r3, r0, r6
 8000332:	fbb1 f8f9 	udiv	r8, r1, r9
 8000336:	0c20      	lsrs	r0, r4, #16
 8000338:	fa1f fe8c 	uxth.w	lr, ip
 800033c:	fb09 1118 	mls	r1, r9, r8, r1
 8000340:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000344:	fb08 f00e 	mul.w	r0, r8, lr
 8000348:	4288      	cmp	r0, r1
 800034a:	fa02 f206 	lsl.w	r2, r2, r6
 800034e:	d90b      	bls.n	8000368 <__udivmoddi4+0x1b8>
 8000350:	eb1c 0101 	adds.w	r1, ip, r1
 8000354:	f108 3aff 	add.w	sl, r8, #4294967295
 8000358:	f080 8088 	bcs.w	800046c <__udivmoddi4+0x2bc>
 800035c:	4288      	cmp	r0, r1
 800035e:	f240 8085 	bls.w	800046c <__udivmoddi4+0x2bc>
 8000362:	f1a8 0802 	sub.w	r8, r8, #2
 8000366:	4461      	add	r1, ip
 8000368:	1a09      	subs	r1, r1, r0
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000370:	fb09 1110 	mls	r1, r9, r0, r1
 8000374:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	458e      	cmp	lr, r1
 800037e:	d908      	bls.n	8000392 <__udivmoddi4+0x1e2>
 8000380:	eb1c 0101 	adds.w	r1, ip, r1
 8000384:	f100 34ff 	add.w	r4, r0, #4294967295
 8000388:	d26c      	bcs.n	8000464 <__udivmoddi4+0x2b4>
 800038a:	458e      	cmp	lr, r1
 800038c:	d96a      	bls.n	8000464 <__udivmoddi4+0x2b4>
 800038e:	3802      	subs	r0, #2
 8000390:	4461      	add	r1, ip
 8000392:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000396:	fba0 9402 	umull	r9, r4, r0, r2
 800039a:	eba1 010e 	sub.w	r1, r1, lr
 800039e:	42a1      	cmp	r1, r4
 80003a0:	46c8      	mov	r8, r9
 80003a2:	46a6      	mov	lr, r4
 80003a4:	d356      	bcc.n	8000454 <__udivmoddi4+0x2a4>
 80003a6:	d053      	beq.n	8000450 <__udivmoddi4+0x2a0>
 80003a8:	b15d      	cbz	r5, 80003c2 <__udivmoddi4+0x212>
 80003aa:	ebb3 0208 	subs.w	r2, r3, r8
 80003ae:	eb61 010e 	sbc.w	r1, r1, lr
 80003b2:	fa01 f707 	lsl.w	r7, r1, r7
 80003b6:	fa22 f306 	lsr.w	r3, r2, r6
 80003ba:	40f1      	lsrs	r1, r6
 80003bc:	431f      	orrs	r7, r3
 80003be:	e9c5 7100 	strd	r7, r1, [r5]
 80003c2:	2600      	movs	r6, #0
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	f1c2 0320 	rsb	r3, r2, #32
 80003ce:	40d8      	lsrs	r0, r3
 80003d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80003d4:	fa21 f303 	lsr.w	r3, r1, r3
 80003d8:	4091      	lsls	r1, r2
 80003da:	4301      	orrs	r1, r0
 80003dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e0:	fa1f fe8c 	uxth.w	lr, ip
 80003e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80003e8:	fb07 3610 	mls	r6, r7, r0, r3
 80003ec:	0c0b      	lsrs	r3, r1, #16
 80003ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80003f2:	fb00 f60e 	mul.w	r6, r0, lr
 80003f6:	429e      	cmp	r6, r3
 80003f8:	fa04 f402 	lsl.w	r4, r4, r2
 80003fc:	d908      	bls.n	8000410 <__udivmoddi4+0x260>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f100 38ff 	add.w	r8, r0, #4294967295
 8000406:	d22f      	bcs.n	8000468 <__udivmoddi4+0x2b8>
 8000408:	429e      	cmp	r6, r3
 800040a:	d92d      	bls.n	8000468 <__udivmoddi4+0x2b8>
 800040c:	3802      	subs	r0, #2
 800040e:	4463      	add	r3, ip
 8000410:	1b9b      	subs	r3, r3, r6
 8000412:	b289      	uxth	r1, r1
 8000414:	fbb3 f6f7 	udiv	r6, r3, r7
 8000418:	fb07 3316 	mls	r3, r7, r6, r3
 800041c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000420:	fb06 f30e 	mul.w	r3, r6, lr
 8000424:	428b      	cmp	r3, r1
 8000426:	d908      	bls.n	800043a <__udivmoddi4+0x28a>
 8000428:	eb1c 0101 	adds.w	r1, ip, r1
 800042c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000430:	d216      	bcs.n	8000460 <__udivmoddi4+0x2b0>
 8000432:	428b      	cmp	r3, r1
 8000434:	d914      	bls.n	8000460 <__udivmoddi4+0x2b0>
 8000436:	3e02      	subs	r6, #2
 8000438:	4461      	add	r1, ip
 800043a:	1ac9      	subs	r1, r1, r3
 800043c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000440:	e738      	b.n	80002b4 <__udivmoddi4+0x104>
 8000442:	462e      	mov	r6, r5
 8000444:	4628      	mov	r0, r5
 8000446:	e705      	b.n	8000254 <__udivmoddi4+0xa4>
 8000448:	4606      	mov	r6, r0
 800044a:	e6e3      	b.n	8000214 <__udivmoddi4+0x64>
 800044c:	4618      	mov	r0, r3
 800044e:	e6f8      	b.n	8000242 <__udivmoddi4+0x92>
 8000450:	454b      	cmp	r3, r9
 8000452:	d2a9      	bcs.n	80003a8 <__udivmoddi4+0x1f8>
 8000454:	ebb9 0802 	subs.w	r8, r9, r2
 8000458:	eb64 0e0c 	sbc.w	lr, r4, ip
 800045c:	3801      	subs	r0, #1
 800045e:	e7a3      	b.n	80003a8 <__udivmoddi4+0x1f8>
 8000460:	4646      	mov	r6, r8
 8000462:	e7ea      	b.n	800043a <__udivmoddi4+0x28a>
 8000464:	4620      	mov	r0, r4
 8000466:	e794      	b.n	8000392 <__udivmoddi4+0x1e2>
 8000468:	4640      	mov	r0, r8
 800046a:	e7d1      	b.n	8000410 <__udivmoddi4+0x260>
 800046c:	46d0      	mov	r8, sl
 800046e:	e77b      	b.n	8000368 <__udivmoddi4+0x1b8>
 8000470:	3b02      	subs	r3, #2
 8000472:	4461      	add	r1, ip
 8000474:	e732      	b.n	80002dc <__udivmoddi4+0x12c>
 8000476:	4630      	mov	r0, r6
 8000478:	e709      	b.n	800028e <__udivmoddi4+0xde>
 800047a:	4464      	add	r4, ip
 800047c:	3802      	subs	r0, #2
 800047e:	e742      	b.n	8000306 <__udivmoddi4+0x156>

08000480 <__aeabi_idiv0>:
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop

08000484 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000484:	b480      	push	{r7}
 8000486:	b083      	sub	sp, #12
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800048c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000490:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000494:	f023 0218 	bic.w	r2, r3, #24
 8000498:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	4313      	orrs	r3, r2
 80004a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80004a4:	bf00      	nop
 80004a6:	370c      	adds	r7, #12
 80004a8:	46bd      	mov	sp, r7
 80004aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ae:	4770      	bx	lr

080004b0 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004b0:	b480      	push	{r7}
 80004b2:	b085      	sub	sp, #20
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80004b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004bc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	4313      	orrs	r3, r2
 80004c6:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80004c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	4013      	ands	r3, r2
 80004d2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004d4:	68fb      	ldr	r3, [r7, #12]
}
 80004d6:	bf00      	nop
 80004d8:	3714      	adds	r7, #20
 80004da:	46bd      	mov	sp, r7
 80004dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e0:	4770      	bx	lr
	...

080004e4 <main>:
void vBlueLedControllerTask(void *pvParameters);
void vRedLedControllerTask(void *pvParameters);
void vGreenLedControllerTask(void *pvParameters);

int main(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af02      	add	r7, sp, #8

  HAL_Init();
 80004ea:	f000 fc7f 	bl	8000dec <HAL_Init>
  SystemClock_Config();
 80004ee:	f000 f86f 	bl	80005d0 <SystemClock_Config>
  MX_GPIO_Init();
 80004f2:	f000 f957 	bl	80007a4 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80004f6:	f000 f8e1 	bl	80006bc <MX_LPUART1_UART_Init>
  MX_USB_PCD_Init();
 80004fa:	f000 f92b 	bl	8000754 <MX_USB_PCD_Init>

  xTaskCreate(vBlueLedControllerTask, "BleuLEDController", 100, NULL, 1, NULL);
 80004fe:	2300      	movs	r3, #0
 8000500:	9301      	str	r3, [sp, #4]
 8000502:	2301      	movs	r3, #1
 8000504:	9300      	str	r3, [sp, #0]
 8000506:	2300      	movs	r3, #0
 8000508:	2264      	movs	r2, #100	; 0x64
 800050a:	490f      	ldr	r1, [pc, #60]	; (8000548 <main+0x64>)
 800050c:	480f      	ldr	r0, [pc, #60]	; (800054c <main+0x68>)
 800050e:	f004 fe0e 	bl	800512e <xTaskCreate>
  xTaskCreate(vRedLedControllerTask, "RedLEDController", 100, NULL, 1, NULL);
 8000512:	2300      	movs	r3, #0
 8000514:	9301      	str	r3, [sp, #4]
 8000516:	2301      	movs	r3, #1
 8000518:	9300      	str	r3, [sp, #0]
 800051a:	2300      	movs	r3, #0
 800051c:	2264      	movs	r2, #100	; 0x64
 800051e:	490c      	ldr	r1, [pc, #48]	; (8000550 <main+0x6c>)
 8000520:	480c      	ldr	r0, [pc, #48]	; (8000554 <main+0x70>)
 8000522:	f004 fe04 	bl	800512e <xTaskCreate>
  xTaskCreate(vGreenLedControllerTask, "GreenLEDController", 100, NULL, 1, NULL);
 8000526:	2300      	movs	r3, #0
 8000528:	9301      	str	r3, [sp, #4]
 800052a:	2301      	movs	r3, #1
 800052c:	9300      	str	r3, [sp, #0]
 800052e:	2300      	movs	r3, #0
 8000530:	2264      	movs	r2, #100	; 0x64
 8000532:	4909      	ldr	r1, [pc, #36]	; (8000558 <main+0x74>)
 8000534:	4809      	ldr	r0, [pc, #36]	; (800055c <main+0x78>)
 8000536:	f004 fdfa 	bl	800512e <xTaskCreate>
  vTaskStartScheduler();
 800053a:	f004 ff53 	bl	80053e4 <vTaskStartScheduler>

  while (1)
  {
    /* USER CODE END WHILE */
	  printf("Current Number is: \r\n");
 800053e:	4808      	ldr	r0, [pc, #32]	; (8000560 <main+0x7c>)
 8000540:	f006 fe50 	bl	80071e4 <puts>
 8000544:	e7fb      	b.n	800053e <main+0x5a>
 8000546:	bf00      	nop
 8000548:	080078d8 	.word	0x080078d8
 800054c:	08000565 	.word	0x08000565
 8000550:	080078ec 	.word	0x080078ec
 8000554:	0800057d 	.word	0x0800057d
 8000558:	08007900 	.word	0x08007900
 800055c:	08000595 	.word	0x08000595
 8000560:	08007914 	.word	0x08007914

08000564 <vBlueLedControllerTask>:
  }
  /* USER CODE END 3 */
}

void vBlueLedControllerTask(void *pvParameters)
{
 8000564:	b480      	push	{r7}
 8000566:	b083      	sub	sp, #12
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
	while(1)
	{
//		printf("Blue LED controller task running.. \n\r");
		BlueTaskProfiler++;
 800056c:	4b02      	ldr	r3, [pc, #8]	; (8000578 <vBlueLedControllerTask+0x14>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	3301      	adds	r3, #1
 8000572:	4a01      	ldr	r2, [pc, #4]	; (8000578 <vBlueLedControllerTask+0x14>)
 8000574:	6013      	str	r3, [r2, #0]
 8000576:	e7f9      	b.n	800056c <vBlueLedControllerTask+0x8>
 8000578:	20000094 	.word	0x20000094

0800057c <vRedLedControllerTask>:
	}
}

void vRedLedControllerTask(void *pvParameters)
{
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
	while(1)
	{
//		printf("Red LED controller task running.. \n\r");
		RedTaskProfiler++;
 8000584:	4b02      	ldr	r3, [pc, #8]	; (8000590 <vRedLedControllerTask+0x14>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	3301      	adds	r3, #1
 800058a:	4a01      	ldr	r2, [pc, #4]	; (8000590 <vRedLedControllerTask+0x14>)
 800058c:	6013      	str	r3, [r2, #0]
 800058e:	e7f9      	b.n	8000584 <vRedLedControllerTask+0x8>
 8000590:	20000098 	.word	0x20000098

08000594 <vGreenLedControllerTask>:
	}
}

void vGreenLedControllerTask(void *pvParameters)
{
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
	while(1)
	{
//		printf("Green LED controller task running.. \n\r");
		GreenTaskProfiler++;
 800059c:	4b02      	ldr	r3, [pc, #8]	; (80005a8 <vGreenLedControllerTask+0x14>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	3301      	adds	r3, #1
 80005a2:	4a01      	ldr	r2, [pc, #4]	; (80005a8 <vGreenLedControllerTask+0x14>)
 80005a4:	6013      	str	r3, [r2, #0]
 80005a6:	e7f9      	b.n	800059c <vGreenLedControllerTask+0x8>
 80005a8:	2000009c 	.word	0x2000009c

080005ac <__io_putchar>:
	}
}

int uart2_write(uint32_t ch)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
//	while(!(USART2->SR & 0x0080)) {}
 80005b4:	1d39      	adds	r1, r7, #4
 80005b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005ba:	2201      	movs	r2, #1
 80005bc:	4803      	ldr	r0, [pc, #12]	; (80005cc <__io_putchar+0x20>)
 80005be:	f003 f9c5 	bl	800394c <HAL_UART_Transmit>
//	USART2->DR = (ch & 0xFF);
 80005c2:	687b      	ldr	r3, [r7, #4]
	return ch;
 80005c4:	4618      	mov	r0, r3
 80005c6:	3708      	adds	r7, #8
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	200000a0 	.word	0x200000a0

080005d0 <SystemClock_Config>:
}

int __io_putchar(uint32_t ch)
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b09a      	sub	sp, #104	; 0x68
 80005d4:	af00      	add	r7, sp, #0
{
 80005d6:	f107 0320 	add.w	r3, r7, #32
 80005da:	2248      	movs	r2, #72	; 0x48
 80005dc:	2100      	movs	r1, #0
 80005de:	4618      	mov	r0, r3
 80005e0:	f006 fcf5 	bl	8006fce <memset>
	//HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 80005e4:	1d3b      	adds	r3, r7, #4
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
 80005ea:	605a      	str	r2, [r3, #4]
 80005ec:	609a      	str	r2, [r3, #8]
 80005ee:	60da      	str	r2, [r3, #12]
 80005f0:	611a      	str	r2, [r3, #16]
 80005f2:	615a      	str	r2, [r3, #20]
 80005f4:	619a      	str	r2, [r3, #24]

	uart2_write(ch);

	return ch;
 80005f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005fa:	68db      	ldr	r3, [r3, #12]
 80005fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000600:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000604:	60d3      	str	r3, [r2, #12]
}



 8000606:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800060a:	68db      	ldr	r3, [r3, #12]
 800060c:	f023 0303 	bic.w	r3, r3, #3
 8000610:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000614:	f043 0301 	orr.w	r3, r3, #1
 8000618:	60d3      	str	r3, [r2, #12]
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800061a:	f001 f83d 	bl	8001698 <HAL_PWR_EnableBkUpAccess>

 800061e:	2000      	movs	r0, #0
 8000620:	f7ff ff30 	bl	8000484 <LL_RCC_LSE_SetDriveCapability>
  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);

 8000624:	4b24      	ldr	r3, [pc, #144]	; (80006b8 <SystemClock_Config+0xe8>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800062c:	4a22      	ldr	r2, [pc, #136]	; (80006b8 <SystemClock_Config+0xe8>)
 800062e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000632:	6013      	str	r3, [r2, #0]
 8000634:	4b20      	ldr	r3, [pc, #128]	; (80006b8 <SystemClock_Config+0xe8>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800063c:	603b      	str	r3, [r7, #0]
 800063e:	683b      	ldr	r3, [r7, #0]
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);

  /** Configure LSE Drive Capability
 8000640:	2327      	movs	r3, #39	; 0x27
 8000642:	623b      	str	r3, [r7, #32]
  */
  HAL_PWR_EnableBkUpAccess();
 8000644:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000648:	627b      	str	r3, [r7, #36]	; 0x24
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800064a:	2301      	movs	r3, #1
 800064c:	62bb      	str	r3, [r7, #40]	; 0x28

 800064e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000652:	62fb      	str	r3, [r7, #44]	; 0x2c
  /** Configure the main internal regulator output voltage
 8000654:	2301      	movs	r3, #1
 8000656:	63fb      	str	r3, [r7, #60]	; 0x3c
  */
 8000658:	2340      	movs	r3, #64	; 0x40
 800065a:	633b      	str	r3, [r7, #48]	; 0x30
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800065c:	2300      	movs	r3, #0
 800065e:	643b      	str	r3, [r7, #64]	; 0x40

 8000660:	2360      	movs	r3, #96	; 0x60
 8000662:	647b      	str	r3, [r7, #68]	; 0x44
  /** Initializes the RCC Oscillators according to the specified parameters
 8000664:	2300      	movs	r3, #0
 8000666:	64fb      	str	r3, [r7, #76]	; 0x4c
  * in the RCC_OscInitTypeDef structure.
 8000668:	f107 0320 	add.w	r3, r7, #32
 800066c:	4618      	mov	r0, r3
 800066e:	f001 fc05 	bl	8001e7c <HAL_RCC_OscConfig>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <SystemClock_Config+0xac>
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8000678:	f000 f8fe 	bl	8000878 <Error_Handler>
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800067c:	236f      	movs	r3, #111	; 0x6f
 800067e:	607b      	str	r3, [r7, #4]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000680:	2302      	movs	r3, #2
 8000682:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000684:	2300      	movs	r3, #0
 8000686:	60fb      	str	r3, [r7, #12]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000688:	2300      	movs	r3, #0
 800068a:	613b      	str	r3, [r7, #16]
  {
 800068c:	2300      	movs	r3, #0
 800068e:	617b      	str	r3, [r7, #20]
    Error_Handler();
 8000690:	2300      	movs	r3, #0
 8000692:	61bb      	str	r3, [r7, #24]
  }
 8000694:	2300      	movs	r3, #0
 8000696:	61fb      	str	r3, [r7, #28]

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
 8000698:	1d3b      	adds	r3, r7, #4
 800069a:	2101      	movs	r1, #1
 800069c:	4618      	mov	r0, r3
 800069e:	f001 ff61 	bl	8002564 <HAL_RCC_ClockConfig>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <SystemClock_Config+0xdc>
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80006a8:	f000 f8e6 	bl	8000878 <Error_Handler>
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006ac:	f002 fd4e 	bl	800314c <HAL_RCCEx_EnableMSIPLLMode>
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b0:	bf00      	nop
 80006b2:	3768      	adds	r7, #104	; 0x68
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	58000400 	.word	0x58000400

080006bc <MX_LPUART1_UART_Init>:
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Enable MSI Auto calibration
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0


/**
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
 80006c0:	4b22      	ldr	r3, [pc, #136]	; (800074c <MX_LPUART1_UART_Init+0x90>)
 80006c2:	4a23      	ldr	r2, [pc, #140]	; (8000750 <MX_LPUART1_UART_Init+0x94>)
 80006c4:	601a      	str	r2, [r3, #0]
  */
 80006c6:	4b21      	ldr	r3, [pc, #132]	; (800074c <MX_LPUART1_UART_Init+0x90>)
 80006c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006cc:	605a      	str	r2, [r3, #4]
static void MX_LPUART1_UART_Init(void)
 80006ce:	4b1f      	ldr	r3, [pc, #124]	; (800074c <MX_LPUART1_UART_Init+0x90>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	609a      	str	r2, [r3, #8]
{
 80006d4:	4b1d      	ldr	r3, [pc, #116]	; (800074c <MX_LPUART1_UART_Init+0x90>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	60da      	str	r2, [r3, #12]

 80006da:	4b1c      	ldr	r3, [pc, #112]	; (800074c <MX_LPUART1_UART_Init+0x90>)
 80006dc:	2200      	movs	r2, #0
 80006de:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN LPUART1_Init 0 */
 80006e0:	4b1a      	ldr	r3, [pc, #104]	; (800074c <MX_LPUART1_UART_Init+0x90>)
 80006e2:	220c      	movs	r2, #12
 80006e4:	615a      	str	r2, [r3, #20]

 80006e6:	4b19      	ldr	r3, [pc, #100]	; (800074c <MX_LPUART1_UART_Init+0x90>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	619a      	str	r2, [r3, #24]
  /* USER CODE END LPUART1_Init 0 */
 80006ec:	4b17      	ldr	r3, [pc, #92]	; (800074c <MX_LPUART1_UART_Init+0x90>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	621a      	str	r2, [r3, #32]

 80006f2:	4b16      	ldr	r3, [pc, #88]	; (800074c <MX_LPUART1_UART_Init+0x90>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN LPUART1_Init 1 */
 80006f8:	4b14      	ldr	r3, [pc, #80]	; (800074c <MX_LPUART1_UART_Init+0x90>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	629a      	str	r2, [r3, #40]	; 0x28

 80006fe:	4b13      	ldr	r3, [pc, #76]	; (800074c <MX_LPUART1_UART_Init+0x90>)
 8000700:	2200      	movs	r2, #0
 8000702:	665a      	str	r2, [r3, #100]	; 0x64
  /* USER CODE END LPUART1_Init 1 */
 8000704:	4811      	ldr	r0, [pc, #68]	; (800074c <MX_LPUART1_UART_Init+0x90>)
 8000706:	f003 f8d1 	bl	80038ac <HAL_UART_Init>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_LPUART1_UART_Init+0x58>
  hlpuart1.Instance = LPUART1;
  hlpuart1.Init.BaudRate = 115200;
 8000710:	f000 f8b2 	bl	8000878 <Error_Handler>
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000714:	2100      	movs	r1, #0
 8000716:	480d      	ldr	r0, [pc, #52]	; (800074c <MX_LPUART1_UART_Init+0x90>)
 8000718:	f003 fdc2 	bl	80042a0 <HAL_UARTEx_SetTxFifoThreshold>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_LPUART1_UART_Init+0x6a>
  hlpuart1.Init.Parity = UART_PARITY_NONE;
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000722:	f000 f8a9 	bl	8000878 <Error_Handler>
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000726:	2100      	movs	r1, #0
 8000728:	4808      	ldr	r0, [pc, #32]	; (800074c <MX_LPUART1_UART_Init+0x90>)
 800072a:	f003 fdf7 	bl	800431c <HAL_UARTEx_SetRxFifoThreshold>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <MX_LPUART1_UART_Init+0x7c>
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000734:	f000 f8a0 	bl	8000878 <Error_Handler>
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000738:	4804      	ldr	r0, [pc, #16]	; (800074c <MX_LPUART1_UART_Init+0x90>)
 800073a:	f003 fd78 	bl	800422e <HAL_UARTEx_DisableFifoMode>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000744:	f000 f898 	bl	8000878 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}
 800074c:	200000a0 	.word	0x200000a0
 8000750:	40008000 	.word	0x40008000

08000754 <MX_USB_PCD_Init>:
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN LPUART1_Init 2 */
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
}

/**
  * @brief USB Initialization Function
  * @param None
  * @retval None
 8000758:	4b10      	ldr	r3, [pc, #64]	; (800079c <MX_USB_PCD_Init+0x48>)
 800075a:	4a11      	ldr	r2, [pc, #68]	; (80007a0 <MX_USB_PCD_Init+0x4c>)
 800075c:	601a      	str	r2, [r3, #0]
  */
 800075e:	4b0f      	ldr	r3, [pc, #60]	; (800079c <MX_USB_PCD_Init+0x48>)
 8000760:	2208      	movs	r2, #8
 8000762:	605a      	str	r2, [r3, #4]
static void MX_USB_PCD_Init(void)
 8000764:	4b0d      	ldr	r3, [pc, #52]	; (800079c <MX_USB_PCD_Init+0x48>)
 8000766:	2202      	movs	r2, #2
 8000768:	609a      	str	r2, [r3, #8]
{
 800076a:	4b0c      	ldr	r3, [pc, #48]	; (800079c <MX_USB_PCD_Init+0x48>)
 800076c:	2202      	movs	r2, #2
 800076e:	611a      	str	r2, [r3, #16]

 8000770:	4b0a      	ldr	r3, [pc, #40]	; (800079c <MX_USB_PCD_Init+0x48>)
 8000772:	2200      	movs	r2, #0
 8000774:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN USB_Init 0 */
 8000776:	4b09      	ldr	r3, [pc, #36]	; (800079c <MX_USB_PCD_Init+0x48>)
 8000778:	2200      	movs	r2, #0
 800077a:	619a      	str	r2, [r3, #24]

 800077c:	4b07      	ldr	r3, [pc, #28]	; (800079c <MX_USB_PCD_Init+0x48>)
 800077e:	2200      	movs	r2, #0
 8000780:	61da      	str	r2, [r3, #28]
  /* USER CODE END USB_Init 0 */
 8000782:	4b06      	ldr	r3, [pc, #24]	; (800079c <MX_USB_PCD_Init+0x48>)
 8000784:	2200      	movs	r2, #0
 8000786:	621a      	str	r2, [r3, #32]

 8000788:	4804      	ldr	r0, [pc, #16]	; (800079c <MX_USB_PCD_Init+0x48>)
 800078a:	f000 fde3 	bl	8001354 <HAL_PCD_Init>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_USB_PCD_Init+0x44>
  /* USER CODE BEGIN USB_Init 1 */

 8000794:	f000 f870 	bl	8000878 <Error_Handler>
  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000798:	bf00      	nop
 800079a:	bd80      	pop	{r7, pc}
 800079c:	20000130 	.word	0x20000130
 80007a0:	40006800 	.word	0x40006800

080007a4 <MX_GPIO_Init>:
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USB_Init 2 */
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b086      	sub	sp, #24
 80007a8:	af00      	add	r7, sp, #0

 80007aa:	1d3b      	adds	r3, r7, #4
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
 80007b0:	605a      	str	r2, [r3, #4]
 80007b2:	609a      	str	r2, [r3, #8]
 80007b4:	60da      	str	r2, [r3, #12]
 80007b6:	611a      	str	r2, [r3, #16]
  /* USER CODE END USB_Init 2 */

}
 80007b8:	2004      	movs	r0, #4
 80007ba:	f7ff fe79 	bl	80004b0 <LL_AHB2_GRP1_EnableClock>

 80007be:	2001      	movs	r0, #1
 80007c0:	f7ff fe76 	bl	80004b0 <LL_AHB2_GRP1_EnableClock>
/**
 80007c4:	2002      	movs	r0, #2
 80007c6:	f7ff fe73 	bl	80004b0 <LL_AHB2_GRP1_EnableClock>
  * @brief GPIO Initialization Function
 80007ca:	2008      	movs	r0, #8
 80007cc:	f7ff fe70 	bl	80004b0 <LL_AHB2_GRP1_EnableClock>
  * @param None
  * @retval None
  */
 80007d0:	2200      	movs	r2, #0
 80007d2:	2123      	movs	r1, #35	; 0x23
 80007d4:	481c      	ldr	r0, [pc, #112]	; (8000848 <MX_GPIO_Init+0xa4>)
 80007d6:	f000 fda5 	bl	8001324 <HAL_GPIO_WritePin>
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007da:	2310      	movs	r3, #16
 80007dc:	607b      	str	r3, [r7, #4]

 80007de:	2300      	movs	r3, #0
 80007e0:	60bb      	str	r3, [r7, #8]
  /* GPIO Ports Clock Enable */
 80007e2:	2300      	movs	r3, #0
 80007e4:	60fb      	str	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007e6:	1d3b      	adds	r3, r7, #4
 80007e8:	4619      	mov	r1, r3
 80007ea:	4818      	ldr	r0, [pc, #96]	; (800084c <MX_GPIO_Init+0xa8>)
 80007ec:	f000 fc2a 	bl	8001044 <HAL_GPIO_Init>
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007f0:	2323      	movs	r3, #35	; 0x23
 80007f2:	607b      	str	r3, [r7, #4]

 80007f4:	2301      	movs	r3, #1
 80007f6:	60bb      	str	r3, [r7, #8]
  /*Configure GPIO pin Output Level */
 80007f8:	2300      	movs	r3, #0
 80007fa:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 80007fc:	2300      	movs	r3, #0
 80007fe:	613b      	str	r3, [r7, #16]

 8000800:	1d3b      	adds	r3, r7, #4
 8000802:	4619      	mov	r1, r3
 8000804:	4810      	ldr	r0, [pc, #64]	; (8000848 <MX_GPIO_Init+0xa4>)
 8000806:	f000 fc1d 	bl	8001044 <HAL_GPIO_Init>
  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800080a:	2303      	movs	r3, #3
 800080c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080e:	2300      	movs	r3, #0
 8000810:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000812:	2300      	movs	r3, #0
 8000814:	60fb      	str	r3, [r7, #12]

 8000816:	1d3b      	adds	r3, r7, #4
 8000818:	4619      	mov	r1, r3
 800081a:	480d      	ldr	r0, [pc, #52]	; (8000850 <MX_GPIO_Init+0xac>)
 800081c:	f000 fc12 	bl	8001044 <HAL_GPIO_Init>
  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000820:	23c0      	movs	r3, #192	; 0xc0
 8000822:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000824:	2302      	movs	r3, #2
 8000826:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000828:	2301      	movs	r3, #1
 800082a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800082c:	2300      	movs	r3, #0
 800082e:	613b      	str	r3, [r7, #16]

 8000830:	2307      	movs	r3, #7
 8000832:	617b      	str	r3, [r7, #20]
  /*Configure GPIO pins : B2_Pin B3_Pin */
 8000834:	1d3b      	adds	r3, r7, #4
 8000836:	4619      	mov	r1, r3
 8000838:	4803      	ldr	r0, [pc, #12]	; (8000848 <MX_GPIO_Init+0xa4>)
 800083a:	f000 fc03 	bl	8001044 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800083e:	bf00      	nop
 8000840:	3718      	adds	r7, #24
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	48000400 	.word	0x48000400
 800084c:	48000800 	.word	0x48000800
 8000850:	48000c00 	.word	0x48000c00

08000854 <HAL_TIM_PeriodElapsedCallback>:
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
}

/**
  * @brief  Period elapsed callback in non blocking mode
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a04      	ldr	r2, [pc, #16]	; (8000874 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000862:	4293      	cmp	r3, r2
 8000864:	d101      	bne.n	800086a <HAL_TIM_PeriodElapsedCallback+0x16>
  * @note   This function is called  when TIM1 interrupt took place, inside
 8000866:	f000 fae1 	bl	8000e2c <HAL_IncTick>
  * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
 800086a:	bf00      	nop
 800086c:	3708      	adds	r7, #8
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	40012c00 	.word	0x40012c00

08000878 <Error_Handler>:
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
    HAL_IncTick();
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800087c:	b672      	cpsid	i
}
 800087e:	bf00      	nop
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
 8000880:	e7fe      	b.n	8000880 <Error_Handler+0x8>

08000882 <LL_AHB2_GRP1_EnableClock>:
{
 8000882:	b480      	push	{r7}
 8000884:	b085      	sub	sp, #20
 8000886:	af00      	add	r7, sp, #0
 8000888:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800088a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800088e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000890:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	4313      	orrs	r3, r2
 8000898:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800089a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800089e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	4013      	ands	r3, r2
 80008a4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008a6:	68fb      	ldr	r3, [r7, #12]
}
 80008a8:	bf00      	nop
 80008aa:	3714      	adds	r7, #20
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr

080008b4 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b085      	sub	sp, #20
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80008bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008c0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80008c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	4313      	orrs	r3, r2
 80008ca:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80008cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008d0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	4013      	ands	r3, r2
 80008d6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008d8:	68fb      	ldr	r3, [r7, #12]
}
 80008da:	bf00      	nop
 80008dc:	3714      	adds	r7, #20
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr

080008e6 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM2
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 80008e6:	b480      	push	{r7}
 80008e8:	b085      	sub	sp, #20
 80008ea:	af00      	add	r7, sp, #0
 80008ec:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 80008ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008f2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80008f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	4313      	orrs	r3, r2
 80008fc:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 80008fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000902:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	4013      	ands	r3, r2
 8000908:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800090a:	68fb      	ldr	r3, [r7, #12]
}
 800090c:	bf00      	nop
 800090e:	3714      	adds	r7, #20
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr

08000918 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */
  PWR_PVDTypeDef sConfigPVD = {0};
 800091e:	463b      	mov	r3, r7
 8000920:	2200      	movs	r2, #0
 8000922:	601a      	str	r2, [r3, #0]
 8000924:	605a      	str	r2, [r3, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000926:	2200      	movs	r2, #0
 8000928:	210f      	movs	r1, #15
 800092a:	f06f 0001 	mvn.w	r0, #1
 800092e:	f000 fb61 	bl	8000ff4 <HAL_NVIC_SetPriority>

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_0;
 8000932:	2300      	movs	r3, #0
 8000934:	603b      	str	r3, [r7, #0]
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
 8000936:	2300      	movs	r3, #0
 8000938:	607b      	str	r3, [r7, #4]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 800093a:	463b      	mov	r3, r7
 800093c:	4618      	mov	r0, r3
 800093e:	f000 febb 	bl	80016b8 <HAL_PWR_ConfigPVD>

  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 8000942:	f000 fefb 	bl	800173c <HAL_PWR_EnablePVD>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000946:	bf00      	nop
 8000948:	3708      	adds	r7, #8
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
	...

08000950 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b09c      	sub	sp, #112	; 0x70
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000958:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]
 8000960:	605a      	str	r2, [r3, #4]
 8000962:	609a      	str	r2, [r3, #8]
 8000964:	60da      	str	r2, [r3, #12]
 8000966:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000968:	f107 030c 	add.w	r3, r7, #12
 800096c:	2250      	movs	r2, #80	; 0x50
 800096e:	2100      	movs	r1, #0
 8000970:	4618      	mov	r0, r3
 8000972:	f006 fb2c 	bl	8006fce <memset>
  if(huart->Instance==LPUART1)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	4a16      	ldr	r2, [pc, #88]	; (80009d4 <HAL_UART_MspInit+0x84>)
 800097c:	4293      	cmp	r3, r2
 800097e:	d124      	bne.n	80009ca <HAL_UART_MspInit+0x7a>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000980:	2302      	movs	r3, #2
 8000982:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000984:	2300      	movs	r3, #0
 8000986:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000988:	f107 030c 	add.w	r3, r7, #12
 800098c:	4618      	mov	r0, r3
 800098e:	f002 fa67 	bl	8002e60 <HAL_RCCEx_PeriphCLKConfig>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000998:	f7ff ff6e 	bl	8000878 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800099c:	2001      	movs	r0, #1
 800099e:	f7ff ffa2 	bl	80008e6 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a2:	2001      	movs	r0, #1
 80009a4:	f7ff ff6d 	bl	8000882 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009a8:	230c      	movs	r3, #12
 80009aa:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ac:	2302      	movs	r3, #2
 80009ae:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b0:	2300      	movs	r3, #0
 80009b2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b4:	2300      	movs	r3, #0
 80009b6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80009b8:	2308      	movs	r3, #8
 80009ba:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009bc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80009c0:	4619      	mov	r1, r3
 80009c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009c6:	f000 fb3d 	bl	8001044 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80009ca:	bf00      	nop
 80009cc:	3770      	adds	r7, #112	; 0x70
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	40008000 	.word	0x40008000

080009d8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b09c      	sub	sp, #112	; 0x70
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	605a      	str	r2, [r3, #4]
 80009ea:	609a      	str	r2, [r3, #8]
 80009ec:	60da      	str	r2, [r3, #12]
 80009ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009f0:	f107 030c 	add.w	r3, r7, #12
 80009f4:	2250      	movs	r2, #80	; 0x50
 80009f6:	2100      	movs	r1, #0
 80009f8:	4618      	mov	r0, r3
 80009fa:	f006 fae8 	bl	8006fce <memset>
  if(hpcd->Instance==USB)
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	4a1f      	ldr	r2, [pc, #124]	; (8000a80 <HAL_PCD_MspInit+0xa8>)
 8000a04:	4293      	cmp	r3, r2
 8000a06:	d136      	bne.n	8000a76 <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000a08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a0c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8000a0e:	2318      	movs	r3, #24
 8000a10:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8000a12:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a16:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8000a18:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000a1c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8000a1e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000a22:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8000a24:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000a28:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000a2a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000a2e:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a30:	f107 030c 	add.w	r3, r7, #12
 8000a34:	4618      	mov	r0, r3
 8000a36:	f002 fa13 	bl	8002e60 <HAL_RCCEx_PeriphCLKConfig>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8000a40:	f7ff ff1a 	bl	8000878 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a44:	2001      	movs	r0, #1
 8000a46:	f7ff ff1c 	bl	8000882 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000a4a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000a4e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a50:	2302      	movs	r3, #2
 8000a52:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a54:	2300      	movs	r3, #0
 8000a56:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000a5c:	230a      	movs	r3, #10
 8000a5e:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a60:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000a64:	4619      	mov	r1, r3
 8000a66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a6a:	f000 faeb 	bl	8001044 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000a6e:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000a72:	f7ff ff1f 	bl	80008b4 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000a76:	bf00      	nop
 8000a78:	3770      	adds	r7, #112	; 0x70
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	40006800 	.word	0x40006800

08000a84 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b085      	sub	sp, #20
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000a8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a90:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000a92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	4313      	orrs	r3, r2
 8000a9a:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000a9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000aa0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	4013      	ands	r3, r2
 8000aa6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000aa8:	68fb      	ldr	r3, [r7, #12]
}
 8000aaa:	bf00      	nop
 8000aac:	3714      	adds	r7, #20
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
	...

08000ab8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b08c      	sub	sp, #48	; 0x30
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8000ac8:	2200      	movs	r2, #0
 8000aca:	6879      	ldr	r1, [r7, #4]
 8000acc:	2019      	movs	r0, #25
 8000ace:	f000 fa91 	bl	8000ff4 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000ad2:	2019      	movs	r0, #25
 8000ad4:	f000 faa8 	bl	8001028 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000ad8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000adc:	f7ff ffd2 	bl	8000a84 <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ae0:	f107 0208 	add.w	r2, r7, #8
 8000ae4:	f107 030c 	add.w	r3, r7, #12
 8000ae8:	4611      	mov	r1, r2
 8000aea:	4618      	mov	r0, r3
 8000aec:	f001 ff26 	bl	800293c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000af0:	f001 ff0e 	bl	8002910 <HAL_RCC_GetPCLK2Freq>
 8000af4:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000af8:	4a12      	ldr	r2, [pc, #72]	; (8000b44 <HAL_InitTick+0x8c>)
 8000afa:	fba2 2303 	umull	r2, r3, r2, r3
 8000afe:	0c9b      	lsrs	r3, r3, #18
 8000b00:	3b01      	subs	r3, #1
 8000b02:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000b04:	4b10      	ldr	r3, [pc, #64]	; (8000b48 <HAL_InitTick+0x90>)
 8000b06:	4a11      	ldr	r2, [pc, #68]	; (8000b4c <HAL_InitTick+0x94>)
 8000b08:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000b0a:	4b0f      	ldr	r3, [pc, #60]	; (8000b48 <HAL_InitTick+0x90>)
 8000b0c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b10:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000b12:	4a0d      	ldr	r2, [pc, #52]	; (8000b48 <HAL_InitTick+0x90>)
 8000b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b16:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000b18:	4b0b      	ldr	r3, [pc, #44]	; (8000b48 <HAL_InitTick+0x90>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b1e:	4b0a      	ldr	r3, [pc, #40]	; (8000b48 <HAL_InitTick+0x90>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000b24:	4808      	ldr	r0, [pc, #32]	; (8000b48 <HAL_InitTick+0x90>)
 8000b26:	f002 fc28 	bl	800337a <HAL_TIM_Base_Init>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d104      	bne.n	8000b3a <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000b30:	4805      	ldr	r0, [pc, #20]	; (8000b48 <HAL_InitTick+0x90>)
 8000b32:	f002 fc83 	bl	800343c <HAL_TIM_Base_Start_IT>
 8000b36:	4603      	mov	r3, r0
 8000b38:	e000      	b.n	8000b3c <HAL_InitTick+0x84>
  }

  /* Return function status */
  return HAL_ERROR;
 8000b3a:	2301      	movs	r3, #1
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	3730      	adds	r7, #48	; 0x30
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	431bde83 	.word	0x431bde83
 8000b48:	20000428 	.word	0x20000428
 8000b4c:	40012c00 	.word	0x40012c00

08000b50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b54:	e7fe      	b.n	8000b54 <NMI_Handler+0x4>

08000b56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b56:	b480      	push	{r7}
 8000b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b5a:	e7fe      	b.n	8000b5a <HardFault_Handler+0x4>

08000b5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b60:	e7fe      	b.n	8000b60 <MemManage_Handler+0x4>

08000b62 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b62:	b480      	push	{r7}
 8000b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b66:	e7fe      	b.n	8000b66 <BusFault_Handler+0x4>

08000b68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b6c:	e7fe      	b.n	8000b6c <UsageFault_Handler+0x4>

08000b6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b72:	bf00      	nop
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr

08000b7c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b80:	4802      	ldr	r0, [pc, #8]	; (8000b8c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000b82:	f002 fca9 	bl	80034d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	20000428 	.word	0x20000428

08000b90 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b086      	sub	sp, #24
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	60f8      	str	r0, [r7, #12]
 8000b98:	60b9      	str	r1, [r7, #8]
 8000b9a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	617b      	str	r3, [r7, #20]
 8000ba0:	e00a      	b.n	8000bb8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000ba2:	f3af 8000 	nop.w
 8000ba6:	4601      	mov	r1, r0
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	1c5a      	adds	r2, r3, #1
 8000bac:	60ba      	str	r2, [r7, #8]
 8000bae:	b2ca      	uxtb	r2, r1
 8000bb0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	3301      	adds	r3, #1
 8000bb6:	617b      	str	r3, [r7, #20]
 8000bb8:	697a      	ldr	r2, [r7, #20]
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	dbf0      	blt.n	8000ba2 <_read+0x12>
	}

return len;
 8000bc0:	687b      	ldr	r3, [r7, #4]
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	3718      	adds	r7, #24
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}

08000bca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	b086      	sub	sp, #24
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	60f8      	str	r0, [r7, #12]
 8000bd2:	60b9      	str	r1, [r7, #8]
 8000bd4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	617b      	str	r3, [r7, #20]
 8000bda:	e009      	b.n	8000bf0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	1c5a      	adds	r2, r3, #1
 8000be0:	60ba      	str	r2, [r7, #8]
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	4618      	mov	r0, r3
 8000be6:	f7ff fce1 	bl	80005ac <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	3301      	adds	r3, #1
 8000bee:	617b      	str	r3, [r7, #20]
 8000bf0:	697a      	ldr	r2, [r7, #20]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	dbf1      	blt.n	8000bdc <_write+0x12>
	}
	return len;
 8000bf8:	687b      	ldr	r3, [r7, #4]
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3718      	adds	r7, #24
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}

08000c02 <_close>:

int _close(int file)
{
 8000c02:	b480      	push	{r7}
 8000c04:	b083      	sub	sp, #12
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	6078      	str	r0, [r7, #4]
	return -1;
 8000c0a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	370c      	adds	r7, #12
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr

08000c1a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	b083      	sub	sp, #12
 8000c1e:	af00      	add	r7, sp, #0
 8000c20:	6078      	str	r0, [r7, #4]
 8000c22:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c2a:	605a      	str	r2, [r3, #4]
	return 0;
 8000c2c:	2300      	movs	r3, #0
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	370c      	adds	r7, #12
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr

08000c3a <_isatty>:

int _isatty(int file)
{
 8000c3a:	b480      	push	{r7}
 8000c3c:	b083      	sub	sp, #12
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	6078      	str	r0, [r7, #4]
	return 1;
 8000c42:	2301      	movs	r3, #1
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	370c      	adds	r7, #12
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr

08000c50 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b085      	sub	sp, #20
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	60f8      	str	r0, [r7, #12]
 8000c58:	60b9      	str	r1, [r7, #8]
 8000c5a:	607a      	str	r2, [r7, #4]
	return 0;
 8000c5c:	2300      	movs	r3, #0
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3714      	adds	r7, #20
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
	...

08000c6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b086      	sub	sp, #24
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c74:	4a14      	ldr	r2, [pc, #80]	; (8000cc8 <_sbrk+0x5c>)
 8000c76:	4b15      	ldr	r3, [pc, #84]	; (8000ccc <_sbrk+0x60>)
 8000c78:	1ad3      	subs	r3, r2, r3
 8000c7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c80:	4b13      	ldr	r3, [pc, #76]	; (8000cd0 <_sbrk+0x64>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d102      	bne.n	8000c8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c88:	4b11      	ldr	r3, [pc, #68]	; (8000cd0 <_sbrk+0x64>)
 8000c8a:	4a12      	ldr	r2, [pc, #72]	; (8000cd4 <_sbrk+0x68>)
 8000c8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c8e:	4b10      	ldr	r3, [pc, #64]	; (8000cd0 <_sbrk+0x64>)
 8000c90:	681a      	ldr	r2, [r3, #0]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	4413      	add	r3, r2
 8000c96:	693a      	ldr	r2, [r7, #16]
 8000c98:	429a      	cmp	r2, r3
 8000c9a:	d207      	bcs.n	8000cac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c9c:	f006 f866 	bl	8006d6c <__errno>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	220c      	movs	r2, #12
 8000ca4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8000caa:	e009      	b.n	8000cc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cac:	4b08      	ldr	r3, [pc, #32]	; (8000cd0 <_sbrk+0x64>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cb2:	4b07      	ldr	r3, [pc, #28]	; (8000cd0 <_sbrk+0x64>)
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	4413      	add	r3, r2
 8000cba:	4a05      	ldr	r2, [pc, #20]	; (8000cd0 <_sbrk+0x64>)
 8000cbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cbe:	68fb      	ldr	r3, [r7, #12]
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	3718      	adds	r7, #24
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	20030000 	.word	0x20030000
 8000ccc:	00000400 	.word	0x00000400
 8000cd0:	20000474 	.word	0x20000474
 8000cd4:	20001e98 	.word	0x20001e98

08000cd8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8000cdc:	4b24      	ldr	r3, [pc, #144]	; (8000d70 <SystemInit+0x98>)
 8000cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ce2:	4a23      	ldr	r2, [pc, #140]	; (8000d70 <SystemInit+0x98>)
 8000ce4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ce8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000cec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000cf6:	f043 0301 	orr.w	r3, r3, #1
 8000cfa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000cfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d00:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000d04:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000d06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d0a:	681a      	ldr	r2, [r3, #0]
 8000d0c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000d10:	4b18      	ldr	r3, [pc, #96]	; (8000d74 <SystemInit+0x9c>)
 8000d12:	4013      	ands	r3, r2
 8000d14:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000d16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000d1e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d22:	f023 0305 	bic.w	r3, r3, #5
 8000d26:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000d2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000d32:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d36:	f023 0301 	bic.w	r3, r3, #1
 8000d3a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000d3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d42:	4a0d      	ldr	r2, [pc, #52]	; (8000d78 <SystemInit+0xa0>)
 8000d44:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000d46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d4a:	4a0b      	ldr	r2, [pc, #44]	; (8000d78 <SystemInit+0xa0>)
 8000d4c:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d5c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000d5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d62:	2200      	movs	r2, #0
 8000d64:	619a      	str	r2, [r3, #24]
}
 8000d66:	bf00      	nop
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr
 8000d70:	e000ed00 	.word	0xe000ed00
 8000d74:	faf6fefb 	.word	0xfaf6fefb
 8000d78:	22041000 	.word	0x22041000

08000d7c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000d7c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d7e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d80:	3304      	adds	r3, #4

08000d82 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d82:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d84:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000d86:	d3f9      	bcc.n	8000d7c <CopyDataInit>
  bx lr
 8000d88:	4770      	bx	lr

08000d8a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000d8a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000d8c:	3004      	adds	r0, #4

08000d8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000d8e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000d90:	d3fb      	bcc.n	8000d8a <FillZerobss>
  bx lr
 8000d92:	4770      	bx	lr

08000d94 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d94:	480c      	ldr	r0, [pc, #48]	; (8000dc8 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8000d96:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d98:	f7ff ff9e 	bl	8000cd8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000d9c:	480b      	ldr	r0, [pc, #44]	; (8000dcc <LoopForever+0x8>)
 8000d9e:	490c      	ldr	r1, [pc, #48]	; (8000dd0 <LoopForever+0xc>)
 8000da0:	4a0c      	ldr	r2, [pc, #48]	; (8000dd4 <LoopForever+0x10>)
 8000da2:	2300      	movs	r3, #0
 8000da4:	f7ff ffed 	bl	8000d82 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000da8:	480b      	ldr	r0, [pc, #44]	; (8000dd8 <LoopForever+0x14>)
 8000daa:	490c      	ldr	r1, [pc, #48]	; (8000ddc <LoopForever+0x18>)
 8000dac:	2300      	movs	r3, #0
 8000dae:	f7ff ffee 	bl	8000d8e <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000db2:	480b      	ldr	r0, [pc, #44]	; (8000de0 <LoopForever+0x1c>)
 8000db4:	490b      	ldr	r1, [pc, #44]	; (8000de4 <LoopForever+0x20>)
 8000db6:	2300      	movs	r3, #0
 8000db8:	f7ff ffe9 	bl	8000d8e <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000dbc:	f006 f8d2 	bl	8006f64 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8000dc0:	f7ff fb90 	bl	80004e4 <main>

08000dc4 <LoopForever>:

LoopForever:
  b LoopForever
 8000dc4:	e7fe      	b.n	8000dc4 <LoopForever>
 8000dc6:	0000      	.short	0x0000
  ldr   r0, =_estack
 8000dc8:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000dcc:	20000004 	.word	0x20000004
 8000dd0:	20000078 	.word	0x20000078
 8000dd4:	08007aac 	.word	0x08007aac
  INIT_BSS _sbss, _ebss
 8000dd8:	20000078 	.word	0x20000078
 8000ddc:	20001e98 	.word	0x20001e98
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000de0:	20030000 	.word	0x20030000
 8000de4:	20030000 	.word	0x20030000

08000de8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000de8:	e7fe      	b.n	8000de8 <ADC1_IRQHandler>
	...

08000dec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000df2:	2300      	movs	r3, #0
 8000df4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000df6:	4b0c      	ldr	r3, [pc, #48]	; (8000e28 <HAL_Init+0x3c>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4a0b      	ldr	r2, [pc, #44]	; (8000e28 <HAL_Init+0x3c>)
 8000dfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e00:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e02:	2003      	movs	r0, #3
 8000e04:	f000 f8eb 	bl	8000fde <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e08:	200f      	movs	r0, #15
 8000e0a:	f7ff fe55 	bl	8000ab8 <HAL_InitTick>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d002      	beq.n	8000e1a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000e14:	2301      	movs	r3, #1
 8000e16:	71fb      	strb	r3, [r7, #7]
 8000e18:	e001      	b.n	8000e1e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e1a:	f7ff fd7d 	bl	8000918 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e1e:	79fb      	ldrb	r3, [r7, #7]
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	3708      	adds	r7, #8
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	58004000 	.word	0x58004000

08000e2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e30:	4b06      	ldr	r3, [pc, #24]	; (8000e4c <HAL_IncTick+0x20>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	461a      	mov	r2, r3
 8000e36:	4b06      	ldr	r3, [pc, #24]	; (8000e50 <HAL_IncTick+0x24>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4413      	add	r3, r2
 8000e3c:	4a04      	ldr	r2, [pc, #16]	; (8000e50 <HAL_IncTick+0x24>)
 8000e3e:	6013      	str	r3, [r2, #0]
}
 8000e40:	bf00      	nop
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	2000000c 	.word	0x2000000c
 8000e50:	20000478 	.word	0x20000478

08000e54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  return uwTick;
 8000e58:	4b03      	ldr	r3, [pc, #12]	; (8000e68 <HAL_GetTick+0x14>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	20000478 	.word	0x20000478

08000e6c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8000e70:	4b03      	ldr	r3, [pc, #12]	; (8000e80 <HAL_GetTickPrio+0x14>)
 8000e72:	681b      	ldr	r3, [r3, #0]
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	20000008 	.word	0x20000008

08000e84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b085      	sub	sp, #20
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	f003 0307 	and.w	r3, r3, #7
 8000e92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e94:	4b0c      	ldr	r3, [pc, #48]	; (8000ec8 <__NVIC_SetPriorityGrouping+0x44>)
 8000e96:	68db      	ldr	r3, [r3, #12]
 8000e98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e9a:	68ba      	ldr	r2, [r7, #8]
 8000e9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000eac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000eb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eb6:	4a04      	ldr	r2, [pc, #16]	; (8000ec8 <__NVIC_SetPriorityGrouping+0x44>)
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	60d3      	str	r3, [r2, #12]
}
 8000ebc:	bf00      	nop
 8000ebe:	3714      	adds	r7, #20
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr
 8000ec8:	e000ed00 	.word	0xe000ed00

08000ecc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ed0:	4b04      	ldr	r3, [pc, #16]	; (8000ee4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ed2:	68db      	ldr	r3, [r3, #12]
 8000ed4:	0a1b      	lsrs	r3, r3, #8
 8000ed6:	f003 0307 	and.w	r3, r3, #7
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	e000ed00 	.word	0xe000ed00

08000ee8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	db0b      	blt.n	8000f12 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000efa:	79fb      	ldrb	r3, [r7, #7]
 8000efc:	f003 021f 	and.w	r2, r3, #31
 8000f00:	4907      	ldr	r1, [pc, #28]	; (8000f20 <__NVIC_EnableIRQ+0x38>)
 8000f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f06:	095b      	lsrs	r3, r3, #5
 8000f08:	2001      	movs	r0, #1
 8000f0a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f12:	bf00      	nop
 8000f14:	370c      	adds	r7, #12
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	e000e100 	.word	0xe000e100

08000f24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	6039      	str	r1, [r7, #0]
 8000f2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	db0a      	blt.n	8000f4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	b2da      	uxtb	r2, r3
 8000f3c:	490c      	ldr	r1, [pc, #48]	; (8000f70 <__NVIC_SetPriority+0x4c>)
 8000f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f42:	0112      	lsls	r2, r2, #4
 8000f44:	b2d2      	uxtb	r2, r2
 8000f46:	440b      	add	r3, r1
 8000f48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f4c:	e00a      	b.n	8000f64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	b2da      	uxtb	r2, r3
 8000f52:	4908      	ldr	r1, [pc, #32]	; (8000f74 <__NVIC_SetPriority+0x50>)
 8000f54:	79fb      	ldrb	r3, [r7, #7]
 8000f56:	f003 030f 	and.w	r3, r3, #15
 8000f5a:	3b04      	subs	r3, #4
 8000f5c:	0112      	lsls	r2, r2, #4
 8000f5e:	b2d2      	uxtb	r2, r2
 8000f60:	440b      	add	r3, r1
 8000f62:	761a      	strb	r2, [r3, #24]
}
 8000f64:	bf00      	nop
 8000f66:	370c      	adds	r7, #12
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr
 8000f70:	e000e100 	.word	0xe000e100
 8000f74:	e000ed00 	.word	0xe000ed00

08000f78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b089      	sub	sp, #36	; 0x24
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	60f8      	str	r0, [r7, #12]
 8000f80:	60b9      	str	r1, [r7, #8]
 8000f82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	f003 0307 	and.w	r3, r3, #7
 8000f8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f8c:	69fb      	ldr	r3, [r7, #28]
 8000f8e:	f1c3 0307 	rsb	r3, r3, #7
 8000f92:	2b04      	cmp	r3, #4
 8000f94:	bf28      	it	cs
 8000f96:	2304      	movcs	r3, #4
 8000f98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	3304      	adds	r3, #4
 8000f9e:	2b06      	cmp	r3, #6
 8000fa0:	d902      	bls.n	8000fa8 <NVIC_EncodePriority+0x30>
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	3b03      	subs	r3, #3
 8000fa6:	e000      	b.n	8000faa <NVIC_EncodePriority+0x32>
 8000fa8:	2300      	movs	r3, #0
 8000faa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fac:	f04f 32ff 	mov.w	r2, #4294967295
 8000fb0:	69bb      	ldr	r3, [r7, #24]
 8000fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb6:	43da      	mvns	r2, r3
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	401a      	ands	r2, r3
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fc0:	f04f 31ff 	mov.w	r1, #4294967295
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fca:	43d9      	mvns	r1, r3
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd0:	4313      	orrs	r3, r2
         );
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3724      	adds	r7, #36	; 0x24
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr

08000fde <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b082      	sub	sp, #8
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fe6:	6878      	ldr	r0, [r7, #4]
 8000fe8:	f7ff ff4c 	bl	8000e84 <__NVIC_SetPriorityGrouping>
}
 8000fec:	bf00      	nop
 8000fee:	3708      	adds	r7, #8
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b086      	sub	sp, #24
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	60b9      	str	r1, [r7, #8]
 8000ffe:	607a      	str	r2, [r7, #4]
 8001000:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001002:	f7ff ff63 	bl	8000ecc <__NVIC_GetPriorityGrouping>
 8001006:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001008:	687a      	ldr	r2, [r7, #4]
 800100a:	68b9      	ldr	r1, [r7, #8]
 800100c:	6978      	ldr	r0, [r7, #20]
 800100e:	f7ff ffb3 	bl	8000f78 <NVIC_EncodePriority>
 8001012:	4602      	mov	r2, r0
 8001014:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001018:	4611      	mov	r1, r2
 800101a:	4618      	mov	r0, r3
 800101c:	f7ff ff82 	bl	8000f24 <__NVIC_SetPriority>
}
 8001020:	bf00      	nop
 8001022:	3718      	adds	r7, #24
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}

08001028 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	4603      	mov	r3, r0
 8001030:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001036:	4618      	mov	r0, r3
 8001038:	f7ff ff56 	bl	8000ee8 <__NVIC_EnableIRQ>
}
 800103c:	bf00      	nop
 800103e:	3708      	adds	r7, #8
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}

08001044 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001044:	b480      	push	{r7}
 8001046:	b087      	sub	sp, #28
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800104e:	2300      	movs	r3, #0
 8001050:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001052:	e14c      	b.n	80012ee <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	2101      	movs	r1, #1
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	fa01 f303 	lsl.w	r3, r1, r3
 8001060:	4013      	ands	r3, r2
 8001062:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	2b00      	cmp	r3, #0
 8001068:	f000 813e 	beq.w	80012e8 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f003 0303 	and.w	r3, r3, #3
 8001074:	2b01      	cmp	r3, #1
 8001076:	d005      	beq.n	8001084 <HAL_GPIO_Init+0x40>
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f003 0303 	and.w	r3, r3, #3
 8001080:	2b02      	cmp	r3, #2
 8001082:	d130      	bne.n	80010e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	689b      	ldr	r3, [r3, #8]
 8001088:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	005b      	lsls	r3, r3, #1
 800108e:	2203      	movs	r2, #3
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	43db      	mvns	r3, r3
 8001096:	693a      	ldr	r2, [r7, #16]
 8001098:	4013      	ands	r3, r2
 800109a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	68da      	ldr	r2, [r3, #12]
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	fa02 f303 	lsl.w	r3, r2, r3
 80010a8:	693a      	ldr	r2, [r7, #16]
 80010aa:	4313      	orrs	r3, r2
 80010ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	693a      	ldr	r2, [r7, #16]
 80010b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80010ba:	2201      	movs	r2, #1
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	fa02 f303 	lsl.w	r3, r2, r3
 80010c2:	43db      	mvns	r3, r3
 80010c4:	693a      	ldr	r2, [r7, #16]
 80010c6:	4013      	ands	r3, r2
 80010c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	091b      	lsrs	r3, r3, #4
 80010d0:	f003 0201 	and.w	r2, r3, #1
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	fa02 f303 	lsl.w	r3, r2, r3
 80010da:	693a      	ldr	r2, [r7, #16]
 80010dc:	4313      	orrs	r3, r2
 80010de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	693a      	ldr	r2, [r7, #16]
 80010e4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	f003 0303 	and.w	r3, r3, #3
 80010ee:	2b03      	cmp	r3, #3
 80010f0:	d017      	beq.n	8001122 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	68db      	ldr	r3, [r3, #12]
 80010f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	005b      	lsls	r3, r3, #1
 80010fc:	2203      	movs	r2, #3
 80010fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001102:	43db      	mvns	r3, r3
 8001104:	693a      	ldr	r2, [r7, #16]
 8001106:	4013      	ands	r3, r2
 8001108:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	689a      	ldr	r2, [r3, #8]
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	fa02 f303 	lsl.w	r3, r2, r3
 8001116:	693a      	ldr	r2, [r7, #16]
 8001118:	4313      	orrs	r3, r2
 800111a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	693a      	ldr	r2, [r7, #16]
 8001120:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	f003 0303 	and.w	r3, r3, #3
 800112a:	2b02      	cmp	r3, #2
 800112c:	d123      	bne.n	8001176 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	08da      	lsrs	r2, r3, #3
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	3208      	adds	r2, #8
 8001136:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800113a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	f003 0307 	and.w	r3, r3, #7
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	220f      	movs	r2, #15
 8001146:	fa02 f303 	lsl.w	r3, r2, r3
 800114a:	43db      	mvns	r3, r3
 800114c:	693a      	ldr	r2, [r7, #16]
 800114e:	4013      	ands	r3, r2
 8001150:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	691a      	ldr	r2, [r3, #16]
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	f003 0307 	and.w	r3, r3, #7
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	fa02 f303 	lsl.w	r3, r2, r3
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	4313      	orrs	r3, r2
 8001166:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	08da      	lsrs	r2, r3, #3
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	3208      	adds	r2, #8
 8001170:	6939      	ldr	r1, [r7, #16]
 8001172:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	005b      	lsls	r3, r3, #1
 8001180:	2203      	movs	r2, #3
 8001182:	fa02 f303 	lsl.w	r3, r2, r3
 8001186:	43db      	mvns	r3, r3
 8001188:	693a      	ldr	r2, [r7, #16]
 800118a:	4013      	ands	r3, r2
 800118c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	f003 0203 	and.w	r2, r3, #3
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	005b      	lsls	r3, r3, #1
 800119a:	fa02 f303 	lsl.w	r3, r2, r3
 800119e:	693a      	ldr	r2, [r7, #16]
 80011a0:	4313      	orrs	r3, r2
 80011a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	693a      	ldr	r2, [r7, #16]
 80011a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	f000 8098 	beq.w	80012e8 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80011b8:	4a54      	ldr	r2, [pc, #336]	; (800130c <HAL_GPIO_Init+0x2c8>)
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	089b      	lsrs	r3, r3, #2
 80011be:	3302      	adds	r3, #2
 80011c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	f003 0303 	and.w	r3, r3, #3
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	220f      	movs	r2, #15
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	43db      	mvns	r3, r3
 80011d6:	693a      	ldr	r2, [r7, #16]
 80011d8:	4013      	ands	r3, r2
 80011da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80011e2:	d019      	beq.n	8001218 <HAL_GPIO_Init+0x1d4>
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	4a4a      	ldr	r2, [pc, #296]	; (8001310 <HAL_GPIO_Init+0x2cc>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d013      	beq.n	8001214 <HAL_GPIO_Init+0x1d0>
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	4a49      	ldr	r2, [pc, #292]	; (8001314 <HAL_GPIO_Init+0x2d0>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d00d      	beq.n	8001210 <HAL_GPIO_Init+0x1cc>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	4a48      	ldr	r2, [pc, #288]	; (8001318 <HAL_GPIO_Init+0x2d4>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d007      	beq.n	800120c <HAL_GPIO_Init+0x1c8>
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	4a47      	ldr	r2, [pc, #284]	; (800131c <HAL_GPIO_Init+0x2d8>)
 8001200:	4293      	cmp	r3, r2
 8001202:	d101      	bne.n	8001208 <HAL_GPIO_Init+0x1c4>
 8001204:	2304      	movs	r3, #4
 8001206:	e008      	b.n	800121a <HAL_GPIO_Init+0x1d6>
 8001208:	2307      	movs	r3, #7
 800120a:	e006      	b.n	800121a <HAL_GPIO_Init+0x1d6>
 800120c:	2303      	movs	r3, #3
 800120e:	e004      	b.n	800121a <HAL_GPIO_Init+0x1d6>
 8001210:	2302      	movs	r3, #2
 8001212:	e002      	b.n	800121a <HAL_GPIO_Init+0x1d6>
 8001214:	2301      	movs	r3, #1
 8001216:	e000      	b.n	800121a <HAL_GPIO_Init+0x1d6>
 8001218:	2300      	movs	r3, #0
 800121a:	697a      	ldr	r2, [r7, #20]
 800121c:	f002 0203 	and.w	r2, r2, #3
 8001220:	0092      	lsls	r2, r2, #2
 8001222:	4093      	lsls	r3, r2
 8001224:	693a      	ldr	r2, [r7, #16]
 8001226:	4313      	orrs	r3, r2
 8001228:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800122a:	4938      	ldr	r1, [pc, #224]	; (800130c <HAL_GPIO_Init+0x2c8>)
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	089b      	lsrs	r3, r3, #2
 8001230:	3302      	adds	r3, #2
 8001232:	693a      	ldr	r2, [r7, #16]
 8001234:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001238:	4b39      	ldr	r3, [pc, #228]	; (8001320 <HAL_GPIO_Init+0x2dc>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	43db      	mvns	r3, r3
 8001242:	693a      	ldr	r2, [r7, #16]
 8001244:	4013      	ands	r3, r2
 8001246:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001250:	2b00      	cmp	r3, #0
 8001252:	d003      	beq.n	800125c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001254:	693a      	ldr	r2, [r7, #16]
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	4313      	orrs	r3, r2
 800125a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800125c:	4a30      	ldr	r2, [pc, #192]	; (8001320 <HAL_GPIO_Init+0x2dc>)
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001262:	4b2f      	ldr	r3, [pc, #188]	; (8001320 <HAL_GPIO_Init+0x2dc>)
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	43db      	mvns	r3, r3
 800126c:	693a      	ldr	r2, [r7, #16]
 800126e:	4013      	ands	r3, r2
 8001270:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800127a:	2b00      	cmp	r3, #0
 800127c:	d003      	beq.n	8001286 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800127e:	693a      	ldr	r2, [r7, #16]
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	4313      	orrs	r3, r2
 8001284:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001286:	4a26      	ldr	r2, [pc, #152]	; (8001320 <HAL_GPIO_Init+0x2dc>)
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800128c:	4b24      	ldr	r3, [pc, #144]	; (8001320 <HAL_GPIO_Init+0x2dc>)
 800128e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001292:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	43db      	mvns	r3, r3
 8001298:	693a      	ldr	r2, [r7, #16]
 800129a:	4013      	ands	r3, r2
 800129c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d003      	beq.n	80012b2 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80012aa:	693a      	ldr	r2, [r7, #16]
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	4313      	orrs	r3, r2
 80012b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80012b2:	4a1b      	ldr	r2, [pc, #108]	; (8001320 <HAL_GPIO_Init+0x2dc>)
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80012ba:	4b19      	ldr	r3, [pc, #100]	; (8001320 <HAL_GPIO_Init+0x2dc>)
 80012bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80012c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	43db      	mvns	r3, r3
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	4013      	ands	r3, r2
 80012ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d003      	beq.n	80012e0 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80012d8:	693a      	ldr	r2, [r7, #16]
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	4313      	orrs	r3, r2
 80012de:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80012e0:	4a0f      	ldr	r2, [pc, #60]	; (8001320 <HAL_GPIO_Init+0x2dc>)
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	3301      	adds	r3, #1
 80012ec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	fa22 f303 	lsr.w	r3, r2, r3
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	f47f aeab 	bne.w	8001054 <HAL_GPIO_Init+0x10>
  }
}
 80012fe:	bf00      	nop
 8001300:	bf00      	nop
 8001302:	371c      	adds	r7, #28
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr
 800130c:	40010000 	.word	0x40010000
 8001310:	48000400 	.word	0x48000400
 8001314:	48000800 	.word	0x48000800
 8001318:	48000c00 	.word	0x48000c00
 800131c:	48001000 	.word	0x48001000
 8001320:	58000800 	.word	0x58000800

08001324 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
 800132c:	460b      	mov	r3, r1
 800132e:	807b      	strh	r3, [r7, #2]
 8001330:	4613      	mov	r3, r2
 8001332:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001334:	787b      	ldrb	r3, [r7, #1]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d003      	beq.n	8001342 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800133a:	887a      	ldrh	r2, [r7, #2]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001340:	e002      	b.n	8001348 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001342:	887a      	ldrh	r2, [r7, #2]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001348:	bf00      	nop
 800134a:	370c      	adds	r7, #12
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr

08001354 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001354:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001356:	b08b      	sub	sp, #44	; 0x2c
 8001358:	af06      	add	r7, sp, #24
 800135a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d101      	bne.n	8001366 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	e0dd      	b.n	8001522 <HAL_PCD_Init+0x1ce>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	f893 32ad 	ldrb.w	r3, [r3, #685]	; 0x2ad
 800136c:	b2db      	uxtb	r3, r3
 800136e:	2b00      	cmp	r3, #0
 8001370:	d106      	bne.n	8001380 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2200      	movs	r2, #0
 8001376:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f7ff fb2c 	bl	80009d8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2203      	movs	r2, #3
 8001384:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad

  /* DMA Not supported for FS instance, Force to Zero */
  hpcd->Init.dma_enable = 0U;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2200      	movs	r2, #0
 800138c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4618      	mov	r0, r3
 8001394:	f003 f84e 	bl	8004434 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001398:	2300      	movs	r3, #0
 800139a:	73fb      	strb	r3, [r7, #15]
 800139c:	e04d      	b.n	800143a <HAL_PCD_Init+0xe6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800139e:	7bfb      	ldrb	r3, [r7, #15]
 80013a0:	6879      	ldr	r1, [r7, #4]
 80013a2:	1c5a      	adds	r2, r3, #1
 80013a4:	4613      	mov	r3, r2
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	4413      	add	r3, r2
 80013aa:	00db      	lsls	r3, r3, #3
 80013ac:	440b      	add	r3, r1
 80013ae:	3305      	adds	r3, #5
 80013b0:	2201      	movs	r2, #1
 80013b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80013b4:	7bfb      	ldrb	r3, [r7, #15]
 80013b6:	6879      	ldr	r1, [r7, #4]
 80013b8:	1c5a      	adds	r2, r3, #1
 80013ba:	4613      	mov	r3, r2
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	4413      	add	r3, r2
 80013c0:	00db      	lsls	r3, r3, #3
 80013c2:	440b      	add	r3, r1
 80013c4:	3304      	adds	r3, #4
 80013c6:	7bfa      	ldrb	r2, [r7, #15]
 80013c8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80013ca:	7bfa      	ldrb	r2, [r7, #15]
 80013cc:	7bfb      	ldrb	r3, [r7, #15]
 80013ce:	b298      	uxth	r0, r3
 80013d0:	6879      	ldr	r1, [r7, #4]
 80013d2:	4613      	mov	r3, r2
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	4413      	add	r3, r2
 80013d8:	00db      	lsls	r3, r3, #3
 80013da:	440b      	add	r3, r1
 80013dc:	333a      	adds	r3, #58	; 0x3a
 80013de:	4602      	mov	r2, r0
 80013e0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80013e2:	7bfb      	ldrb	r3, [r7, #15]
 80013e4:	6879      	ldr	r1, [r7, #4]
 80013e6:	1c5a      	adds	r2, r3, #1
 80013e8:	4613      	mov	r3, r2
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	4413      	add	r3, r2
 80013ee:	00db      	lsls	r3, r3, #3
 80013f0:	440b      	add	r3, r1
 80013f2:	3307      	adds	r3, #7
 80013f4:	2200      	movs	r2, #0
 80013f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80013f8:	7bfa      	ldrb	r2, [r7, #15]
 80013fa:	6879      	ldr	r1, [r7, #4]
 80013fc:	4613      	mov	r3, r2
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	4413      	add	r3, r2
 8001402:	00db      	lsls	r3, r3, #3
 8001404:	440b      	add	r3, r1
 8001406:	333c      	adds	r3, #60	; 0x3c
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800140c:	7bfa      	ldrb	r2, [r7, #15]
 800140e:	6879      	ldr	r1, [r7, #4]
 8001410:	4613      	mov	r3, r2
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	4413      	add	r3, r2
 8001416:	00db      	lsls	r3, r3, #3
 8001418:	440b      	add	r3, r1
 800141a:	3340      	adds	r3, #64	; 0x40
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001420:	7bfa      	ldrb	r2, [r7, #15]
 8001422:	6879      	ldr	r1, [r7, #4]
 8001424:	4613      	mov	r3, r2
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	4413      	add	r3, r2
 800142a:	00db      	lsls	r3, r3, #3
 800142c:	440b      	add	r3, r1
 800142e:	3344      	adds	r3, #68	; 0x44
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001434:	7bfb      	ldrb	r3, [r7, #15]
 8001436:	3301      	adds	r3, #1
 8001438:	73fb      	strb	r3, [r7, #15]
 800143a:	7bfa      	ldrb	r2, [r7, #15]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	429a      	cmp	r2, r3
 8001442:	d3ac      	bcc.n	800139e <HAL_PCD_Init+0x4a>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001444:	2300      	movs	r3, #0
 8001446:	73fb      	strb	r3, [r7, #15]
 8001448:	e044      	b.n	80014d4 <HAL_PCD_Init+0x180>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800144a:	7bfa      	ldrb	r2, [r7, #15]
 800144c:	6879      	ldr	r1, [r7, #4]
 800144e:	4613      	mov	r3, r2
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	4413      	add	r3, r2
 8001454:	00db      	lsls	r3, r3, #3
 8001456:	440b      	add	r3, r1
 8001458:	f203 136d 	addw	r3, r3, #365	; 0x16d
 800145c:	2200      	movs	r2, #0
 800145e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001460:	7bfa      	ldrb	r2, [r7, #15]
 8001462:	6879      	ldr	r1, [r7, #4]
 8001464:	4613      	mov	r3, r2
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	4413      	add	r3, r2
 800146a:	00db      	lsls	r3, r3, #3
 800146c:	440b      	add	r3, r1
 800146e:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8001472:	7bfa      	ldrb	r2, [r7, #15]
 8001474:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001476:	7bfa      	ldrb	r2, [r7, #15]
 8001478:	6879      	ldr	r1, [r7, #4]
 800147a:	4613      	mov	r3, r2
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	4413      	add	r3, r2
 8001480:	00db      	lsls	r3, r3, #3
 8001482:	440b      	add	r3, r1
 8001484:	f203 136f 	addw	r3, r3, #367	; 0x16f
 8001488:	2200      	movs	r2, #0
 800148a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800148c:	7bfa      	ldrb	r2, [r7, #15]
 800148e:	6879      	ldr	r1, [r7, #4]
 8001490:	4613      	mov	r3, r2
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	4413      	add	r3, r2
 8001496:	00db      	lsls	r3, r3, #3
 8001498:	440b      	add	r3, r1
 800149a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800149e:	2200      	movs	r2, #0
 80014a0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80014a2:	7bfa      	ldrb	r2, [r7, #15]
 80014a4:	6879      	ldr	r1, [r7, #4]
 80014a6:	4613      	mov	r3, r2
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	4413      	add	r3, r2
 80014ac:	00db      	lsls	r3, r3, #3
 80014ae:	440b      	add	r3, r1
 80014b0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80014b8:	7bfa      	ldrb	r2, [r7, #15]
 80014ba:	6879      	ldr	r1, [r7, #4]
 80014bc:	4613      	mov	r3, r2
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	4413      	add	r3, r2
 80014c2:	00db      	lsls	r3, r3, #3
 80014c4:	440b      	add	r3, r1
 80014c6:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80014ca:	2200      	movs	r2, #0
 80014cc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014ce:	7bfb      	ldrb	r3, [r7, #15]
 80014d0:	3301      	adds	r3, #1
 80014d2:	73fb      	strb	r3, [r7, #15]
 80014d4:	7bfa      	ldrb	r2, [r7, #15]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	429a      	cmp	r2, r3
 80014dc:	d3b5      	bcc.n	800144a <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	603b      	str	r3, [r7, #0]
 80014e4:	687e      	ldr	r6, [r7, #4]
 80014e6:	466d      	mov	r5, sp
 80014e8:	f106 0410 	add.w	r4, r6, #16
 80014ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014f0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80014f4:	e885 0003 	stmia.w	r5, {r0, r1}
 80014f8:	1d33      	adds	r3, r6, #4
 80014fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014fc:	6838      	ldr	r0, [r7, #0]
 80014fe:	f002 ffb4 	bl	800446a <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2200      	movs	r2, #0
 8001506:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  hpcd->State = HAL_PCD_STATE_READY;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2201      	movs	r2, #1
 800150e:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	69db      	ldr	r3, [r3, #28]
 8001516:	2b01      	cmp	r3, #1
 8001518:	d102      	bne.n	8001520 <HAL_PCD_Init+0x1cc>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f000 f805 	bl	800152a <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001520:	2300      	movs	r3, #0
}
 8001522:	4618      	mov	r0, r3
 8001524:	3714      	adds	r7, #20
 8001526:	46bd      	mov	sp, r7
 8001528:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800152a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800152a:	b480      	push	{r7}
 800152c:	b085      	sub	sp, #20
 800152e:	af00      	add	r7, sp, #0
 8001530:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2201      	movs	r2, #1
 800153c:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
  hpcd->LPM_State = LPM_L0;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2200      	movs	r2, #0
 8001544:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800154e:	b29b      	uxth	r3, r3
 8001550:	f043 0301 	orr.w	r3, r3, #1
 8001554:	b29a      	uxth	r2, r3
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001562:	b29b      	uxth	r3, r3
 8001564:	f043 0302 	orr.w	r3, r3, #2
 8001568:	b29a      	uxth	r2, r3
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8001570:	2300      	movs	r3, #0
}
 8001572:	4618      	mov	r0, r3
 8001574:	3714      	adds	r7, #20
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
	...

08001580 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001588:	4b06      	ldr	r3, [pc, #24]	; (80015a4 <LL_EXTI_EnableIT_0_31+0x24>)
 800158a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800158e:	4905      	ldr	r1, [pc, #20]	; (80015a4 <LL_EXTI_EnableIT_0_31+0x24>)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	4313      	orrs	r3, r2
 8001594:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8001598:	bf00      	nop
 800159a:	370c      	adds	r7, #12
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr
 80015a4:	58000800 	.word	0x58000800

080015a8 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80015b0:	4b07      	ldr	r3, [pc, #28]	; (80015d0 <LL_EXTI_DisableIT_0_31+0x28>)
 80015b2:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	43db      	mvns	r3, r3
 80015ba:	4905      	ldr	r1, [pc, #20]	; (80015d0 <LL_EXTI_DisableIT_0_31+0x28>)
 80015bc:	4013      	ands	r3, r2
 80015be:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80015c2:	bf00      	nop
 80015c4:	370c      	adds	r7, #12
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	58000800 	.word	0x58000800

080015d4 <LL_C2_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->C2IMR1, ExtiLine);
 80015dc:	4b07      	ldr	r3, [pc, #28]	; (80015fc <LL_C2_EXTI_DisableIT_0_31+0x28>)
 80015de:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	43db      	mvns	r3, r3
 80015e6:	4905      	ldr	r1, [pc, #20]	; (80015fc <LL_C2_EXTI_DisableIT_0_31+0x28>)
 80015e8:	4013      	ands	r3, r2
 80015ea:	f8c1 30c0 	str.w	r3, [r1, #192]	; 0xc0
}
 80015ee:	bf00      	nop
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	58000800 	.word	0x58000800

08001600 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8001608:	4b05      	ldr	r3, [pc, #20]	; (8001620 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	4904      	ldr	r1, [pc, #16]	; (8001620 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4313      	orrs	r3, r2
 8001612:	600b      	str	r3, [r1, #0]

}
 8001614:	bf00      	nop
 8001616:	370c      	adds	r7, #12
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr
 8001620:	58000800 	.word	0x58000800

08001624 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800162c:	4b06      	ldr	r3, [pc, #24]	; (8001648 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	43db      	mvns	r3, r3
 8001634:	4904      	ldr	r1, [pc, #16]	; (8001648 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8001636:	4013      	ands	r3, r2
 8001638:	600b      	str	r3, [r1, #0]

}
 800163a:	bf00      	nop
 800163c:	370c      	adds	r7, #12
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	58000800 	.word	0x58000800

0800164c <LL_EXTI_EnableFallingTrig_0_31>:
  *         (*) value not defined in all devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8001654:	4b05      	ldr	r3, [pc, #20]	; (800166c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8001656:	685a      	ldr	r2, [r3, #4]
 8001658:	4904      	ldr	r1, [pc, #16]	; (800166c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	4313      	orrs	r3, r2
 800165e:	604b      	str	r3, [r1, #4]
}
 8001660:	bf00      	nop
 8001662:	370c      	adds	r7, #12
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr
 800166c:	58000800 	.word	0x58000800

08001670 <LL_EXTI_DisableFallingTrig_0_31>:
  *         (*) value not defined in all devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8001678:	4b06      	ldr	r3, [pc, #24]	; (8001694 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800167a:	685a      	ldr	r2, [r3, #4]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	43db      	mvns	r3, r3
 8001680:	4904      	ldr	r1, [pc, #16]	; (8001694 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8001682:	4013      	ands	r3, r2
 8001684:	604b      	str	r3, [r1, #4]
}
 8001686:	bf00      	nop
 8001688:	370c      	adds	r7, #12
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	58000800 	.word	0x58000800

08001698 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800169c:	4b05      	ldr	r3, [pc, #20]	; (80016b4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a04      	ldr	r2, [pc, #16]	; (80016b4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80016a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016a6:	6013      	str	r3, [r2, #0]
}
 80016a8:	bf00      	nop
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	58000400 	.word	0x58000400

080016b8 <HAL_PWR_ConfigPVD>:
  *         (and optionally, to select CPU2 only (not both CPU1 and CPU2):
  *         "__HAL_PWR_PVD_EXTI_DISABLE_IT()").
  * @retval None
  */
HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS bits according to PVDLevel value */
  MODIFY_REG(PWR->CR2, PWR_CR2_PLS, sConfigPVD->PVDLevel);
 80016c0:	4b1d      	ldr	r3, [pc, #116]	; (8001738 <HAL_PWR_ConfigPVD+0x80>)
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f023 020e 	bic.w	r2, r3, #14
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	491a      	ldr	r1, [pc, #104]	; (8001738 <HAL_PWR_ConfigPVD+0x80>)
 80016ce:	4313      	orrs	r3, r2
 80016d0:	604b      	str	r3, [r1, #4]
  
  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  
  /* Note: On STM32WB series, power PVD event is not available on AIEC lines   */
  /*       (only interruption is available through AIEC line 16).             */
  __HAL_PWR_PVD_EXTI_DISABLE_IT();      /*CPU1*/
 80016d2:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80016d6:	f7ff ff67 	bl	80015a8 <LL_EXTI_DisableIT_0_31>
  __HAL_PWR_PVD_EXTIC2_DISABLE_IT();    /*CPU2*/
 80016da:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80016de:	f7ff ff79 	bl	80015d4 <LL_C2_EXTI_DisableIT_0_31>
    
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 80016e2:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80016e6:	f7ff ffc3 	bl	8001670 <LL_EXTI_DisableFallingTrig_0_31>
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE(); 
 80016ea:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80016ee:	f7ff ff99 	bl	8001624 <LL_EXTI_DisableRisingTrig_0_31>

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d003      	beq.n	8001706 <HAL_PWR_ConfigPVD+0x4e>
  {
    /* Set CPU1 as wakeup target */
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 80016fe:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001702:	f7ff ff3d 	bl	8001580 <LL_EXTI_EnableIT_0_31>
  }
  
  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	f003 0301 	and.w	r3, r3, #1
 800170e:	2b00      	cmp	r3, #0
 8001710:	d003      	beq.n	800171a <HAL_PWR_ConfigPVD+0x62>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 8001712:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001716:	f7ff ff73 	bl	8001600 <LL_EXTI_EnableRisingTrig_0_31>
  }
  
  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	f003 0302 	and.w	r3, r3, #2
 8001722:	2b00      	cmp	r3, #0
 8001724:	d003      	beq.n	800172e <HAL_PWR_ConfigPVD+0x76>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 8001726:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800172a:	f7ff ff8f 	bl	800164c <LL_EXTI_EnableFallingTrig_0_31>
  }

  return HAL_OK;
 800172e:	2300      	movs	r3, #0
}
 8001730:	4618      	mov	r0, r3
 8001732:	3708      	adds	r7, #8
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	58000400 	.word	0x58000400

0800173c <HAL_PWR_EnablePVD>:
/**
  * @brief Enables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  /* Enable the power voltage detector */
  SET_BIT(PWR->CR2, PWR_CR2_PVDE);
 8001740:	4b05      	ldr	r3, [pc, #20]	; (8001758 <HAL_PWR_EnablePVD+0x1c>)
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	4a04      	ldr	r2, [pc, #16]	; (8001758 <HAL_PWR_EnablePVD+0x1c>)
 8001746:	f043 0301 	orr.w	r3, r3, #1
 800174a:	6053      	str	r3, [r2, #4]
}
 800174c:	bf00      	nop
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	58000400 	.word	0x58000400

0800175c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001760:	4b04      	ldr	r3, [pc, #16]	; (8001774 <HAL_PWREx_GetVoltageRange+0x18>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001768:	4618      	mov	r0, r3
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	58000400 	.word	0x58000400

08001778 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800177c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001786:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800178a:	d101      	bne.n	8001790 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800178c:	2301      	movs	r3, #1
 800178e:	e000      	b.n	8001792 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001790:	2300      	movs	r3, #0
}
 8001792:	4618      	mov	r0, r3
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <LL_RCC_HSE_Enable>:
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80017a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017ae:	6013      	str	r3, [r2, #0]
}
 80017b0:	bf00      	nop
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr

080017ba <LL_RCC_HSE_Disable>:
{
 80017ba:	b480      	push	{r7}
 80017bc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80017be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017cc:	6013      	str	r3, [r2, #0]
}
 80017ce:	bf00      	nop
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr

080017d8 <LL_RCC_HSE_IsReady>:
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80017dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80017ea:	d101      	bne.n	80017f0 <LL_RCC_HSE_IsReady+0x18>
 80017ec:	2301      	movs	r3, #1
 80017ee:	e000      	b.n	80017f2 <LL_RCC_HSE_IsReady+0x1a>
 80017f0:	2300      	movs	r3, #0
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr

080017fc <LL_RCC_HSI_Enable>:
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001800:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800180a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800180e:	6013      	str	r3, [r2, #0]
}
 8001810:	bf00      	nop
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr

0800181a <LL_RCC_HSI_Disable>:
{
 800181a:	b480      	push	{r7}
 800181c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800181e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001828:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800182c:	6013      	str	r3, [r2, #0]
}
 800182e:	bf00      	nop
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr

08001838 <LL_RCC_HSI_IsReady>:
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800183c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001846:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800184a:	d101      	bne.n	8001850 <LL_RCC_HSI_IsReady+0x18>
 800184c:	2301      	movs	r3, #1
 800184e:	e000      	b.n	8001852 <LL_RCC_HSI_IsReady+0x1a>
 8001850:	2300      	movs	r3, #0
}
 8001852:	4618      	mov	r0, r3
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr

0800185c <LL_RCC_HSI_SetCalibTrimming>:
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001864:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	061b      	lsls	r3, r3, #24
 8001872:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001876:	4313      	orrs	r3, r2
 8001878:	604b      	str	r3, [r1, #4]
}
 800187a:	bf00      	nop
 800187c:	370c      	adds	r7, #12
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr

08001886 <LL_RCC_HSI48_Enable>:
{
 8001886:	b480      	push	{r7}
 8001888:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800188a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800188e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001892:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001896:	f043 0301 	orr.w	r3, r3, #1
 800189a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800189e:	bf00      	nop
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr

080018a8 <LL_RCC_HSI48_Disable>:
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80018ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018b8:	f023 0301 	bic.w	r3, r3, #1
 80018bc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80018c0:	bf00      	nop
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr

080018ca <LL_RCC_HSI48_IsReady>:
{
 80018ca:	b480      	push	{r7}
 80018cc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80018ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018d6:	f003 0302 	and.w	r3, r3, #2
 80018da:	2b02      	cmp	r3, #2
 80018dc:	d101      	bne.n	80018e2 <LL_RCC_HSI48_IsReady+0x18>
 80018de:	2301      	movs	r3, #1
 80018e0:	e000      	b.n	80018e4 <LL_RCC_HSI48_IsReady+0x1a>
 80018e2:	2300      	movs	r3, #0
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr

080018ee <LL_RCC_LSE_Enable>:
{
 80018ee:	b480      	push	{r7}
 80018f0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80018f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018fe:	f043 0301 	orr.w	r3, r3, #1
 8001902:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001906:	bf00      	nop
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr

08001910 <LL_RCC_LSE_Disable>:
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001914:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001918:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800191c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001920:	f023 0301 	bic.w	r3, r3, #1
 8001924:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001928:	bf00      	nop
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr

08001932 <LL_RCC_LSE_EnableBypass>:
{
 8001932:	b480      	push	{r7}
 8001934:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001936:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800193a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800193e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001942:	f043 0304 	orr.w	r3, r3, #4
 8001946:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800194a:	bf00      	nop
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <LL_RCC_LSE_DisableBypass>:
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001958:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800195c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001960:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001964:	f023 0304 	bic.w	r3, r3, #4
 8001968:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800196c:	bf00      	nop
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr

08001976 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001976:	b480      	push	{r7}
 8001978:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800197a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800197e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001982:	f003 0302 	and.w	r3, r3, #2
 8001986:	2b02      	cmp	r3, #2
 8001988:	d101      	bne.n	800198e <LL_RCC_LSE_IsReady+0x18>
 800198a:	2301      	movs	r3, #1
 800198c:	e000      	b.n	8001990 <LL_RCC_LSE_IsReady+0x1a>
 800198e:	2300      	movs	r3, #0
}
 8001990:	4618      	mov	r0, r3
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr

0800199a <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 800199a:	b480      	push	{r7}
 800199c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800199e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019aa:	f043 0301 	orr.w	r3, r3, #1
 80019ae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80019b2:	bf00      	nop
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr

080019bc <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80019c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019cc:	f023 0301 	bic.w	r3, r3, #1
 80019d0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80019d4:	bf00      	nop
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr

080019de <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 80019de:	b480      	push	{r7}
 80019e0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80019e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019ea:	f003 0302 	and.w	r3, r3, #2
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	d101      	bne.n	80019f6 <LL_RCC_LSI1_IsReady+0x18>
 80019f2:	2301      	movs	r3, #1
 80019f4:	e000      	b.n	80019f8 <LL_RCC_LSI1_IsReady+0x1a>
 80019f6:	2300      	movs	r3, #0
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr

08001a02 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8001a02:	b480      	push	{r7}
 8001a04:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001a06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a0e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a12:	f043 0304 	orr.w	r3, r3, #4
 8001a16:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001a1a:	bf00      	nop
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr

08001a24 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001a28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a30:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a34:	f023 0304 	bic.w	r3, r3, #4
 8001a38:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001a3c:	bf00      	nop
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr

08001a46 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8001a46:	b480      	push	{r7}
 8001a48:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8001a4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a52:	f003 0308 	and.w	r3, r3, #8
 8001a56:	2b08      	cmp	r3, #8
 8001a58:	d101      	bne.n	8001a5e <LL_RCC_LSI2_IsReady+0x18>
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e000      	b.n	8001a60 <LL_RCC_LSI2_IsReady+0x1a>
 8001a5e:	2300      	movs	r3, #0
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr

08001a6a <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	b083      	sub	sp, #12
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8001a72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a7a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	021b      	lsls	r3, r3, #8
 8001a82:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a86:	4313      	orrs	r3, r2
 8001a88:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8001a8c:	bf00      	nop
 8001a8e:	370c      	adds	r7, #12
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr

08001a98 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001a9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001aa6:	f043 0301 	orr.w	r3, r3, #1
 8001aaa:	6013      	str	r3, [r2, #0]
}
 8001aac:	bf00      	nop
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr

08001ab6 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001aba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ac4:	f023 0301 	bic.w	r3, r3, #1
 8001ac8:	6013      	str	r3, [r2, #0]
}
 8001aca:	bf00      	nop
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001ad8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0302 	and.w	r3, r3, #2
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d101      	bne.n	8001aea <LL_RCC_MSI_IsReady+0x16>
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e000      	b.n	8001aec <LL_RCC_MSI_IsReady+0x18>
 8001aea:	2300      	movs	r3, #0
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr

08001af6 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8001af6:	b480      	push	{r7}
 8001af8:	b083      	sub	sp, #12
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8001afe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b08:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	600b      	str	r3, [r1, #0]
}
 8001b12:	bf00      	nop
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr

08001b1e <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	b083      	sub	sp, #12
 8001b22:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8001b24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b2e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2bb0      	cmp	r3, #176	; 0xb0
 8001b34:	d901      	bls.n	8001b3a <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8001b36:	23b0      	movs	r3, #176	; 0xb0
 8001b38:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8001b3a:	687b      	ldr	r3, [r7, #4]
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	370c      	adds	r7, #12
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr

08001b48 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001b50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	021b      	lsls	r3, r3, #8
 8001b5e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b62:	4313      	orrs	r3, r2
 8001b64:	604b      	str	r3, [r1, #4]
}
 8001b66:	bf00      	nop
 8001b68:	370c      	adds	r7, #12
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr

08001b72 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001b72:	b480      	push	{r7}
 8001b74:	b083      	sub	sp, #12
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001b7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	f023 0203 	bic.w	r2, r3, #3
 8001b84:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	608b      	str	r3, [r1, #8]
}
 8001b8e:	bf00      	nop
 8001b90:	370c      	adds	r7, #12
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr

08001b9a <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001b9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	f003 030c 	and.w	r3, r3, #12
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr

08001bb2 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001bb2:	b480      	push	{r7}
 8001bb4:	b083      	sub	sp, #12
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001bba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bc4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	608b      	str	r3, [r1, #8]
}
 8001bce:	bf00      	nop
 8001bd0:	370c      	adds	r7, #12
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr

08001bda <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	b083      	sub	sp, #12
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001be2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001be6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001bea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001bfa:	bf00      	nop
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr

08001c06 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8001c06:	b480      	push	{r7}
 8001c08:	b083      	sub	sp, #12
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001c0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c12:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001c16:	f023 020f 	bic.w	r2, r3, #15
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	091b      	lsrs	r3, r3, #4
 8001c1e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c22:	4313      	orrs	r3, r2
 8001c24:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001c28:	bf00      	nop
 8001c2a:	370c      	adds	r7, #12
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001c3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c46:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	608b      	str	r3, [r1, #8]
}
 8001c50:	bf00      	nop
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr

08001c5c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001c64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	608b      	str	r3, [r1, #8]
}
 8001c78:	bf00      	nop
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr

08001c84 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001c88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <LL_C2_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_C2_RCC_GetAHBPrescaler(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 8001ca0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ca4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001ca8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr

08001cb6 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001cba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cbe:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001cc2:	011b      	lsls	r3, r3, #4
 8001cc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr

08001cd2 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001cd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr

08001cea <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001cea:	b480      	push	{r7}
 8001cec:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001cee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr

08001d02 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001d02:	b480      	push	{r7}
 8001d04:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001d06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d10:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d14:	6013      	str	r3, [r2, #0]
}
 8001d16:	bf00      	nop
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001d24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d32:	6013      	str	r3, [r2, #0]
}
 8001d34:	bf00      	nop
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr

08001d3e <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001d3e:	b480      	push	{r7}
 8001d40:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001d42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d4c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001d50:	d101      	bne.n	8001d56 <LL_RCC_PLL_IsReady+0x18>
 8001d52:	2301      	movs	r3, #1
 8001d54:	e000      	b.n	8001d58 <LL_RCC_PLL_IsReady+0x1a>
 8001d56:	2300      	movs	r3, #0
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr

08001d62 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001d62:	b480      	push	{r7}
 8001d64:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001d66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	0a1b      	lsrs	r3, r3, #8
 8001d6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001d80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d84:	68db      	ldr	r3, [r3, #12]
 8001d86:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr

08001d94 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001d98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d9c:	68db      	ldr	r3, [r3, #12]
 8001d9e:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001db0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001db4:	68db      	ldr	r3, [r3, #12]
 8001db6:	f003 0303 	and.w	r3, r3, #3
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001dc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dd6:	d101      	bne.n	8001ddc <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e000      	b.n	8001dde <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001ddc:	2300      	movs	r3, #0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr

08001de8 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001dec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001df0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001df4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001df8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001dfc:	d101      	bne.n	8001e02 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e000      	b.n	8001e04 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8001e02:	2300      	movs	r3, #0
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr

08001e0e <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001e0e:	b480      	push	{r7}
 8001e10:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001e12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e16:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001e1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e22:	d101      	bne.n	8001e28 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001e24:	2301      	movs	r3, #1
 8001e26:	e000      	b.n	8001e2a <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr

08001e34 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001e38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e42:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001e46:	d101      	bne.n	8001e4c <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e000      	b.n	8001e4e <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001e4c:	2300      	movs	r3, #0
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr

08001e58 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001e5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e66:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001e6a:	d101      	bne.n	8001e70 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e000      	b.n	8001e72 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr

08001e7c <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e7c:	b590      	push	{r4, r7, lr}
 8001e7e:	b08d      	sub	sp, #52	; 0x34
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d101      	bne.n	8001e8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e363      	b.n	8002556 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0320 	and.w	r3, r3, #32
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	f000 808d 	beq.w	8001fb6 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e9c:	f7ff fe7d 	bl	8001b9a <LL_RCC_GetSysClkSource>
 8001ea0:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ea2:	f7ff ff83 	bl	8001dac <LL_RCC_PLL_GetMainSource>
 8001ea6:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d005      	beq.n	8001eba <HAL_RCC_OscConfig+0x3e>
 8001eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eb0:	2b0c      	cmp	r3, #12
 8001eb2:	d147      	bne.n	8001f44 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8001eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d144      	bne.n	8001f44 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	69db      	ldr	r3, [r3, #28]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d101      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e347      	b.n	8002556 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8001eca:	f7ff fe28 	bl	8001b1e <LL_RCC_MSI_GetRange>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	429c      	cmp	r4, r3
 8001ed2:	d914      	bls.n	8001efe <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f000 fd61 	bl	80029a0 <RCC_SetFlashLatencyFromMSIRange>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d001      	beq.n	8001ee8 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e336      	b.n	8002556 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7ff fe02 	bl	8001af6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6a1b      	ldr	r3, [r3, #32]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7ff fe26 	bl	8001b48 <LL_RCC_MSI_SetCalibTrimming>
 8001efc:	e013      	b.n	8001f26 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f02:	4618      	mov	r0, r3
 8001f04:	f7ff fdf7 	bl	8001af6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6a1b      	ldr	r3, [r3, #32]
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7ff fe1b 	bl	8001b48 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f16:	4618      	mov	r0, r3
 8001f18:	f000 fd42 	bl	80029a0 <RCC_SetFlashLatencyFromMSIRange>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d001      	beq.n	8001f26 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e317      	b.n	8002556 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001f26:	f000 fcc9 	bl	80028bc <HAL_RCC_GetHCLKFreq>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	4aa4      	ldr	r2, [pc, #656]	; (80021c0 <HAL_RCC_OscConfig+0x344>)
 8001f2e:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001f30:	4ba4      	ldr	r3, [pc, #656]	; (80021c4 <HAL_RCC_OscConfig+0x348>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7fe fdbf 	bl	8000ab8 <HAL_InitTick>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d039      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e308      	b.n	8002556 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	69db      	ldr	r3, [r3, #28]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d01e      	beq.n	8001f8a <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001f4c:	f7ff fda4 	bl	8001a98 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f50:	f7fe ff80 	bl	8000e54 <HAL_GetTick>
 8001f54:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001f56:	e008      	b.n	8001f6a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f58:	f7fe ff7c 	bl	8000e54 <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d901      	bls.n	8001f6a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e2f5      	b.n	8002556 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8001f6a:	f7ff fdb3 	bl	8001ad4 <LL_RCC_MSI_IsReady>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d0f1      	beq.n	8001f58 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7ff fdbc 	bl	8001af6 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6a1b      	ldr	r3, [r3, #32]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7ff fde0 	bl	8001b48 <LL_RCC_MSI_SetCalibTrimming>
 8001f88:	e015      	b.n	8001fb6 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001f8a:	f7ff fd94 	bl	8001ab6 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f8e:	f7fe ff61 	bl	8000e54 <HAL_GetTick>
 8001f92:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8001f94:	e008      	b.n	8001fa8 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f96:	f7fe ff5d 	bl	8000e54 <HAL_GetTick>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	d901      	bls.n	8001fa8 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	e2d6      	b.n	8002556 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8001fa8:	f7ff fd94 	bl	8001ad4 <LL_RCC_MSI_IsReady>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d1f1      	bne.n	8001f96 <HAL_RCC_OscConfig+0x11a>
 8001fb2:	e000      	b.n	8001fb6 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001fb4:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0301 	and.w	r3, r3, #1
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d047      	beq.n	8002052 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fc2:	f7ff fdea 	bl	8001b9a <LL_RCC_GetSysClkSource>
 8001fc6:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fc8:	f7ff fef0 	bl	8001dac <LL_RCC_PLL_GetMainSource>
 8001fcc:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001fce:	6a3b      	ldr	r3, [r7, #32]
 8001fd0:	2b08      	cmp	r3, #8
 8001fd2:	d005      	beq.n	8001fe0 <HAL_RCC_OscConfig+0x164>
 8001fd4:	6a3b      	ldr	r3, [r7, #32]
 8001fd6:	2b0c      	cmp	r3, #12
 8001fd8:	d108      	bne.n	8001fec <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	2b03      	cmp	r3, #3
 8001fde:	d105      	bne.n	8001fec <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d134      	bne.n	8002052 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e2b4      	b.n	8002556 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ff4:	d102      	bne.n	8001ffc <HAL_RCC_OscConfig+0x180>
 8001ff6:	f7ff fbd1 	bl	800179c <LL_RCC_HSE_Enable>
 8001ffa:	e001      	b.n	8002000 <HAL_RCC_OscConfig+0x184>
 8001ffc:	f7ff fbdd 	bl	80017ba <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d012      	beq.n	800202e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002008:	f7fe ff24 	bl	8000e54 <HAL_GetTick>
 800200c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800200e:	e008      	b.n	8002022 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002010:	f7fe ff20 	bl	8000e54 <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	2b64      	cmp	r3, #100	; 0x64
 800201c:	d901      	bls.n	8002022 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e299      	b.n	8002556 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002022:	f7ff fbd9 	bl	80017d8 <LL_RCC_HSE_IsReady>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d0f1      	beq.n	8002010 <HAL_RCC_OscConfig+0x194>
 800202c:	e011      	b.n	8002052 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800202e:	f7fe ff11 	bl	8000e54 <HAL_GetTick>
 8002032:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002034:	e008      	b.n	8002048 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002036:	f7fe ff0d 	bl	8000e54 <HAL_GetTick>
 800203a:	4602      	mov	r2, r0
 800203c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	2b64      	cmp	r3, #100	; 0x64
 8002042:	d901      	bls.n	8002048 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002044:	2303      	movs	r3, #3
 8002046:	e286      	b.n	8002556 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002048:	f7ff fbc6 	bl	80017d8 <LL_RCC_HSE_IsReady>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d1f1      	bne.n	8002036 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0302 	and.w	r3, r3, #2
 800205a:	2b00      	cmp	r3, #0
 800205c:	d04c      	beq.n	80020f8 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800205e:	f7ff fd9c 	bl	8001b9a <LL_RCC_GetSysClkSource>
 8002062:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002064:	f7ff fea2 	bl	8001dac <LL_RCC_PLL_GetMainSource>
 8002068:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800206a:	69bb      	ldr	r3, [r7, #24]
 800206c:	2b04      	cmp	r3, #4
 800206e:	d005      	beq.n	800207c <HAL_RCC_OscConfig+0x200>
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	2b0c      	cmp	r3, #12
 8002074:	d10e      	bne.n	8002094 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	2b02      	cmp	r3, #2
 800207a:	d10b      	bne.n	8002094 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d101      	bne.n	8002088 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e266      	b.n	8002556 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	691b      	ldr	r3, [r3, #16]
 800208c:	4618      	mov	r0, r3
 800208e:	f7ff fbe5 	bl	800185c <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002092:	e031      	b.n	80020f8 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d019      	beq.n	80020d0 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800209c:	f7ff fbae 	bl	80017fc <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020a0:	f7fe fed8 	bl	8000e54 <HAL_GetTick>
 80020a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80020a6:	e008      	b.n	80020ba <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020a8:	f7fe fed4 	bl	8000e54 <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d901      	bls.n	80020ba <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e24d      	b.n	8002556 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 80020ba:	f7ff fbbd 	bl	8001838 <LL_RCC_HSI_IsReady>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d0f1      	beq.n	80020a8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	691b      	ldr	r3, [r3, #16]
 80020c8:	4618      	mov	r0, r3
 80020ca:	f7ff fbc7 	bl	800185c <LL_RCC_HSI_SetCalibTrimming>
 80020ce:	e013      	b.n	80020f8 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020d0:	f7ff fba3 	bl	800181a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020d4:	f7fe febe 	bl	8000e54 <HAL_GetTick>
 80020d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80020da:	e008      	b.n	80020ee <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020dc:	f7fe feba 	bl	8000e54 <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d901      	bls.n	80020ee <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e233      	b.n	8002556 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80020ee:	f7ff fba3 	bl	8001838 <LL_RCC_HSI_IsReady>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d1f1      	bne.n	80020dc <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0308 	and.w	r3, r3, #8
 8002100:	2b00      	cmp	r3, #0
 8002102:	d106      	bne.n	8002112 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800210c:	2b00      	cmp	r3, #0
 800210e:	f000 80a3 	beq.w	8002258 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	695b      	ldr	r3, [r3, #20]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d076      	beq.n	8002208 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0310 	and.w	r3, r3, #16
 8002122:	2b00      	cmp	r3, #0
 8002124:	d046      	beq.n	80021b4 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8002126:	f7ff fc5a 	bl	80019de <LL_RCC_LSI1_IsReady>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d113      	bne.n	8002158 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8002130:	f7ff fc33 	bl	800199a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002134:	f7fe fe8e 	bl	8000e54 <HAL_GetTick>
 8002138:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800213a:	e008      	b.n	800214e <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800213c:	f7fe fe8a 	bl	8000e54 <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	2b02      	cmp	r3, #2
 8002148:	d901      	bls.n	800214e <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e203      	b.n	8002556 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800214e:	f7ff fc46 	bl	80019de <LL_RCC_LSI1_IsReady>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d0f1      	beq.n	800213c <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8002158:	f7ff fc53 	bl	8001a02 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800215c:	f7fe fe7a 	bl	8000e54 <HAL_GetTick>
 8002160:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002162:	e008      	b.n	8002176 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002164:	f7fe fe76 	bl	8000e54 <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	2b03      	cmp	r3, #3
 8002170:	d901      	bls.n	8002176 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	e1ef      	b.n	8002556 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002176:	f7ff fc66 	bl	8001a46 <LL_RCC_LSI2_IsReady>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d0f1      	beq.n	8002164 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	699b      	ldr	r3, [r3, #24]
 8002184:	4618      	mov	r0, r3
 8002186:	f7ff fc70 	bl	8001a6a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800218a:	f7ff fc17 	bl	80019bc <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800218e:	f7fe fe61 	bl	8000e54 <HAL_GetTick>
 8002192:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002194:	e008      	b.n	80021a8 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002196:	f7fe fe5d 	bl	8000e54 <HAL_GetTick>
 800219a:	4602      	mov	r2, r0
 800219c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	d901      	bls.n	80021a8 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80021a4:	2303      	movs	r3, #3
 80021a6:	e1d6      	b.n	8002556 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80021a8:	f7ff fc19 	bl	80019de <LL_RCC_LSI1_IsReady>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d1f1      	bne.n	8002196 <HAL_RCC_OscConfig+0x31a>
 80021b2:	e051      	b.n	8002258 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80021b4:	f7ff fbf1 	bl	800199a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b8:	f7fe fe4c 	bl	8000e54 <HAL_GetTick>
 80021bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80021be:	e00c      	b.n	80021da <HAL_RCC_OscConfig+0x35e>
 80021c0:	20000004 	.word	0x20000004
 80021c4:	20000008 	.word	0x20000008
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80021c8:	f7fe fe44 	bl	8000e54 <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d901      	bls.n	80021da <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	e1bd      	b.n	8002556 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80021da:	f7ff fc00 	bl	80019de <LL_RCC_LSI1_IsReady>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d0f1      	beq.n	80021c8 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80021e4:	f7ff fc1e 	bl	8001a24 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80021e8:	e008      	b.n	80021fc <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80021ea:	f7fe fe33 	bl	8000e54 <HAL_GetTick>
 80021ee:	4602      	mov	r2, r0
 80021f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	2b03      	cmp	r3, #3
 80021f6:	d901      	bls.n	80021fc <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80021f8:	2303      	movs	r3, #3
 80021fa:	e1ac      	b.n	8002556 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80021fc:	f7ff fc23 	bl	8001a46 <LL_RCC_LSI2_IsReady>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d1f1      	bne.n	80021ea <HAL_RCC_OscConfig+0x36e>
 8002206:	e027      	b.n	8002258 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8002208:	f7ff fc0c 	bl	8001a24 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800220c:	f7fe fe22 	bl	8000e54 <HAL_GetTick>
 8002210:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002212:	e008      	b.n	8002226 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002214:	f7fe fe1e 	bl	8000e54 <HAL_GetTick>
 8002218:	4602      	mov	r2, r0
 800221a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	2b03      	cmp	r3, #3
 8002220:	d901      	bls.n	8002226 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e197      	b.n	8002556 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002226:	f7ff fc0e 	bl	8001a46 <LL_RCC_LSI2_IsReady>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d1f1      	bne.n	8002214 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8002230:	f7ff fbc4 	bl	80019bc <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002234:	f7fe fe0e 	bl	8000e54 <HAL_GetTick>
 8002238:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800223a:	e008      	b.n	800224e <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800223c:	f7fe fe0a 	bl	8000e54 <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	2b02      	cmp	r3, #2
 8002248:	d901      	bls.n	800224e <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e183      	b.n	8002556 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800224e:	f7ff fbc6 	bl	80019de <LL_RCC_LSI1_IsReady>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d1f1      	bne.n	800223c <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0304 	and.w	r3, r3, #4
 8002260:	2b00      	cmp	r3, #0
 8002262:	d05b      	beq.n	800231c <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002264:	4ba7      	ldr	r3, [pc, #668]	; (8002504 <HAL_RCC_OscConfig+0x688>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800226c:	2b00      	cmp	r3, #0
 800226e:	d114      	bne.n	800229a <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002270:	f7ff fa12 	bl	8001698 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002274:	f7fe fdee 	bl	8000e54 <HAL_GetTick>
 8002278:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800227a:	e008      	b.n	800228e <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800227c:	f7fe fdea 	bl	8000e54 <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	2b02      	cmp	r3, #2
 8002288:	d901      	bls.n	800228e <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	e163      	b.n	8002556 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800228e:	4b9d      	ldr	r3, [pc, #628]	; (8002504 <HAL_RCC_OscConfig+0x688>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002296:	2b00      	cmp	r3, #0
 8002298:	d0f0      	beq.n	800227c <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d102      	bne.n	80022a8 <HAL_RCC_OscConfig+0x42c>
 80022a2:	f7ff fb24 	bl	80018ee <LL_RCC_LSE_Enable>
 80022a6:	e00c      	b.n	80022c2 <HAL_RCC_OscConfig+0x446>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	2b05      	cmp	r3, #5
 80022ae:	d104      	bne.n	80022ba <HAL_RCC_OscConfig+0x43e>
 80022b0:	f7ff fb3f 	bl	8001932 <LL_RCC_LSE_EnableBypass>
 80022b4:	f7ff fb1b 	bl	80018ee <LL_RCC_LSE_Enable>
 80022b8:	e003      	b.n	80022c2 <HAL_RCC_OscConfig+0x446>
 80022ba:	f7ff fb29 	bl	8001910 <LL_RCC_LSE_Disable>
 80022be:	f7ff fb49 	bl	8001954 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d014      	beq.n	80022f4 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022ca:	f7fe fdc3 	bl	8000e54 <HAL_GetTick>
 80022ce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80022d0:	e00a      	b.n	80022e8 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022d2:	f7fe fdbf 	bl	8000e54 <HAL_GetTick>
 80022d6:	4602      	mov	r2, r0
 80022d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022da:	1ad3      	subs	r3, r2, r3
 80022dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d901      	bls.n	80022e8 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80022e4:	2303      	movs	r3, #3
 80022e6:	e136      	b.n	8002556 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80022e8:	f7ff fb45 	bl	8001976 <LL_RCC_LSE_IsReady>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d0ef      	beq.n	80022d2 <HAL_RCC_OscConfig+0x456>
 80022f2:	e013      	b.n	800231c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022f4:	f7fe fdae 	bl	8000e54 <HAL_GetTick>
 80022f8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80022fa:	e00a      	b.n	8002312 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022fc:	f7fe fdaa 	bl	8000e54 <HAL_GetTick>
 8002300:	4602      	mov	r2, r0
 8002302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	f241 3288 	movw	r2, #5000	; 0x1388
 800230a:	4293      	cmp	r3, r2
 800230c:	d901      	bls.n	8002312 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800230e:	2303      	movs	r3, #3
 8002310:	e121      	b.n	8002556 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002312:	f7ff fb30 	bl	8001976 <LL_RCC_LSE_IsReady>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d1ef      	bne.n	80022fc <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002324:	2b00      	cmp	r3, #0
 8002326:	d02c      	beq.n	8002382 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800232c:	2b00      	cmp	r3, #0
 800232e:	d014      	beq.n	800235a <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002330:	f7ff faa9 	bl	8001886 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002334:	f7fe fd8e 	bl	8000e54 <HAL_GetTick>
 8002338:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800233a:	e008      	b.n	800234e <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800233c:	f7fe fd8a 	bl	8000e54 <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	2b02      	cmp	r3, #2
 8002348:	d901      	bls.n	800234e <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	e103      	b.n	8002556 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800234e:	f7ff fabc 	bl	80018ca <LL_RCC_HSI48_IsReady>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d0f1      	beq.n	800233c <HAL_RCC_OscConfig+0x4c0>
 8002358:	e013      	b.n	8002382 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800235a:	f7ff faa5 	bl	80018a8 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800235e:	f7fe fd79 	bl	8000e54 <HAL_GetTick>
 8002362:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002364:	e008      	b.n	8002378 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002366:	f7fe fd75 	bl	8000e54 <HAL_GetTick>
 800236a:	4602      	mov	r2, r0
 800236c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	2b02      	cmp	r3, #2
 8002372:	d901      	bls.n	8002378 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8002374:	2303      	movs	r3, #3
 8002376:	e0ee      	b.n	8002556 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002378:	f7ff faa7 	bl	80018ca <LL_RCC_HSI48_IsReady>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d1f1      	bne.n	8002366 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002386:	2b00      	cmp	r3, #0
 8002388:	f000 80e4 	beq.w	8002554 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800238c:	f7ff fc05 	bl	8001b9a <LL_RCC_GetSysClkSource>
 8002390:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8002392:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800239e:	2b02      	cmp	r3, #2
 80023a0:	f040 80b4 	bne.w	800250c <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	f003 0203 	and.w	r2, r3, #3
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d123      	bne.n	80023fa <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023bc:	429a      	cmp	r2, r3
 80023be:	d11c      	bne.n	80023fa <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	0a1b      	lsrs	r3, r3, #8
 80023c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d114      	bne.n	80023fa <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80023da:	429a      	cmp	r2, r3
 80023dc:	d10d      	bne.n	80023fa <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d106      	bne.n	80023fa <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d05d      	beq.n	80024b6 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	2b0c      	cmp	r3, #12
 80023fe:	d058      	beq.n	80024b2 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002400:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e0a1      	b.n	8002556 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002412:	f7ff fc85 	bl	8001d20 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002416:	f7fe fd1d 	bl	8000e54 <HAL_GetTick>
 800241a:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800241c:	e008      	b.n	8002430 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800241e:	f7fe fd19 	bl	8000e54 <HAL_GetTick>
 8002422:	4602      	mov	r2, r0
 8002424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	2b02      	cmp	r3, #2
 800242a:	d901      	bls.n	8002430 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 800242c:	2303      	movs	r3, #3
 800242e:	e092      	b.n	8002556 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002430:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d1ef      	bne.n	800241e <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800243e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002442:	68da      	ldr	r2, [r3, #12]
 8002444:	4b30      	ldr	r3, [pc, #192]	; (8002508 <HAL_RCC_OscConfig+0x68c>)
 8002446:	4013      	ands	r3, r2
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002450:	4311      	orrs	r1, r2
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002456:	0212      	lsls	r2, r2, #8
 8002458:	4311      	orrs	r1, r2
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800245e:	4311      	orrs	r1, r2
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002464:	4311      	orrs	r1, r2
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800246a:	430a      	orrs	r2, r1
 800246c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002470:	4313      	orrs	r3, r2
 8002472:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002474:	f7ff fc45 	bl	8001d02 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002478:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800247c:	68db      	ldr	r3, [r3, #12]
 800247e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002482:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002486:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002488:	f7fe fce4 	bl	8000e54 <HAL_GetTick>
 800248c:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800248e:	e008      	b.n	80024a2 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002490:	f7fe fce0 	bl	8000e54 <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	2b02      	cmp	r3, #2
 800249c:	d901      	bls.n	80024a2 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e059      	b.n	8002556 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d0ef      	beq.n	8002490 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024b0:	e050      	b.n	8002554 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e04f      	b.n	8002556 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d147      	bne.n	8002554 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80024c4:	f7ff fc1d 	bl	8001d02 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80024c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024cc:	68db      	ldr	r3, [r3, #12]
 80024ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024d6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80024d8:	f7fe fcbc 	bl	8000e54 <HAL_GetTick>
 80024dc:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024de:	e008      	b.n	80024f2 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024e0:	f7fe fcb8 	bl	8000e54 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e031      	b.n	8002556 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d0ef      	beq.n	80024e0 <HAL_RCC_OscConfig+0x664>
 8002500:	e028      	b.n	8002554 <HAL_RCC_OscConfig+0x6d8>
 8002502:	bf00      	nop
 8002504:	58000400 	.word	0x58000400
 8002508:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	2b0c      	cmp	r3, #12
 8002510:	d01e      	beq.n	8002550 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002512:	f7ff fc05 	bl	8001d20 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002516:	f7fe fc9d 	bl	8000e54 <HAL_GetTick>
 800251a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800251c:	e008      	b.n	8002530 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800251e:	f7fe fc99 	bl	8000e54 <HAL_GetTick>
 8002522:	4602      	mov	r2, r0
 8002524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002526:	1ad3      	subs	r3, r2, r3
 8002528:	2b02      	cmp	r3, #2
 800252a:	d901      	bls.n	8002530 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 800252c:	2303      	movs	r3, #3
 800252e:	e012      	b.n	8002556 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002530:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d1ef      	bne.n	800251e <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800253e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002542:	68da      	ldr	r2, [r3, #12]
 8002544:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002548:	4b05      	ldr	r3, [pc, #20]	; (8002560 <HAL_RCC_OscConfig+0x6e4>)
 800254a:	4013      	ands	r3, r2
 800254c:	60cb      	str	r3, [r1, #12]
 800254e:	e001      	b.n	8002554 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e000      	b.n	8002556 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8002554:	2300      	movs	r3, #0
}
 8002556:	4618      	mov	r0, r3
 8002558:	3734      	adds	r7, #52	; 0x34
 800255a:	46bd      	mov	sp, r7
 800255c:	bd90      	pop	{r4, r7, pc}
 800255e:	bf00      	nop
 8002560:	eefefffc 	.word	0xeefefffc

08002564 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d101      	bne.n	8002578 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e12d      	b.n	80027d4 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002578:	4b98      	ldr	r3, [pc, #608]	; (80027dc <HAL_RCC_ClockConfig+0x278>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0307 	and.w	r3, r3, #7
 8002580:	683a      	ldr	r2, [r7, #0]
 8002582:	429a      	cmp	r2, r3
 8002584:	d91b      	bls.n	80025be <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002586:	4b95      	ldr	r3, [pc, #596]	; (80027dc <HAL_RCC_ClockConfig+0x278>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f023 0207 	bic.w	r2, r3, #7
 800258e:	4993      	ldr	r1, [pc, #588]	; (80027dc <HAL_RCC_ClockConfig+0x278>)
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	4313      	orrs	r3, r2
 8002594:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002596:	f7fe fc5d 	bl	8000e54 <HAL_GetTick>
 800259a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800259c:	e008      	b.n	80025b0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800259e:	f7fe fc59 	bl	8000e54 <HAL_GetTick>
 80025a2:	4602      	mov	r2, r0
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d901      	bls.n	80025b0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80025ac:	2303      	movs	r3, #3
 80025ae:	e111      	b.n	80027d4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025b0:	4b8a      	ldr	r3, [pc, #552]	; (80027dc <HAL_RCC_ClockConfig+0x278>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 0307 	and.w	r3, r3, #7
 80025b8:	683a      	ldr	r2, [r7, #0]
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d1ef      	bne.n	800259e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0302 	and.w	r3, r3, #2
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d016      	beq.n	80025f8 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7ff faef 	bl	8001bb2 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80025d4:	f7fe fc3e 	bl	8000e54 <HAL_GetTick>
 80025d8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80025da:	e008      	b.n	80025ee <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80025dc:	f7fe fc3a 	bl	8000e54 <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d901      	bls.n	80025ee <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e0f2      	b.n	80027d4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80025ee:	f7ff fbe9 	bl	8001dc4 <LL_RCC_IsActiveFlag_HPRE>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d0f1      	beq.n	80025dc <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 0320 	and.w	r3, r3, #32
 8002600:	2b00      	cmp	r3, #0
 8002602:	d016      	beq.n	8002632 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	695b      	ldr	r3, [r3, #20]
 8002608:	4618      	mov	r0, r3
 800260a:	f7ff fae6 	bl	8001bda <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800260e:	f7fe fc21 	bl	8000e54 <HAL_GetTick>
 8002612:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002614:	e008      	b.n	8002628 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002616:	f7fe fc1d 	bl	8000e54 <HAL_GetTick>
 800261a:	4602      	mov	r2, r0
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	2b02      	cmp	r3, #2
 8002622:	d901      	bls.n	8002628 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002624:	2303      	movs	r3, #3
 8002626:	e0d5      	b.n	80027d4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002628:	f7ff fbde 	bl	8001de8 <LL_RCC_IsActiveFlag_C2HPRE>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d0f1      	beq.n	8002616 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800263a:	2b00      	cmp	r3, #0
 800263c:	d016      	beq.n	800266c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	699b      	ldr	r3, [r3, #24]
 8002642:	4618      	mov	r0, r3
 8002644:	f7ff fadf 	bl	8001c06 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002648:	f7fe fc04 	bl	8000e54 <HAL_GetTick>
 800264c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800264e:	e008      	b.n	8002662 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002650:	f7fe fc00 	bl	8000e54 <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	2b02      	cmp	r3, #2
 800265c:	d901      	bls.n	8002662 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e0b8      	b.n	80027d4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002662:	f7ff fbd4 	bl	8001e0e <LL_RCC_IsActiveFlag_SHDHPRE>
 8002666:	4603      	mov	r3, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d0f1      	beq.n	8002650 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0304 	and.w	r3, r3, #4
 8002674:	2b00      	cmp	r3, #0
 8002676:	d016      	beq.n	80026a6 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	4618      	mov	r0, r3
 800267e:	f7ff fad9 	bl	8001c34 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002682:	f7fe fbe7 	bl	8000e54 <HAL_GetTick>
 8002686:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002688:	e008      	b.n	800269c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800268a:	f7fe fbe3 	bl	8000e54 <HAL_GetTick>
 800268e:	4602      	mov	r2, r0
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	2b02      	cmp	r3, #2
 8002696:	d901      	bls.n	800269c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	e09b      	b.n	80027d4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800269c:	f7ff fbca 	bl	8001e34 <LL_RCC_IsActiveFlag_PPRE1>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d0f1      	beq.n	800268a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0308 	and.w	r3, r3, #8
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d017      	beq.n	80026e2 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	691b      	ldr	r3, [r3, #16]
 80026b6:	00db      	lsls	r3, r3, #3
 80026b8:	4618      	mov	r0, r3
 80026ba:	f7ff facf 	bl	8001c5c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80026be:	f7fe fbc9 	bl	8000e54 <HAL_GetTick>
 80026c2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80026c4:	e008      	b.n	80026d8 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80026c6:	f7fe fbc5 	bl	8000e54 <HAL_GetTick>
 80026ca:	4602      	mov	r2, r0
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	d901      	bls.n	80026d8 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80026d4:	2303      	movs	r3, #3
 80026d6:	e07d      	b.n	80027d4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80026d8:	f7ff fbbe 	bl	8001e58 <LL_RCC_IsActiveFlag_PPRE2>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d0f1      	beq.n	80026c6 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0301 	and.w	r3, r3, #1
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d043      	beq.n	8002776 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d106      	bne.n	8002704 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80026f6:	f7ff f86f 	bl	80017d8 <LL_RCC_HSE_IsReady>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d11e      	bne.n	800273e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e067      	b.n	80027d4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	2b03      	cmp	r3, #3
 800270a:	d106      	bne.n	800271a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800270c:	f7ff fb17 	bl	8001d3e <LL_RCC_PLL_IsReady>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d113      	bne.n	800273e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e05c      	b.n	80027d4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d106      	bne.n	8002730 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002722:	f7ff f9d7 	bl	8001ad4 <LL_RCC_MSI_IsReady>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d108      	bne.n	800273e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	e051      	b.n	80027d4 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002730:	f7ff f882 	bl	8001838 <LL_RCC_HSI_IsReady>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d101      	bne.n	800273e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e04a      	b.n	80027d4 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	4618      	mov	r0, r3
 8002744:	f7ff fa15 	bl	8001b72 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002748:	f7fe fb84 	bl	8000e54 <HAL_GetTick>
 800274c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800274e:	e00a      	b.n	8002766 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002750:	f7fe fb80 	bl	8000e54 <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	f241 3288 	movw	r2, #5000	; 0x1388
 800275e:	4293      	cmp	r3, r2
 8002760:	d901      	bls.n	8002766 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e036      	b.n	80027d4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002766:	f7ff fa18 	bl	8001b9a <LL_RCC_GetSysClkSource>
 800276a:	4602      	mov	r2, r0
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	429a      	cmp	r2, r3
 8002774:	d1ec      	bne.n	8002750 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002776:	4b19      	ldr	r3, [pc, #100]	; (80027dc <HAL_RCC_ClockConfig+0x278>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0307 	and.w	r3, r3, #7
 800277e:	683a      	ldr	r2, [r7, #0]
 8002780:	429a      	cmp	r2, r3
 8002782:	d21b      	bcs.n	80027bc <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002784:	4b15      	ldr	r3, [pc, #84]	; (80027dc <HAL_RCC_ClockConfig+0x278>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f023 0207 	bic.w	r2, r3, #7
 800278c:	4913      	ldr	r1, [pc, #76]	; (80027dc <HAL_RCC_ClockConfig+0x278>)
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	4313      	orrs	r3, r2
 8002792:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002794:	f7fe fb5e 	bl	8000e54 <HAL_GetTick>
 8002798:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800279a:	e008      	b.n	80027ae <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800279c:	f7fe fb5a 	bl	8000e54 <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d901      	bls.n	80027ae <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e012      	b.n	80027d4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027ae:	4b0b      	ldr	r3, [pc, #44]	; (80027dc <HAL_RCC_ClockConfig+0x278>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0307 	and.w	r3, r3, #7
 80027b6:	683a      	ldr	r2, [r7, #0]
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d1ef      	bne.n	800279c <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80027bc:	f000 f87e 	bl	80028bc <HAL_RCC_GetHCLKFreq>
 80027c0:	4603      	mov	r3, r0
 80027c2:	4a07      	ldr	r2, [pc, #28]	; (80027e0 <HAL_RCC_ClockConfig+0x27c>)
 80027c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80027c6:	f7fe fb51 	bl	8000e6c <HAL_GetTickPrio>
 80027ca:	4603      	mov	r3, r0
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7fe f973 	bl	8000ab8 <HAL_InitTick>
 80027d2:	4603      	mov	r3, r0
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3710      	adds	r7, #16
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	58004000 	.word	0x58004000
 80027e0:	20000004 	.word	0x20000004

080027e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027e4:	b590      	push	{r4, r7, lr}
 80027e6:	b085      	sub	sp, #20
 80027e8:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027ea:	f7ff f9d6 	bl	8001b9a <LL_RCC_GetSysClkSource>
 80027ee:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d10a      	bne.n	800280c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80027f6:	f7ff f992 	bl	8001b1e <LL_RCC_MSI_GetRange>
 80027fa:	4603      	mov	r3, r0
 80027fc:	091b      	lsrs	r3, r3, #4
 80027fe:	f003 030f 	and.w	r3, r3, #15
 8002802:	4a2b      	ldr	r2, [pc, #172]	; (80028b0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002804:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002808:	60fb      	str	r3, [r7, #12]
 800280a:	e04b      	b.n	80028a4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2b04      	cmp	r3, #4
 8002810:	d102      	bne.n	8002818 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002812:	4b28      	ldr	r3, [pc, #160]	; (80028b4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002814:	60fb      	str	r3, [r7, #12]
 8002816:	e045      	b.n	80028a4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2b08      	cmp	r3, #8
 800281c:	d10a      	bne.n	8002834 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800281e:	f7fe ffab 	bl	8001778 <LL_RCC_HSE_IsEnabledDiv2>
 8002822:	4603      	mov	r3, r0
 8002824:	2b01      	cmp	r3, #1
 8002826:	d102      	bne.n	800282e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002828:	4b22      	ldr	r3, [pc, #136]	; (80028b4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800282a:	60fb      	str	r3, [r7, #12]
 800282c:	e03a      	b.n	80028a4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800282e:	4b22      	ldr	r3, [pc, #136]	; (80028b8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002830:	60fb      	str	r3, [r7, #12]
 8002832:	e037      	b.n	80028a4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002834:	f7ff faba 	bl	8001dac <LL_RCC_PLL_GetMainSource>
 8002838:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	2b02      	cmp	r3, #2
 800283e:	d003      	beq.n	8002848 <HAL_RCC_GetSysClockFreq+0x64>
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	2b03      	cmp	r3, #3
 8002844:	d003      	beq.n	800284e <HAL_RCC_GetSysClockFreq+0x6a>
 8002846:	e00d      	b.n	8002864 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002848:	4b1a      	ldr	r3, [pc, #104]	; (80028b4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800284a:	60bb      	str	r3, [r7, #8]
        break;
 800284c:	e015      	b.n	800287a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800284e:	f7fe ff93 	bl	8001778 <LL_RCC_HSE_IsEnabledDiv2>
 8002852:	4603      	mov	r3, r0
 8002854:	2b01      	cmp	r3, #1
 8002856:	d102      	bne.n	800285e <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002858:	4b16      	ldr	r3, [pc, #88]	; (80028b4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800285a:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800285c:	e00d      	b.n	800287a <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800285e:	4b16      	ldr	r3, [pc, #88]	; (80028b8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002860:	60bb      	str	r3, [r7, #8]
        break;
 8002862:	e00a      	b.n	800287a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002864:	f7ff f95b 	bl	8001b1e <LL_RCC_MSI_GetRange>
 8002868:	4603      	mov	r3, r0
 800286a:	091b      	lsrs	r3, r3, #4
 800286c:	f003 030f 	and.w	r3, r3, #15
 8002870:	4a0f      	ldr	r2, [pc, #60]	; (80028b0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002872:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002876:	60bb      	str	r3, [r7, #8]
        break;
 8002878:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800287a:	f7ff fa72 	bl	8001d62 <LL_RCC_PLL_GetN>
 800287e:	4602      	mov	r2, r0
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	fb03 f402 	mul.w	r4, r3, r2
 8002886:	f7ff fa85 	bl	8001d94 <LL_RCC_PLL_GetDivider>
 800288a:	4603      	mov	r3, r0
 800288c:	091b      	lsrs	r3, r3, #4
 800288e:	3301      	adds	r3, #1
 8002890:	fbb4 f4f3 	udiv	r4, r4, r3
 8002894:	f7ff fa72 	bl	8001d7c <LL_RCC_PLL_GetR>
 8002898:	4603      	mov	r3, r0
 800289a:	0f5b      	lsrs	r3, r3, #29
 800289c:	3301      	adds	r3, #1
 800289e:	fbb4 f3f3 	udiv	r3, r4, r3
 80028a2:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80028a4:	68fb      	ldr	r3, [r7, #12]
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3714      	adds	r7, #20
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd90      	pop	{r4, r7, pc}
 80028ae:	bf00      	nop
 80028b0:	080079d0 	.word	0x080079d0
 80028b4:	00f42400 	.word	0x00f42400
 80028b8:	01e84800 	.word	0x01e84800

080028bc <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028bc:	b598      	push	{r3, r4, r7, lr}
 80028be:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80028c0:	f7ff ff90 	bl	80027e4 <HAL_RCC_GetSysClockFreq>
 80028c4:	4604      	mov	r4, r0
 80028c6:	f7ff f9dd 	bl	8001c84 <LL_RCC_GetAHBPrescaler>
 80028ca:	4603      	mov	r3, r0
 80028cc:	091b      	lsrs	r3, r3, #4
 80028ce:	f003 030f 	and.w	r3, r3, #15
 80028d2:	4a03      	ldr	r2, [pc, #12]	; (80028e0 <HAL_RCC_GetHCLKFreq+0x24>)
 80028d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028d8:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80028dc:	4618      	mov	r0, r3
 80028de:	bd98      	pop	{r3, r4, r7, pc}
 80028e0:	08007970 	.word	0x08007970

080028e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028e4:	b598      	push	{r3, r4, r7, lr}
 80028e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80028e8:	f7ff ffe8 	bl	80028bc <HAL_RCC_GetHCLKFreq>
 80028ec:	4604      	mov	r4, r0
 80028ee:	f7ff f9f0 	bl	8001cd2 <LL_RCC_GetAPB1Prescaler>
 80028f2:	4603      	mov	r3, r0
 80028f4:	0a1b      	lsrs	r3, r3, #8
 80028f6:	f003 0307 	and.w	r3, r3, #7
 80028fa:	4a04      	ldr	r2, [pc, #16]	; (800290c <HAL_RCC_GetPCLK1Freq+0x28>)
 80028fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002900:	f003 031f 	and.w	r3, r3, #31
 8002904:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002908:	4618      	mov	r0, r3
 800290a:	bd98      	pop	{r3, r4, r7, pc}
 800290c:	080079b0 	.word	0x080079b0

08002910 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002910:	b598      	push	{r3, r4, r7, lr}
 8002912:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002914:	f7ff ffd2 	bl	80028bc <HAL_RCC_GetHCLKFreq>
 8002918:	4604      	mov	r4, r0
 800291a:	f7ff f9e6 	bl	8001cea <LL_RCC_GetAPB2Prescaler>
 800291e:	4603      	mov	r3, r0
 8002920:	0adb      	lsrs	r3, r3, #11
 8002922:	f003 0307 	and.w	r3, r3, #7
 8002926:	4a04      	ldr	r2, [pc, #16]	; (8002938 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002928:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800292c:	f003 031f 	and.w	r3, r3, #31
 8002930:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002934:	4618      	mov	r0, r3
 8002936:	bd98      	pop	{r3, r4, r7, pc}
 8002938:	080079b0 	.word	0x080079b0

0800293c <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b082      	sub	sp, #8
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 |
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	226f      	movs	r2, #111	; 0x6f
 800294a:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 800294c:	f7ff f925 	bl	8001b9a <LL_RCC_GetSysClkSource>
 8002950:	4602      	mov	r2, r0
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 8002956:	f7ff f995 	bl	8001c84 <LL_RCC_GetAHBPrescaler>
 800295a:	4602      	mov	r2, r0
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 8002960:	f7ff f9b7 	bl	8001cd2 <LL_RCC_GetAPB1Prescaler>
 8002964:	4602      	mov	r2, r0
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 800296a:	f7ff f9be 	bl	8001cea <LL_RCC_GetAPB2Prescaler>
 800296e:	4602      	mov	r2, r0
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 8002974:	f7ff f992 	bl	8001c9c <LL_C2_RCC_GetAHBPrescaler>
 8002978:	4602      	mov	r2, r0
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 800297e:	f7ff f99a 	bl	8001cb6 <LL_RCC_GetAHB4Prescaler>
 8002982:	4602      	mov	r2, r0
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002988:	4b04      	ldr	r3, [pc, #16]	; (800299c <HAL_RCC_GetClockConfig+0x60>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0207 	and.w	r2, r3, #7
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	601a      	str	r2, [r3, #0]
}
 8002994:	bf00      	nop
 8002996:	3708      	adds	r7, #8
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}
 800299c:	58004000 	.word	0x58004000

080029a0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80029a0:	b590      	push	{r4, r7, lr}
 80029a2:	b085      	sub	sp, #20
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2bb0      	cmp	r3, #176	; 0xb0
 80029ac:	d903      	bls.n	80029b6 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80029ae:	4b15      	ldr	r3, [pc, #84]	; (8002a04 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80029b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b2:	60fb      	str	r3, [r7, #12]
 80029b4:	e007      	b.n	80029c6 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	091b      	lsrs	r3, r3, #4
 80029ba:	f003 030f 	and.w	r3, r3, #15
 80029be:	4a11      	ldr	r2, [pc, #68]	; (8002a04 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80029c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029c4:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80029c6:	f7ff f976 	bl	8001cb6 <LL_RCC_GetAHB4Prescaler>
 80029ca:	4603      	mov	r3, r0
 80029cc:	091b      	lsrs	r3, r3, #4
 80029ce:	f003 030f 	and.w	r3, r3, #15
 80029d2:	4a0d      	ldr	r2, [pc, #52]	; (8002a08 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80029d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029d8:	68fa      	ldr	r2, [r7, #12]
 80029da:	fbb2 f3f3 	udiv	r3, r2, r3
 80029de:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	4a0a      	ldr	r2, [pc, #40]	; (8002a0c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 80029e4:	fba2 2303 	umull	r2, r3, r2, r3
 80029e8:	0c9c      	lsrs	r4, r3, #18
 80029ea:	f7fe feb7 	bl	800175c <HAL_PWREx_GetVoltageRange>
 80029ee:	4603      	mov	r3, r0
 80029f0:	4619      	mov	r1, r3
 80029f2:	4620      	mov	r0, r4
 80029f4:	f000 f80c 	bl	8002a10 <RCC_SetFlashLatency>
 80029f8:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3714      	adds	r7, #20
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd90      	pop	{r4, r7, pc}
 8002a02:	bf00      	nop
 8002a04:	080079d0 	.word	0x080079d0
 8002a08:	08007970 	.word	0x08007970
 8002a0c:	431bde83 	.word	0x431bde83

08002a10 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002a10:	b590      	push	{r4, r7, lr}
 8002a12:	b093      	sub	sp, #76	; 0x4c
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8002a1a:	4b37      	ldr	r3, [pc, #220]	; (8002af8 <RCC_SetFlashLatency+0xe8>)
 8002a1c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002a20:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a22:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8002a26:	4a35      	ldr	r2, [pc, #212]	; (8002afc <RCC_SetFlashLatency+0xec>)
 8002a28:	f107 031c 	add.w	r3, r7, #28
 8002a2c:	ca07      	ldmia	r2, {r0, r1, r2}
 8002a2e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8002a32:	4b33      	ldr	r3, [pc, #204]	; (8002b00 <RCC_SetFlashLatency+0xf0>)
 8002a34:	f107 040c 	add.w	r4, r7, #12
 8002a38:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a3a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002a3e:	2300      	movs	r3, #0
 8002a40:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a48:	d11a      	bne.n	8002a80 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	643b      	str	r3, [r7, #64]	; 0x40
 8002a4e:	e013      	b.n	8002a78 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002a50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	3348      	adds	r3, #72	; 0x48
 8002a56:	443b      	add	r3, r7
 8002a58:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d807      	bhi.n	8002a72 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002a62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	3348      	adds	r3, #72	; 0x48
 8002a68:	443b      	add	r3, r7
 8002a6a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002a6e:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002a70:	e020      	b.n	8002ab4 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002a72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a74:	3301      	adds	r3, #1
 8002a76:	643b      	str	r3, [r7, #64]	; 0x40
 8002a78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a7a:	2b03      	cmp	r3, #3
 8002a7c:	d9e8      	bls.n	8002a50 <RCC_SetFlashLatency+0x40>
 8002a7e:	e019      	b.n	8002ab4 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002a80:	2300      	movs	r3, #0
 8002a82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a84:	e013      	b.n	8002aae <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002a86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	3348      	adds	r3, #72	; 0x48
 8002a8c:	443b      	add	r3, r7
 8002a8e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d807      	bhi.n	8002aa8 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002a98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	3348      	adds	r3, #72	; 0x48
 8002a9e:	443b      	add	r3, r7
 8002aa0:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002aa4:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002aa6:	e005      	b.n	8002ab4 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002aa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002aaa:	3301      	adds	r3, #1
 8002aac:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002aae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	d9e8      	bls.n	8002a86 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8002ab4:	4b13      	ldr	r3, [pc, #76]	; (8002b04 <RCC_SetFlashLatency+0xf4>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f023 0207 	bic.w	r2, r3, #7
 8002abc:	4911      	ldr	r1, [pc, #68]	; (8002b04 <RCC_SetFlashLatency+0xf4>)
 8002abe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002ac4:	f7fe f9c6 	bl	8000e54 <HAL_GetTick>
 8002ac8:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002aca:	e008      	b.n	8002ade <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002acc:	f7fe f9c2 	bl	8000e54 <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d901      	bls.n	8002ade <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	e007      	b.n	8002aee <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002ade:	4b09      	ldr	r3, [pc, #36]	; (8002b04 <RCC_SetFlashLatency+0xf4>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0307 	and.w	r3, r3, #7
 8002ae6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d1ef      	bne.n	8002acc <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8002aec:	2300      	movs	r3, #0
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	374c      	adds	r7, #76	; 0x4c
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd90      	pop	{r4, r7, pc}
 8002af6:	bf00      	nop
 8002af8:	0800792c 	.word	0x0800792c
 8002afc:	0800793c 	.word	0x0800793c
 8002b00:	08007948 	.word	0x08007948
 8002b04:	58004000 	.word	0x58004000

08002b08 <LL_RCC_LSE_IsEnabled>:
{
 8002b08:	b480      	push	{r7}
 8002b0a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8002b0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b14:	f003 0301 	and.w	r3, r3, #1
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d101      	bne.n	8002b20 <LL_RCC_LSE_IsEnabled+0x18>
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e000      	b.n	8002b22 <LL_RCC_LSE_IsEnabled+0x1a>
 8002b20:	2300      	movs	r3, #0
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr

08002b2c <LL_RCC_LSE_IsReady>:
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002b30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b38:	f003 0302 	and.w	r3, r3, #2
 8002b3c:	2b02      	cmp	r3, #2
 8002b3e:	d101      	bne.n	8002b44 <LL_RCC_LSE_IsReady+0x18>
 8002b40:	2301      	movs	r3, #1
 8002b42:	e000      	b.n	8002b46 <LL_RCC_LSE_IsReady+0x1a>
 8002b44:	2300      	movs	r3, #0
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <LL_RCC_MSI_EnablePLLMode>:
{
 8002b50:	b480      	push	{r7}
 8002b52:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8002b54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b5e:	f043 0304 	orr.w	r3, r3, #4
 8002b62:	6013      	str	r3, [r2, #0]
}
 8002b64:	bf00      	nop
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr

08002b6e <LL_RCC_SetRFWKPClockSource>:
{
 8002b6e:	b480      	push	{r7}
 8002b70:	b083      	sub	sp, #12
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8002b76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b7e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002b82:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002b8e:	bf00      	nop
 8002b90:	370c      	adds	r7, #12
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr

08002b9a <LL_RCC_SetSMPSClockSource>:
{
 8002b9a:	b480      	push	{r7}
 8002b9c:	b083      	sub	sp, #12
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8002ba2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba8:	f023 0203 	bic.w	r2, r3, #3
 8002bac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002bb6:	bf00      	nop
 8002bb8:	370c      	adds	r7, #12
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr

08002bc2 <LL_RCC_SetSMPSPrescaler>:
{
 8002bc2:	b480      	push	{r7}
 8002bc4:	b083      	sub	sp, #12
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8002bca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002bd4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002bde:	bf00      	nop
 8002be0:	370c      	adds	r7, #12
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr

08002bea <LL_RCC_SetUSARTClockSource>:
{
 8002bea:	b480      	push	{r7}
 8002bec:	b083      	sub	sp, #12
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8002bf2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bfa:	f023 0203 	bic.w	r2, r3, #3
 8002bfe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002c0a:	bf00      	nop
 8002c0c:	370c      	adds	r7, #12
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr

08002c16 <LL_RCC_SetLPUARTClockSource>:
{
 8002c16:	b480      	push	{r7}
 8002c18:	b083      	sub	sp, #12
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002c1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c26:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002c2a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002c36:	bf00      	nop
 8002c38:	370c      	adds	r7, #12
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr

08002c42 <LL_RCC_SetI2CClockSource>:
{
 8002c42:	b480      	push	{r7}
 8002c44:	b083      	sub	sp, #12
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002c4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c4e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	091b      	lsrs	r3, r3, #4
 8002c56:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002c5a:	43db      	mvns	r3, r3
 8002c5c:	401a      	ands	r2, r3
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	011b      	lsls	r3, r3, #4
 8002c62:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002c66:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002c70:	bf00      	nop
 8002c72:	370c      	adds	r7, #12
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr

08002c7c <LL_RCC_SetLPTIMClockSource>:
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002c84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c88:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	0c1b      	lsrs	r3, r3, #16
 8002c90:	041b      	lsls	r3, r3, #16
 8002c92:	43db      	mvns	r3, r3
 8002c94:	401a      	ands	r2, r3
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	041b      	lsls	r3, r3, #16
 8002c9a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002ca4:	bf00      	nop
 8002ca6:	370c      	adds	r7, #12
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr

08002cb0 <LL_RCC_SetSAIClockSource>:
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8002cb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cc0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002cc4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002cd0:	bf00      	nop
 8002cd2:	370c      	adds	r7, #12
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr

08002cdc <LL_RCC_SetRNGClockSource>:
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002ce4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ce8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cec:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002cf0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002cfc:	bf00      	nop
 8002cfe:	370c      	adds	r7, #12
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr

08002d08 <LL_RCC_SetCLK48ClockSource>:
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8002d10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d18:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d1c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002d28:	bf00      	nop
 8002d2a:	370c      	adds	r7, #12
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr

08002d34 <LL_RCC_SetUSBClockSource>:
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b082      	sub	sp, #8
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	f7ff ffe3 	bl	8002d08 <LL_RCC_SetCLK48ClockSource>
}
 8002d42:	bf00      	nop
 8002d44:	3708      	adds	r7, #8
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}

08002d4a <LL_RCC_SetADCClockSource>:
{
 8002d4a:	b480      	push	{r7}
 8002d4c:	b083      	sub	sp, #12
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002d52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d5a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002d5e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002d6a:	bf00      	nop
 8002d6c:	370c      	adds	r7, #12
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr

08002d76 <LL_RCC_SetRTCClockSource>:
{
 8002d76:	b480      	push	{r7}
 8002d78:	b083      	sub	sp, #12
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002d7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d86:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002d96:	bf00      	nop
 8002d98:	370c      	adds	r7, #12
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr

08002da2 <LL_RCC_GetRTCClockSource>:
{
 8002da2:	b480      	push	{r7}
 8002da4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002da6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dae:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr

08002dbc <LL_RCC_ForceBackupDomainReset>:
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002dc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dc8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002dcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002dd4:	bf00      	nop
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr

08002dde <LL_RCC_ReleaseBackupDomainReset>:
{
 8002dde:	b480      	push	{r7}
 8002de0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002de2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002dee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002df2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002df6:	bf00      	nop
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr

08002e00 <LL_RCC_PLLSAI1_Enable>:
{
 8002e00:	b480      	push	{r7}
 8002e02:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002e04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e0e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002e12:	6013      	str	r3, [r2, #0]
}
 8002e14:	bf00      	nop
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr

08002e1e <LL_RCC_PLLSAI1_Disable>:
{
 8002e1e:	b480      	push	{r7}
 8002e20:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002e22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e2c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002e30:	6013      	str	r3, [r2, #0]
}
 8002e32:	bf00      	nop
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr

08002e3c <LL_RCC_PLLSAI1_IsReady>:
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8002e40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e4a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e4e:	d101      	bne.n	8002e54 <LL_RCC_PLLSAI1_IsReady+0x18>
 8002e50:	2301      	movs	r3, #1
 8002e52:	e000      	b.n	8002e56 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8002e54:	2300      	movs	r3, #0
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr

08002e60 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b088      	sub	sp, #32
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8002e68:	2300      	movs	r3, #0
 8002e6a:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d034      	beq.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e80:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002e84:	d021      	beq.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8002e86:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002e8a:	d81b      	bhi.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002e8c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e90:	d01d      	beq.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8002e92:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e96:	d815      	bhi.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d00b      	beq.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8002e9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ea0:	d110      	bne.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8002ea2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002eac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eb0:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8002eb2:	e00d      	b.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	3304      	adds	r3, #4
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f000 f94d 	bl	8003158 <RCCEx_PLLSAI1_ConfigNP>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002ec2:	e005      	b.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	77fb      	strb	r3, [r7, #31]
        break;
 8002ec8:	e002      	b.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8002eca:	bf00      	nop
 8002ecc:	e000      	b.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8002ece:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ed0:	7ffb      	ldrb	r3, [r7, #31]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d105      	bne.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eda:	4618      	mov	r0, r3
 8002edc:	f7ff fee8 	bl	8002cb0 <LL_RCC_SetSAIClockSource>
 8002ee0:	e001      	b.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ee2:	7ffb      	ldrb	r3, [r7, #31]
 8002ee4:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d046      	beq.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8002ef2:	f7ff ff56 	bl	8002da2 <LL_RCC_GetRTCClockSource>
 8002ef6:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efc:	69ba      	ldr	r2, [r7, #24]
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d03c      	beq.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002f02:	f7fe fbc9 	bl	8001698 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8002f06:	69bb      	ldr	r3, [r7, #24]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d105      	bne.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f10:	4618      	mov	r0, r3
 8002f12:	f7ff ff30 	bl	8002d76 <LL_RCC_SetRTCClockSource>
 8002f16:	e02e      	b.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8002f18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f20:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8002f22:	f7ff ff4b 	bl	8002dbc <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8002f26:	f7ff ff5a 	bl	8002dde <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f34:	4313      	orrs	r3, r2
 8002f36:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8002f38:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8002f42:	f7ff fde1 	bl	8002b08 <LL_RCC_LSE_IsEnabled>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d114      	bne.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002f4c:	f7fd ff82 	bl	8000e54 <HAL_GetTick>
 8002f50:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8002f52:	e00b      	b.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f54:	f7fd ff7e 	bl	8000e54 <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d902      	bls.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	77fb      	strb	r3, [r7, #31]
              break;
 8002f6a:	e004      	b.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8002f6c:	f7ff fdde 	bl	8002b2c <LL_RCC_LSE_IsReady>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d1ee      	bne.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8002f76:	7ffb      	ldrb	r3, [r7, #31]
 8002f78:	77bb      	strb	r3, [r7, #30]
 8002f7a:	e001      	b.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f7c:	7ffb      	ldrb	r3, [r7, #31]
 8002f7e:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0301 	and.w	r3, r3, #1
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d004      	beq.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	699b      	ldr	r3, [r3, #24]
 8002f90:	4618      	mov	r0, r3
 8002f92:	f7ff fe2a 	bl	8002bea <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0302 	and.w	r3, r3, #2
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d004      	beq.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	69db      	ldr	r3, [r3, #28]
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f7ff fe35 	bl	8002c16 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0310 	and.w	r3, r3, #16
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d004      	beq.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f7ff fe5d 	bl	8002c7c <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0320 	and.w	r3, r3, #32
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d004      	beq.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f7ff fe52 	bl	8002c7c <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0304 	and.w	r3, r3, #4
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d004      	beq.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6a1b      	ldr	r3, [r3, #32]
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f7ff fe2a 	bl	8002c42 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0308 	and.w	r3, r3, #8
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d004      	beq.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffe:	4618      	mov	r0, r3
 8003000:	f7ff fe1f 	bl	8002c42 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800300c:	2b00      	cmp	r3, #0
 800300e:	d022      	beq.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003014:	4618      	mov	r0, r3
 8003016:	f7ff fe8d 	bl	8002d34 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800301e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003022:	d107      	bne.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8003024:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003028:	68db      	ldr	r3, [r3, #12]
 800302a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800302e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003032:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003038:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800303c:	d10b      	bne.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	3304      	adds	r3, #4
 8003042:	4618      	mov	r0, r3
 8003044:	f000 f8e3 	bl	800320e <RCCEx_PLLSAI1_ConfigNQ>
 8003048:	4603      	mov	r3, r0
 800304a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800304c:	7ffb      	ldrb	r3, [r7, #31]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d001      	beq.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8003052:	7ffb      	ldrb	r3, [r7, #31]
 8003054:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800305e:	2b00      	cmp	r3, #0
 8003060:	d02b      	beq.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003066:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800306a:	d008      	beq.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003070:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003074:	d003      	beq.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800307a:	2b00      	cmp	r3, #0
 800307c:	d105      	bne.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003082:	4618      	mov	r0, r3
 8003084:	f7ff fe2a 	bl	8002cdc <LL_RCC_SetRNGClockSource>
 8003088:	e00a      	b.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800308e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003092:	60fb      	str	r3, [r7, #12]
 8003094:	2000      	movs	r0, #0
 8003096:	f7ff fe21 	bl	8002cdc <LL_RCC_SetRNGClockSource>
 800309a:	68f8      	ldr	r0, [r7, #12]
 800309c:	f7ff fe34 	bl	8002d08 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030a4:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80030a8:	d107      	bne.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80030aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030b4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030b8:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d022      	beq.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030ca:	4618      	mov	r0, r3
 80030cc:	f7ff fe3d 	bl	8002d4a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80030d8:	d107      	bne.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80030da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030e8:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80030f2:	d10b      	bne.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	3304      	adds	r3, #4
 80030f8:	4618      	mov	r0, r3
 80030fa:	f000 f8e3 	bl	80032c4 <RCCEx_PLLSAI1_ConfigNR>
 80030fe:	4603      	mov	r3, r0
 8003100:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003102:	7ffb      	ldrb	r3, [r7, #31]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d001      	beq.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8003108:	7ffb      	ldrb	r3, [r7, #31]
 800310a:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003114:	2b00      	cmp	r3, #0
 8003116:	d004      	beq.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800311c:	4618      	mov	r0, r3
 800311e:	f7ff fd26 	bl	8002b6e <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d009      	beq.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003132:	4618      	mov	r0, r3
 8003134:	f7ff fd45 	bl	8002bc2 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800313c:	4618      	mov	r0, r3
 800313e:	f7ff fd2c 	bl	8002b9a <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8003142:	7fbb      	ldrb	r3, [r7, #30]
}
 8003144:	4618      	mov	r0, r3
 8003146:	3720      	adds	r7, #32
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}

0800314c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8003150:	f7ff fcfe 	bl	8002b50 <LL_RCC_MSI_EnablePLLMode>
}
 8003154:	bf00      	nop
 8003156:	bd80      	pop	{r7, pc}

08003158 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003160:	2300      	movs	r3, #0
 8003162:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003164:	f7ff fe5b 	bl	8002e1e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003168:	f7fd fe74 	bl	8000e54 <HAL_GetTick>
 800316c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800316e:	e009      	b.n	8003184 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003170:	f7fd fe70 	bl	8000e54 <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	2b02      	cmp	r3, #2
 800317c:	d902      	bls.n	8003184 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	73fb      	strb	r3, [r7, #15]
      break;
 8003182:	e004      	b.n	800318e <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003184:	f7ff fe5a 	bl	8002e3c <LL_RCC_PLLSAI1_IsReady>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d1f0      	bne.n	8003170 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800318e:	7bfb      	ldrb	r3, [r7, #15]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d137      	bne.n	8003204 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003194:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003198:	691b      	ldr	r3, [r3, #16]
 800319a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	021b      	lsls	r3, r3, #8
 80031a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031a8:	4313      	orrs	r3, r2
 80031aa:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80031ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031b0:	691b      	ldr	r3, [r3, #16]
 80031b2:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031be:	4313      	orrs	r3, r2
 80031c0:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80031c2:	f7ff fe1d 	bl	8002e00 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031c6:	f7fd fe45 	bl	8000e54 <HAL_GetTick>
 80031ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80031cc:	e009      	b.n	80031e2 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80031ce:	f7fd fe41 	bl	8000e54 <HAL_GetTick>
 80031d2:	4602      	mov	r2, r0
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	2b02      	cmp	r3, #2
 80031da:	d902      	bls.n	80031e2 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80031dc:	2303      	movs	r3, #3
 80031de:	73fb      	strb	r3, [r7, #15]
        break;
 80031e0:	e004      	b.n	80031ec <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80031e2:	f7ff fe2b 	bl	8002e3c <LL_RCC_PLLSAI1_IsReady>
 80031e6:	4603      	mov	r3, r0
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d1f0      	bne.n	80031ce <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80031ec:	7bfb      	ldrb	r3, [r7, #15]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d108      	bne.n	8003204 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80031f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031f6:	691a      	ldr	r2, [r3, #16]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	691b      	ldr	r3, [r3, #16]
 80031fc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003200:	4313      	orrs	r3, r2
 8003202:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003204:	7bfb      	ldrb	r3, [r7, #15]
}
 8003206:	4618      	mov	r0, r3
 8003208:	3710      	adds	r7, #16
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}

0800320e <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800320e:	b580      	push	{r7, lr}
 8003210:	b084      	sub	sp, #16
 8003212:	af00      	add	r7, sp, #0
 8003214:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003216:	2300      	movs	r3, #0
 8003218:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800321a:	f7ff fe00 	bl	8002e1e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800321e:	f7fd fe19 	bl	8000e54 <HAL_GetTick>
 8003222:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003224:	e009      	b.n	800323a <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003226:	f7fd fe15 	bl	8000e54 <HAL_GetTick>
 800322a:	4602      	mov	r2, r0
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	1ad3      	subs	r3, r2, r3
 8003230:	2b02      	cmp	r3, #2
 8003232:	d902      	bls.n	800323a <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8003234:	2303      	movs	r3, #3
 8003236:	73fb      	strb	r3, [r7, #15]
      break;
 8003238:	e004      	b.n	8003244 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800323a:	f7ff fdff 	bl	8002e3c <LL_RCC_PLLSAI1_IsReady>
 800323e:	4603      	mov	r3, r0
 8003240:	2b00      	cmp	r3, #0
 8003242:	d1f0      	bne.n	8003226 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8003244:	7bfb      	ldrb	r3, [r7, #15]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d137      	bne.n	80032ba <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800324a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800324e:	691b      	ldr	r3, [r3, #16]
 8003250:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	021b      	lsls	r3, r3, #8
 800325a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800325e:	4313      	orrs	r3, r2
 8003260:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8003262:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003266:	691b      	ldr	r3, [r3, #16]
 8003268:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003274:	4313      	orrs	r3, r2
 8003276:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003278:	f7ff fdc2 	bl	8002e00 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800327c:	f7fd fdea 	bl	8000e54 <HAL_GetTick>
 8003280:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003282:	e009      	b.n	8003298 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003284:	f7fd fde6 	bl	8000e54 <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	2b02      	cmp	r3, #2
 8003290:	d902      	bls.n	8003298 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8003292:	2303      	movs	r3, #3
 8003294:	73fb      	strb	r3, [r7, #15]
        break;
 8003296:	e004      	b.n	80032a2 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003298:	f7ff fdd0 	bl	8002e3c <LL_RCC_PLLSAI1_IsReady>
 800329c:	4603      	mov	r3, r0
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d1f0      	bne.n	8003284 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80032a2:	7bfb      	ldrb	r3, [r7, #15]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d108      	bne.n	80032ba <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80032a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032ac:	691a      	ldr	r2, [r3, #16]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	691b      	ldr	r3, [r3, #16]
 80032b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032b6:	4313      	orrs	r3, r2
 80032b8:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80032ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3710      	adds	r7, #16
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}

080032c4 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b084      	sub	sp, #16
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80032cc:	2300      	movs	r3, #0
 80032ce:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80032d0:	f7ff fda5 	bl	8002e1e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80032d4:	f7fd fdbe 	bl	8000e54 <HAL_GetTick>
 80032d8:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80032da:	e009      	b.n	80032f0 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80032dc:	f7fd fdba 	bl	8000e54 <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d902      	bls.n	80032f0 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	73fb      	strb	r3, [r7, #15]
      break;
 80032ee:	e004      	b.n	80032fa <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80032f0:	f7ff fda4 	bl	8002e3c <LL_RCC_PLLSAI1_IsReady>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d1f0      	bne.n	80032dc <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80032fa:	7bfb      	ldrb	r3, [r7, #15]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d137      	bne.n	8003370 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003300:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003304:	691b      	ldr	r3, [r3, #16]
 8003306:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	021b      	lsls	r3, r3, #8
 8003310:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003314:	4313      	orrs	r3, r2
 8003316:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8003318:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800331c:	691b      	ldr	r3, [r3, #16]
 800331e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	68db      	ldr	r3, [r3, #12]
 8003326:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800332a:	4313      	orrs	r3, r2
 800332c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800332e:	f7ff fd67 	bl	8002e00 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003332:	f7fd fd8f 	bl	8000e54 <HAL_GetTick>
 8003336:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003338:	e009      	b.n	800334e <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800333a:	f7fd fd8b 	bl	8000e54 <HAL_GetTick>
 800333e:	4602      	mov	r2, r0
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	2b02      	cmp	r3, #2
 8003346:	d902      	bls.n	800334e <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8003348:	2303      	movs	r3, #3
 800334a:	73fb      	strb	r3, [r7, #15]
        break;
 800334c:	e004      	b.n	8003358 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800334e:	f7ff fd75 	bl	8002e3c <LL_RCC_PLLSAI1_IsReady>
 8003352:	4603      	mov	r3, r0
 8003354:	2b01      	cmp	r3, #1
 8003356:	d1f0      	bne.n	800333a <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8003358:	7bfb      	ldrb	r3, [r7, #15]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d108      	bne.n	8003370 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800335e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003362:	691a      	ldr	r2, [r3, #16]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	691b      	ldr	r3, [r3, #16]
 8003368:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800336c:	4313      	orrs	r3, r2
 800336e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003370:	7bfb      	ldrb	r3, [r7, #15]
}
 8003372:	4618      	mov	r0, r3
 8003374:	3710      	adds	r7, #16
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}

0800337a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800337a:	b580      	push	{r7, lr}
 800337c:	b082      	sub	sp, #8
 800337e:	af00      	add	r7, sp, #0
 8003380:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d101      	bne.n	800338c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	e049      	b.n	8003420 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003392:	b2db      	uxtb	r3, r3
 8003394:	2b00      	cmp	r3, #0
 8003396:	d106      	bne.n	80033a6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	f000 f841 	bl	8003428 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2202      	movs	r2, #2
 80033aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	3304      	adds	r3, #4
 80033b6:	4619      	mov	r1, r3
 80033b8:	4610      	mov	r0, r2
 80033ba:	f000 f9d5 	bl	8003768 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2201      	movs	r2, #1
 80033c2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2201      	movs	r2, #1
 80033ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2201      	movs	r2, #1
 80033d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2201      	movs	r2, #1
 80033da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2201      	movs	r2, #1
 80033e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2201      	movs	r2, #1
 80033ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2201      	movs	r2, #1
 80033f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2201      	movs	r2, #1
 80033fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2201      	movs	r2, #1
 8003402:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2201      	movs	r2, #1
 800340a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2201      	movs	r2, #1
 8003412:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2201      	movs	r2, #1
 800341a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800341e:	2300      	movs	r3, #0
}
 8003420:	4618      	mov	r0, r3
 8003422:	3708      	adds	r7, #8
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}

08003428 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003430:	bf00      	nop
 8003432:	370c      	adds	r7, #12
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr

0800343c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800343c:	b480      	push	{r7}
 800343e:	b085      	sub	sp, #20
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800344a:	b2db      	uxtb	r3, r3
 800344c:	2b01      	cmp	r3, #1
 800344e:	d001      	beq.n	8003454 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e036      	b.n	80034c2 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2202      	movs	r2, #2
 8003458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	68da      	ldr	r2, [r3, #12]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f042 0201 	orr.w	r2, r2, #1
 800346a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a17      	ldr	r2, [pc, #92]	; (80034d0 <HAL_TIM_Base_Start_IT+0x94>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d004      	beq.n	8003480 <HAL_TIM_Base_Start_IT+0x44>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800347e:	d115      	bne.n	80034ac <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	689a      	ldr	r2, [r3, #8]
 8003486:	4b13      	ldr	r3, [pc, #76]	; (80034d4 <HAL_TIM_Base_Start_IT+0x98>)
 8003488:	4013      	ands	r3, r2
 800348a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2b06      	cmp	r3, #6
 8003490:	d015      	beq.n	80034be <HAL_TIM_Base_Start_IT+0x82>
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003498:	d011      	beq.n	80034be <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f042 0201 	orr.w	r2, r2, #1
 80034a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034aa:	e008      	b.n	80034be <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f042 0201 	orr.w	r2, r2, #1
 80034ba:	601a      	str	r2, [r3, #0]
 80034bc:	e000      	b.n	80034c0 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034be:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80034c0:	2300      	movs	r3, #0
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3714      	adds	r7, #20
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr
 80034ce:	bf00      	nop
 80034d0:	40012c00 	.word	0x40012c00
 80034d4:	00010007 	.word	0x00010007

080034d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b082      	sub	sp, #8
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	691b      	ldr	r3, [r3, #16]
 80034e6:	f003 0302 	and.w	r3, r3, #2
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d122      	bne.n	8003534 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	f003 0302 	and.w	r3, r3, #2
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d11b      	bne.n	8003534 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f06f 0202 	mvn.w	r2, #2
 8003504:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2201      	movs	r2, #1
 800350a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	699b      	ldr	r3, [r3, #24]
 8003512:	f003 0303 	and.w	r3, r3, #3
 8003516:	2b00      	cmp	r3, #0
 8003518:	d003      	beq.n	8003522 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f000 f905 	bl	800372a <HAL_TIM_IC_CaptureCallback>
 8003520:	e005      	b.n	800352e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f000 f8f7 	bl	8003716 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f000 f908 	bl	800373e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2200      	movs	r2, #0
 8003532:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	691b      	ldr	r3, [r3, #16]
 800353a:	f003 0304 	and.w	r3, r3, #4
 800353e:	2b04      	cmp	r3, #4
 8003540:	d122      	bne.n	8003588 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	f003 0304 	and.w	r3, r3, #4
 800354c:	2b04      	cmp	r3, #4
 800354e:	d11b      	bne.n	8003588 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f06f 0204 	mvn.w	r2, #4
 8003558:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2202      	movs	r2, #2
 800355e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	699b      	ldr	r3, [r3, #24]
 8003566:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800356a:	2b00      	cmp	r3, #0
 800356c:	d003      	beq.n	8003576 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f000 f8db 	bl	800372a <HAL_TIM_IC_CaptureCallback>
 8003574:	e005      	b.n	8003582 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f000 f8cd 	bl	8003716 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f000 f8de 	bl	800373e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	691b      	ldr	r3, [r3, #16]
 800358e:	f003 0308 	and.w	r3, r3, #8
 8003592:	2b08      	cmp	r3, #8
 8003594:	d122      	bne.n	80035dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	f003 0308 	and.w	r3, r3, #8
 80035a0:	2b08      	cmp	r3, #8
 80035a2:	d11b      	bne.n	80035dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f06f 0208 	mvn.w	r2, #8
 80035ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2204      	movs	r2, #4
 80035b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	69db      	ldr	r3, [r3, #28]
 80035ba:	f003 0303 	and.w	r3, r3, #3
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d003      	beq.n	80035ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f000 f8b1 	bl	800372a <HAL_TIM_IC_CaptureCallback>
 80035c8:	e005      	b.n	80035d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f000 f8a3 	bl	8003716 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f000 f8b4 	bl	800373e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	691b      	ldr	r3, [r3, #16]
 80035e2:	f003 0310 	and.w	r3, r3, #16
 80035e6:	2b10      	cmp	r3, #16
 80035e8:	d122      	bne.n	8003630 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	f003 0310 	and.w	r3, r3, #16
 80035f4:	2b10      	cmp	r3, #16
 80035f6:	d11b      	bne.n	8003630 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f06f 0210 	mvn.w	r2, #16
 8003600:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2208      	movs	r2, #8
 8003606:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	69db      	ldr	r3, [r3, #28]
 800360e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003612:	2b00      	cmp	r3, #0
 8003614:	d003      	beq.n	800361e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f000 f887 	bl	800372a <HAL_TIM_IC_CaptureCallback>
 800361c:	e005      	b.n	800362a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f000 f879 	bl	8003716 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f000 f88a 	bl	800373e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	691b      	ldr	r3, [r3, #16]
 8003636:	f003 0301 	and.w	r3, r3, #1
 800363a:	2b01      	cmp	r3, #1
 800363c:	d10e      	bne.n	800365c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	f003 0301 	and.w	r3, r3, #1
 8003648:	2b01      	cmp	r3, #1
 800364a:	d107      	bne.n	800365c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f06f 0201 	mvn.w	r2, #1
 8003654:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f7fd f8fc 	bl	8000854 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	691b      	ldr	r3, [r3, #16]
 8003662:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003666:	2b80      	cmp	r3, #128	; 0x80
 8003668:	d10e      	bne.n	8003688 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003674:	2b80      	cmp	r3, #128	; 0x80
 8003676:	d107      	bne.n	8003688 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003680:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f000 f8de 	bl	8003844 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	691b      	ldr	r3, [r3, #16]
 800368e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003692:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003696:	d10e      	bne.n	80036b6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	68db      	ldr	r3, [r3, #12]
 800369e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036a2:	2b80      	cmp	r3, #128	; 0x80
 80036a4:	d107      	bne.n	80036b6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80036ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f000 f8d1 	bl	8003858 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	691b      	ldr	r3, [r3, #16]
 80036bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036c0:	2b40      	cmp	r3, #64	; 0x40
 80036c2:	d10e      	bne.n	80036e2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ce:	2b40      	cmp	r3, #64	; 0x40
 80036d0:	d107      	bne.n	80036e2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80036da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f000 f838 	bl	8003752 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	691b      	ldr	r3, [r3, #16]
 80036e8:	f003 0320 	and.w	r3, r3, #32
 80036ec:	2b20      	cmp	r3, #32
 80036ee:	d10e      	bne.n	800370e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	f003 0320 	and.w	r3, r3, #32
 80036fa:	2b20      	cmp	r3, #32
 80036fc:	d107      	bne.n	800370e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f06f 0220 	mvn.w	r2, #32
 8003706:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	f000 f891 	bl	8003830 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800370e:	bf00      	nop
 8003710:	3708      	adds	r7, #8
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}

08003716 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003716:	b480      	push	{r7}
 8003718:	b083      	sub	sp, #12
 800371a:	af00      	add	r7, sp, #0
 800371c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800371e:	bf00      	nop
 8003720:	370c      	adds	r7, #12
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr

0800372a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800372a:	b480      	push	{r7}
 800372c:	b083      	sub	sp, #12
 800372e:	af00      	add	r7, sp, #0
 8003730:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003732:	bf00      	nop
 8003734:	370c      	adds	r7, #12
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr

0800373e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800373e:	b480      	push	{r7}
 8003740:	b083      	sub	sp, #12
 8003742:	af00      	add	r7, sp, #0
 8003744:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003746:	bf00      	nop
 8003748:	370c      	adds	r7, #12
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr

08003752 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003752:	b480      	push	{r7}
 8003754:	b083      	sub	sp, #12
 8003756:	af00      	add	r7, sp, #0
 8003758:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800375a:	bf00      	nop
 800375c:	370c      	adds	r7, #12
 800375e:	46bd      	mov	sp, r7
 8003760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003764:	4770      	bx	lr
	...

08003768 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003768:	b480      	push	{r7}
 800376a:	b085      	sub	sp, #20
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	4a2a      	ldr	r2, [pc, #168]	; (8003824 <TIM_Base_SetConfig+0xbc>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d003      	beq.n	8003788 <TIM_Base_SetConfig+0x20>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003786:	d108      	bne.n	800379a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800378e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	68fa      	ldr	r2, [r7, #12]
 8003796:	4313      	orrs	r3, r2
 8003798:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4a21      	ldr	r2, [pc, #132]	; (8003824 <TIM_Base_SetConfig+0xbc>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d00b      	beq.n	80037ba <TIM_Base_SetConfig+0x52>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037a8:	d007      	beq.n	80037ba <TIM_Base_SetConfig+0x52>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4a1e      	ldr	r2, [pc, #120]	; (8003828 <TIM_Base_SetConfig+0xc0>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d003      	beq.n	80037ba <TIM_Base_SetConfig+0x52>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4a1d      	ldr	r2, [pc, #116]	; (800382c <TIM_Base_SetConfig+0xc4>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d108      	bne.n	80037cc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	68fa      	ldr	r2, [r7, #12]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	695b      	ldr	r3, [r3, #20]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	68fa      	ldr	r2, [r7, #12]
 80037de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	689a      	ldr	r2, [r3, #8]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	4a0c      	ldr	r2, [pc, #48]	; (8003824 <TIM_Base_SetConfig+0xbc>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d007      	beq.n	8003808 <TIM_Base_SetConfig+0xa0>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	4a0b      	ldr	r2, [pc, #44]	; (8003828 <TIM_Base_SetConfig+0xc0>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d003      	beq.n	8003808 <TIM_Base_SetConfig+0xa0>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	4a0a      	ldr	r2, [pc, #40]	; (800382c <TIM_Base_SetConfig+0xc4>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d103      	bne.n	8003810 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	691a      	ldr	r2, [r3, #16]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2201      	movs	r2, #1
 8003814:	615a      	str	r2, [r3, #20]
}
 8003816:	bf00      	nop
 8003818:	3714      	adds	r7, #20
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr
 8003822:	bf00      	nop
 8003824:	40012c00 	.word	0x40012c00
 8003828:	40014400 	.word	0x40014400
 800382c:	40014800 	.word	0x40014800

08003830 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003838:	bf00      	nop
 800383a:	370c      	adds	r7, #12
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr

08003844 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800384c:	bf00      	nop
 800384e:	370c      	adds	r7, #12
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr

08003858 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003860:	bf00      	nop
 8003862:	370c      	adds	r7, #12
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr

0800386c <LL_RCC_GetUSARTClockSource>:
{
 800386c:	b480      	push	{r7}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8003874:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003878:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	4013      	ands	r3, r2
}
 8003880:	4618      	mov	r0, r3
 8003882:	370c      	adds	r7, #12
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr

0800388c <LL_RCC_GetLPUARTClockSource>:
{
 800388c:	b480      	push	{r7}
 800388e:	b083      	sub	sp, #12
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8003894:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003898:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	4013      	ands	r3, r2
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	370c      	adds	r7, #12
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr

080038ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b082      	sub	sp, #8
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d101      	bne.n	80038be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e042      	b.n	8003944 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d106      	bne.n	80038d6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2200      	movs	r2, #0
 80038cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f7fd f83d 	bl	8000950 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2224      	movs	r2, #36	; 0x24
 80038da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f022 0201 	bic.w	r2, r2, #1
 80038ec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f000 f8c2 	bl	8003a78 <UART_SetConfig>
 80038f4:	4603      	mov	r3, r0
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d101      	bne.n	80038fe <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e022      	b.n	8003944 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003902:	2b00      	cmp	r3, #0
 8003904:	d002      	beq.n	800390c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f000 fadc 	bl	8003ec4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	685a      	ldr	r2, [r3, #4]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800391a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	689a      	ldr	r2, [r3, #8]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800392a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f042 0201 	orr.w	r2, r2, #1
 800393a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f000 fb63 	bl	8004008 <UART_CheckIdleState>
 8003942:	4603      	mov	r3, r0
}
 8003944:	4618      	mov	r0, r3
 8003946:	3708      	adds	r7, #8
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}

0800394c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b08a      	sub	sp, #40	; 0x28
 8003950:	af02      	add	r7, sp, #8
 8003952:	60f8      	str	r0, [r7, #12]
 8003954:	60b9      	str	r1, [r7, #8]
 8003956:	603b      	str	r3, [r7, #0]
 8003958:	4613      	mov	r3, r2
 800395a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003962:	2b20      	cmp	r3, #32
 8003964:	f040 8083 	bne.w	8003a6e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d002      	beq.n	8003974 <HAL_UART_Transmit+0x28>
 800396e:	88fb      	ldrh	r3, [r7, #6]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d101      	bne.n	8003978 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e07b      	b.n	8003a70 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800397e:	2b01      	cmp	r3, #1
 8003980:	d101      	bne.n	8003986 <HAL_UART_Transmit+0x3a>
 8003982:	2302      	movs	r3, #2
 8003984:	e074      	b.n	8003a70 <HAL_UART_Transmit+0x124>
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2201      	movs	r2, #1
 800398a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2200      	movs	r2, #0
 8003992:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2221      	movs	r2, #33	; 0x21
 800399a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800399e:	f7fd fa59 	bl	8000e54 <HAL_GetTick>
 80039a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	88fa      	ldrh	r2, [r7, #6]
 80039a8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	88fa      	ldrh	r2, [r7, #6]
 80039b0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039bc:	d108      	bne.n	80039d0 <HAL_UART_Transmit+0x84>
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	691b      	ldr	r3, [r3, #16]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d104      	bne.n	80039d0 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80039c6:	2300      	movs	r3, #0
 80039c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	61bb      	str	r3, [r7, #24]
 80039ce:	e003      	b.n	80039d8 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80039d4:	2300      	movs	r3, #0
 80039d6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2200      	movs	r2, #0
 80039dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80039e0:	e02c      	b.n	8003a3c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	9300      	str	r3, [sp, #0]
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	2200      	movs	r2, #0
 80039ea:	2180      	movs	r1, #128	; 0x80
 80039ec:	68f8      	ldr	r0, [r7, #12]
 80039ee:	f000 fb56 	bl	800409e <UART_WaitOnFlagUntilTimeout>
 80039f2:	4603      	mov	r3, r0
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d001      	beq.n	80039fc <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80039f8:	2303      	movs	r3, #3
 80039fa:	e039      	b.n	8003a70 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d10b      	bne.n	8003a1a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a02:	69bb      	ldr	r3, [r7, #24]
 8003a04:	881b      	ldrh	r3, [r3, #0]
 8003a06:	461a      	mov	r2, r3
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a10:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003a12:	69bb      	ldr	r3, [r7, #24]
 8003a14:	3302      	adds	r3, #2
 8003a16:	61bb      	str	r3, [r7, #24]
 8003a18:	e007      	b.n	8003a2a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a1a:	69fb      	ldr	r3, [r7, #28]
 8003a1c:	781a      	ldrb	r2, [r3, #0]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003a24:	69fb      	ldr	r3, [r7, #28]
 8003a26:	3301      	adds	r3, #1
 8003a28:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	3b01      	subs	r3, #1
 8003a34:	b29a      	uxth	r2, r3
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d1cc      	bne.n	80039e2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	9300      	str	r3, [sp, #0]
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	2140      	movs	r1, #64	; 0x40
 8003a52:	68f8      	ldr	r0, [r7, #12]
 8003a54:	f000 fb23 	bl	800409e <UART_WaitOnFlagUntilTimeout>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d001      	beq.n	8003a62 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8003a5e:	2303      	movs	r3, #3
 8003a60:	e006      	b.n	8003a70 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2220      	movs	r2, #32
 8003a66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	e000      	b.n	8003a70 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8003a6e:	2302      	movs	r3, #2
  }
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3720      	adds	r7, #32
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}

08003a78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a7c:	b08c      	sub	sp, #48	; 0x30
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003a82:	2300      	movs	r3, #0
 8003a84:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	689a      	ldr	r2, [r3, #8]
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	691b      	ldr	r3, [r3, #16]
 8003a90:	431a      	orrs	r2, r3
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	695b      	ldr	r3, [r3, #20]
 8003a96:	431a      	orrs	r2, r3
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	69db      	ldr	r3, [r3, #28]
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	4baf      	ldr	r3, [pc, #700]	; (8003d64 <UART_SetConfig+0x2ec>)
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	697a      	ldr	r2, [r7, #20]
 8003aac:	6812      	ldr	r2, [r2, #0]
 8003aae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003ab0:	430b      	orrs	r3, r1
 8003ab2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	68da      	ldr	r2, [r3, #12]
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	430a      	orrs	r2, r1
 8003ac8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	699b      	ldr	r3, [r3, #24]
 8003ace:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4aa4      	ldr	r2, [pc, #656]	; (8003d68 <UART_SetConfig+0x2f0>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d004      	beq.n	8003ae4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	6a1b      	ldr	r3, [r3, #32]
 8003ade:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003aee:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003af2:	697a      	ldr	r2, [r7, #20]
 8003af4:	6812      	ldr	r2, [r2, #0]
 8003af6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003af8:	430b      	orrs	r3, r1
 8003afa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b02:	f023 010f 	bic.w	r1, r3, #15
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	430a      	orrs	r2, r1
 8003b10:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a95      	ldr	r2, [pc, #596]	; (8003d6c <UART_SetConfig+0x2f4>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d125      	bne.n	8003b68 <UART_SetConfig+0xf0>
 8003b1c:	2003      	movs	r0, #3
 8003b1e:	f7ff fea5 	bl	800386c <LL_RCC_GetUSARTClockSource>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2b03      	cmp	r3, #3
 8003b26:	d81b      	bhi.n	8003b60 <UART_SetConfig+0xe8>
 8003b28:	a201      	add	r2, pc, #4	; (adr r2, 8003b30 <UART_SetConfig+0xb8>)
 8003b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b2e:	bf00      	nop
 8003b30:	08003b41 	.word	0x08003b41
 8003b34:	08003b51 	.word	0x08003b51
 8003b38:	08003b49 	.word	0x08003b49
 8003b3c:	08003b59 	.word	0x08003b59
 8003b40:	2301      	movs	r3, #1
 8003b42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b46:	e042      	b.n	8003bce <UART_SetConfig+0x156>
 8003b48:	2302      	movs	r3, #2
 8003b4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b4e:	e03e      	b.n	8003bce <UART_SetConfig+0x156>
 8003b50:	2304      	movs	r3, #4
 8003b52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b56:	e03a      	b.n	8003bce <UART_SetConfig+0x156>
 8003b58:	2308      	movs	r3, #8
 8003b5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b5e:	e036      	b.n	8003bce <UART_SetConfig+0x156>
 8003b60:	2310      	movs	r3, #16
 8003b62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b66:	e032      	b.n	8003bce <UART_SetConfig+0x156>
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a7e      	ldr	r2, [pc, #504]	; (8003d68 <UART_SetConfig+0x2f0>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d12a      	bne.n	8003bc8 <UART_SetConfig+0x150>
 8003b72:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8003b76:	f7ff fe89 	bl	800388c <LL_RCC_GetLPUARTClockSource>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b80:	d01a      	beq.n	8003bb8 <UART_SetConfig+0x140>
 8003b82:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b86:	d81b      	bhi.n	8003bc0 <UART_SetConfig+0x148>
 8003b88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b8c:	d00c      	beq.n	8003ba8 <UART_SetConfig+0x130>
 8003b8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b92:	d815      	bhi.n	8003bc0 <UART_SetConfig+0x148>
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d003      	beq.n	8003ba0 <UART_SetConfig+0x128>
 8003b98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b9c:	d008      	beq.n	8003bb0 <UART_SetConfig+0x138>
 8003b9e:	e00f      	b.n	8003bc0 <UART_SetConfig+0x148>
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ba6:	e012      	b.n	8003bce <UART_SetConfig+0x156>
 8003ba8:	2302      	movs	r3, #2
 8003baa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003bae:	e00e      	b.n	8003bce <UART_SetConfig+0x156>
 8003bb0:	2304      	movs	r3, #4
 8003bb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003bb6:	e00a      	b.n	8003bce <UART_SetConfig+0x156>
 8003bb8:	2308      	movs	r3, #8
 8003bba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003bbe:	e006      	b.n	8003bce <UART_SetConfig+0x156>
 8003bc0:	2310      	movs	r3, #16
 8003bc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003bc6:	e002      	b.n	8003bce <UART_SetConfig+0x156>
 8003bc8:	2310      	movs	r3, #16
 8003bca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a65      	ldr	r2, [pc, #404]	; (8003d68 <UART_SetConfig+0x2f0>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	f040 8097 	bne.w	8003d08 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003bda:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003bde:	2b08      	cmp	r3, #8
 8003be0:	d823      	bhi.n	8003c2a <UART_SetConfig+0x1b2>
 8003be2:	a201      	add	r2, pc, #4	; (adr r2, 8003be8 <UART_SetConfig+0x170>)
 8003be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003be8:	08003c0d 	.word	0x08003c0d
 8003bec:	08003c2b 	.word	0x08003c2b
 8003bf0:	08003c15 	.word	0x08003c15
 8003bf4:	08003c2b 	.word	0x08003c2b
 8003bf8:	08003c1b 	.word	0x08003c1b
 8003bfc:	08003c2b 	.word	0x08003c2b
 8003c00:	08003c2b 	.word	0x08003c2b
 8003c04:	08003c2b 	.word	0x08003c2b
 8003c08:	08003c23 	.word	0x08003c23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c0c:	f7fe fe6a 	bl	80028e4 <HAL_RCC_GetPCLK1Freq>
 8003c10:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003c12:	e010      	b.n	8003c36 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c14:	4b56      	ldr	r3, [pc, #344]	; (8003d70 <UART_SetConfig+0x2f8>)
 8003c16:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003c18:	e00d      	b.n	8003c36 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c1a:	f7fe fde3 	bl	80027e4 <HAL_RCC_GetSysClockFreq>
 8003c1e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003c20:	e009      	b.n	8003c36 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c26:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003c28:	e005      	b.n	8003c36 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003c34:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	f000 812a 	beq.w	8003e92 <UART_SetConfig+0x41a>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c42:	4a4c      	ldr	r2, [pc, #304]	; (8003d74 <UART_SetConfig+0x2fc>)
 8003c44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003c48:	461a      	mov	r2, r3
 8003c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003c50:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	685a      	ldr	r2, [r3, #4]
 8003c56:	4613      	mov	r3, r2
 8003c58:	005b      	lsls	r3, r3, #1
 8003c5a:	4413      	add	r3, r2
 8003c5c:	69ba      	ldr	r2, [r7, #24]
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d305      	bcc.n	8003c6e <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003c68:	69ba      	ldr	r2, [r7, #24]
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d903      	bls.n	8003c76 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003c74:	e10d      	b.n	8003e92 <UART_SetConfig+0x41a>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c78:	2200      	movs	r2, #0
 8003c7a:	60bb      	str	r3, [r7, #8]
 8003c7c:	60fa      	str	r2, [r7, #12]
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c82:	4a3c      	ldr	r2, [pc, #240]	; (8003d74 <UART_SetConfig+0x2fc>)
 8003c84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	603b      	str	r3, [r7, #0]
 8003c8e:	607a      	str	r2, [r7, #4]
 8003c90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c94:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003c98:	f7fc fa72 	bl	8000180 <__aeabi_uldivmod>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	460b      	mov	r3, r1
 8003ca0:	4610      	mov	r0, r2
 8003ca2:	4619      	mov	r1, r3
 8003ca4:	f04f 0200 	mov.w	r2, #0
 8003ca8:	f04f 0300 	mov.w	r3, #0
 8003cac:	020b      	lsls	r3, r1, #8
 8003cae:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003cb2:	0202      	lsls	r2, r0, #8
 8003cb4:	6979      	ldr	r1, [r7, #20]
 8003cb6:	6849      	ldr	r1, [r1, #4]
 8003cb8:	0849      	lsrs	r1, r1, #1
 8003cba:	2000      	movs	r0, #0
 8003cbc:	460c      	mov	r4, r1
 8003cbe:	4605      	mov	r5, r0
 8003cc0:	eb12 0804 	adds.w	r8, r2, r4
 8003cc4:	eb43 0905 	adc.w	r9, r3, r5
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	469a      	mov	sl, r3
 8003cd0:	4693      	mov	fp, r2
 8003cd2:	4652      	mov	r2, sl
 8003cd4:	465b      	mov	r3, fp
 8003cd6:	4640      	mov	r0, r8
 8003cd8:	4649      	mov	r1, r9
 8003cda:	f7fc fa51 	bl	8000180 <__aeabi_uldivmod>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	460b      	mov	r3, r1
 8003ce2:	4613      	mov	r3, r2
 8003ce4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003ce6:	6a3b      	ldr	r3, [r7, #32]
 8003ce8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003cec:	d308      	bcc.n	8003d00 <UART_SetConfig+0x288>
 8003cee:	6a3b      	ldr	r3, [r7, #32]
 8003cf0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003cf4:	d204      	bcs.n	8003d00 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	6a3a      	ldr	r2, [r7, #32]
 8003cfc:	60da      	str	r2, [r3, #12]
 8003cfe:	e0c8      	b.n	8003e92 <UART_SetConfig+0x41a>
        }
        else
        {
          ret = HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003d06:	e0c4      	b.n	8003e92 <UART_SetConfig+0x41a>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	69db      	ldr	r3, [r3, #28]
 8003d0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d10:	d16d      	bne.n	8003dee <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8003d12:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003d16:	3b01      	subs	r3, #1
 8003d18:	2b07      	cmp	r3, #7
 8003d1a:	d82d      	bhi.n	8003d78 <UART_SetConfig+0x300>
 8003d1c:	a201      	add	r2, pc, #4	; (adr r2, 8003d24 <UART_SetConfig+0x2ac>)
 8003d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d22:	bf00      	nop
 8003d24:	08003d45 	.word	0x08003d45
 8003d28:	08003d4d 	.word	0x08003d4d
 8003d2c:	08003d79 	.word	0x08003d79
 8003d30:	08003d53 	.word	0x08003d53
 8003d34:	08003d79 	.word	0x08003d79
 8003d38:	08003d79 	.word	0x08003d79
 8003d3c:	08003d79 	.word	0x08003d79
 8003d40:	08003d5b 	.word	0x08003d5b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d44:	f7fe fde4 	bl	8002910 <HAL_RCC_GetPCLK2Freq>
 8003d48:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003d4a:	e01b      	b.n	8003d84 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d4c:	4b08      	ldr	r3, [pc, #32]	; (8003d70 <UART_SetConfig+0x2f8>)
 8003d4e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003d50:	e018      	b.n	8003d84 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d52:	f7fe fd47 	bl	80027e4 <HAL_RCC_GetSysClockFreq>
 8003d56:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003d58:	e014      	b.n	8003d84 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d5e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003d60:	e010      	b.n	8003d84 <UART_SetConfig+0x30c>
 8003d62:	bf00      	nop
 8003d64:	cfff69f3 	.word	0xcfff69f3
 8003d68:	40008000 	.word	0x40008000
 8003d6c:	40013800 	.word	0x40013800
 8003d70:	00f42400 	.word	0x00f42400
 8003d74:	08007a10 	.word	0x08007a10
      default:
        pclk = 0U;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003d82:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	f000 8083 	beq.w	8003e92 <UART_SetConfig+0x41a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d90:	4a4a      	ldr	r2, [pc, #296]	; (8003ebc <UART_SetConfig+0x444>)
 8003d92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003d96:	461a      	mov	r2, r3
 8003d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9a:	fbb3 f3f2 	udiv	r3, r3, r2
 8003d9e:	005a      	lsls	r2, r3, #1
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	085b      	lsrs	r3, r3, #1
 8003da6:	441a      	add	r2, r3
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	fbb2 f3f3 	udiv	r3, r2, r3
 8003db0:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003db2:	6a3b      	ldr	r3, [r7, #32]
 8003db4:	2b0f      	cmp	r3, #15
 8003db6:	d916      	bls.n	8003de6 <UART_SetConfig+0x36e>
 8003db8:	6a3b      	ldr	r3, [r7, #32]
 8003dba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dbe:	d212      	bcs.n	8003de6 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003dc0:	6a3b      	ldr	r3, [r7, #32]
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	f023 030f 	bic.w	r3, r3, #15
 8003dc8:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003dca:	6a3b      	ldr	r3, [r7, #32]
 8003dcc:	085b      	lsrs	r3, r3, #1
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	f003 0307 	and.w	r3, r3, #7
 8003dd4:	b29a      	uxth	r2, r3
 8003dd6:	8bfb      	ldrh	r3, [r7, #30]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	8bfa      	ldrh	r2, [r7, #30]
 8003de2:	60da      	str	r2, [r3, #12]
 8003de4:	e055      	b.n	8003e92 <UART_SetConfig+0x41a>
      }
      else
      {
        ret = HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003dec:	e051      	b.n	8003e92 <UART_SetConfig+0x41a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003dee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003df2:	3b01      	subs	r3, #1
 8003df4:	2b07      	cmp	r3, #7
 8003df6:	d822      	bhi.n	8003e3e <UART_SetConfig+0x3c6>
 8003df8:	a201      	add	r2, pc, #4	; (adr r2, 8003e00 <UART_SetConfig+0x388>)
 8003dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dfe:	bf00      	nop
 8003e00:	08003e21 	.word	0x08003e21
 8003e04:	08003e29 	.word	0x08003e29
 8003e08:	08003e3f 	.word	0x08003e3f
 8003e0c:	08003e2f 	.word	0x08003e2f
 8003e10:	08003e3f 	.word	0x08003e3f
 8003e14:	08003e3f 	.word	0x08003e3f
 8003e18:	08003e3f 	.word	0x08003e3f
 8003e1c:	08003e37 	.word	0x08003e37
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e20:	f7fe fd76 	bl	8002910 <HAL_RCC_GetPCLK2Freq>
 8003e24:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003e26:	e010      	b.n	8003e4a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e28:	4b25      	ldr	r3, [pc, #148]	; (8003ec0 <UART_SetConfig+0x448>)
 8003e2a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003e2c:	e00d      	b.n	8003e4a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e2e:	f7fe fcd9 	bl	80027e4 <HAL_RCC_GetSysClockFreq>
 8003e32:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003e34:	e009      	b.n	8003e4a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e3a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003e3c:	e005      	b.n	8003e4a <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003e48:	bf00      	nop
    }

    if (pclk != 0U)
 8003e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d020      	beq.n	8003e92 <UART_SetConfig+0x41a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e54:	4a19      	ldr	r2, [pc, #100]	; (8003ebc <UART_SetConfig+0x444>)
 8003e56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5e:	fbb3 f2f2 	udiv	r2, r3, r2
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	085b      	lsrs	r3, r3, #1
 8003e68:	441a      	add	r2, r3
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e72:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e74:	6a3b      	ldr	r3, [r7, #32]
 8003e76:	2b0f      	cmp	r3, #15
 8003e78:	d908      	bls.n	8003e8c <UART_SetConfig+0x414>
 8003e7a:	6a3b      	ldr	r3, [r7, #32]
 8003e7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e80:	d204      	bcs.n	8003e8c <UART_SetConfig+0x414>
      {
        huart->Instance->BRR = usartdiv;
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	6a3a      	ldr	r2, [r7, #32]
 8003e88:	60da      	str	r2, [r3, #12]
 8003e8a:	e002      	b.n	8003e92 <UART_SetConfig+0x41a>
      }
      else
      {
        ret = HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	2201      	movs	r2, #1
 8003e96:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003eae:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3730      	adds	r7, #48	; 0x30
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ebc:	08007a10 	.word	0x08007a10
 8003ec0:	00f42400 	.word	0x00f42400

08003ec4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b083      	sub	sp, #12
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ed0:	f003 0301 	and.w	r3, r3, #1
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d00a      	beq.n	8003eee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	430a      	orrs	r2, r1
 8003eec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef2:	f003 0302 	and.w	r3, r3, #2
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d00a      	beq.n	8003f10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	430a      	orrs	r2, r1
 8003f0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f14:	f003 0304 	and.w	r3, r3, #4
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d00a      	beq.n	8003f32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	430a      	orrs	r2, r1
 8003f30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f36:	f003 0308 	and.w	r3, r3, #8
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d00a      	beq.n	8003f54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	430a      	orrs	r2, r1
 8003f52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f58:	f003 0310 	and.w	r3, r3, #16
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d00a      	beq.n	8003f76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	430a      	orrs	r2, r1
 8003f74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f7a:	f003 0320 	and.w	r3, r3, #32
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d00a      	beq.n	8003f98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	430a      	orrs	r2, r1
 8003f96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d01a      	beq.n	8003fda <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	430a      	orrs	r2, r1
 8003fb8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fc2:	d10a      	bne.n	8003fda <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	430a      	orrs	r2, r1
 8003fd8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d00a      	beq.n	8003ffc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	430a      	orrs	r2, r1
 8003ffa:	605a      	str	r2, [r3, #4]
  }
}
 8003ffc:	bf00      	nop
 8003ffe:	370c      	adds	r7, #12
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr

08004008 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b086      	sub	sp, #24
 800400c:	af02      	add	r7, sp, #8
 800400e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2200      	movs	r2, #0
 8004014:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004018:	f7fc ff1c 	bl	8000e54 <HAL_GetTick>
 800401c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 0308 	and.w	r3, r3, #8
 8004028:	2b08      	cmp	r3, #8
 800402a:	d10e      	bne.n	800404a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800402c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004030:	9300      	str	r3, [sp, #0]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2200      	movs	r2, #0
 8004036:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f000 f82f 	bl	800409e <UART_WaitOnFlagUntilTimeout>
 8004040:	4603      	mov	r3, r0
 8004042:	2b00      	cmp	r3, #0
 8004044:	d001      	beq.n	800404a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004046:	2303      	movs	r3, #3
 8004048:	e025      	b.n	8004096 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 0304 	and.w	r3, r3, #4
 8004054:	2b04      	cmp	r3, #4
 8004056:	d10e      	bne.n	8004076 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004058:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800405c:	9300      	str	r3, [sp, #0]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2200      	movs	r2, #0
 8004062:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f000 f819 	bl	800409e <UART_WaitOnFlagUntilTimeout>
 800406c:	4603      	mov	r3, r0
 800406e:	2b00      	cmp	r3, #0
 8004070:	d001      	beq.n	8004076 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004072:	2303      	movs	r3, #3
 8004074:	e00f      	b.n	8004096 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2220      	movs	r2, #32
 800407a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2220      	movs	r2, #32
 8004082:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2200      	movs	r2, #0
 800408a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2200      	movs	r2, #0
 8004090:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004094:	2300      	movs	r3, #0
}
 8004096:	4618      	mov	r0, r3
 8004098:	3710      	adds	r7, #16
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}

0800409e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800409e:	b580      	push	{r7, lr}
 80040a0:	b09c      	sub	sp, #112	; 0x70
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	60f8      	str	r0, [r7, #12]
 80040a6:	60b9      	str	r1, [r7, #8]
 80040a8:	603b      	str	r3, [r7, #0]
 80040aa:	4613      	mov	r3, r2
 80040ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040ae:	e0a9      	b.n	8004204 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040b6:	f000 80a5 	beq.w	8004204 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040ba:	f7fc fecb 	bl	8000e54 <HAL_GetTick>
 80040be:	4602      	mov	r2, r0
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	1ad3      	subs	r3, r2, r3
 80040c4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d302      	bcc.n	80040d0 <UART_WaitOnFlagUntilTimeout+0x32>
 80040ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d140      	bne.n	8004152 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040d8:	e853 3f00 	ldrex	r3, [r3]
 80040dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80040de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040e0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80040e4:	667b      	str	r3, [r7, #100]	; 0x64
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	461a      	mov	r2, r3
 80040ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80040ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80040f0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040f2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80040f4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80040f6:	e841 2300 	strex	r3, r2, [r1]
 80040fa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80040fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d1e6      	bne.n	80040d0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	3308      	adds	r3, #8
 8004108:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800410a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800410c:	e853 3f00 	ldrex	r3, [r3]
 8004110:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004114:	f023 0301 	bic.w	r3, r3, #1
 8004118:	663b      	str	r3, [r7, #96]	; 0x60
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	3308      	adds	r3, #8
 8004120:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004122:	64ba      	str	r2, [r7, #72]	; 0x48
 8004124:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004126:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004128:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800412a:	e841 2300 	strex	r3, r2, [r1]
 800412e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004130:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004132:	2b00      	cmp	r3, #0
 8004134:	d1e5      	bne.n	8004102 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2220      	movs	r2, #32
 800413a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2220      	movs	r2, #32
 8004142:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2200      	movs	r2, #0
 800414a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e069      	b.n	8004226 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 0304 	and.w	r3, r3, #4
 800415c:	2b00      	cmp	r3, #0
 800415e:	d051      	beq.n	8004204 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	69db      	ldr	r3, [r3, #28]
 8004166:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800416a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800416e:	d149      	bne.n	8004204 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004178:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004182:	e853 3f00 	ldrex	r3, [r3]
 8004186:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800418e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	461a      	mov	r2, r3
 8004196:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004198:	637b      	str	r3, [r7, #52]	; 0x34
 800419a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800419c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800419e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80041a0:	e841 2300 	strex	r3, r2, [r1]
 80041a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80041a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d1e6      	bne.n	800417a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	3308      	adds	r3, #8
 80041b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	e853 3f00 	ldrex	r3, [r3]
 80041ba:	613b      	str	r3, [r7, #16]
   return(result);
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	f023 0301 	bic.w	r3, r3, #1
 80041c2:	66bb      	str	r3, [r7, #104]	; 0x68
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	3308      	adds	r3, #8
 80041ca:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80041cc:	623a      	str	r2, [r7, #32]
 80041ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041d0:	69f9      	ldr	r1, [r7, #28]
 80041d2:	6a3a      	ldr	r2, [r7, #32]
 80041d4:	e841 2300 	strex	r3, r2, [r1]
 80041d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80041da:	69bb      	ldr	r3, [r7, #24]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d1e5      	bne.n	80041ac <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2220      	movs	r2, #32
 80041e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2220      	movs	r2, #32
 80041ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2220      	movs	r2, #32
 80041f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2200      	movs	r2, #0
 80041fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004200:	2303      	movs	r3, #3
 8004202:	e010      	b.n	8004226 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	69da      	ldr	r2, [r3, #28]
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	4013      	ands	r3, r2
 800420e:	68ba      	ldr	r2, [r7, #8]
 8004210:	429a      	cmp	r2, r3
 8004212:	bf0c      	ite	eq
 8004214:	2301      	moveq	r3, #1
 8004216:	2300      	movne	r3, #0
 8004218:	b2db      	uxtb	r3, r3
 800421a:	461a      	mov	r2, r3
 800421c:	79fb      	ldrb	r3, [r7, #7]
 800421e:	429a      	cmp	r2, r3
 8004220:	f43f af46 	beq.w	80040b0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004224:	2300      	movs	r3, #0
}
 8004226:	4618      	mov	r0, r3
 8004228:	3770      	adds	r7, #112	; 0x70
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}

0800422e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800422e:	b480      	push	{r7}
 8004230:	b085      	sub	sp, #20
 8004232:	af00      	add	r7, sp, #0
 8004234:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800423c:	2b01      	cmp	r3, #1
 800423e:	d101      	bne.n	8004244 <HAL_UARTEx_DisableFifoMode+0x16>
 8004240:	2302      	movs	r3, #2
 8004242:	e027      	b.n	8004294 <HAL_UARTEx_DisableFifoMode+0x66>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2201      	movs	r2, #1
 8004248:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2224      	movs	r2, #36	; 0x24
 8004250:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f022 0201 	bic.w	r2, r2, #1
 800426a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004272:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2200      	movs	r2, #0
 8004278:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	68fa      	ldr	r2, [r7, #12]
 8004280:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2220      	movs	r2, #32
 8004286:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2200      	movs	r2, #0
 800428e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004292:	2300      	movs	r3, #0
}
 8004294:	4618      	mov	r0, r3
 8004296:	3714      	adds	r7, #20
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr

080042a0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b084      	sub	sp, #16
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d101      	bne.n	80042b8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80042b4:	2302      	movs	r3, #2
 80042b6:	e02d      	b.n	8004314 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2201      	movs	r2, #1
 80042bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2224      	movs	r2, #36	; 0x24
 80042c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f022 0201 	bic.w	r2, r2, #1
 80042de:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	683a      	ldr	r2, [r7, #0]
 80042f0:	430a      	orrs	r2, r1
 80042f2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	f000 f84f 	bl	8004398 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	68fa      	ldr	r2, [r7, #12]
 8004300:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2220      	movs	r2, #32
 8004306:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004312:	2300      	movs	r3, #0
}
 8004314:	4618      	mov	r0, r3
 8004316:	3710      	adds	r7, #16
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}

0800431c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b084      	sub	sp, #16
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
 8004324:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800432c:	2b01      	cmp	r3, #1
 800432e:	d101      	bne.n	8004334 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004330:	2302      	movs	r3, #2
 8004332:	e02d      	b.n	8004390 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2224      	movs	r2, #36	; 0x24
 8004340:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f022 0201 	bic.w	r2, r2, #1
 800435a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	683a      	ldr	r2, [r7, #0]
 800436c:	430a      	orrs	r2, r1
 800436e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	f000 f811 	bl	8004398 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	68fa      	ldr	r2, [r7, #12]
 800437c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2220      	movs	r2, #32
 8004382:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800438e:	2300      	movs	r3, #0
}
 8004390:	4618      	mov	r0, r3
 8004392:	3710      	adds	r7, #16
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}

08004398 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004398:	b480      	push	{r7}
 800439a:	b085      	sub	sp, #20
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d108      	bne.n	80043ba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80043b8:	e031      	b.n	800441e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80043ba:	2308      	movs	r3, #8
 80043bc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80043be:	2308      	movs	r3, #8
 80043c0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	0e5b      	lsrs	r3, r3, #25
 80043ca:	b2db      	uxtb	r3, r3
 80043cc:	f003 0307 	and.w	r3, r3, #7
 80043d0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	0f5b      	lsrs	r3, r3, #29
 80043da:	b2db      	uxtb	r3, r3
 80043dc:	f003 0307 	and.w	r3, r3, #7
 80043e0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80043e2:	7bbb      	ldrb	r3, [r7, #14]
 80043e4:	7b3a      	ldrb	r2, [r7, #12]
 80043e6:	4911      	ldr	r1, [pc, #68]	; (800442c <UARTEx_SetNbDataToProcess+0x94>)
 80043e8:	5c8a      	ldrb	r2, [r1, r2]
 80043ea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80043ee:	7b3a      	ldrb	r2, [r7, #12]
 80043f0:	490f      	ldr	r1, [pc, #60]	; (8004430 <UARTEx_SetNbDataToProcess+0x98>)
 80043f2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80043f4:	fb93 f3f2 	sdiv	r3, r3, r2
 80043f8:	b29a      	uxth	r2, r3
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004400:	7bfb      	ldrb	r3, [r7, #15]
 8004402:	7b7a      	ldrb	r2, [r7, #13]
 8004404:	4909      	ldr	r1, [pc, #36]	; (800442c <UARTEx_SetNbDataToProcess+0x94>)
 8004406:	5c8a      	ldrb	r2, [r1, r2]
 8004408:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800440c:	7b7a      	ldrb	r2, [r7, #13]
 800440e:	4908      	ldr	r1, [pc, #32]	; (8004430 <UARTEx_SetNbDataToProcess+0x98>)
 8004410:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004412:	fb93 f3f2 	sdiv	r3, r3, r2
 8004416:	b29a      	uxth	r2, r3
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800441e:	bf00      	nop
 8004420:	3714      	adds	r7, #20
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr
 800442a:	bf00      	nop
 800442c:	08007a28 	.word	0x08007a28
 8004430:	08007a30 	.word	0x08007a30

08004434 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004434:	b480      	push	{r7}
 8004436:	b085      	sub	sp, #20
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800443c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004440:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004448:	b29a      	uxth	r2, r3
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	b29b      	uxth	r3, r3
 800444e:	43db      	mvns	r3, r3
 8004450:	b29b      	uxth	r3, r3
 8004452:	4013      	ands	r3, r2
 8004454:	b29a      	uxth	r2, r3
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800445c:	2300      	movs	r3, #0
}
 800445e:	4618      	mov	r0, r3
 8004460:	3714      	adds	r7, #20
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr

0800446a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800446a:	b084      	sub	sp, #16
 800446c:	b480      	push	{r7}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
 8004474:	f107 0014 	add.w	r0, r7, #20
 8004478:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2201      	movs	r2, #1
 8004480:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2200      	movs	r2, #0
 8004488:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2200      	movs	r2, #0
 8004490:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2200      	movs	r2, #0
 8004498:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800449c:	2300      	movs	r3, #0
}
 800449e:	4618      	mov	r0, r3
 80044a0:	370c      	adds	r7, #12
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	b004      	add	sp, #16
 80044aa:	4770      	bx	lr

080044ac <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80044ac:	b580      	push	{r7, lr}
 80044ae:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80044b0:	4b05      	ldr	r3, [pc, #20]	; (80044c8 <SysTick_Handler+0x1c>)
 80044b2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80044b4:	f001 fbf2 	bl	8005c9c <xTaskGetSchedulerState>
 80044b8:	4603      	mov	r3, r0
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d001      	beq.n	80044c2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80044be:	f002 f9db 	bl	8006878 <xPortSysTickHandler>
  }
}
 80044c2:	bf00      	nop
 80044c4:	bd80      	pop	{r7, pc}
 80044c6:	bf00      	nop
 80044c8:	e000e010 	.word	0xe000e010

080044cc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80044cc:	b480      	push	{r7}
 80044ce:	b085      	sub	sp, #20
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	60f8      	str	r0, [r7, #12]
 80044d4:	60b9      	str	r1, [r7, #8]
 80044d6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	4a07      	ldr	r2, [pc, #28]	; (80044f8 <vApplicationGetIdleTaskMemory+0x2c>)
 80044dc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	4a06      	ldr	r2, [pc, #24]	; (80044fc <vApplicationGetIdleTaskMemory+0x30>)
 80044e2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2280      	movs	r2, #128	; 0x80
 80044e8:	601a      	str	r2, [r3, #0]
}
 80044ea:	bf00      	nop
 80044ec:	3714      	adds	r7, #20
 80044ee:	46bd      	mov	sp, r7
 80044f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f4:	4770      	bx	lr
 80044f6:	bf00      	nop
 80044f8:	2000047c 	.word	0x2000047c
 80044fc:	20000538 	.word	0x20000538

08004500 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004500:	b480      	push	{r7}
 8004502:	b085      	sub	sp, #20
 8004504:	af00      	add	r7, sp, #0
 8004506:	60f8      	str	r0, [r7, #12]
 8004508:	60b9      	str	r1, [r7, #8]
 800450a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	4a07      	ldr	r2, [pc, #28]	; (800452c <vApplicationGetTimerTaskMemory+0x2c>)
 8004510:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	4a06      	ldr	r2, [pc, #24]	; (8004530 <vApplicationGetTimerTaskMemory+0x30>)
 8004516:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800451e:	601a      	str	r2, [r3, #0]
}
 8004520:	bf00      	nop
 8004522:	3714      	adds	r7, #20
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr
 800452c:	20000738 	.word	0x20000738
 8004530:	200007f4 	.word	0x200007f4

08004534 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004534:	b480      	push	{r7}
 8004536:	b083      	sub	sp, #12
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f103 0208 	add.w	r2, r3, #8
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f04f 32ff 	mov.w	r2, #4294967295
 800454c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f103 0208 	add.w	r2, r3, #8
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	f103 0208 	add.w	r2, r3, #8
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2200      	movs	r2, #0
 8004566:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004568:	bf00      	nop
 800456a:	370c      	adds	r7, #12
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr

08004574 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004574:	b480      	push	{r7}
 8004576:	b083      	sub	sp, #12
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2200      	movs	r2, #0
 8004580:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004582:	bf00      	nop
 8004584:	370c      	adds	r7, #12
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr

0800458e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800458e:	b480      	push	{r7}
 8004590:	b085      	sub	sp, #20
 8004592:	af00      	add	r7, sp, #0
 8004594:	6078      	str	r0, [r7, #4]
 8004596:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	68fa      	ldr	r2, [r7, #12]
 80045a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	689a      	ldr	r2, [r3, #8]
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	683a      	ldr	r2, [r7, #0]
 80045b2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	683a      	ldr	r2, [r7, #0]
 80045b8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	1c5a      	adds	r2, r3, #1
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	601a      	str	r2, [r3, #0]
}
 80045ca:	bf00      	nop
 80045cc:	3714      	adds	r7, #20
 80045ce:	46bd      	mov	sp, r7
 80045d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d4:	4770      	bx	lr

080045d6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80045d6:	b480      	push	{r7}
 80045d8:	b085      	sub	sp, #20
 80045da:	af00      	add	r7, sp, #0
 80045dc:	6078      	str	r0, [r7, #4]
 80045de:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ec:	d103      	bne.n	80045f6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	691b      	ldr	r3, [r3, #16]
 80045f2:	60fb      	str	r3, [r7, #12]
 80045f4:	e00c      	b.n	8004610 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	3308      	adds	r3, #8
 80045fa:	60fb      	str	r3, [r7, #12]
 80045fc:	e002      	b.n	8004604 <vListInsert+0x2e>
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	60fb      	str	r3, [r7, #12]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	68ba      	ldr	r2, [r7, #8]
 800460c:	429a      	cmp	r2, r3
 800460e:	d2f6      	bcs.n	80045fe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	685a      	ldr	r2, [r3, #4]
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	683a      	ldr	r2, [r7, #0]
 800461e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	68fa      	ldr	r2, [r7, #12]
 8004624:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	683a      	ldr	r2, [r7, #0]
 800462a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	1c5a      	adds	r2, r3, #1
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	601a      	str	r2, [r3, #0]
}
 800463c:	bf00      	nop
 800463e:	3714      	adds	r7, #20
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr

08004648 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004648:	b480      	push	{r7}
 800464a:	b085      	sub	sp, #20
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	691b      	ldr	r3, [r3, #16]
 8004654:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	6892      	ldr	r2, [r2, #8]
 800465e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	6852      	ldr	r2, [r2, #4]
 8004668:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	429a      	cmp	r2, r3
 8004672:	d103      	bne.n	800467c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	689a      	ldr	r2, [r3, #8]
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2200      	movs	r2, #0
 8004680:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	1e5a      	subs	r2, r3, #1
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
}
 8004690:	4618      	mov	r0, r3
 8004692:	3714      	adds	r7, #20
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr

0800469c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d10a      	bne.n	80046c6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80046b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b4:	f383 8811 	msr	BASEPRI, r3
 80046b8:	f3bf 8f6f 	isb	sy
 80046bc:	f3bf 8f4f 	dsb	sy
 80046c0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80046c2:	bf00      	nop
 80046c4:	e7fe      	b.n	80046c4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80046c6:	f002 f845 	bl	8006754 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046d2:	68f9      	ldr	r1, [r7, #12]
 80046d4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80046d6:	fb01 f303 	mul.w	r3, r1, r3
 80046da:	441a      	add	r2, r3
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2200      	movs	r2, #0
 80046e4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046f6:	3b01      	subs	r3, #1
 80046f8:	68f9      	ldr	r1, [r7, #12]
 80046fa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80046fc:	fb01 f303 	mul.w	r3, r1, r3
 8004700:	441a      	add	r2, r3
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	22ff      	movs	r2, #255	; 0xff
 800470a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	22ff      	movs	r2, #255	; 0xff
 8004712:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d114      	bne.n	8004746 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	691b      	ldr	r3, [r3, #16]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d01a      	beq.n	800475a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	3310      	adds	r3, #16
 8004728:	4618      	mov	r0, r3
 800472a:	f001 f8f5 	bl	8005918 <xTaskRemoveFromEventList>
 800472e:	4603      	mov	r3, r0
 8004730:	2b00      	cmp	r3, #0
 8004732:	d012      	beq.n	800475a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004734:	4b0c      	ldr	r3, [pc, #48]	; (8004768 <xQueueGenericReset+0xcc>)
 8004736:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800473a:	601a      	str	r2, [r3, #0]
 800473c:	f3bf 8f4f 	dsb	sy
 8004740:	f3bf 8f6f 	isb	sy
 8004744:	e009      	b.n	800475a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	3310      	adds	r3, #16
 800474a:	4618      	mov	r0, r3
 800474c:	f7ff fef2 	bl	8004534 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	3324      	adds	r3, #36	; 0x24
 8004754:	4618      	mov	r0, r3
 8004756:	f7ff feed 	bl	8004534 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800475a:	f002 f82b 	bl	80067b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800475e:	2301      	movs	r3, #1
}
 8004760:	4618      	mov	r0, r3
 8004762:	3710      	adds	r7, #16
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}
 8004768:	e000ed04 	.word	0xe000ed04

0800476c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800476c:	b580      	push	{r7, lr}
 800476e:	b08e      	sub	sp, #56	; 0x38
 8004770:	af02      	add	r7, sp, #8
 8004772:	60f8      	str	r0, [r7, #12]
 8004774:	60b9      	str	r1, [r7, #8]
 8004776:	607a      	str	r2, [r7, #4]
 8004778:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d10a      	bne.n	8004796 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004784:	f383 8811 	msr	BASEPRI, r3
 8004788:	f3bf 8f6f 	isb	sy
 800478c:	f3bf 8f4f 	dsb	sy
 8004790:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004792:	bf00      	nop
 8004794:	e7fe      	b.n	8004794 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d10a      	bne.n	80047b2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800479c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047a0:	f383 8811 	msr	BASEPRI, r3
 80047a4:	f3bf 8f6f 	isb	sy
 80047a8:	f3bf 8f4f 	dsb	sy
 80047ac:	627b      	str	r3, [r7, #36]	; 0x24
}
 80047ae:	bf00      	nop
 80047b0:	e7fe      	b.n	80047b0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d002      	beq.n	80047be <xQueueGenericCreateStatic+0x52>
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d001      	beq.n	80047c2 <xQueueGenericCreateStatic+0x56>
 80047be:	2301      	movs	r3, #1
 80047c0:	e000      	b.n	80047c4 <xQueueGenericCreateStatic+0x58>
 80047c2:	2300      	movs	r3, #0
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d10a      	bne.n	80047de <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80047c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047cc:	f383 8811 	msr	BASEPRI, r3
 80047d0:	f3bf 8f6f 	isb	sy
 80047d4:	f3bf 8f4f 	dsb	sy
 80047d8:	623b      	str	r3, [r7, #32]
}
 80047da:	bf00      	nop
 80047dc:	e7fe      	b.n	80047dc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d102      	bne.n	80047ea <xQueueGenericCreateStatic+0x7e>
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d101      	bne.n	80047ee <xQueueGenericCreateStatic+0x82>
 80047ea:	2301      	movs	r3, #1
 80047ec:	e000      	b.n	80047f0 <xQueueGenericCreateStatic+0x84>
 80047ee:	2300      	movs	r3, #0
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d10a      	bne.n	800480a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80047f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047f8:	f383 8811 	msr	BASEPRI, r3
 80047fc:	f3bf 8f6f 	isb	sy
 8004800:	f3bf 8f4f 	dsb	sy
 8004804:	61fb      	str	r3, [r7, #28]
}
 8004806:	bf00      	nop
 8004808:	e7fe      	b.n	8004808 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800480a:	2350      	movs	r3, #80	; 0x50
 800480c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	2b50      	cmp	r3, #80	; 0x50
 8004812:	d00a      	beq.n	800482a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004818:	f383 8811 	msr	BASEPRI, r3
 800481c:	f3bf 8f6f 	isb	sy
 8004820:	f3bf 8f4f 	dsb	sy
 8004824:	61bb      	str	r3, [r7, #24]
}
 8004826:	bf00      	nop
 8004828:	e7fe      	b.n	8004828 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800482a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004832:	2b00      	cmp	r3, #0
 8004834:	d00d      	beq.n	8004852 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004838:	2201      	movs	r2, #1
 800483a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800483e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004844:	9300      	str	r3, [sp, #0]
 8004846:	4613      	mov	r3, r2
 8004848:	687a      	ldr	r2, [r7, #4]
 800484a:	68b9      	ldr	r1, [r7, #8]
 800484c:	68f8      	ldr	r0, [r7, #12]
 800484e:	f000 f805 	bl	800485c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004854:	4618      	mov	r0, r3
 8004856:	3730      	adds	r7, #48	; 0x30
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}

0800485c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b084      	sub	sp, #16
 8004860:	af00      	add	r7, sp, #0
 8004862:	60f8      	str	r0, [r7, #12]
 8004864:	60b9      	str	r1, [r7, #8]
 8004866:	607a      	str	r2, [r7, #4]
 8004868:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d103      	bne.n	8004878 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004870:	69bb      	ldr	r3, [r7, #24]
 8004872:	69ba      	ldr	r2, [r7, #24]
 8004874:	601a      	str	r2, [r3, #0]
 8004876:	e002      	b.n	800487e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004878:	69bb      	ldr	r3, [r7, #24]
 800487a:	687a      	ldr	r2, [r7, #4]
 800487c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800487e:	69bb      	ldr	r3, [r7, #24]
 8004880:	68fa      	ldr	r2, [r7, #12]
 8004882:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004884:	69bb      	ldr	r3, [r7, #24]
 8004886:	68ba      	ldr	r2, [r7, #8]
 8004888:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800488a:	2101      	movs	r1, #1
 800488c:	69b8      	ldr	r0, [r7, #24]
 800488e:	f7ff ff05 	bl	800469c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004892:	69bb      	ldr	r3, [r7, #24]
 8004894:	78fa      	ldrb	r2, [r7, #3]
 8004896:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800489a:	bf00      	nop
 800489c:	3710      	adds	r7, #16
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
	...

080048a4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b08e      	sub	sp, #56	; 0x38
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	60f8      	str	r0, [r7, #12]
 80048ac:	60b9      	str	r1, [r7, #8]
 80048ae:	607a      	str	r2, [r7, #4]
 80048b0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80048b2:	2300      	movs	r3, #0
 80048b4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80048ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d10a      	bne.n	80048d6 <xQueueGenericSend+0x32>
	__asm volatile
 80048c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c4:	f383 8811 	msr	BASEPRI, r3
 80048c8:	f3bf 8f6f 	isb	sy
 80048cc:	f3bf 8f4f 	dsb	sy
 80048d0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80048d2:	bf00      	nop
 80048d4:	e7fe      	b.n	80048d4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d103      	bne.n	80048e4 <xQueueGenericSend+0x40>
 80048dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d101      	bne.n	80048e8 <xQueueGenericSend+0x44>
 80048e4:	2301      	movs	r3, #1
 80048e6:	e000      	b.n	80048ea <xQueueGenericSend+0x46>
 80048e8:	2300      	movs	r3, #0
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d10a      	bne.n	8004904 <xQueueGenericSend+0x60>
	__asm volatile
 80048ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f2:	f383 8811 	msr	BASEPRI, r3
 80048f6:	f3bf 8f6f 	isb	sy
 80048fa:	f3bf 8f4f 	dsb	sy
 80048fe:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004900:	bf00      	nop
 8004902:	e7fe      	b.n	8004902 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	2b02      	cmp	r3, #2
 8004908:	d103      	bne.n	8004912 <xQueueGenericSend+0x6e>
 800490a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800490c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800490e:	2b01      	cmp	r3, #1
 8004910:	d101      	bne.n	8004916 <xQueueGenericSend+0x72>
 8004912:	2301      	movs	r3, #1
 8004914:	e000      	b.n	8004918 <xQueueGenericSend+0x74>
 8004916:	2300      	movs	r3, #0
 8004918:	2b00      	cmp	r3, #0
 800491a:	d10a      	bne.n	8004932 <xQueueGenericSend+0x8e>
	__asm volatile
 800491c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004920:	f383 8811 	msr	BASEPRI, r3
 8004924:	f3bf 8f6f 	isb	sy
 8004928:	f3bf 8f4f 	dsb	sy
 800492c:	623b      	str	r3, [r7, #32]
}
 800492e:	bf00      	nop
 8004930:	e7fe      	b.n	8004930 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004932:	f001 f9b3 	bl	8005c9c <xTaskGetSchedulerState>
 8004936:	4603      	mov	r3, r0
 8004938:	2b00      	cmp	r3, #0
 800493a:	d102      	bne.n	8004942 <xQueueGenericSend+0x9e>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d101      	bne.n	8004946 <xQueueGenericSend+0xa2>
 8004942:	2301      	movs	r3, #1
 8004944:	e000      	b.n	8004948 <xQueueGenericSend+0xa4>
 8004946:	2300      	movs	r3, #0
 8004948:	2b00      	cmp	r3, #0
 800494a:	d10a      	bne.n	8004962 <xQueueGenericSend+0xbe>
	__asm volatile
 800494c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004950:	f383 8811 	msr	BASEPRI, r3
 8004954:	f3bf 8f6f 	isb	sy
 8004958:	f3bf 8f4f 	dsb	sy
 800495c:	61fb      	str	r3, [r7, #28]
}
 800495e:	bf00      	nop
 8004960:	e7fe      	b.n	8004960 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004962:	f001 fef7 	bl	8006754 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004968:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800496a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800496c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800496e:	429a      	cmp	r2, r3
 8004970:	d302      	bcc.n	8004978 <xQueueGenericSend+0xd4>
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	2b02      	cmp	r3, #2
 8004976:	d129      	bne.n	80049cc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004978:	683a      	ldr	r2, [r7, #0]
 800497a:	68b9      	ldr	r1, [r7, #8]
 800497c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800497e:	f000 fa0b 	bl	8004d98 <prvCopyDataToQueue>
 8004982:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004988:	2b00      	cmp	r3, #0
 800498a:	d010      	beq.n	80049ae <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800498c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800498e:	3324      	adds	r3, #36	; 0x24
 8004990:	4618      	mov	r0, r3
 8004992:	f000 ffc1 	bl	8005918 <xTaskRemoveFromEventList>
 8004996:	4603      	mov	r3, r0
 8004998:	2b00      	cmp	r3, #0
 800499a:	d013      	beq.n	80049c4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800499c:	4b3f      	ldr	r3, [pc, #252]	; (8004a9c <xQueueGenericSend+0x1f8>)
 800499e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049a2:	601a      	str	r2, [r3, #0]
 80049a4:	f3bf 8f4f 	dsb	sy
 80049a8:	f3bf 8f6f 	isb	sy
 80049ac:	e00a      	b.n	80049c4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80049ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d007      	beq.n	80049c4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80049b4:	4b39      	ldr	r3, [pc, #228]	; (8004a9c <xQueueGenericSend+0x1f8>)
 80049b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049ba:	601a      	str	r2, [r3, #0]
 80049bc:	f3bf 8f4f 	dsb	sy
 80049c0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80049c4:	f001 fef6 	bl	80067b4 <vPortExitCritical>
				return pdPASS;
 80049c8:	2301      	movs	r3, #1
 80049ca:	e063      	b.n	8004a94 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d103      	bne.n	80049da <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80049d2:	f001 feef 	bl	80067b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80049d6:	2300      	movs	r3, #0
 80049d8:	e05c      	b.n	8004a94 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80049da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d106      	bne.n	80049ee <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80049e0:	f107 0314 	add.w	r3, r7, #20
 80049e4:	4618      	mov	r0, r3
 80049e6:	f000 fffb 	bl	80059e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80049ea:	2301      	movs	r3, #1
 80049ec:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80049ee:	f001 fee1 	bl	80067b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80049f2:	f000 fd67 	bl	80054c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80049f6:	f001 fead 	bl	8006754 <vPortEnterCritical>
 80049fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a00:	b25b      	sxtb	r3, r3
 8004a02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a06:	d103      	bne.n	8004a10 <xQueueGenericSend+0x16c>
 8004a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a12:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a16:	b25b      	sxtb	r3, r3
 8004a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a1c:	d103      	bne.n	8004a26 <xQueueGenericSend+0x182>
 8004a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a20:	2200      	movs	r2, #0
 8004a22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a26:	f001 fec5 	bl	80067b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004a2a:	1d3a      	adds	r2, r7, #4
 8004a2c:	f107 0314 	add.w	r3, r7, #20
 8004a30:	4611      	mov	r1, r2
 8004a32:	4618      	mov	r0, r3
 8004a34:	f000 ffea 	bl	8005a0c <xTaskCheckForTimeOut>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d124      	bne.n	8004a88 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004a3e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a40:	f000 faa2 	bl	8004f88 <prvIsQueueFull>
 8004a44:	4603      	mov	r3, r0
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d018      	beq.n	8004a7c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a4c:	3310      	adds	r3, #16
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	4611      	mov	r1, r2
 8004a52:	4618      	mov	r0, r3
 8004a54:	f000 ff10 	bl	8005878 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004a58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a5a:	f000 fa2d 	bl	8004eb8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004a5e:	f000 fd3f 	bl	80054e0 <xTaskResumeAll>
 8004a62:	4603      	mov	r3, r0
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	f47f af7c 	bne.w	8004962 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004a6a:	4b0c      	ldr	r3, [pc, #48]	; (8004a9c <xQueueGenericSend+0x1f8>)
 8004a6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a70:	601a      	str	r2, [r3, #0]
 8004a72:	f3bf 8f4f 	dsb	sy
 8004a76:	f3bf 8f6f 	isb	sy
 8004a7a:	e772      	b.n	8004962 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004a7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a7e:	f000 fa1b 	bl	8004eb8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004a82:	f000 fd2d 	bl	80054e0 <xTaskResumeAll>
 8004a86:	e76c      	b.n	8004962 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004a88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a8a:	f000 fa15 	bl	8004eb8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004a8e:	f000 fd27 	bl	80054e0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004a92:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	3738      	adds	r7, #56	; 0x38
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}
 8004a9c:	e000ed04 	.word	0xe000ed04

08004aa0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b090      	sub	sp, #64	; 0x40
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	60f8      	str	r0, [r7, #12]
 8004aa8:	60b9      	str	r1, [r7, #8]
 8004aaa:	607a      	str	r2, [r7, #4]
 8004aac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d10a      	bne.n	8004ace <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004abc:	f383 8811 	msr	BASEPRI, r3
 8004ac0:	f3bf 8f6f 	isb	sy
 8004ac4:	f3bf 8f4f 	dsb	sy
 8004ac8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004aca:	bf00      	nop
 8004acc:	e7fe      	b.n	8004acc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d103      	bne.n	8004adc <xQueueGenericSendFromISR+0x3c>
 8004ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d101      	bne.n	8004ae0 <xQueueGenericSendFromISR+0x40>
 8004adc:	2301      	movs	r3, #1
 8004ade:	e000      	b.n	8004ae2 <xQueueGenericSendFromISR+0x42>
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d10a      	bne.n	8004afc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aea:	f383 8811 	msr	BASEPRI, r3
 8004aee:	f3bf 8f6f 	isb	sy
 8004af2:	f3bf 8f4f 	dsb	sy
 8004af6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004af8:	bf00      	nop
 8004afa:	e7fe      	b.n	8004afa <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	2b02      	cmp	r3, #2
 8004b00:	d103      	bne.n	8004b0a <xQueueGenericSendFromISR+0x6a>
 8004b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	d101      	bne.n	8004b0e <xQueueGenericSendFromISR+0x6e>
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e000      	b.n	8004b10 <xQueueGenericSendFromISR+0x70>
 8004b0e:	2300      	movs	r3, #0
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d10a      	bne.n	8004b2a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b18:	f383 8811 	msr	BASEPRI, r3
 8004b1c:	f3bf 8f6f 	isb	sy
 8004b20:	f3bf 8f4f 	dsb	sy
 8004b24:	623b      	str	r3, [r7, #32]
}
 8004b26:	bf00      	nop
 8004b28:	e7fe      	b.n	8004b28 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004b2a:	f001 fef5 	bl	8006918 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004b2e:	f3ef 8211 	mrs	r2, BASEPRI
 8004b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b36:	f383 8811 	msr	BASEPRI, r3
 8004b3a:	f3bf 8f6f 	isb	sy
 8004b3e:	f3bf 8f4f 	dsb	sy
 8004b42:	61fa      	str	r2, [r7, #28]
 8004b44:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004b46:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004b48:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d302      	bcc.n	8004b5c <xQueueGenericSendFromISR+0xbc>
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	2b02      	cmp	r3, #2
 8004b5a:	d12f      	bne.n	8004bbc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004b6c:	683a      	ldr	r2, [r7, #0]
 8004b6e:	68b9      	ldr	r1, [r7, #8]
 8004b70:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004b72:	f000 f911 	bl	8004d98 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004b76:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004b7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b7e:	d112      	bne.n	8004ba6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d016      	beq.n	8004bb6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b8a:	3324      	adds	r3, #36	; 0x24
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f000 fec3 	bl	8005918 <xTaskRemoveFromEventList>
 8004b92:	4603      	mov	r3, r0
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d00e      	beq.n	8004bb6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d00b      	beq.n	8004bb6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	601a      	str	r2, [r3, #0]
 8004ba4:	e007      	b.n	8004bb6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004ba6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004baa:	3301      	adds	r3, #1
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	b25a      	sxtb	r2, r3
 8004bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004bba:	e001      	b.n	8004bc0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bc2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004bca:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004bcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3740      	adds	r7, #64	; 0x40
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}
	...

08004bd8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b08c      	sub	sp, #48	; 0x30
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	60f8      	str	r0, [r7, #12]
 8004be0:	60b9      	str	r1, [r7, #8]
 8004be2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004be4:	2300      	movs	r3, #0
 8004be6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d10a      	bne.n	8004c08 <xQueueReceive+0x30>
	__asm volatile
 8004bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bf6:	f383 8811 	msr	BASEPRI, r3
 8004bfa:	f3bf 8f6f 	isb	sy
 8004bfe:	f3bf 8f4f 	dsb	sy
 8004c02:	623b      	str	r3, [r7, #32]
}
 8004c04:	bf00      	nop
 8004c06:	e7fe      	b.n	8004c06 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d103      	bne.n	8004c16 <xQueueReceive+0x3e>
 8004c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d101      	bne.n	8004c1a <xQueueReceive+0x42>
 8004c16:	2301      	movs	r3, #1
 8004c18:	e000      	b.n	8004c1c <xQueueReceive+0x44>
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d10a      	bne.n	8004c36 <xQueueReceive+0x5e>
	__asm volatile
 8004c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c24:	f383 8811 	msr	BASEPRI, r3
 8004c28:	f3bf 8f6f 	isb	sy
 8004c2c:	f3bf 8f4f 	dsb	sy
 8004c30:	61fb      	str	r3, [r7, #28]
}
 8004c32:	bf00      	nop
 8004c34:	e7fe      	b.n	8004c34 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004c36:	f001 f831 	bl	8005c9c <xTaskGetSchedulerState>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d102      	bne.n	8004c46 <xQueueReceive+0x6e>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d101      	bne.n	8004c4a <xQueueReceive+0x72>
 8004c46:	2301      	movs	r3, #1
 8004c48:	e000      	b.n	8004c4c <xQueueReceive+0x74>
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d10a      	bne.n	8004c66 <xQueueReceive+0x8e>
	__asm volatile
 8004c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c54:	f383 8811 	msr	BASEPRI, r3
 8004c58:	f3bf 8f6f 	isb	sy
 8004c5c:	f3bf 8f4f 	dsb	sy
 8004c60:	61bb      	str	r3, [r7, #24]
}
 8004c62:	bf00      	nop
 8004c64:	e7fe      	b.n	8004c64 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004c66:	f001 fd75 	bl	8006754 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c6e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d01f      	beq.n	8004cb6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004c76:	68b9      	ldr	r1, [r7, #8]
 8004c78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c7a:	f000 f8f7 	bl	8004e6c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c80:	1e5a      	subs	r2, r3, #1
 8004c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c84:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c88:	691b      	ldr	r3, [r3, #16]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d00f      	beq.n	8004cae <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c90:	3310      	adds	r3, #16
 8004c92:	4618      	mov	r0, r3
 8004c94:	f000 fe40 	bl	8005918 <xTaskRemoveFromEventList>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d007      	beq.n	8004cae <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004c9e:	4b3d      	ldr	r3, [pc, #244]	; (8004d94 <xQueueReceive+0x1bc>)
 8004ca0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ca4:	601a      	str	r2, [r3, #0]
 8004ca6:	f3bf 8f4f 	dsb	sy
 8004caa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004cae:	f001 fd81 	bl	80067b4 <vPortExitCritical>
				return pdPASS;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e069      	b.n	8004d8a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d103      	bne.n	8004cc4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004cbc:	f001 fd7a 	bl	80067b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	e062      	b.n	8004d8a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d106      	bne.n	8004cd8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004cca:	f107 0310 	add.w	r3, r7, #16
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f000 fe86 	bl	80059e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004cd8:	f001 fd6c 	bl	80067b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004cdc:	f000 fbf2 	bl	80054c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004ce0:	f001 fd38 	bl	8006754 <vPortEnterCritical>
 8004ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ce6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004cea:	b25b      	sxtb	r3, r3
 8004cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cf0:	d103      	bne.n	8004cfa <xQueueReceive+0x122>
 8004cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cfc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d00:	b25b      	sxtb	r3, r3
 8004d02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d06:	d103      	bne.n	8004d10 <xQueueReceive+0x138>
 8004d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d10:	f001 fd50 	bl	80067b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004d14:	1d3a      	adds	r2, r7, #4
 8004d16:	f107 0310 	add.w	r3, r7, #16
 8004d1a:	4611      	mov	r1, r2
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	f000 fe75 	bl	8005a0c <xTaskCheckForTimeOut>
 8004d22:	4603      	mov	r3, r0
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d123      	bne.n	8004d70 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004d28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d2a:	f000 f917 	bl	8004f5c <prvIsQueueEmpty>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d017      	beq.n	8004d64 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d36:	3324      	adds	r3, #36	; 0x24
 8004d38:	687a      	ldr	r2, [r7, #4]
 8004d3a:	4611      	mov	r1, r2
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f000 fd9b 	bl	8005878 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004d42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d44:	f000 f8b8 	bl	8004eb8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004d48:	f000 fbca 	bl	80054e0 <xTaskResumeAll>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d189      	bne.n	8004c66 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004d52:	4b10      	ldr	r3, [pc, #64]	; (8004d94 <xQueueReceive+0x1bc>)
 8004d54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d58:	601a      	str	r2, [r3, #0]
 8004d5a:	f3bf 8f4f 	dsb	sy
 8004d5e:	f3bf 8f6f 	isb	sy
 8004d62:	e780      	b.n	8004c66 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004d64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d66:	f000 f8a7 	bl	8004eb8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004d6a:	f000 fbb9 	bl	80054e0 <xTaskResumeAll>
 8004d6e:	e77a      	b.n	8004c66 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004d70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d72:	f000 f8a1 	bl	8004eb8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004d76:	f000 fbb3 	bl	80054e0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004d7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d7c:	f000 f8ee 	bl	8004f5c <prvIsQueueEmpty>
 8004d80:	4603      	mov	r3, r0
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	f43f af6f 	beq.w	8004c66 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004d88:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3730      	adds	r7, #48	; 0x30
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}
 8004d92:	bf00      	nop
 8004d94:	e000ed04 	.word	0xe000ed04

08004d98 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b086      	sub	sp, #24
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	60f8      	str	r0, [r7, #12]
 8004da0:	60b9      	str	r1, [r7, #8]
 8004da2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004da4:	2300      	movs	r3, #0
 8004da6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dac:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d10d      	bne.n	8004dd2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d14d      	bne.n	8004e5a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f000 ff88 	bl	8005cd8 <xTaskPriorityDisinherit>
 8004dc8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	609a      	str	r2, [r3, #8]
 8004dd0:	e043      	b.n	8004e5a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d119      	bne.n	8004e0c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	6858      	ldr	r0, [r3, #4]
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de0:	461a      	mov	r2, r3
 8004de2:	68b9      	ldr	r1, [r7, #8]
 8004de4:	f002 f8e5 	bl	8006fb2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	685a      	ldr	r2, [r3, #4]
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df0:	441a      	add	r2, r3
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	685a      	ldr	r2, [r3, #4]
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	d32b      	bcc.n	8004e5a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	605a      	str	r2, [r3, #4]
 8004e0a:	e026      	b.n	8004e5a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	68d8      	ldr	r0, [r3, #12]
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e14:	461a      	mov	r2, r3
 8004e16:	68b9      	ldr	r1, [r7, #8]
 8004e18:	f002 f8cb 	bl	8006fb2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	68da      	ldr	r2, [r3, #12]
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e24:	425b      	negs	r3, r3
 8004e26:	441a      	add	r2, r3
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	68da      	ldr	r2, [r3, #12]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	429a      	cmp	r2, r3
 8004e36:	d207      	bcs.n	8004e48 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	689a      	ldr	r2, [r3, #8]
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e40:	425b      	negs	r3, r3
 8004e42:	441a      	add	r2, r3
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2b02      	cmp	r3, #2
 8004e4c:	d105      	bne.n	8004e5a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d002      	beq.n	8004e5a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	3b01      	subs	r3, #1
 8004e58:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	1c5a      	adds	r2, r3, #1
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004e62:	697b      	ldr	r3, [r7, #20]
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3718      	adds	r7, #24
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}

08004e6c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b082      	sub	sp, #8
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
 8004e74:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d018      	beq.n	8004eb0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	68da      	ldr	r2, [r3, #12]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e86:	441a      	add	r2, r3
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	68da      	ldr	r2, [r3, #12]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	429a      	cmp	r2, r3
 8004e96:	d303      	bcc.n	8004ea0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	68d9      	ldr	r1, [r3, #12]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea8:	461a      	mov	r2, r3
 8004eaa:	6838      	ldr	r0, [r7, #0]
 8004eac:	f002 f881 	bl	8006fb2 <memcpy>
	}
}
 8004eb0:	bf00      	nop
 8004eb2:	3708      	adds	r7, #8
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}

08004eb8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b084      	sub	sp, #16
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004ec0:	f001 fc48 	bl	8006754 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004eca:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004ecc:	e011      	b.n	8004ef2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d012      	beq.n	8004efc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	3324      	adds	r3, #36	; 0x24
 8004eda:	4618      	mov	r0, r3
 8004edc:	f000 fd1c 	bl	8005918 <xTaskRemoveFromEventList>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d001      	beq.n	8004eea <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004ee6:	f000 fdf3 	bl	8005ad0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004eea:	7bfb      	ldrb	r3, [r7, #15]
 8004eec:	3b01      	subs	r3, #1
 8004eee:	b2db      	uxtb	r3, r3
 8004ef0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004ef2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	dce9      	bgt.n	8004ece <prvUnlockQueue+0x16>
 8004efa:	e000      	b.n	8004efe <prvUnlockQueue+0x46>
					break;
 8004efc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	22ff      	movs	r2, #255	; 0xff
 8004f02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004f06:	f001 fc55 	bl	80067b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004f0a:	f001 fc23 	bl	8006754 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f14:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004f16:	e011      	b.n	8004f3c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	691b      	ldr	r3, [r3, #16]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d012      	beq.n	8004f46 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	3310      	adds	r3, #16
 8004f24:	4618      	mov	r0, r3
 8004f26:	f000 fcf7 	bl	8005918 <xTaskRemoveFromEventList>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d001      	beq.n	8004f34 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004f30:	f000 fdce 	bl	8005ad0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004f34:	7bbb      	ldrb	r3, [r7, #14]
 8004f36:	3b01      	subs	r3, #1
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004f3c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	dce9      	bgt.n	8004f18 <prvUnlockQueue+0x60>
 8004f44:	e000      	b.n	8004f48 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004f46:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	22ff      	movs	r2, #255	; 0xff
 8004f4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004f50:	f001 fc30 	bl	80067b4 <vPortExitCritical>
}
 8004f54:	bf00      	nop
 8004f56:	3710      	adds	r7, #16
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}

08004f5c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b084      	sub	sp, #16
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004f64:	f001 fbf6 	bl	8006754 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d102      	bne.n	8004f76 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004f70:	2301      	movs	r3, #1
 8004f72:	60fb      	str	r3, [r7, #12]
 8004f74:	e001      	b.n	8004f7a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004f76:	2300      	movs	r3, #0
 8004f78:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004f7a:	f001 fc1b 	bl	80067b4 <vPortExitCritical>

	return xReturn;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3710      	adds	r7, #16
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}

08004f88 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b084      	sub	sp, #16
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004f90:	f001 fbe0 	bl	8006754 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d102      	bne.n	8004fa6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	60fb      	str	r3, [r7, #12]
 8004fa4:	e001      	b.n	8004faa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004faa:	f001 fc03 	bl	80067b4 <vPortExitCritical>

	return xReturn;
 8004fae:	68fb      	ldr	r3, [r7, #12]
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3710      	adds	r7, #16
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}

08004fb8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004fb8:	b480      	push	{r7}
 8004fba:	b085      	sub	sp, #20
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
 8004fc0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	60fb      	str	r3, [r7, #12]
 8004fc6:	e014      	b.n	8004ff2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004fc8:	4a0f      	ldr	r2, [pc, #60]	; (8005008 <vQueueAddToRegistry+0x50>)
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d10b      	bne.n	8004fec <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004fd4:	490c      	ldr	r1, [pc, #48]	; (8005008 <vQueueAddToRegistry+0x50>)
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	683a      	ldr	r2, [r7, #0]
 8004fda:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004fde:	4a0a      	ldr	r2, [pc, #40]	; (8005008 <vQueueAddToRegistry+0x50>)
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	00db      	lsls	r3, r3, #3
 8004fe4:	4413      	add	r3, r2
 8004fe6:	687a      	ldr	r2, [r7, #4]
 8004fe8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004fea:	e006      	b.n	8004ffa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	3301      	adds	r3, #1
 8004ff0:	60fb      	str	r3, [r7, #12]
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2b07      	cmp	r3, #7
 8004ff6:	d9e7      	bls.n	8004fc8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004ff8:	bf00      	nop
 8004ffa:	bf00      	nop
 8004ffc:	3714      	adds	r7, #20
 8004ffe:	46bd      	mov	sp, r7
 8005000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005004:	4770      	bx	lr
 8005006:	bf00      	nop
 8005008:	20000bf4 	.word	0x20000bf4

0800500c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800500c:	b580      	push	{r7, lr}
 800500e:	b086      	sub	sp, #24
 8005010:	af00      	add	r7, sp, #0
 8005012:	60f8      	str	r0, [r7, #12]
 8005014:	60b9      	str	r1, [r7, #8]
 8005016:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800501c:	f001 fb9a 	bl	8006754 <vPortEnterCritical>
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005026:	b25b      	sxtb	r3, r3
 8005028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800502c:	d103      	bne.n	8005036 <vQueueWaitForMessageRestricted+0x2a>
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	2200      	movs	r2, #0
 8005032:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800503c:	b25b      	sxtb	r3, r3
 800503e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005042:	d103      	bne.n	800504c <vQueueWaitForMessageRestricted+0x40>
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	2200      	movs	r2, #0
 8005048:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800504c:	f001 fbb2 	bl	80067b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005054:	2b00      	cmp	r3, #0
 8005056:	d106      	bne.n	8005066 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	3324      	adds	r3, #36	; 0x24
 800505c:	687a      	ldr	r2, [r7, #4]
 800505e:	68b9      	ldr	r1, [r7, #8]
 8005060:	4618      	mov	r0, r3
 8005062:	f000 fc2d 	bl	80058c0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005066:	6978      	ldr	r0, [r7, #20]
 8005068:	f7ff ff26 	bl	8004eb8 <prvUnlockQueue>
	}
 800506c:	bf00      	nop
 800506e:	3718      	adds	r7, #24
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}

08005074 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005074:	b580      	push	{r7, lr}
 8005076:	b08e      	sub	sp, #56	; 0x38
 8005078:	af04      	add	r7, sp, #16
 800507a:	60f8      	str	r0, [r7, #12]
 800507c:	60b9      	str	r1, [r7, #8]
 800507e:	607a      	str	r2, [r7, #4]
 8005080:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005082:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005084:	2b00      	cmp	r3, #0
 8005086:	d10a      	bne.n	800509e <xTaskCreateStatic+0x2a>
	__asm volatile
 8005088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800508c:	f383 8811 	msr	BASEPRI, r3
 8005090:	f3bf 8f6f 	isb	sy
 8005094:	f3bf 8f4f 	dsb	sy
 8005098:	623b      	str	r3, [r7, #32]
}
 800509a:	bf00      	nop
 800509c:	e7fe      	b.n	800509c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800509e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d10a      	bne.n	80050ba <xTaskCreateStatic+0x46>
	__asm volatile
 80050a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050a8:	f383 8811 	msr	BASEPRI, r3
 80050ac:	f3bf 8f6f 	isb	sy
 80050b0:	f3bf 8f4f 	dsb	sy
 80050b4:	61fb      	str	r3, [r7, #28]
}
 80050b6:	bf00      	nop
 80050b8:	e7fe      	b.n	80050b8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80050ba:	23bc      	movs	r3, #188	; 0xbc
 80050bc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	2bbc      	cmp	r3, #188	; 0xbc
 80050c2:	d00a      	beq.n	80050da <xTaskCreateStatic+0x66>
	__asm volatile
 80050c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050c8:	f383 8811 	msr	BASEPRI, r3
 80050cc:	f3bf 8f6f 	isb	sy
 80050d0:	f3bf 8f4f 	dsb	sy
 80050d4:	61bb      	str	r3, [r7, #24]
}
 80050d6:	bf00      	nop
 80050d8:	e7fe      	b.n	80050d8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80050da:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80050dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d01e      	beq.n	8005120 <xTaskCreateStatic+0xac>
 80050e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d01b      	beq.n	8005120 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80050e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050ea:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80050ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80050f0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80050f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f4:	2202      	movs	r2, #2
 80050f6:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80050fa:	2300      	movs	r3, #0
 80050fc:	9303      	str	r3, [sp, #12]
 80050fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005100:	9302      	str	r3, [sp, #8]
 8005102:	f107 0314 	add.w	r3, r7, #20
 8005106:	9301      	str	r3, [sp, #4]
 8005108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800510a:	9300      	str	r3, [sp, #0]
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	687a      	ldr	r2, [r7, #4]
 8005110:	68b9      	ldr	r1, [r7, #8]
 8005112:	68f8      	ldr	r0, [r7, #12]
 8005114:	f000 f850 	bl	80051b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005118:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800511a:	f000 f8f3 	bl	8005304 <prvAddNewTaskToReadyList>
 800511e:	e001      	b.n	8005124 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005120:	2300      	movs	r3, #0
 8005122:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005124:	697b      	ldr	r3, [r7, #20]
	}
 8005126:	4618      	mov	r0, r3
 8005128:	3728      	adds	r7, #40	; 0x28
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}

0800512e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800512e:	b580      	push	{r7, lr}
 8005130:	b08c      	sub	sp, #48	; 0x30
 8005132:	af04      	add	r7, sp, #16
 8005134:	60f8      	str	r0, [r7, #12]
 8005136:	60b9      	str	r1, [r7, #8]
 8005138:	603b      	str	r3, [r7, #0]
 800513a:	4613      	mov	r3, r2
 800513c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800513e:	88fb      	ldrh	r3, [r7, #6]
 8005140:	009b      	lsls	r3, r3, #2
 8005142:	4618      	mov	r0, r3
 8005144:	f001 fc28 	bl	8006998 <pvPortMalloc>
 8005148:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d00e      	beq.n	800516e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005150:	20bc      	movs	r0, #188	; 0xbc
 8005152:	f001 fc21 	bl	8006998 <pvPortMalloc>
 8005156:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005158:	69fb      	ldr	r3, [r7, #28]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d003      	beq.n	8005166 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800515e:	69fb      	ldr	r3, [r7, #28]
 8005160:	697a      	ldr	r2, [r7, #20]
 8005162:	631a      	str	r2, [r3, #48]	; 0x30
 8005164:	e005      	b.n	8005172 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005166:	6978      	ldr	r0, [r7, #20]
 8005168:	f001 fce2 	bl	8006b30 <vPortFree>
 800516c:	e001      	b.n	8005172 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800516e:	2300      	movs	r3, #0
 8005170:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005172:	69fb      	ldr	r3, [r7, #28]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d017      	beq.n	80051a8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005178:	69fb      	ldr	r3, [r7, #28]
 800517a:	2200      	movs	r2, #0
 800517c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005180:	88fa      	ldrh	r2, [r7, #6]
 8005182:	2300      	movs	r3, #0
 8005184:	9303      	str	r3, [sp, #12]
 8005186:	69fb      	ldr	r3, [r7, #28]
 8005188:	9302      	str	r3, [sp, #8]
 800518a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800518c:	9301      	str	r3, [sp, #4]
 800518e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005190:	9300      	str	r3, [sp, #0]
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	68b9      	ldr	r1, [r7, #8]
 8005196:	68f8      	ldr	r0, [r7, #12]
 8005198:	f000 f80e 	bl	80051b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800519c:	69f8      	ldr	r0, [r7, #28]
 800519e:	f000 f8b1 	bl	8005304 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80051a2:	2301      	movs	r3, #1
 80051a4:	61bb      	str	r3, [r7, #24]
 80051a6:	e002      	b.n	80051ae <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80051a8:	f04f 33ff 	mov.w	r3, #4294967295
 80051ac:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80051ae:	69bb      	ldr	r3, [r7, #24]
	}
 80051b0:	4618      	mov	r0, r3
 80051b2:	3720      	adds	r7, #32
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}

080051b8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b088      	sub	sp, #32
 80051bc:	af00      	add	r7, sp, #0
 80051be:	60f8      	str	r0, [r7, #12]
 80051c0:	60b9      	str	r1, [r7, #8]
 80051c2:	607a      	str	r2, [r7, #4]
 80051c4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80051c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	009b      	lsls	r3, r3, #2
 80051ce:	461a      	mov	r2, r3
 80051d0:	21a5      	movs	r1, #165	; 0xa5
 80051d2:	f001 fefc 	bl	8006fce <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80051d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80051e0:	3b01      	subs	r3, #1
 80051e2:	009b      	lsls	r3, r3, #2
 80051e4:	4413      	add	r3, r2
 80051e6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80051e8:	69bb      	ldr	r3, [r7, #24]
 80051ea:	f023 0307 	bic.w	r3, r3, #7
 80051ee:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80051f0:	69bb      	ldr	r3, [r7, #24]
 80051f2:	f003 0307 	and.w	r3, r3, #7
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d00a      	beq.n	8005210 <prvInitialiseNewTask+0x58>
	__asm volatile
 80051fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051fe:	f383 8811 	msr	BASEPRI, r3
 8005202:	f3bf 8f6f 	isb	sy
 8005206:	f3bf 8f4f 	dsb	sy
 800520a:	617b      	str	r3, [r7, #20]
}
 800520c:	bf00      	nop
 800520e:	e7fe      	b.n	800520e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d01f      	beq.n	8005256 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005216:	2300      	movs	r3, #0
 8005218:	61fb      	str	r3, [r7, #28]
 800521a:	e012      	b.n	8005242 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800521c:	68ba      	ldr	r2, [r7, #8]
 800521e:	69fb      	ldr	r3, [r7, #28]
 8005220:	4413      	add	r3, r2
 8005222:	7819      	ldrb	r1, [r3, #0]
 8005224:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005226:	69fb      	ldr	r3, [r7, #28]
 8005228:	4413      	add	r3, r2
 800522a:	3334      	adds	r3, #52	; 0x34
 800522c:	460a      	mov	r2, r1
 800522e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005230:	68ba      	ldr	r2, [r7, #8]
 8005232:	69fb      	ldr	r3, [r7, #28]
 8005234:	4413      	add	r3, r2
 8005236:	781b      	ldrb	r3, [r3, #0]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d006      	beq.n	800524a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800523c:	69fb      	ldr	r3, [r7, #28]
 800523e:	3301      	adds	r3, #1
 8005240:	61fb      	str	r3, [r7, #28]
 8005242:	69fb      	ldr	r3, [r7, #28]
 8005244:	2b0f      	cmp	r3, #15
 8005246:	d9e9      	bls.n	800521c <prvInitialiseNewTask+0x64>
 8005248:	e000      	b.n	800524c <prvInitialiseNewTask+0x94>
			{
				break;
 800524a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800524c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800524e:	2200      	movs	r2, #0
 8005250:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005254:	e003      	b.n	800525e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005258:	2200      	movs	r2, #0
 800525a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800525e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005260:	2b37      	cmp	r3, #55	; 0x37
 8005262:	d901      	bls.n	8005268 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005264:	2337      	movs	r3, #55	; 0x37
 8005266:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800526a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800526c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800526e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005270:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005272:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005276:	2200      	movs	r2, #0
 8005278:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800527a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800527c:	3304      	adds	r3, #4
 800527e:	4618      	mov	r0, r3
 8005280:	f7ff f978 	bl	8004574 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005286:	3318      	adds	r3, #24
 8005288:	4618      	mov	r0, r3
 800528a:	f7ff f973 	bl	8004574 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800528e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005290:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005292:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005296:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800529a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800529c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800529e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052a2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80052a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052a6:	2200      	movs	r2, #0
 80052a8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80052ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ae:	2200      	movs	r2, #0
 80052b0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80052b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052b6:	3354      	adds	r3, #84	; 0x54
 80052b8:	2260      	movs	r2, #96	; 0x60
 80052ba:	2100      	movs	r1, #0
 80052bc:	4618      	mov	r0, r3
 80052be:	f001 fe86 	bl	8006fce <memset>
 80052c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052c4:	4a0c      	ldr	r2, [pc, #48]	; (80052f8 <prvInitialiseNewTask+0x140>)
 80052c6:	659a      	str	r2, [r3, #88]	; 0x58
 80052c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ca:	4a0c      	ldr	r2, [pc, #48]	; (80052fc <prvInitialiseNewTask+0x144>)
 80052cc:	65da      	str	r2, [r3, #92]	; 0x5c
 80052ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052d0:	4a0b      	ldr	r2, [pc, #44]	; (8005300 <prvInitialiseNewTask+0x148>)
 80052d2:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80052d4:	683a      	ldr	r2, [r7, #0]
 80052d6:	68f9      	ldr	r1, [r7, #12]
 80052d8:	69b8      	ldr	r0, [r7, #24]
 80052da:	f001 f90d 	bl	80064f8 <pxPortInitialiseStack>
 80052de:	4602      	mov	r2, r0
 80052e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052e2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80052e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d002      	beq.n	80052f0 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80052ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052ee:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80052f0:	bf00      	nop
 80052f2:	3720      	adds	r7, #32
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}
 80052f8:	08007a58 	.word	0x08007a58
 80052fc:	08007a78 	.word	0x08007a78
 8005300:	08007a38 	.word	0x08007a38

08005304 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b082      	sub	sp, #8
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800530c:	f001 fa22 	bl	8006754 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005310:	4b2d      	ldr	r3, [pc, #180]	; (80053c8 <prvAddNewTaskToReadyList+0xc4>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	3301      	adds	r3, #1
 8005316:	4a2c      	ldr	r2, [pc, #176]	; (80053c8 <prvAddNewTaskToReadyList+0xc4>)
 8005318:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800531a:	4b2c      	ldr	r3, [pc, #176]	; (80053cc <prvAddNewTaskToReadyList+0xc8>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d109      	bne.n	8005336 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005322:	4a2a      	ldr	r2, [pc, #168]	; (80053cc <prvAddNewTaskToReadyList+0xc8>)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005328:	4b27      	ldr	r3, [pc, #156]	; (80053c8 <prvAddNewTaskToReadyList+0xc4>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	2b01      	cmp	r3, #1
 800532e:	d110      	bne.n	8005352 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005330:	f000 fbf2 	bl	8005b18 <prvInitialiseTaskLists>
 8005334:	e00d      	b.n	8005352 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005336:	4b26      	ldr	r3, [pc, #152]	; (80053d0 <prvAddNewTaskToReadyList+0xcc>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d109      	bne.n	8005352 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800533e:	4b23      	ldr	r3, [pc, #140]	; (80053cc <prvAddNewTaskToReadyList+0xc8>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005348:	429a      	cmp	r2, r3
 800534a:	d802      	bhi.n	8005352 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800534c:	4a1f      	ldr	r2, [pc, #124]	; (80053cc <prvAddNewTaskToReadyList+0xc8>)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005352:	4b20      	ldr	r3, [pc, #128]	; (80053d4 <prvAddNewTaskToReadyList+0xd0>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	3301      	adds	r3, #1
 8005358:	4a1e      	ldr	r2, [pc, #120]	; (80053d4 <prvAddNewTaskToReadyList+0xd0>)
 800535a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800535c:	4b1d      	ldr	r3, [pc, #116]	; (80053d4 <prvAddNewTaskToReadyList+0xd0>)
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005368:	4b1b      	ldr	r3, [pc, #108]	; (80053d8 <prvAddNewTaskToReadyList+0xd4>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	429a      	cmp	r2, r3
 800536e:	d903      	bls.n	8005378 <prvAddNewTaskToReadyList+0x74>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005374:	4a18      	ldr	r2, [pc, #96]	; (80053d8 <prvAddNewTaskToReadyList+0xd4>)
 8005376:	6013      	str	r3, [r2, #0]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800537c:	4613      	mov	r3, r2
 800537e:	009b      	lsls	r3, r3, #2
 8005380:	4413      	add	r3, r2
 8005382:	009b      	lsls	r3, r3, #2
 8005384:	4a15      	ldr	r2, [pc, #84]	; (80053dc <prvAddNewTaskToReadyList+0xd8>)
 8005386:	441a      	add	r2, r3
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	3304      	adds	r3, #4
 800538c:	4619      	mov	r1, r3
 800538e:	4610      	mov	r0, r2
 8005390:	f7ff f8fd 	bl	800458e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005394:	f001 fa0e 	bl	80067b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005398:	4b0d      	ldr	r3, [pc, #52]	; (80053d0 <prvAddNewTaskToReadyList+0xcc>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d00e      	beq.n	80053be <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80053a0:	4b0a      	ldr	r3, [pc, #40]	; (80053cc <prvAddNewTaskToReadyList+0xc8>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053aa:	429a      	cmp	r2, r3
 80053ac:	d207      	bcs.n	80053be <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80053ae:	4b0c      	ldr	r3, [pc, #48]	; (80053e0 <prvAddNewTaskToReadyList+0xdc>)
 80053b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053b4:	601a      	str	r2, [r3, #0]
 80053b6:	f3bf 8f4f 	dsb	sy
 80053ba:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80053be:	bf00      	nop
 80053c0:	3708      	adds	r7, #8
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}
 80053c6:	bf00      	nop
 80053c8:	20001108 	.word	0x20001108
 80053cc:	20000c34 	.word	0x20000c34
 80053d0:	20001114 	.word	0x20001114
 80053d4:	20001124 	.word	0x20001124
 80053d8:	20001110 	.word	0x20001110
 80053dc:	20000c38 	.word	0x20000c38
 80053e0:	e000ed04 	.word	0xe000ed04

080053e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b08a      	sub	sp, #40	; 0x28
 80053e8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80053ea:	2300      	movs	r3, #0
 80053ec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80053ee:	2300      	movs	r3, #0
 80053f0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80053f2:	463a      	mov	r2, r7
 80053f4:	1d39      	adds	r1, r7, #4
 80053f6:	f107 0308 	add.w	r3, r7, #8
 80053fa:	4618      	mov	r0, r3
 80053fc:	f7ff f866 	bl	80044cc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005400:	6839      	ldr	r1, [r7, #0]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	68ba      	ldr	r2, [r7, #8]
 8005406:	9202      	str	r2, [sp, #8]
 8005408:	9301      	str	r3, [sp, #4]
 800540a:	2300      	movs	r3, #0
 800540c:	9300      	str	r3, [sp, #0]
 800540e:	2300      	movs	r3, #0
 8005410:	460a      	mov	r2, r1
 8005412:	4924      	ldr	r1, [pc, #144]	; (80054a4 <vTaskStartScheduler+0xc0>)
 8005414:	4824      	ldr	r0, [pc, #144]	; (80054a8 <vTaskStartScheduler+0xc4>)
 8005416:	f7ff fe2d 	bl	8005074 <xTaskCreateStatic>
 800541a:	4603      	mov	r3, r0
 800541c:	4a23      	ldr	r2, [pc, #140]	; (80054ac <vTaskStartScheduler+0xc8>)
 800541e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005420:	4b22      	ldr	r3, [pc, #136]	; (80054ac <vTaskStartScheduler+0xc8>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d002      	beq.n	800542e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005428:	2301      	movs	r3, #1
 800542a:	617b      	str	r3, [r7, #20]
 800542c:	e001      	b.n	8005432 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800542e:	2300      	movs	r3, #0
 8005430:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	2b01      	cmp	r3, #1
 8005436:	d102      	bne.n	800543e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005438:	f000 fd10 	bl	8005e5c <xTimerCreateTimerTask>
 800543c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	2b01      	cmp	r3, #1
 8005442:	d11b      	bne.n	800547c <vTaskStartScheduler+0x98>
	__asm volatile
 8005444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005448:	f383 8811 	msr	BASEPRI, r3
 800544c:	f3bf 8f6f 	isb	sy
 8005450:	f3bf 8f4f 	dsb	sy
 8005454:	613b      	str	r3, [r7, #16]
}
 8005456:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005458:	4b15      	ldr	r3, [pc, #84]	; (80054b0 <vTaskStartScheduler+0xcc>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	3354      	adds	r3, #84	; 0x54
 800545e:	4a15      	ldr	r2, [pc, #84]	; (80054b4 <vTaskStartScheduler+0xd0>)
 8005460:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005462:	4b15      	ldr	r3, [pc, #84]	; (80054b8 <vTaskStartScheduler+0xd4>)
 8005464:	f04f 32ff 	mov.w	r2, #4294967295
 8005468:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800546a:	4b14      	ldr	r3, [pc, #80]	; (80054bc <vTaskStartScheduler+0xd8>)
 800546c:	2201      	movs	r2, #1
 800546e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005470:	4b13      	ldr	r3, [pc, #76]	; (80054c0 <vTaskStartScheduler+0xdc>)
 8005472:	2200      	movs	r2, #0
 8005474:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005476:	f001 f8cb 	bl	8006610 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800547a:	e00e      	b.n	800549a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005482:	d10a      	bne.n	800549a <vTaskStartScheduler+0xb6>
	__asm volatile
 8005484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005488:	f383 8811 	msr	BASEPRI, r3
 800548c:	f3bf 8f6f 	isb	sy
 8005490:	f3bf 8f4f 	dsb	sy
 8005494:	60fb      	str	r3, [r7, #12]
}
 8005496:	bf00      	nop
 8005498:	e7fe      	b.n	8005498 <vTaskStartScheduler+0xb4>
}
 800549a:	bf00      	nop
 800549c:	3718      	adds	r7, #24
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}
 80054a2:	bf00      	nop
 80054a4:	08007958 	.word	0x08007958
 80054a8:	08005ae9 	.word	0x08005ae9
 80054ac:	2000112c 	.word	0x2000112c
 80054b0:	20000c34 	.word	0x20000c34
 80054b4:	20000014 	.word	0x20000014
 80054b8:	20001128 	.word	0x20001128
 80054bc:	20001114 	.word	0x20001114
 80054c0:	2000110c 	.word	0x2000110c

080054c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80054c4:	b480      	push	{r7}
 80054c6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80054c8:	4b04      	ldr	r3, [pc, #16]	; (80054dc <vTaskSuspendAll+0x18>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	3301      	adds	r3, #1
 80054ce:	4a03      	ldr	r2, [pc, #12]	; (80054dc <vTaskSuspendAll+0x18>)
 80054d0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80054d2:	bf00      	nop
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr
 80054dc:	20001130 	.word	0x20001130

080054e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b084      	sub	sp, #16
 80054e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80054e6:	2300      	movs	r3, #0
 80054e8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80054ea:	2300      	movs	r3, #0
 80054ec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80054ee:	4b42      	ldr	r3, [pc, #264]	; (80055f8 <xTaskResumeAll+0x118>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d10a      	bne.n	800550c <xTaskResumeAll+0x2c>
	__asm volatile
 80054f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054fa:	f383 8811 	msr	BASEPRI, r3
 80054fe:	f3bf 8f6f 	isb	sy
 8005502:	f3bf 8f4f 	dsb	sy
 8005506:	603b      	str	r3, [r7, #0]
}
 8005508:	bf00      	nop
 800550a:	e7fe      	b.n	800550a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800550c:	f001 f922 	bl	8006754 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005510:	4b39      	ldr	r3, [pc, #228]	; (80055f8 <xTaskResumeAll+0x118>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	3b01      	subs	r3, #1
 8005516:	4a38      	ldr	r2, [pc, #224]	; (80055f8 <xTaskResumeAll+0x118>)
 8005518:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800551a:	4b37      	ldr	r3, [pc, #220]	; (80055f8 <xTaskResumeAll+0x118>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d162      	bne.n	80055e8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005522:	4b36      	ldr	r3, [pc, #216]	; (80055fc <xTaskResumeAll+0x11c>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d05e      	beq.n	80055e8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800552a:	e02f      	b.n	800558c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800552c:	4b34      	ldr	r3, [pc, #208]	; (8005600 <xTaskResumeAll+0x120>)
 800552e:	68db      	ldr	r3, [r3, #12]
 8005530:	68db      	ldr	r3, [r3, #12]
 8005532:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	3318      	adds	r3, #24
 8005538:	4618      	mov	r0, r3
 800553a:	f7ff f885 	bl	8004648 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	3304      	adds	r3, #4
 8005542:	4618      	mov	r0, r3
 8005544:	f7ff f880 	bl	8004648 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800554c:	4b2d      	ldr	r3, [pc, #180]	; (8005604 <xTaskResumeAll+0x124>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	429a      	cmp	r2, r3
 8005552:	d903      	bls.n	800555c <xTaskResumeAll+0x7c>
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005558:	4a2a      	ldr	r2, [pc, #168]	; (8005604 <xTaskResumeAll+0x124>)
 800555a:	6013      	str	r3, [r2, #0]
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005560:	4613      	mov	r3, r2
 8005562:	009b      	lsls	r3, r3, #2
 8005564:	4413      	add	r3, r2
 8005566:	009b      	lsls	r3, r3, #2
 8005568:	4a27      	ldr	r2, [pc, #156]	; (8005608 <xTaskResumeAll+0x128>)
 800556a:	441a      	add	r2, r3
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	3304      	adds	r3, #4
 8005570:	4619      	mov	r1, r3
 8005572:	4610      	mov	r0, r2
 8005574:	f7ff f80b 	bl	800458e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800557c:	4b23      	ldr	r3, [pc, #140]	; (800560c <xTaskResumeAll+0x12c>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005582:	429a      	cmp	r2, r3
 8005584:	d302      	bcc.n	800558c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005586:	4b22      	ldr	r3, [pc, #136]	; (8005610 <xTaskResumeAll+0x130>)
 8005588:	2201      	movs	r2, #1
 800558a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800558c:	4b1c      	ldr	r3, [pc, #112]	; (8005600 <xTaskResumeAll+0x120>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d1cb      	bne.n	800552c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d001      	beq.n	800559e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800559a:	f000 fb5f 	bl	8005c5c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800559e:	4b1d      	ldr	r3, [pc, #116]	; (8005614 <xTaskResumeAll+0x134>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d010      	beq.n	80055cc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80055aa:	f000 f847 	bl	800563c <xTaskIncrementTick>
 80055ae:	4603      	mov	r3, r0
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d002      	beq.n	80055ba <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80055b4:	4b16      	ldr	r3, [pc, #88]	; (8005610 <xTaskResumeAll+0x130>)
 80055b6:	2201      	movs	r2, #1
 80055b8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	3b01      	subs	r3, #1
 80055be:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d1f1      	bne.n	80055aa <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80055c6:	4b13      	ldr	r3, [pc, #76]	; (8005614 <xTaskResumeAll+0x134>)
 80055c8:	2200      	movs	r2, #0
 80055ca:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80055cc:	4b10      	ldr	r3, [pc, #64]	; (8005610 <xTaskResumeAll+0x130>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d009      	beq.n	80055e8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80055d4:	2301      	movs	r3, #1
 80055d6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80055d8:	4b0f      	ldr	r3, [pc, #60]	; (8005618 <xTaskResumeAll+0x138>)
 80055da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055de:	601a      	str	r2, [r3, #0]
 80055e0:	f3bf 8f4f 	dsb	sy
 80055e4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80055e8:	f001 f8e4 	bl	80067b4 <vPortExitCritical>

	return xAlreadyYielded;
 80055ec:	68bb      	ldr	r3, [r7, #8]
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3710      	adds	r7, #16
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}
 80055f6:	bf00      	nop
 80055f8:	20001130 	.word	0x20001130
 80055fc:	20001108 	.word	0x20001108
 8005600:	200010c8 	.word	0x200010c8
 8005604:	20001110 	.word	0x20001110
 8005608:	20000c38 	.word	0x20000c38
 800560c:	20000c34 	.word	0x20000c34
 8005610:	2000111c 	.word	0x2000111c
 8005614:	20001118 	.word	0x20001118
 8005618:	e000ed04 	.word	0xe000ed04

0800561c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800561c:	b480      	push	{r7}
 800561e:	b083      	sub	sp, #12
 8005620:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005622:	4b05      	ldr	r3, [pc, #20]	; (8005638 <xTaskGetTickCount+0x1c>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005628:	687b      	ldr	r3, [r7, #4]
}
 800562a:	4618      	mov	r0, r3
 800562c:	370c      	adds	r7, #12
 800562e:	46bd      	mov	sp, r7
 8005630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005634:	4770      	bx	lr
 8005636:	bf00      	nop
 8005638:	2000110c 	.word	0x2000110c

0800563c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b086      	sub	sp, #24
 8005640:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005642:	2300      	movs	r3, #0
 8005644:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005646:	4b4f      	ldr	r3, [pc, #316]	; (8005784 <xTaskIncrementTick+0x148>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	2b00      	cmp	r3, #0
 800564c:	f040 808f 	bne.w	800576e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005650:	4b4d      	ldr	r3, [pc, #308]	; (8005788 <xTaskIncrementTick+0x14c>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	3301      	adds	r3, #1
 8005656:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005658:	4a4b      	ldr	r2, [pc, #300]	; (8005788 <xTaskIncrementTick+0x14c>)
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d120      	bne.n	80056a6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005664:	4b49      	ldr	r3, [pc, #292]	; (800578c <xTaskIncrementTick+0x150>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d00a      	beq.n	8005684 <xTaskIncrementTick+0x48>
	__asm volatile
 800566e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005672:	f383 8811 	msr	BASEPRI, r3
 8005676:	f3bf 8f6f 	isb	sy
 800567a:	f3bf 8f4f 	dsb	sy
 800567e:	603b      	str	r3, [r7, #0]
}
 8005680:	bf00      	nop
 8005682:	e7fe      	b.n	8005682 <xTaskIncrementTick+0x46>
 8005684:	4b41      	ldr	r3, [pc, #260]	; (800578c <xTaskIncrementTick+0x150>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	60fb      	str	r3, [r7, #12]
 800568a:	4b41      	ldr	r3, [pc, #260]	; (8005790 <xTaskIncrementTick+0x154>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a3f      	ldr	r2, [pc, #252]	; (800578c <xTaskIncrementTick+0x150>)
 8005690:	6013      	str	r3, [r2, #0]
 8005692:	4a3f      	ldr	r2, [pc, #252]	; (8005790 <xTaskIncrementTick+0x154>)
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	6013      	str	r3, [r2, #0]
 8005698:	4b3e      	ldr	r3, [pc, #248]	; (8005794 <xTaskIncrementTick+0x158>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	3301      	adds	r3, #1
 800569e:	4a3d      	ldr	r2, [pc, #244]	; (8005794 <xTaskIncrementTick+0x158>)
 80056a0:	6013      	str	r3, [r2, #0]
 80056a2:	f000 fadb 	bl	8005c5c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80056a6:	4b3c      	ldr	r3, [pc, #240]	; (8005798 <xTaskIncrementTick+0x15c>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	693a      	ldr	r2, [r7, #16]
 80056ac:	429a      	cmp	r2, r3
 80056ae:	d349      	bcc.n	8005744 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80056b0:	4b36      	ldr	r3, [pc, #216]	; (800578c <xTaskIncrementTick+0x150>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d104      	bne.n	80056c4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056ba:	4b37      	ldr	r3, [pc, #220]	; (8005798 <xTaskIncrementTick+0x15c>)
 80056bc:	f04f 32ff 	mov.w	r2, #4294967295
 80056c0:	601a      	str	r2, [r3, #0]
					break;
 80056c2:	e03f      	b.n	8005744 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056c4:	4b31      	ldr	r3, [pc, #196]	; (800578c <xTaskIncrementTick+0x150>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	68db      	ldr	r3, [r3, #12]
 80056ca:	68db      	ldr	r3, [r3, #12]
 80056cc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80056d4:	693a      	ldr	r2, [r7, #16]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	429a      	cmp	r2, r3
 80056da:	d203      	bcs.n	80056e4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80056dc:	4a2e      	ldr	r2, [pc, #184]	; (8005798 <xTaskIncrementTick+0x15c>)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80056e2:	e02f      	b.n	8005744 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	3304      	adds	r3, #4
 80056e8:	4618      	mov	r0, r3
 80056ea:	f7fe ffad 	bl	8004648 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d004      	beq.n	8005700 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	3318      	adds	r3, #24
 80056fa:	4618      	mov	r0, r3
 80056fc:	f7fe ffa4 	bl	8004648 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005704:	4b25      	ldr	r3, [pc, #148]	; (800579c <xTaskIncrementTick+0x160>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	429a      	cmp	r2, r3
 800570a:	d903      	bls.n	8005714 <xTaskIncrementTick+0xd8>
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005710:	4a22      	ldr	r2, [pc, #136]	; (800579c <xTaskIncrementTick+0x160>)
 8005712:	6013      	str	r3, [r2, #0]
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005718:	4613      	mov	r3, r2
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	4413      	add	r3, r2
 800571e:	009b      	lsls	r3, r3, #2
 8005720:	4a1f      	ldr	r2, [pc, #124]	; (80057a0 <xTaskIncrementTick+0x164>)
 8005722:	441a      	add	r2, r3
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	3304      	adds	r3, #4
 8005728:	4619      	mov	r1, r3
 800572a:	4610      	mov	r0, r2
 800572c:	f7fe ff2f 	bl	800458e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005734:	4b1b      	ldr	r3, [pc, #108]	; (80057a4 <xTaskIncrementTick+0x168>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800573a:	429a      	cmp	r2, r3
 800573c:	d3b8      	bcc.n	80056b0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800573e:	2301      	movs	r3, #1
 8005740:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005742:	e7b5      	b.n	80056b0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005744:	4b17      	ldr	r3, [pc, #92]	; (80057a4 <xTaskIncrementTick+0x168>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800574a:	4915      	ldr	r1, [pc, #84]	; (80057a0 <xTaskIncrementTick+0x164>)
 800574c:	4613      	mov	r3, r2
 800574e:	009b      	lsls	r3, r3, #2
 8005750:	4413      	add	r3, r2
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	440b      	add	r3, r1
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	2b01      	cmp	r3, #1
 800575a:	d901      	bls.n	8005760 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800575c:	2301      	movs	r3, #1
 800575e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005760:	4b11      	ldr	r3, [pc, #68]	; (80057a8 <xTaskIncrementTick+0x16c>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d007      	beq.n	8005778 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005768:	2301      	movs	r3, #1
 800576a:	617b      	str	r3, [r7, #20]
 800576c:	e004      	b.n	8005778 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800576e:	4b0f      	ldr	r3, [pc, #60]	; (80057ac <xTaskIncrementTick+0x170>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	3301      	adds	r3, #1
 8005774:	4a0d      	ldr	r2, [pc, #52]	; (80057ac <xTaskIncrementTick+0x170>)
 8005776:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005778:	697b      	ldr	r3, [r7, #20]
}
 800577a:	4618      	mov	r0, r3
 800577c:	3718      	adds	r7, #24
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}
 8005782:	bf00      	nop
 8005784:	20001130 	.word	0x20001130
 8005788:	2000110c 	.word	0x2000110c
 800578c:	200010c0 	.word	0x200010c0
 8005790:	200010c4 	.word	0x200010c4
 8005794:	20001120 	.word	0x20001120
 8005798:	20001128 	.word	0x20001128
 800579c:	20001110 	.word	0x20001110
 80057a0:	20000c38 	.word	0x20000c38
 80057a4:	20000c34 	.word	0x20000c34
 80057a8:	2000111c 	.word	0x2000111c
 80057ac:	20001118 	.word	0x20001118

080057b0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80057b0:	b480      	push	{r7}
 80057b2:	b085      	sub	sp, #20
 80057b4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80057b6:	4b2a      	ldr	r3, [pc, #168]	; (8005860 <vTaskSwitchContext+0xb0>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d003      	beq.n	80057c6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80057be:	4b29      	ldr	r3, [pc, #164]	; (8005864 <vTaskSwitchContext+0xb4>)
 80057c0:	2201      	movs	r2, #1
 80057c2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80057c4:	e046      	b.n	8005854 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80057c6:	4b27      	ldr	r3, [pc, #156]	; (8005864 <vTaskSwitchContext+0xb4>)
 80057c8:	2200      	movs	r2, #0
 80057ca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057cc:	4b26      	ldr	r3, [pc, #152]	; (8005868 <vTaskSwitchContext+0xb8>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	60fb      	str	r3, [r7, #12]
 80057d2:	e010      	b.n	80057f6 <vTaskSwitchContext+0x46>
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d10a      	bne.n	80057f0 <vTaskSwitchContext+0x40>
	__asm volatile
 80057da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057de:	f383 8811 	msr	BASEPRI, r3
 80057e2:	f3bf 8f6f 	isb	sy
 80057e6:	f3bf 8f4f 	dsb	sy
 80057ea:	607b      	str	r3, [r7, #4]
}
 80057ec:	bf00      	nop
 80057ee:	e7fe      	b.n	80057ee <vTaskSwitchContext+0x3e>
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	3b01      	subs	r3, #1
 80057f4:	60fb      	str	r3, [r7, #12]
 80057f6:	491d      	ldr	r1, [pc, #116]	; (800586c <vTaskSwitchContext+0xbc>)
 80057f8:	68fa      	ldr	r2, [r7, #12]
 80057fa:	4613      	mov	r3, r2
 80057fc:	009b      	lsls	r3, r3, #2
 80057fe:	4413      	add	r3, r2
 8005800:	009b      	lsls	r3, r3, #2
 8005802:	440b      	add	r3, r1
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d0e4      	beq.n	80057d4 <vTaskSwitchContext+0x24>
 800580a:	68fa      	ldr	r2, [r7, #12]
 800580c:	4613      	mov	r3, r2
 800580e:	009b      	lsls	r3, r3, #2
 8005810:	4413      	add	r3, r2
 8005812:	009b      	lsls	r3, r3, #2
 8005814:	4a15      	ldr	r2, [pc, #84]	; (800586c <vTaskSwitchContext+0xbc>)
 8005816:	4413      	add	r3, r2
 8005818:	60bb      	str	r3, [r7, #8]
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	685a      	ldr	r2, [r3, #4]
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	605a      	str	r2, [r3, #4]
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	685a      	ldr	r2, [r3, #4]
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	3308      	adds	r3, #8
 800582c:	429a      	cmp	r2, r3
 800582e:	d104      	bne.n	800583a <vTaskSwitchContext+0x8a>
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	685a      	ldr	r2, [r3, #4]
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	605a      	str	r2, [r3, #4]
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	68db      	ldr	r3, [r3, #12]
 8005840:	4a0b      	ldr	r2, [pc, #44]	; (8005870 <vTaskSwitchContext+0xc0>)
 8005842:	6013      	str	r3, [r2, #0]
 8005844:	4a08      	ldr	r2, [pc, #32]	; (8005868 <vTaskSwitchContext+0xb8>)
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800584a:	4b09      	ldr	r3, [pc, #36]	; (8005870 <vTaskSwitchContext+0xc0>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	3354      	adds	r3, #84	; 0x54
 8005850:	4a08      	ldr	r2, [pc, #32]	; (8005874 <vTaskSwitchContext+0xc4>)
 8005852:	6013      	str	r3, [r2, #0]
}
 8005854:	bf00      	nop
 8005856:	3714      	adds	r7, #20
 8005858:	46bd      	mov	sp, r7
 800585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585e:	4770      	bx	lr
 8005860:	20001130 	.word	0x20001130
 8005864:	2000111c 	.word	0x2000111c
 8005868:	20001110 	.word	0x20001110
 800586c:	20000c38 	.word	0x20000c38
 8005870:	20000c34 	.word	0x20000c34
 8005874:	20000014 	.word	0x20000014

08005878 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b084      	sub	sp, #16
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
 8005880:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d10a      	bne.n	800589e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800588c:	f383 8811 	msr	BASEPRI, r3
 8005890:	f3bf 8f6f 	isb	sy
 8005894:	f3bf 8f4f 	dsb	sy
 8005898:	60fb      	str	r3, [r7, #12]
}
 800589a:	bf00      	nop
 800589c:	e7fe      	b.n	800589c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800589e:	4b07      	ldr	r3, [pc, #28]	; (80058bc <vTaskPlaceOnEventList+0x44>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	3318      	adds	r3, #24
 80058a4:	4619      	mov	r1, r3
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f7fe fe95 	bl	80045d6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80058ac:	2101      	movs	r1, #1
 80058ae:	6838      	ldr	r0, [r7, #0]
 80058b0:	f000 fa80 	bl	8005db4 <prvAddCurrentTaskToDelayedList>
}
 80058b4:	bf00      	nop
 80058b6:	3710      	adds	r7, #16
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}
 80058bc:	20000c34 	.word	0x20000c34

080058c0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b086      	sub	sp, #24
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	60f8      	str	r0, [r7, #12]
 80058c8:	60b9      	str	r1, [r7, #8]
 80058ca:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d10a      	bne.n	80058e8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80058d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058d6:	f383 8811 	msr	BASEPRI, r3
 80058da:	f3bf 8f6f 	isb	sy
 80058de:	f3bf 8f4f 	dsb	sy
 80058e2:	617b      	str	r3, [r7, #20]
}
 80058e4:	bf00      	nop
 80058e6:	e7fe      	b.n	80058e6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80058e8:	4b0a      	ldr	r3, [pc, #40]	; (8005914 <vTaskPlaceOnEventListRestricted+0x54>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	3318      	adds	r3, #24
 80058ee:	4619      	mov	r1, r3
 80058f0:	68f8      	ldr	r0, [r7, #12]
 80058f2:	f7fe fe4c 	bl	800458e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d002      	beq.n	8005902 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80058fc:	f04f 33ff 	mov.w	r3, #4294967295
 8005900:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005902:	6879      	ldr	r1, [r7, #4]
 8005904:	68b8      	ldr	r0, [r7, #8]
 8005906:	f000 fa55 	bl	8005db4 <prvAddCurrentTaskToDelayedList>
	}
 800590a:	bf00      	nop
 800590c:	3718      	adds	r7, #24
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}
 8005912:	bf00      	nop
 8005914:	20000c34 	.word	0x20000c34

08005918 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b086      	sub	sp, #24
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	68db      	ldr	r3, [r3, #12]
 8005924:	68db      	ldr	r3, [r3, #12]
 8005926:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d10a      	bne.n	8005944 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800592e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005932:	f383 8811 	msr	BASEPRI, r3
 8005936:	f3bf 8f6f 	isb	sy
 800593a:	f3bf 8f4f 	dsb	sy
 800593e:	60fb      	str	r3, [r7, #12]
}
 8005940:	bf00      	nop
 8005942:	e7fe      	b.n	8005942 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	3318      	adds	r3, #24
 8005948:	4618      	mov	r0, r3
 800594a:	f7fe fe7d 	bl	8004648 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800594e:	4b1e      	ldr	r3, [pc, #120]	; (80059c8 <xTaskRemoveFromEventList+0xb0>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d11d      	bne.n	8005992 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	3304      	adds	r3, #4
 800595a:	4618      	mov	r0, r3
 800595c:	f7fe fe74 	bl	8004648 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005964:	4b19      	ldr	r3, [pc, #100]	; (80059cc <xTaskRemoveFromEventList+0xb4>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	429a      	cmp	r2, r3
 800596a:	d903      	bls.n	8005974 <xTaskRemoveFromEventList+0x5c>
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005970:	4a16      	ldr	r2, [pc, #88]	; (80059cc <xTaskRemoveFromEventList+0xb4>)
 8005972:	6013      	str	r3, [r2, #0]
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005978:	4613      	mov	r3, r2
 800597a:	009b      	lsls	r3, r3, #2
 800597c:	4413      	add	r3, r2
 800597e:	009b      	lsls	r3, r3, #2
 8005980:	4a13      	ldr	r2, [pc, #76]	; (80059d0 <xTaskRemoveFromEventList+0xb8>)
 8005982:	441a      	add	r2, r3
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	3304      	adds	r3, #4
 8005988:	4619      	mov	r1, r3
 800598a:	4610      	mov	r0, r2
 800598c:	f7fe fdff 	bl	800458e <vListInsertEnd>
 8005990:	e005      	b.n	800599e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	3318      	adds	r3, #24
 8005996:	4619      	mov	r1, r3
 8005998:	480e      	ldr	r0, [pc, #56]	; (80059d4 <xTaskRemoveFromEventList+0xbc>)
 800599a:	f7fe fdf8 	bl	800458e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059a2:	4b0d      	ldr	r3, [pc, #52]	; (80059d8 <xTaskRemoveFromEventList+0xc0>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059a8:	429a      	cmp	r2, r3
 80059aa:	d905      	bls.n	80059b8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80059ac:	2301      	movs	r3, #1
 80059ae:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80059b0:	4b0a      	ldr	r3, [pc, #40]	; (80059dc <xTaskRemoveFromEventList+0xc4>)
 80059b2:	2201      	movs	r2, #1
 80059b4:	601a      	str	r2, [r3, #0]
 80059b6:	e001      	b.n	80059bc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80059b8:	2300      	movs	r3, #0
 80059ba:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80059bc:	697b      	ldr	r3, [r7, #20]
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3718      	adds	r7, #24
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}
 80059c6:	bf00      	nop
 80059c8:	20001130 	.word	0x20001130
 80059cc:	20001110 	.word	0x20001110
 80059d0:	20000c38 	.word	0x20000c38
 80059d4:	200010c8 	.word	0x200010c8
 80059d8:	20000c34 	.word	0x20000c34
 80059dc:	2000111c 	.word	0x2000111c

080059e0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80059e0:	b480      	push	{r7}
 80059e2:	b083      	sub	sp, #12
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80059e8:	4b06      	ldr	r3, [pc, #24]	; (8005a04 <vTaskInternalSetTimeOutState+0x24>)
 80059ea:	681a      	ldr	r2, [r3, #0]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80059f0:	4b05      	ldr	r3, [pc, #20]	; (8005a08 <vTaskInternalSetTimeOutState+0x28>)
 80059f2:	681a      	ldr	r2, [r3, #0]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	605a      	str	r2, [r3, #4]
}
 80059f8:	bf00      	nop
 80059fa:	370c      	adds	r7, #12
 80059fc:	46bd      	mov	sp, r7
 80059fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a02:	4770      	bx	lr
 8005a04:	20001120 	.word	0x20001120
 8005a08:	2000110c 	.word	0x2000110c

08005a0c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b088      	sub	sp, #32
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
 8005a14:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d10a      	bne.n	8005a32 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a20:	f383 8811 	msr	BASEPRI, r3
 8005a24:	f3bf 8f6f 	isb	sy
 8005a28:	f3bf 8f4f 	dsb	sy
 8005a2c:	613b      	str	r3, [r7, #16]
}
 8005a2e:	bf00      	nop
 8005a30:	e7fe      	b.n	8005a30 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d10a      	bne.n	8005a4e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a3c:	f383 8811 	msr	BASEPRI, r3
 8005a40:	f3bf 8f6f 	isb	sy
 8005a44:	f3bf 8f4f 	dsb	sy
 8005a48:	60fb      	str	r3, [r7, #12]
}
 8005a4a:	bf00      	nop
 8005a4c:	e7fe      	b.n	8005a4c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005a4e:	f000 fe81 	bl	8006754 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005a52:	4b1d      	ldr	r3, [pc, #116]	; (8005ac8 <xTaskCheckForTimeOut+0xbc>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	69ba      	ldr	r2, [r7, #24]
 8005a5e:	1ad3      	subs	r3, r2, r3
 8005a60:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a6a:	d102      	bne.n	8005a72 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	61fb      	str	r3, [r7, #28]
 8005a70:	e023      	b.n	8005aba <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	4b15      	ldr	r3, [pc, #84]	; (8005acc <xTaskCheckForTimeOut+0xc0>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	429a      	cmp	r2, r3
 8005a7c:	d007      	beq.n	8005a8e <xTaskCheckForTimeOut+0x82>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	69ba      	ldr	r2, [r7, #24]
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d302      	bcc.n	8005a8e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005a88:	2301      	movs	r3, #1
 8005a8a:	61fb      	str	r3, [r7, #28]
 8005a8c:	e015      	b.n	8005aba <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	697a      	ldr	r2, [r7, #20]
 8005a94:	429a      	cmp	r2, r3
 8005a96:	d20b      	bcs.n	8005ab0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	681a      	ldr	r2, [r3, #0]
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	1ad2      	subs	r2, r2, r3
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f7ff ff9b 	bl	80059e0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	61fb      	str	r3, [r7, #28]
 8005aae:	e004      	b.n	8005aba <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005aba:	f000 fe7b 	bl	80067b4 <vPortExitCritical>

	return xReturn;
 8005abe:	69fb      	ldr	r3, [r7, #28]
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3720      	adds	r7, #32
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}
 8005ac8:	2000110c 	.word	0x2000110c
 8005acc:	20001120 	.word	0x20001120

08005ad0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005ad4:	4b03      	ldr	r3, [pc, #12]	; (8005ae4 <vTaskMissedYield+0x14>)
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	601a      	str	r2, [r3, #0]
}
 8005ada:	bf00      	nop
 8005adc:	46bd      	mov	sp, r7
 8005ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae2:	4770      	bx	lr
 8005ae4:	2000111c 	.word	0x2000111c

08005ae8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b082      	sub	sp, #8
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005af0:	f000 f852 	bl	8005b98 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005af4:	4b06      	ldr	r3, [pc, #24]	; (8005b10 <prvIdleTask+0x28>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	d9f9      	bls.n	8005af0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005afc:	4b05      	ldr	r3, [pc, #20]	; (8005b14 <prvIdleTask+0x2c>)
 8005afe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b02:	601a      	str	r2, [r3, #0]
 8005b04:	f3bf 8f4f 	dsb	sy
 8005b08:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005b0c:	e7f0      	b.n	8005af0 <prvIdleTask+0x8>
 8005b0e:	bf00      	nop
 8005b10:	20000c38 	.word	0x20000c38
 8005b14:	e000ed04 	.word	0xe000ed04

08005b18 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b082      	sub	sp, #8
 8005b1c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005b1e:	2300      	movs	r3, #0
 8005b20:	607b      	str	r3, [r7, #4]
 8005b22:	e00c      	b.n	8005b3e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005b24:	687a      	ldr	r2, [r7, #4]
 8005b26:	4613      	mov	r3, r2
 8005b28:	009b      	lsls	r3, r3, #2
 8005b2a:	4413      	add	r3, r2
 8005b2c:	009b      	lsls	r3, r3, #2
 8005b2e:	4a12      	ldr	r2, [pc, #72]	; (8005b78 <prvInitialiseTaskLists+0x60>)
 8005b30:	4413      	add	r3, r2
 8005b32:	4618      	mov	r0, r3
 8005b34:	f7fe fcfe 	bl	8004534 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	3301      	adds	r3, #1
 8005b3c:	607b      	str	r3, [r7, #4]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2b37      	cmp	r3, #55	; 0x37
 8005b42:	d9ef      	bls.n	8005b24 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005b44:	480d      	ldr	r0, [pc, #52]	; (8005b7c <prvInitialiseTaskLists+0x64>)
 8005b46:	f7fe fcf5 	bl	8004534 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005b4a:	480d      	ldr	r0, [pc, #52]	; (8005b80 <prvInitialiseTaskLists+0x68>)
 8005b4c:	f7fe fcf2 	bl	8004534 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005b50:	480c      	ldr	r0, [pc, #48]	; (8005b84 <prvInitialiseTaskLists+0x6c>)
 8005b52:	f7fe fcef 	bl	8004534 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005b56:	480c      	ldr	r0, [pc, #48]	; (8005b88 <prvInitialiseTaskLists+0x70>)
 8005b58:	f7fe fcec 	bl	8004534 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005b5c:	480b      	ldr	r0, [pc, #44]	; (8005b8c <prvInitialiseTaskLists+0x74>)
 8005b5e:	f7fe fce9 	bl	8004534 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005b62:	4b0b      	ldr	r3, [pc, #44]	; (8005b90 <prvInitialiseTaskLists+0x78>)
 8005b64:	4a05      	ldr	r2, [pc, #20]	; (8005b7c <prvInitialiseTaskLists+0x64>)
 8005b66:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005b68:	4b0a      	ldr	r3, [pc, #40]	; (8005b94 <prvInitialiseTaskLists+0x7c>)
 8005b6a:	4a05      	ldr	r2, [pc, #20]	; (8005b80 <prvInitialiseTaskLists+0x68>)
 8005b6c:	601a      	str	r2, [r3, #0]
}
 8005b6e:	bf00      	nop
 8005b70:	3708      	adds	r7, #8
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}
 8005b76:	bf00      	nop
 8005b78:	20000c38 	.word	0x20000c38
 8005b7c:	20001098 	.word	0x20001098
 8005b80:	200010ac 	.word	0x200010ac
 8005b84:	200010c8 	.word	0x200010c8
 8005b88:	200010dc 	.word	0x200010dc
 8005b8c:	200010f4 	.word	0x200010f4
 8005b90:	200010c0 	.word	0x200010c0
 8005b94:	200010c4 	.word	0x200010c4

08005b98 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b082      	sub	sp, #8
 8005b9c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005b9e:	e019      	b.n	8005bd4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005ba0:	f000 fdd8 	bl	8006754 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ba4:	4b10      	ldr	r3, [pc, #64]	; (8005be8 <prvCheckTasksWaitingTermination+0x50>)
 8005ba6:	68db      	ldr	r3, [r3, #12]
 8005ba8:	68db      	ldr	r3, [r3, #12]
 8005baa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	3304      	adds	r3, #4
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	f7fe fd49 	bl	8004648 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005bb6:	4b0d      	ldr	r3, [pc, #52]	; (8005bec <prvCheckTasksWaitingTermination+0x54>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	3b01      	subs	r3, #1
 8005bbc:	4a0b      	ldr	r2, [pc, #44]	; (8005bec <prvCheckTasksWaitingTermination+0x54>)
 8005bbe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005bc0:	4b0b      	ldr	r3, [pc, #44]	; (8005bf0 <prvCheckTasksWaitingTermination+0x58>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	3b01      	subs	r3, #1
 8005bc6:	4a0a      	ldr	r2, [pc, #40]	; (8005bf0 <prvCheckTasksWaitingTermination+0x58>)
 8005bc8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005bca:	f000 fdf3 	bl	80067b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f000 f810 	bl	8005bf4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005bd4:	4b06      	ldr	r3, [pc, #24]	; (8005bf0 <prvCheckTasksWaitingTermination+0x58>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d1e1      	bne.n	8005ba0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005bdc:	bf00      	nop
 8005bde:	bf00      	nop
 8005be0:	3708      	adds	r7, #8
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}
 8005be6:	bf00      	nop
 8005be8:	200010dc 	.word	0x200010dc
 8005bec:	20001108 	.word	0x20001108
 8005bf0:	200010f0 	.word	0x200010f0

08005bf4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b084      	sub	sp, #16
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	3354      	adds	r3, #84	; 0x54
 8005c00:	4618      	mov	r0, r3
 8005c02:	f001 fb05 	bl	8007210 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d108      	bne.n	8005c22 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c14:	4618      	mov	r0, r3
 8005c16:	f000 ff8b 	bl	8006b30 <vPortFree>
				vPortFree( pxTCB );
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f000 ff88 	bl	8006b30 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005c20:	e018      	b.n	8005c54 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	d103      	bne.n	8005c34 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f000 ff7f 	bl	8006b30 <vPortFree>
	}
 8005c32:	e00f      	b.n	8005c54 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005c3a:	2b02      	cmp	r3, #2
 8005c3c:	d00a      	beq.n	8005c54 <prvDeleteTCB+0x60>
	__asm volatile
 8005c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c42:	f383 8811 	msr	BASEPRI, r3
 8005c46:	f3bf 8f6f 	isb	sy
 8005c4a:	f3bf 8f4f 	dsb	sy
 8005c4e:	60fb      	str	r3, [r7, #12]
}
 8005c50:	bf00      	nop
 8005c52:	e7fe      	b.n	8005c52 <prvDeleteTCB+0x5e>
	}
 8005c54:	bf00      	nop
 8005c56:	3710      	adds	r7, #16
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd80      	pop	{r7, pc}

08005c5c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b083      	sub	sp, #12
 8005c60:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c62:	4b0c      	ldr	r3, [pc, #48]	; (8005c94 <prvResetNextTaskUnblockTime+0x38>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d104      	bne.n	8005c76 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005c6c:	4b0a      	ldr	r3, [pc, #40]	; (8005c98 <prvResetNextTaskUnblockTime+0x3c>)
 8005c6e:	f04f 32ff 	mov.w	r2, #4294967295
 8005c72:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005c74:	e008      	b.n	8005c88 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c76:	4b07      	ldr	r3, [pc, #28]	; (8005c94 <prvResetNextTaskUnblockTime+0x38>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	68db      	ldr	r3, [r3, #12]
 8005c7c:	68db      	ldr	r3, [r3, #12]
 8005c7e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	4a04      	ldr	r2, [pc, #16]	; (8005c98 <prvResetNextTaskUnblockTime+0x3c>)
 8005c86:	6013      	str	r3, [r2, #0]
}
 8005c88:	bf00      	nop
 8005c8a:	370c      	adds	r7, #12
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr
 8005c94:	200010c0 	.word	0x200010c0
 8005c98:	20001128 	.word	0x20001128

08005c9c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b083      	sub	sp, #12
 8005ca0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005ca2:	4b0b      	ldr	r3, [pc, #44]	; (8005cd0 <xTaskGetSchedulerState+0x34>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d102      	bne.n	8005cb0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005caa:	2301      	movs	r3, #1
 8005cac:	607b      	str	r3, [r7, #4]
 8005cae:	e008      	b.n	8005cc2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005cb0:	4b08      	ldr	r3, [pc, #32]	; (8005cd4 <xTaskGetSchedulerState+0x38>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d102      	bne.n	8005cbe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005cb8:	2302      	movs	r3, #2
 8005cba:	607b      	str	r3, [r7, #4]
 8005cbc:	e001      	b.n	8005cc2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005cc2:	687b      	ldr	r3, [r7, #4]
	}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	370c      	adds	r7, #12
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cce:	4770      	bx	lr
 8005cd0:	20001114 	.word	0x20001114
 8005cd4:	20001130 	.word	0x20001130

08005cd8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b086      	sub	sp, #24
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d056      	beq.n	8005d9c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005cee:	4b2e      	ldr	r3, [pc, #184]	; (8005da8 <xTaskPriorityDisinherit+0xd0>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	693a      	ldr	r2, [r7, #16]
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	d00a      	beq.n	8005d0e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cfc:	f383 8811 	msr	BASEPRI, r3
 8005d00:	f3bf 8f6f 	isb	sy
 8005d04:	f3bf 8f4f 	dsb	sy
 8005d08:	60fb      	str	r3, [r7, #12]
}
 8005d0a:	bf00      	nop
 8005d0c:	e7fe      	b.n	8005d0c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d10a      	bne.n	8005d2c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d1a:	f383 8811 	msr	BASEPRI, r3
 8005d1e:	f3bf 8f6f 	isb	sy
 8005d22:	f3bf 8f4f 	dsb	sy
 8005d26:	60bb      	str	r3, [r7, #8]
}
 8005d28:	bf00      	nop
 8005d2a:	e7fe      	b.n	8005d2a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d30:	1e5a      	subs	r2, r3, #1
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d3e:	429a      	cmp	r2, r3
 8005d40:	d02c      	beq.n	8005d9c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d128      	bne.n	8005d9c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	3304      	adds	r3, #4
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f7fe fc7a 	bl	8004648 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d60:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d6c:	4b0f      	ldr	r3, [pc, #60]	; (8005dac <xTaskPriorityDisinherit+0xd4>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d903      	bls.n	8005d7c <xTaskPriorityDisinherit+0xa4>
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d78:	4a0c      	ldr	r2, [pc, #48]	; (8005dac <xTaskPriorityDisinherit+0xd4>)
 8005d7a:	6013      	str	r3, [r2, #0]
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d80:	4613      	mov	r3, r2
 8005d82:	009b      	lsls	r3, r3, #2
 8005d84:	4413      	add	r3, r2
 8005d86:	009b      	lsls	r3, r3, #2
 8005d88:	4a09      	ldr	r2, [pc, #36]	; (8005db0 <xTaskPriorityDisinherit+0xd8>)
 8005d8a:	441a      	add	r2, r3
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	3304      	adds	r3, #4
 8005d90:	4619      	mov	r1, r3
 8005d92:	4610      	mov	r0, r2
 8005d94:	f7fe fbfb 	bl	800458e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005d98:	2301      	movs	r3, #1
 8005d9a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005d9c:	697b      	ldr	r3, [r7, #20]
	}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3718      	adds	r7, #24
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}
 8005da6:	bf00      	nop
 8005da8:	20000c34 	.word	0x20000c34
 8005dac:	20001110 	.word	0x20001110
 8005db0:	20000c38 	.word	0x20000c38

08005db4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b084      	sub	sp, #16
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005dbe:	4b21      	ldr	r3, [pc, #132]	; (8005e44 <prvAddCurrentTaskToDelayedList+0x90>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005dc4:	4b20      	ldr	r3, [pc, #128]	; (8005e48 <prvAddCurrentTaskToDelayedList+0x94>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	3304      	adds	r3, #4
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f7fe fc3c 	bl	8004648 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dd6:	d10a      	bne.n	8005dee <prvAddCurrentTaskToDelayedList+0x3a>
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d007      	beq.n	8005dee <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005dde:	4b1a      	ldr	r3, [pc, #104]	; (8005e48 <prvAddCurrentTaskToDelayedList+0x94>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	3304      	adds	r3, #4
 8005de4:	4619      	mov	r1, r3
 8005de6:	4819      	ldr	r0, [pc, #100]	; (8005e4c <prvAddCurrentTaskToDelayedList+0x98>)
 8005de8:	f7fe fbd1 	bl	800458e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005dec:	e026      	b.n	8005e3c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005dee:	68fa      	ldr	r2, [r7, #12]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	4413      	add	r3, r2
 8005df4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005df6:	4b14      	ldr	r3, [pc, #80]	; (8005e48 <prvAddCurrentTaskToDelayedList+0x94>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	68ba      	ldr	r2, [r7, #8]
 8005dfc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005dfe:	68ba      	ldr	r2, [r7, #8]
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	429a      	cmp	r2, r3
 8005e04:	d209      	bcs.n	8005e1a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e06:	4b12      	ldr	r3, [pc, #72]	; (8005e50 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005e08:	681a      	ldr	r2, [r3, #0]
 8005e0a:	4b0f      	ldr	r3, [pc, #60]	; (8005e48 <prvAddCurrentTaskToDelayedList+0x94>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	3304      	adds	r3, #4
 8005e10:	4619      	mov	r1, r3
 8005e12:	4610      	mov	r0, r2
 8005e14:	f7fe fbdf 	bl	80045d6 <vListInsert>
}
 8005e18:	e010      	b.n	8005e3c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e1a:	4b0e      	ldr	r3, [pc, #56]	; (8005e54 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	4b0a      	ldr	r3, [pc, #40]	; (8005e48 <prvAddCurrentTaskToDelayedList+0x94>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	3304      	adds	r3, #4
 8005e24:	4619      	mov	r1, r3
 8005e26:	4610      	mov	r0, r2
 8005e28:	f7fe fbd5 	bl	80045d6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005e2c:	4b0a      	ldr	r3, [pc, #40]	; (8005e58 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	68ba      	ldr	r2, [r7, #8]
 8005e32:	429a      	cmp	r2, r3
 8005e34:	d202      	bcs.n	8005e3c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005e36:	4a08      	ldr	r2, [pc, #32]	; (8005e58 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	6013      	str	r3, [r2, #0]
}
 8005e3c:	bf00      	nop
 8005e3e:	3710      	adds	r7, #16
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}
 8005e44:	2000110c 	.word	0x2000110c
 8005e48:	20000c34 	.word	0x20000c34
 8005e4c:	200010f4 	.word	0x200010f4
 8005e50:	200010c4 	.word	0x200010c4
 8005e54:	200010c0 	.word	0x200010c0
 8005e58:	20001128 	.word	0x20001128

08005e5c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b08a      	sub	sp, #40	; 0x28
 8005e60:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005e62:	2300      	movs	r3, #0
 8005e64:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005e66:	f000 fb07 	bl	8006478 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005e6a:	4b1c      	ldr	r3, [pc, #112]	; (8005edc <xTimerCreateTimerTask+0x80>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d021      	beq.n	8005eb6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005e72:	2300      	movs	r3, #0
 8005e74:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005e76:	2300      	movs	r3, #0
 8005e78:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005e7a:	1d3a      	adds	r2, r7, #4
 8005e7c:	f107 0108 	add.w	r1, r7, #8
 8005e80:	f107 030c 	add.w	r3, r7, #12
 8005e84:	4618      	mov	r0, r3
 8005e86:	f7fe fb3b 	bl	8004500 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005e8a:	6879      	ldr	r1, [r7, #4]
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	68fa      	ldr	r2, [r7, #12]
 8005e90:	9202      	str	r2, [sp, #8]
 8005e92:	9301      	str	r3, [sp, #4]
 8005e94:	2302      	movs	r3, #2
 8005e96:	9300      	str	r3, [sp, #0]
 8005e98:	2300      	movs	r3, #0
 8005e9a:	460a      	mov	r2, r1
 8005e9c:	4910      	ldr	r1, [pc, #64]	; (8005ee0 <xTimerCreateTimerTask+0x84>)
 8005e9e:	4811      	ldr	r0, [pc, #68]	; (8005ee4 <xTimerCreateTimerTask+0x88>)
 8005ea0:	f7ff f8e8 	bl	8005074 <xTaskCreateStatic>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	4a10      	ldr	r2, [pc, #64]	; (8005ee8 <xTimerCreateTimerTask+0x8c>)
 8005ea8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005eaa:	4b0f      	ldr	r3, [pc, #60]	; (8005ee8 <xTimerCreateTimerTask+0x8c>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d001      	beq.n	8005eb6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d10a      	bne.n	8005ed2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ec0:	f383 8811 	msr	BASEPRI, r3
 8005ec4:	f3bf 8f6f 	isb	sy
 8005ec8:	f3bf 8f4f 	dsb	sy
 8005ecc:	613b      	str	r3, [r7, #16]
}
 8005ece:	bf00      	nop
 8005ed0:	e7fe      	b.n	8005ed0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005ed2:	697b      	ldr	r3, [r7, #20]
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	3718      	adds	r7, #24
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}
 8005edc:	20001164 	.word	0x20001164
 8005ee0:	08007960 	.word	0x08007960
 8005ee4:	08006021 	.word	0x08006021
 8005ee8:	20001168 	.word	0x20001168

08005eec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b08a      	sub	sp, #40	; 0x28
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	60f8      	str	r0, [r7, #12]
 8005ef4:	60b9      	str	r1, [r7, #8]
 8005ef6:	607a      	str	r2, [r7, #4]
 8005ef8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005efa:	2300      	movs	r3, #0
 8005efc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d10a      	bne.n	8005f1a <xTimerGenericCommand+0x2e>
	__asm volatile
 8005f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f08:	f383 8811 	msr	BASEPRI, r3
 8005f0c:	f3bf 8f6f 	isb	sy
 8005f10:	f3bf 8f4f 	dsb	sy
 8005f14:	623b      	str	r3, [r7, #32]
}
 8005f16:	bf00      	nop
 8005f18:	e7fe      	b.n	8005f18 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005f1a:	4b1a      	ldr	r3, [pc, #104]	; (8005f84 <xTimerGenericCommand+0x98>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d02a      	beq.n	8005f78 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	2b05      	cmp	r3, #5
 8005f32:	dc18      	bgt.n	8005f66 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005f34:	f7ff feb2 	bl	8005c9c <xTaskGetSchedulerState>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	2b02      	cmp	r3, #2
 8005f3c:	d109      	bne.n	8005f52 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005f3e:	4b11      	ldr	r3, [pc, #68]	; (8005f84 <xTimerGenericCommand+0x98>)
 8005f40:	6818      	ldr	r0, [r3, #0]
 8005f42:	f107 0110 	add.w	r1, r7, #16
 8005f46:	2300      	movs	r3, #0
 8005f48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f4a:	f7fe fcab 	bl	80048a4 <xQueueGenericSend>
 8005f4e:	6278      	str	r0, [r7, #36]	; 0x24
 8005f50:	e012      	b.n	8005f78 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005f52:	4b0c      	ldr	r3, [pc, #48]	; (8005f84 <xTimerGenericCommand+0x98>)
 8005f54:	6818      	ldr	r0, [r3, #0]
 8005f56:	f107 0110 	add.w	r1, r7, #16
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	f7fe fca1 	bl	80048a4 <xQueueGenericSend>
 8005f62:	6278      	str	r0, [r7, #36]	; 0x24
 8005f64:	e008      	b.n	8005f78 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005f66:	4b07      	ldr	r3, [pc, #28]	; (8005f84 <xTimerGenericCommand+0x98>)
 8005f68:	6818      	ldr	r0, [r3, #0]
 8005f6a:	f107 0110 	add.w	r1, r7, #16
 8005f6e:	2300      	movs	r3, #0
 8005f70:	683a      	ldr	r2, [r7, #0]
 8005f72:	f7fe fd95 	bl	8004aa0 <xQueueGenericSendFromISR>
 8005f76:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3728      	adds	r7, #40	; 0x28
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}
 8005f82:	bf00      	nop
 8005f84:	20001164 	.word	0x20001164

08005f88 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b088      	sub	sp, #32
 8005f8c:	af02      	add	r7, sp, #8
 8005f8e:	6078      	str	r0, [r7, #4]
 8005f90:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f92:	4b22      	ldr	r3, [pc, #136]	; (800601c <prvProcessExpiredTimer+0x94>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	68db      	ldr	r3, [r3, #12]
 8005f98:	68db      	ldr	r3, [r3, #12]
 8005f9a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	3304      	adds	r3, #4
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	f7fe fb51 	bl	8004648 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005fac:	f003 0304 	and.w	r3, r3, #4
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d022      	beq.n	8005ffa <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	699a      	ldr	r2, [r3, #24]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	18d1      	adds	r1, r2, r3
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	683a      	ldr	r2, [r7, #0]
 8005fc0:	6978      	ldr	r0, [r7, #20]
 8005fc2:	f000 f8d1 	bl	8006168 <prvInsertTimerInActiveList>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d01f      	beq.n	800600c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005fcc:	2300      	movs	r3, #0
 8005fce:	9300      	str	r3, [sp, #0]
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	687a      	ldr	r2, [r7, #4]
 8005fd4:	2100      	movs	r1, #0
 8005fd6:	6978      	ldr	r0, [r7, #20]
 8005fd8:	f7ff ff88 	bl	8005eec <xTimerGenericCommand>
 8005fdc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d113      	bne.n	800600c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fe8:	f383 8811 	msr	BASEPRI, r3
 8005fec:	f3bf 8f6f 	isb	sy
 8005ff0:	f3bf 8f4f 	dsb	sy
 8005ff4:	60fb      	str	r3, [r7, #12]
}
 8005ff6:	bf00      	nop
 8005ff8:	e7fe      	b.n	8005ff8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006000:	f023 0301 	bic.w	r3, r3, #1
 8006004:	b2da      	uxtb	r2, r3
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	6a1b      	ldr	r3, [r3, #32]
 8006010:	6978      	ldr	r0, [r7, #20]
 8006012:	4798      	blx	r3
}
 8006014:	bf00      	nop
 8006016:	3718      	adds	r7, #24
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}
 800601c:	2000115c 	.word	0x2000115c

08006020 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b084      	sub	sp, #16
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006028:	f107 0308 	add.w	r3, r7, #8
 800602c:	4618      	mov	r0, r3
 800602e:	f000 f857 	bl	80060e0 <prvGetNextExpireTime>
 8006032:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	4619      	mov	r1, r3
 8006038:	68f8      	ldr	r0, [r7, #12]
 800603a:	f000 f803 	bl	8006044 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800603e:	f000 f8d5 	bl	80061ec <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006042:	e7f1      	b.n	8006028 <prvTimerTask+0x8>

08006044 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b084      	sub	sp, #16
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
 800604c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800604e:	f7ff fa39 	bl	80054c4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006052:	f107 0308 	add.w	r3, r7, #8
 8006056:	4618      	mov	r0, r3
 8006058:	f000 f866 	bl	8006128 <prvSampleTimeNow>
 800605c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d130      	bne.n	80060c6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d10a      	bne.n	8006080 <prvProcessTimerOrBlockTask+0x3c>
 800606a:	687a      	ldr	r2, [r7, #4]
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	429a      	cmp	r2, r3
 8006070:	d806      	bhi.n	8006080 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006072:	f7ff fa35 	bl	80054e0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006076:	68f9      	ldr	r1, [r7, #12]
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	f7ff ff85 	bl	8005f88 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800607e:	e024      	b.n	80060ca <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d008      	beq.n	8006098 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006086:	4b13      	ldr	r3, [pc, #76]	; (80060d4 <prvProcessTimerOrBlockTask+0x90>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d101      	bne.n	8006094 <prvProcessTimerOrBlockTask+0x50>
 8006090:	2301      	movs	r3, #1
 8006092:	e000      	b.n	8006096 <prvProcessTimerOrBlockTask+0x52>
 8006094:	2300      	movs	r3, #0
 8006096:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006098:	4b0f      	ldr	r3, [pc, #60]	; (80060d8 <prvProcessTimerOrBlockTask+0x94>)
 800609a:	6818      	ldr	r0, [r3, #0]
 800609c:	687a      	ldr	r2, [r7, #4]
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	1ad3      	subs	r3, r2, r3
 80060a2:	683a      	ldr	r2, [r7, #0]
 80060a4:	4619      	mov	r1, r3
 80060a6:	f7fe ffb1 	bl	800500c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80060aa:	f7ff fa19 	bl	80054e0 <xTaskResumeAll>
 80060ae:	4603      	mov	r3, r0
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d10a      	bne.n	80060ca <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80060b4:	4b09      	ldr	r3, [pc, #36]	; (80060dc <prvProcessTimerOrBlockTask+0x98>)
 80060b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060ba:	601a      	str	r2, [r3, #0]
 80060bc:	f3bf 8f4f 	dsb	sy
 80060c0:	f3bf 8f6f 	isb	sy
}
 80060c4:	e001      	b.n	80060ca <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80060c6:	f7ff fa0b 	bl	80054e0 <xTaskResumeAll>
}
 80060ca:	bf00      	nop
 80060cc:	3710      	adds	r7, #16
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}
 80060d2:	bf00      	nop
 80060d4:	20001160 	.word	0x20001160
 80060d8:	20001164 	.word	0x20001164
 80060dc:	e000ed04 	.word	0xe000ed04

080060e0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80060e0:	b480      	push	{r7}
 80060e2:	b085      	sub	sp, #20
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80060e8:	4b0e      	ldr	r3, [pc, #56]	; (8006124 <prvGetNextExpireTime+0x44>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d101      	bne.n	80060f6 <prvGetNextExpireTime+0x16>
 80060f2:	2201      	movs	r2, #1
 80060f4:	e000      	b.n	80060f8 <prvGetNextExpireTime+0x18>
 80060f6:	2200      	movs	r2, #0
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d105      	bne.n	8006110 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006104:	4b07      	ldr	r3, [pc, #28]	; (8006124 <prvGetNextExpireTime+0x44>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	68db      	ldr	r3, [r3, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	60fb      	str	r3, [r7, #12]
 800610e:	e001      	b.n	8006114 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006110:	2300      	movs	r3, #0
 8006112:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006114:	68fb      	ldr	r3, [r7, #12]
}
 8006116:	4618      	mov	r0, r3
 8006118:	3714      	adds	r7, #20
 800611a:	46bd      	mov	sp, r7
 800611c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006120:	4770      	bx	lr
 8006122:	bf00      	nop
 8006124:	2000115c 	.word	0x2000115c

08006128 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b084      	sub	sp, #16
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006130:	f7ff fa74 	bl	800561c <xTaskGetTickCount>
 8006134:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006136:	4b0b      	ldr	r3, [pc, #44]	; (8006164 <prvSampleTimeNow+0x3c>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	68fa      	ldr	r2, [r7, #12]
 800613c:	429a      	cmp	r2, r3
 800613e:	d205      	bcs.n	800614c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006140:	f000 f936 	bl	80063b0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2201      	movs	r2, #1
 8006148:	601a      	str	r2, [r3, #0]
 800614a:	e002      	b.n	8006152 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2200      	movs	r2, #0
 8006150:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006152:	4a04      	ldr	r2, [pc, #16]	; (8006164 <prvSampleTimeNow+0x3c>)
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006158:	68fb      	ldr	r3, [r7, #12]
}
 800615a:	4618      	mov	r0, r3
 800615c:	3710      	adds	r7, #16
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}
 8006162:	bf00      	nop
 8006164:	2000116c 	.word	0x2000116c

08006168 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b086      	sub	sp, #24
 800616c:	af00      	add	r7, sp, #0
 800616e:	60f8      	str	r0, [r7, #12]
 8006170:	60b9      	str	r1, [r7, #8]
 8006172:	607a      	str	r2, [r7, #4]
 8006174:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006176:	2300      	movs	r3, #0
 8006178:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	68ba      	ldr	r2, [r7, #8]
 800617e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	68fa      	ldr	r2, [r7, #12]
 8006184:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006186:	68ba      	ldr	r2, [r7, #8]
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	429a      	cmp	r2, r3
 800618c:	d812      	bhi.n	80061b4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800618e:	687a      	ldr	r2, [r7, #4]
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	1ad2      	subs	r2, r2, r3
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	699b      	ldr	r3, [r3, #24]
 8006198:	429a      	cmp	r2, r3
 800619a:	d302      	bcc.n	80061a2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800619c:	2301      	movs	r3, #1
 800619e:	617b      	str	r3, [r7, #20]
 80061a0:	e01b      	b.n	80061da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80061a2:	4b10      	ldr	r3, [pc, #64]	; (80061e4 <prvInsertTimerInActiveList+0x7c>)
 80061a4:	681a      	ldr	r2, [r3, #0]
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	3304      	adds	r3, #4
 80061aa:	4619      	mov	r1, r3
 80061ac:	4610      	mov	r0, r2
 80061ae:	f7fe fa12 	bl	80045d6 <vListInsert>
 80061b2:	e012      	b.n	80061da <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80061b4:	687a      	ldr	r2, [r7, #4]
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	429a      	cmp	r2, r3
 80061ba:	d206      	bcs.n	80061ca <prvInsertTimerInActiveList+0x62>
 80061bc:	68ba      	ldr	r2, [r7, #8]
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	429a      	cmp	r2, r3
 80061c2:	d302      	bcc.n	80061ca <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80061c4:	2301      	movs	r3, #1
 80061c6:	617b      	str	r3, [r7, #20]
 80061c8:	e007      	b.n	80061da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80061ca:	4b07      	ldr	r3, [pc, #28]	; (80061e8 <prvInsertTimerInActiveList+0x80>)
 80061cc:	681a      	ldr	r2, [r3, #0]
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	3304      	adds	r3, #4
 80061d2:	4619      	mov	r1, r3
 80061d4:	4610      	mov	r0, r2
 80061d6:	f7fe f9fe 	bl	80045d6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80061da:	697b      	ldr	r3, [r7, #20]
}
 80061dc:	4618      	mov	r0, r3
 80061de:	3718      	adds	r7, #24
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}
 80061e4:	20001160 	.word	0x20001160
 80061e8:	2000115c 	.word	0x2000115c

080061ec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b08e      	sub	sp, #56	; 0x38
 80061f0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80061f2:	e0ca      	b.n	800638a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	da18      	bge.n	800622c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80061fa:	1d3b      	adds	r3, r7, #4
 80061fc:	3304      	adds	r3, #4
 80061fe:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006202:	2b00      	cmp	r3, #0
 8006204:	d10a      	bne.n	800621c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800620a:	f383 8811 	msr	BASEPRI, r3
 800620e:	f3bf 8f6f 	isb	sy
 8006212:	f3bf 8f4f 	dsb	sy
 8006216:	61fb      	str	r3, [r7, #28]
}
 8006218:	bf00      	nop
 800621a:	e7fe      	b.n	800621a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800621c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006222:	6850      	ldr	r0, [r2, #4]
 8006224:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006226:	6892      	ldr	r2, [r2, #8]
 8006228:	4611      	mov	r1, r2
 800622a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2b00      	cmp	r3, #0
 8006230:	f2c0 80aa 	blt.w	8006388 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800623a:	695b      	ldr	r3, [r3, #20]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d004      	beq.n	800624a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006242:	3304      	adds	r3, #4
 8006244:	4618      	mov	r0, r3
 8006246:	f7fe f9ff 	bl	8004648 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800624a:	463b      	mov	r3, r7
 800624c:	4618      	mov	r0, r3
 800624e:	f7ff ff6b 	bl	8006128 <prvSampleTimeNow>
 8006252:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2b09      	cmp	r3, #9
 8006258:	f200 8097 	bhi.w	800638a <prvProcessReceivedCommands+0x19e>
 800625c:	a201      	add	r2, pc, #4	; (adr r2, 8006264 <prvProcessReceivedCommands+0x78>)
 800625e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006262:	bf00      	nop
 8006264:	0800628d 	.word	0x0800628d
 8006268:	0800628d 	.word	0x0800628d
 800626c:	0800628d 	.word	0x0800628d
 8006270:	08006301 	.word	0x08006301
 8006274:	08006315 	.word	0x08006315
 8006278:	0800635f 	.word	0x0800635f
 800627c:	0800628d 	.word	0x0800628d
 8006280:	0800628d 	.word	0x0800628d
 8006284:	08006301 	.word	0x08006301
 8006288:	08006315 	.word	0x08006315
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800628c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800628e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006292:	f043 0301 	orr.w	r3, r3, #1
 8006296:	b2da      	uxtb	r2, r3
 8006298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800629a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800629e:	68ba      	ldr	r2, [r7, #8]
 80062a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062a2:	699b      	ldr	r3, [r3, #24]
 80062a4:	18d1      	adds	r1, r2, r3
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062ac:	f7ff ff5c 	bl	8006168 <prvInsertTimerInActiveList>
 80062b0:	4603      	mov	r3, r0
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d069      	beq.n	800638a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80062b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b8:	6a1b      	ldr	r3, [r3, #32]
 80062ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062bc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80062be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80062c4:	f003 0304 	and.w	r3, r3, #4
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d05e      	beq.n	800638a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80062cc:	68ba      	ldr	r2, [r7, #8]
 80062ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062d0:	699b      	ldr	r3, [r3, #24]
 80062d2:	441a      	add	r2, r3
 80062d4:	2300      	movs	r3, #0
 80062d6:	9300      	str	r3, [sp, #0]
 80062d8:	2300      	movs	r3, #0
 80062da:	2100      	movs	r1, #0
 80062dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062de:	f7ff fe05 	bl	8005eec <xTimerGenericCommand>
 80062e2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80062e4:	6a3b      	ldr	r3, [r7, #32]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d14f      	bne.n	800638a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80062ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ee:	f383 8811 	msr	BASEPRI, r3
 80062f2:	f3bf 8f6f 	isb	sy
 80062f6:	f3bf 8f4f 	dsb	sy
 80062fa:	61bb      	str	r3, [r7, #24]
}
 80062fc:	bf00      	nop
 80062fe:	e7fe      	b.n	80062fe <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006302:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006306:	f023 0301 	bic.w	r3, r3, #1
 800630a:	b2da      	uxtb	r2, r3
 800630c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800630e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006312:	e03a      	b.n	800638a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006316:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800631a:	f043 0301 	orr.w	r3, r3, #1
 800631e:	b2da      	uxtb	r2, r3
 8006320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006322:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006326:	68ba      	ldr	r2, [r7, #8]
 8006328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800632a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800632c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800632e:	699b      	ldr	r3, [r3, #24]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d10a      	bne.n	800634a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006338:	f383 8811 	msr	BASEPRI, r3
 800633c:	f3bf 8f6f 	isb	sy
 8006340:	f3bf 8f4f 	dsb	sy
 8006344:	617b      	str	r3, [r7, #20]
}
 8006346:	bf00      	nop
 8006348:	e7fe      	b.n	8006348 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800634a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800634c:	699a      	ldr	r2, [r3, #24]
 800634e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006350:	18d1      	adds	r1, r2, r3
 8006352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006354:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006356:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006358:	f7ff ff06 	bl	8006168 <prvInsertTimerInActiveList>
					break;
 800635c:	e015      	b.n	800638a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800635e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006360:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006364:	f003 0302 	and.w	r3, r3, #2
 8006368:	2b00      	cmp	r3, #0
 800636a:	d103      	bne.n	8006374 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800636c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800636e:	f000 fbdf 	bl	8006b30 <vPortFree>
 8006372:	e00a      	b.n	800638a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006376:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800637a:	f023 0301 	bic.w	r3, r3, #1
 800637e:	b2da      	uxtb	r2, r3
 8006380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006382:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006386:	e000      	b.n	800638a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006388:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800638a:	4b08      	ldr	r3, [pc, #32]	; (80063ac <prvProcessReceivedCommands+0x1c0>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	1d39      	adds	r1, r7, #4
 8006390:	2200      	movs	r2, #0
 8006392:	4618      	mov	r0, r3
 8006394:	f7fe fc20 	bl	8004bd8 <xQueueReceive>
 8006398:	4603      	mov	r3, r0
 800639a:	2b00      	cmp	r3, #0
 800639c:	f47f af2a 	bne.w	80061f4 <prvProcessReceivedCommands+0x8>
	}
}
 80063a0:	bf00      	nop
 80063a2:	bf00      	nop
 80063a4:	3730      	adds	r7, #48	; 0x30
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}
 80063aa:	bf00      	nop
 80063ac:	20001164 	.word	0x20001164

080063b0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b088      	sub	sp, #32
 80063b4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80063b6:	e048      	b.n	800644a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80063b8:	4b2d      	ldr	r3, [pc, #180]	; (8006470 <prvSwitchTimerLists+0xc0>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	68db      	ldr	r3, [r3, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063c2:	4b2b      	ldr	r3, [pc, #172]	; (8006470 <prvSwitchTimerLists+0xc0>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	68db      	ldr	r3, [r3, #12]
 80063c8:	68db      	ldr	r3, [r3, #12]
 80063ca:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	3304      	adds	r3, #4
 80063d0:	4618      	mov	r0, r3
 80063d2:	f7fe f939 	bl	8004648 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	6a1b      	ldr	r3, [r3, #32]
 80063da:	68f8      	ldr	r0, [r7, #12]
 80063dc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80063e4:	f003 0304 	and.w	r3, r3, #4
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d02e      	beq.n	800644a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	699b      	ldr	r3, [r3, #24]
 80063f0:	693a      	ldr	r2, [r7, #16]
 80063f2:	4413      	add	r3, r2
 80063f4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80063f6:	68ba      	ldr	r2, [r7, #8]
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	429a      	cmp	r2, r3
 80063fc:	d90e      	bls.n	800641c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	68ba      	ldr	r2, [r7, #8]
 8006402:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	68fa      	ldr	r2, [r7, #12]
 8006408:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800640a:	4b19      	ldr	r3, [pc, #100]	; (8006470 <prvSwitchTimerLists+0xc0>)
 800640c:	681a      	ldr	r2, [r3, #0]
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	3304      	adds	r3, #4
 8006412:	4619      	mov	r1, r3
 8006414:	4610      	mov	r0, r2
 8006416:	f7fe f8de 	bl	80045d6 <vListInsert>
 800641a:	e016      	b.n	800644a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800641c:	2300      	movs	r3, #0
 800641e:	9300      	str	r3, [sp, #0]
 8006420:	2300      	movs	r3, #0
 8006422:	693a      	ldr	r2, [r7, #16]
 8006424:	2100      	movs	r1, #0
 8006426:	68f8      	ldr	r0, [r7, #12]
 8006428:	f7ff fd60 	bl	8005eec <xTimerGenericCommand>
 800642c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d10a      	bne.n	800644a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006438:	f383 8811 	msr	BASEPRI, r3
 800643c:	f3bf 8f6f 	isb	sy
 8006440:	f3bf 8f4f 	dsb	sy
 8006444:	603b      	str	r3, [r7, #0]
}
 8006446:	bf00      	nop
 8006448:	e7fe      	b.n	8006448 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800644a:	4b09      	ldr	r3, [pc, #36]	; (8006470 <prvSwitchTimerLists+0xc0>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d1b1      	bne.n	80063b8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006454:	4b06      	ldr	r3, [pc, #24]	; (8006470 <prvSwitchTimerLists+0xc0>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800645a:	4b06      	ldr	r3, [pc, #24]	; (8006474 <prvSwitchTimerLists+0xc4>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a04      	ldr	r2, [pc, #16]	; (8006470 <prvSwitchTimerLists+0xc0>)
 8006460:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006462:	4a04      	ldr	r2, [pc, #16]	; (8006474 <prvSwitchTimerLists+0xc4>)
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	6013      	str	r3, [r2, #0]
}
 8006468:	bf00      	nop
 800646a:	3718      	adds	r7, #24
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}
 8006470:	2000115c 	.word	0x2000115c
 8006474:	20001160 	.word	0x20001160

08006478 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b082      	sub	sp, #8
 800647c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800647e:	f000 f969 	bl	8006754 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006482:	4b15      	ldr	r3, [pc, #84]	; (80064d8 <prvCheckForValidListAndQueue+0x60>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d120      	bne.n	80064cc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800648a:	4814      	ldr	r0, [pc, #80]	; (80064dc <prvCheckForValidListAndQueue+0x64>)
 800648c:	f7fe f852 	bl	8004534 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006490:	4813      	ldr	r0, [pc, #76]	; (80064e0 <prvCheckForValidListAndQueue+0x68>)
 8006492:	f7fe f84f 	bl	8004534 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006496:	4b13      	ldr	r3, [pc, #76]	; (80064e4 <prvCheckForValidListAndQueue+0x6c>)
 8006498:	4a10      	ldr	r2, [pc, #64]	; (80064dc <prvCheckForValidListAndQueue+0x64>)
 800649a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800649c:	4b12      	ldr	r3, [pc, #72]	; (80064e8 <prvCheckForValidListAndQueue+0x70>)
 800649e:	4a10      	ldr	r2, [pc, #64]	; (80064e0 <prvCheckForValidListAndQueue+0x68>)
 80064a0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80064a2:	2300      	movs	r3, #0
 80064a4:	9300      	str	r3, [sp, #0]
 80064a6:	4b11      	ldr	r3, [pc, #68]	; (80064ec <prvCheckForValidListAndQueue+0x74>)
 80064a8:	4a11      	ldr	r2, [pc, #68]	; (80064f0 <prvCheckForValidListAndQueue+0x78>)
 80064aa:	2110      	movs	r1, #16
 80064ac:	200a      	movs	r0, #10
 80064ae:	f7fe f95d 	bl	800476c <xQueueGenericCreateStatic>
 80064b2:	4603      	mov	r3, r0
 80064b4:	4a08      	ldr	r2, [pc, #32]	; (80064d8 <prvCheckForValidListAndQueue+0x60>)
 80064b6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80064b8:	4b07      	ldr	r3, [pc, #28]	; (80064d8 <prvCheckForValidListAndQueue+0x60>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d005      	beq.n	80064cc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80064c0:	4b05      	ldr	r3, [pc, #20]	; (80064d8 <prvCheckForValidListAndQueue+0x60>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	490b      	ldr	r1, [pc, #44]	; (80064f4 <prvCheckForValidListAndQueue+0x7c>)
 80064c6:	4618      	mov	r0, r3
 80064c8:	f7fe fd76 	bl	8004fb8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80064cc:	f000 f972 	bl	80067b4 <vPortExitCritical>
}
 80064d0:	bf00      	nop
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}
 80064d6:	bf00      	nop
 80064d8:	20001164 	.word	0x20001164
 80064dc:	20001134 	.word	0x20001134
 80064e0:	20001148 	.word	0x20001148
 80064e4:	2000115c 	.word	0x2000115c
 80064e8:	20001160 	.word	0x20001160
 80064ec:	20001210 	.word	0x20001210
 80064f0:	20001170 	.word	0x20001170
 80064f4:	08007968 	.word	0x08007968

080064f8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80064f8:	b480      	push	{r7}
 80064fa:	b085      	sub	sp, #20
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	60f8      	str	r0, [r7, #12]
 8006500:	60b9      	str	r1, [r7, #8]
 8006502:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	3b04      	subs	r3, #4
 8006508:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006510:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	3b04      	subs	r3, #4
 8006516:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	f023 0201 	bic.w	r2, r3, #1
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	3b04      	subs	r3, #4
 8006526:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006528:	4a0c      	ldr	r2, [pc, #48]	; (800655c <pxPortInitialiseStack+0x64>)
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	3b14      	subs	r3, #20
 8006532:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006534:	687a      	ldr	r2, [r7, #4]
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	3b04      	subs	r3, #4
 800653e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	f06f 0202 	mvn.w	r2, #2
 8006546:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	3b20      	subs	r3, #32
 800654c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800654e:	68fb      	ldr	r3, [r7, #12]
}
 8006550:	4618      	mov	r0, r3
 8006552:	3714      	adds	r7, #20
 8006554:	46bd      	mov	sp, r7
 8006556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655a:	4770      	bx	lr
 800655c:	08006561 	.word	0x08006561

08006560 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006560:	b480      	push	{r7}
 8006562:	b085      	sub	sp, #20
 8006564:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006566:	2300      	movs	r3, #0
 8006568:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800656a:	4b12      	ldr	r3, [pc, #72]	; (80065b4 <prvTaskExitError+0x54>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006572:	d00a      	beq.n	800658a <prvTaskExitError+0x2a>
	__asm volatile
 8006574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006578:	f383 8811 	msr	BASEPRI, r3
 800657c:	f3bf 8f6f 	isb	sy
 8006580:	f3bf 8f4f 	dsb	sy
 8006584:	60fb      	str	r3, [r7, #12]
}
 8006586:	bf00      	nop
 8006588:	e7fe      	b.n	8006588 <prvTaskExitError+0x28>
	__asm volatile
 800658a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800658e:	f383 8811 	msr	BASEPRI, r3
 8006592:	f3bf 8f6f 	isb	sy
 8006596:	f3bf 8f4f 	dsb	sy
 800659a:	60bb      	str	r3, [r7, #8]
}
 800659c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800659e:	bf00      	nop
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d0fc      	beq.n	80065a0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80065a6:	bf00      	nop
 80065a8:	bf00      	nop
 80065aa:	3714      	adds	r7, #20
 80065ac:	46bd      	mov	sp, r7
 80065ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b2:	4770      	bx	lr
 80065b4:	20000010 	.word	0x20000010
	...

080065c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80065c0:	4b07      	ldr	r3, [pc, #28]	; (80065e0 <pxCurrentTCBConst2>)
 80065c2:	6819      	ldr	r1, [r3, #0]
 80065c4:	6808      	ldr	r0, [r1, #0]
 80065c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065ca:	f380 8809 	msr	PSP, r0
 80065ce:	f3bf 8f6f 	isb	sy
 80065d2:	f04f 0000 	mov.w	r0, #0
 80065d6:	f380 8811 	msr	BASEPRI, r0
 80065da:	4770      	bx	lr
 80065dc:	f3af 8000 	nop.w

080065e0 <pxCurrentTCBConst2>:
 80065e0:	20000c34 	.word	0x20000c34
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80065e4:	bf00      	nop
 80065e6:	bf00      	nop

080065e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80065e8:	4808      	ldr	r0, [pc, #32]	; (800660c <prvPortStartFirstTask+0x24>)
 80065ea:	6800      	ldr	r0, [r0, #0]
 80065ec:	6800      	ldr	r0, [r0, #0]
 80065ee:	f380 8808 	msr	MSP, r0
 80065f2:	f04f 0000 	mov.w	r0, #0
 80065f6:	f380 8814 	msr	CONTROL, r0
 80065fa:	b662      	cpsie	i
 80065fc:	b661      	cpsie	f
 80065fe:	f3bf 8f4f 	dsb	sy
 8006602:	f3bf 8f6f 	isb	sy
 8006606:	df00      	svc	0
 8006608:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800660a:	bf00      	nop
 800660c:	e000ed08 	.word	0xe000ed08

08006610 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b086      	sub	sp, #24
 8006614:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006616:	4b46      	ldr	r3, [pc, #280]	; (8006730 <xPortStartScheduler+0x120>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a46      	ldr	r2, [pc, #280]	; (8006734 <xPortStartScheduler+0x124>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d10a      	bne.n	8006636 <xPortStartScheduler+0x26>
	__asm volatile
 8006620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006624:	f383 8811 	msr	BASEPRI, r3
 8006628:	f3bf 8f6f 	isb	sy
 800662c:	f3bf 8f4f 	dsb	sy
 8006630:	613b      	str	r3, [r7, #16]
}
 8006632:	bf00      	nop
 8006634:	e7fe      	b.n	8006634 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006636:	4b3e      	ldr	r3, [pc, #248]	; (8006730 <xPortStartScheduler+0x120>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a3f      	ldr	r2, [pc, #252]	; (8006738 <xPortStartScheduler+0x128>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d10a      	bne.n	8006656 <xPortStartScheduler+0x46>
	__asm volatile
 8006640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006644:	f383 8811 	msr	BASEPRI, r3
 8006648:	f3bf 8f6f 	isb	sy
 800664c:	f3bf 8f4f 	dsb	sy
 8006650:	60fb      	str	r3, [r7, #12]
}
 8006652:	bf00      	nop
 8006654:	e7fe      	b.n	8006654 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006656:	4b39      	ldr	r3, [pc, #228]	; (800673c <xPortStartScheduler+0x12c>)
 8006658:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	781b      	ldrb	r3, [r3, #0]
 800665e:	b2db      	uxtb	r3, r3
 8006660:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	22ff      	movs	r2, #255	; 0xff
 8006666:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	781b      	ldrb	r3, [r3, #0]
 800666c:	b2db      	uxtb	r3, r3
 800666e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006670:	78fb      	ldrb	r3, [r7, #3]
 8006672:	b2db      	uxtb	r3, r3
 8006674:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006678:	b2da      	uxtb	r2, r3
 800667a:	4b31      	ldr	r3, [pc, #196]	; (8006740 <xPortStartScheduler+0x130>)
 800667c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800667e:	4b31      	ldr	r3, [pc, #196]	; (8006744 <xPortStartScheduler+0x134>)
 8006680:	2207      	movs	r2, #7
 8006682:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006684:	e009      	b.n	800669a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006686:	4b2f      	ldr	r3, [pc, #188]	; (8006744 <xPortStartScheduler+0x134>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	3b01      	subs	r3, #1
 800668c:	4a2d      	ldr	r2, [pc, #180]	; (8006744 <xPortStartScheduler+0x134>)
 800668e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006690:	78fb      	ldrb	r3, [r7, #3]
 8006692:	b2db      	uxtb	r3, r3
 8006694:	005b      	lsls	r3, r3, #1
 8006696:	b2db      	uxtb	r3, r3
 8006698:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800669a:	78fb      	ldrb	r3, [r7, #3]
 800669c:	b2db      	uxtb	r3, r3
 800669e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066a2:	2b80      	cmp	r3, #128	; 0x80
 80066a4:	d0ef      	beq.n	8006686 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80066a6:	4b27      	ldr	r3, [pc, #156]	; (8006744 <xPortStartScheduler+0x134>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f1c3 0307 	rsb	r3, r3, #7
 80066ae:	2b04      	cmp	r3, #4
 80066b0:	d00a      	beq.n	80066c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80066b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066b6:	f383 8811 	msr	BASEPRI, r3
 80066ba:	f3bf 8f6f 	isb	sy
 80066be:	f3bf 8f4f 	dsb	sy
 80066c2:	60bb      	str	r3, [r7, #8]
}
 80066c4:	bf00      	nop
 80066c6:	e7fe      	b.n	80066c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80066c8:	4b1e      	ldr	r3, [pc, #120]	; (8006744 <xPortStartScheduler+0x134>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	021b      	lsls	r3, r3, #8
 80066ce:	4a1d      	ldr	r2, [pc, #116]	; (8006744 <xPortStartScheduler+0x134>)
 80066d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80066d2:	4b1c      	ldr	r3, [pc, #112]	; (8006744 <xPortStartScheduler+0x134>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80066da:	4a1a      	ldr	r2, [pc, #104]	; (8006744 <xPortStartScheduler+0x134>)
 80066dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	b2da      	uxtb	r2, r3
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80066e6:	4b18      	ldr	r3, [pc, #96]	; (8006748 <xPortStartScheduler+0x138>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a17      	ldr	r2, [pc, #92]	; (8006748 <xPortStartScheduler+0x138>)
 80066ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80066f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80066f2:	4b15      	ldr	r3, [pc, #84]	; (8006748 <xPortStartScheduler+0x138>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a14      	ldr	r2, [pc, #80]	; (8006748 <xPortStartScheduler+0x138>)
 80066f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80066fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80066fe:	f000 f8dd 	bl	80068bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006702:	4b12      	ldr	r3, [pc, #72]	; (800674c <xPortStartScheduler+0x13c>)
 8006704:	2200      	movs	r2, #0
 8006706:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006708:	f000 f8fc 	bl	8006904 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800670c:	4b10      	ldr	r3, [pc, #64]	; (8006750 <xPortStartScheduler+0x140>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a0f      	ldr	r2, [pc, #60]	; (8006750 <xPortStartScheduler+0x140>)
 8006712:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006716:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006718:	f7ff ff66 	bl	80065e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800671c:	f7ff f848 	bl	80057b0 <vTaskSwitchContext>
	prvTaskExitError();
 8006720:	f7ff ff1e 	bl	8006560 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006724:	2300      	movs	r3, #0
}
 8006726:	4618      	mov	r0, r3
 8006728:	3718      	adds	r7, #24
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}
 800672e:	bf00      	nop
 8006730:	e000ed00 	.word	0xe000ed00
 8006734:	410fc271 	.word	0x410fc271
 8006738:	410fc270 	.word	0x410fc270
 800673c:	e000e400 	.word	0xe000e400
 8006740:	20001260 	.word	0x20001260
 8006744:	20001264 	.word	0x20001264
 8006748:	e000ed20 	.word	0xe000ed20
 800674c:	20000010 	.word	0x20000010
 8006750:	e000ef34 	.word	0xe000ef34

08006754 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006754:	b480      	push	{r7}
 8006756:	b083      	sub	sp, #12
 8006758:	af00      	add	r7, sp, #0
	__asm volatile
 800675a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800675e:	f383 8811 	msr	BASEPRI, r3
 8006762:	f3bf 8f6f 	isb	sy
 8006766:	f3bf 8f4f 	dsb	sy
 800676a:	607b      	str	r3, [r7, #4]
}
 800676c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800676e:	4b0f      	ldr	r3, [pc, #60]	; (80067ac <vPortEnterCritical+0x58>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	3301      	adds	r3, #1
 8006774:	4a0d      	ldr	r2, [pc, #52]	; (80067ac <vPortEnterCritical+0x58>)
 8006776:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006778:	4b0c      	ldr	r3, [pc, #48]	; (80067ac <vPortEnterCritical+0x58>)
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	2b01      	cmp	r3, #1
 800677e:	d10f      	bne.n	80067a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006780:	4b0b      	ldr	r3, [pc, #44]	; (80067b0 <vPortEnterCritical+0x5c>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	b2db      	uxtb	r3, r3
 8006786:	2b00      	cmp	r3, #0
 8006788:	d00a      	beq.n	80067a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800678a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800678e:	f383 8811 	msr	BASEPRI, r3
 8006792:	f3bf 8f6f 	isb	sy
 8006796:	f3bf 8f4f 	dsb	sy
 800679a:	603b      	str	r3, [r7, #0]
}
 800679c:	bf00      	nop
 800679e:	e7fe      	b.n	800679e <vPortEnterCritical+0x4a>
	}
}
 80067a0:	bf00      	nop
 80067a2:	370c      	adds	r7, #12
 80067a4:	46bd      	mov	sp, r7
 80067a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067aa:	4770      	bx	lr
 80067ac:	20000010 	.word	0x20000010
 80067b0:	e000ed04 	.word	0xe000ed04

080067b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80067b4:	b480      	push	{r7}
 80067b6:	b083      	sub	sp, #12
 80067b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80067ba:	4b12      	ldr	r3, [pc, #72]	; (8006804 <vPortExitCritical+0x50>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d10a      	bne.n	80067d8 <vPortExitCritical+0x24>
	__asm volatile
 80067c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c6:	f383 8811 	msr	BASEPRI, r3
 80067ca:	f3bf 8f6f 	isb	sy
 80067ce:	f3bf 8f4f 	dsb	sy
 80067d2:	607b      	str	r3, [r7, #4]
}
 80067d4:	bf00      	nop
 80067d6:	e7fe      	b.n	80067d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80067d8:	4b0a      	ldr	r3, [pc, #40]	; (8006804 <vPortExitCritical+0x50>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	3b01      	subs	r3, #1
 80067de:	4a09      	ldr	r2, [pc, #36]	; (8006804 <vPortExitCritical+0x50>)
 80067e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80067e2:	4b08      	ldr	r3, [pc, #32]	; (8006804 <vPortExitCritical+0x50>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d105      	bne.n	80067f6 <vPortExitCritical+0x42>
 80067ea:	2300      	movs	r3, #0
 80067ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	f383 8811 	msr	BASEPRI, r3
}
 80067f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80067f6:	bf00      	nop
 80067f8:	370c      	adds	r7, #12
 80067fa:	46bd      	mov	sp, r7
 80067fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006800:	4770      	bx	lr
 8006802:	bf00      	nop
 8006804:	20000010 	.word	0x20000010
	...

08006810 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006810:	f3ef 8009 	mrs	r0, PSP
 8006814:	f3bf 8f6f 	isb	sy
 8006818:	4b15      	ldr	r3, [pc, #84]	; (8006870 <pxCurrentTCBConst>)
 800681a:	681a      	ldr	r2, [r3, #0]
 800681c:	f01e 0f10 	tst.w	lr, #16
 8006820:	bf08      	it	eq
 8006822:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006826:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800682a:	6010      	str	r0, [r2, #0]
 800682c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006830:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006834:	f380 8811 	msr	BASEPRI, r0
 8006838:	f3bf 8f4f 	dsb	sy
 800683c:	f3bf 8f6f 	isb	sy
 8006840:	f7fe ffb6 	bl	80057b0 <vTaskSwitchContext>
 8006844:	f04f 0000 	mov.w	r0, #0
 8006848:	f380 8811 	msr	BASEPRI, r0
 800684c:	bc09      	pop	{r0, r3}
 800684e:	6819      	ldr	r1, [r3, #0]
 8006850:	6808      	ldr	r0, [r1, #0]
 8006852:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006856:	f01e 0f10 	tst.w	lr, #16
 800685a:	bf08      	it	eq
 800685c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006860:	f380 8809 	msr	PSP, r0
 8006864:	f3bf 8f6f 	isb	sy
 8006868:	4770      	bx	lr
 800686a:	bf00      	nop
 800686c:	f3af 8000 	nop.w

08006870 <pxCurrentTCBConst>:
 8006870:	20000c34 	.word	0x20000c34
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006874:	bf00      	nop
 8006876:	bf00      	nop

08006878 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b082      	sub	sp, #8
 800687c:	af00      	add	r7, sp, #0
	__asm volatile
 800687e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006882:	f383 8811 	msr	BASEPRI, r3
 8006886:	f3bf 8f6f 	isb	sy
 800688a:	f3bf 8f4f 	dsb	sy
 800688e:	607b      	str	r3, [r7, #4]
}
 8006890:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006892:	f7fe fed3 	bl	800563c <xTaskIncrementTick>
 8006896:	4603      	mov	r3, r0
 8006898:	2b00      	cmp	r3, #0
 800689a:	d003      	beq.n	80068a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800689c:	4b06      	ldr	r3, [pc, #24]	; (80068b8 <xPortSysTickHandler+0x40>)
 800689e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068a2:	601a      	str	r2, [r3, #0]
 80068a4:	2300      	movs	r3, #0
 80068a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	f383 8811 	msr	BASEPRI, r3
}
 80068ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80068b0:	bf00      	nop
 80068b2:	3708      	adds	r7, #8
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bd80      	pop	{r7, pc}
 80068b8:	e000ed04 	.word	0xe000ed04

080068bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80068bc:	b480      	push	{r7}
 80068be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80068c0:	4b0b      	ldr	r3, [pc, #44]	; (80068f0 <vPortSetupTimerInterrupt+0x34>)
 80068c2:	2200      	movs	r2, #0
 80068c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80068c6:	4b0b      	ldr	r3, [pc, #44]	; (80068f4 <vPortSetupTimerInterrupt+0x38>)
 80068c8:	2200      	movs	r2, #0
 80068ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80068cc:	4b0a      	ldr	r3, [pc, #40]	; (80068f8 <vPortSetupTimerInterrupt+0x3c>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a0a      	ldr	r2, [pc, #40]	; (80068fc <vPortSetupTimerInterrupt+0x40>)
 80068d2:	fba2 2303 	umull	r2, r3, r2, r3
 80068d6:	099b      	lsrs	r3, r3, #6
 80068d8:	4a09      	ldr	r2, [pc, #36]	; (8006900 <vPortSetupTimerInterrupt+0x44>)
 80068da:	3b01      	subs	r3, #1
 80068dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80068de:	4b04      	ldr	r3, [pc, #16]	; (80068f0 <vPortSetupTimerInterrupt+0x34>)
 80068e0:	2207      	movs	r2, #7
 80068e2:	601a      	str	r2, [r3, #0]
}
 80068e4:	bf00      	nop
 80068e6:	46bd      	mov	sp, r7
 80068e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ec:	4770      	bx	lr
 80068ee:	bf00      	nop
 80068f0:	e000e010 	.word	0xe000e010
 80068f4:	e000e018 	.word	0xe000e018
 80068f8:	20000004 	.word	0x20000004
 80068fc:	10624dd3 	.word	0x10624dd3
 8006900:	e000e014 	.word	0xe000e014

08006904 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006904:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006914 <vPortEnableVFP+0x10>
 8006908:	6801      	ldr	r1, [r0, #0]
 800690a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800690e:	6001      	str	r1, [r0, #0]
 8006910:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006912:	bf00      	nop
 8006914:	e000ed88 	.word	0xe000ed88

08006918 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006918:	b480      	push	{r7}
 800691a:	b085      	sub	sp, #20
 800691c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800691e:	f3ef 8305 	mrs	r3, IPSR
 8006922:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	2b0f      	cmp	r3, #15
 8006928:	d914      	bls.n	8006954 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800692a:	4a17      	ldr	r2, [pc, #92]	; (8006988 <vPortValidateInterruptPriority+0x70>)
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	4413      	add	r3, r2
 8006930:	781b      	ldrb	r3, [r3, #0]
 8006932:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006934:	4b15      	ldr	r3, [pc, #84]	; (800698c <vPortValidateInterruptPriority+0x74>)
 8006936:	781b      	ldrb	r3, [r3, #0]
 8006938:	7afa      	ldrb	r2, [r7, #11]
 800693a:	429a      	cmp	r2, r3
 800693c:	d20a      	bcs.n	8006954 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800693e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006942:	f383 8811 	msr	BASEPRI, r3
 8006946:	f3bf 8f6f 	isb	sy
 800694a:	f3bf 8f4f 	dsb	sy
 800694e:	607b      	str	r3, [r7, #4]
}
 8006950:	bf00      	nop
 8006952:	e7fe      	b.n	8006952 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006954:	4b0e      	ldr	r3, [pc, #56]	; (8006990 <vPortValidateInterruptPriority+0x78>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800695c:	4b0d      	ldr	r3, [pc, #52]	; (8006994 <vPortValidateInterruptPriority+0x7c>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	429a      	cmp	r2, r3
 8006962:	d90a      	bls.n	800697a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006968:	f383 8811 	msr	BASEPRI, r3
 800696c:	f3bf 8f6f 	isb	sy
 8006970:	f3bf 8f4f 	dsb	sy
 8006974:	603b      	str	r3, [r7, #0]
}
 8006976:	bf00      	nop
 8006978:	e7fe      	b.n	8006978 <vPortValidateInterruptPriority+0x60>
	}
 800697a:	bf00      	nop
 800697c:	3714      	adds	r7, #20
 800697e:	46bd      	mov	sp, r7
 8006980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006984:	4770      	bx	lr
 8006986:	bf00      	nop
 8006988:	e000e3f0 	.word	0xe000e3f0
 800698c:	20001260 	.word	0x20001260
 8006990:	e000ed0c 	.word	0xe000ed0c
 8006994:	20001264 	.word	0x20001264

08006998 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b08a      	sub	sp, #40	; 0x28
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80069a0:	2300      	movs	r3, #0
 80069a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80069a4:	f7fe fd8e 	bl	80054c4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80069a8:	4b5b      	ldr	r3, [pc, #364]	; (8006b18 <pvPortMalloc+0x180>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d101      	bne.n	80069b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80069b0:	f000 f920 	bl	8006bf4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80069b4:	4b59      	ldr	r3, [pc, #356]	; (8006b1c <pvPortMalloc+0x184>)
 80069b6:	681a      	ldr	r2, [r3, #0]
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	4013      	ands	r3, r2
 80069bc:	2b00      	cmp	r3, #0
 80069be:	f040 8093 	bne.w	8006ae8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d01d      	beq.n	8006a04 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80069c8:	2208      	movs	r2, #8
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	4413      	add	r3, r2
 80069ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f003 0307 	and.w	r3, r3, #7
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d014      	beq.n	8006a04 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f023 0307 	bic.w	r3, r3, #7
 80069e0:	3308      	adds	r3, #8
 80069e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f003 0307 	and.w	r3, r3, #7
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d00a      	beq.n	8006a04 <pvPortMalloc+0x6c>
	__asm volatile
 80069ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069f2:	f383 8811 	msr	BASEPRI, r3
 80069f6:	f3bf 8f6f 	isb	sy
 80069fa:	f3bf 8f4f 	dsb	sy
 80069fe:	617b      	str	r3, [r7, #20]
}
 8006a00:	bf00      	nop
 8006a02:	e7fe      	b.n	8006a02 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d06e      	beq.n	8006ae8 <pvPortMalloc+0x150>
 8006a0a:	4b45      	ldr	r3, [pc, #276]	; (8006b20 <pvPortMalloc+0x188>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	687a      	ldr	r2, [r7, #4]
 8006a10:	429a      	cmp	r2, r3
 8006a12:	d869      	bhi.n	8006ae8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006a14:	4b43      	ldr	r3, [pc, #268]	; (8006b24 <pvPortMalloc+0x18c>)
 8006a16:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006a18:	4b42      	ldr	r3, [pc, #264]	; (8006b24 <pvPortMalloc+0x18c>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006a1e:	e004      	b.n	8006a2a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a22:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a2c:	685b      	ldr	r3, [r3, #4]
 8006a2e:	687a      	ldr	r2, [r7, #4]
 8006a30:	429a      	cmp	r2, r3
 8006a32:	d903      	bls.n	8006a3c <pvPortMalloc+0xa4>
 8006a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d1f1      	bne.n	8006a20 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006a3c:	4b36      	ldr	r3, [pc, #216]	; (8006b18 <pvPortMalloc+0x180>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a42:	429a      	cmp	r2, r3
 8006a44:	d050      	beq.n	8006ae8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006a46:	6a3b      	ldr	r3, [r7, #32]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	2208      	movs	r2, #8
 8006a4c:	4413      	add	r3, r2
 8006a4e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a52:	681a      	ldr	r2, [r3, #0]
 8006a54:	6a3b      	ldr	r3, [r7, #32]
 8006a56:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a5a:	685a      	ldr	r2, [r3, #4]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	1ad2      	subs	r2, r2, r3
 8006a60:	2308      	movs	r3, #8
 8006a62:	005b      	lsls	r3, r3, #1
 8006a64:	429a      	cmp	r2, r3
 8006a66:	d91f      	bls.n	8006aa8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006a68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	4413      	add	r3, r2
 8006a6e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a70:	69bb      	ldr	r3, [r7, #24]
 8006a72:	f003 0307 	and.w	r3, r3, #7
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d00a      	beq.n	8006a90 <pvPortMalloc+0xf8>
	__asm volatile
 8006a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a7e:	f383 8811 	msr	BASEPRI, r3
 8006a82:	f3bf 8f6f 	isb	sy
 8006a86:	f3bf 8f4f 	dsb	sy
 8006a8a:	613b      	str	r3, [r7, #16]
}
 8006a8c:	bf00      	nop
 8006a8e:	e7fe      	b.n	8006a8e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a92:	685a      	ldr	r2, [r3, #4]
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	1ad2      	subs	r2, r2, r3
 8006a98:	69bb      	ldr	r3, [r7, #24]
 8006a9a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a9e:	687a      	ldr	r2, [r7, #4]
 8006aa0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006aa2:	69b8      	ldr	r0, [r7, #24]
 8006aa4:	f000 f908 	bl	8006cb8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006aa8:	4b1d      	ldr	r3, [pc, #116]	; (8006b20 <pvPortMalloc+0x188>)
 8006aaa:	681a      	ldr	r2, [r3, #0]
 8006aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aae:	685b      	ldr	r3, [r3, #4]
 8006ab0:	1ad3      	subs	r3, r2, r3
 8006ab2:	4a1b      	ldr	r2, [pc, #108]	; (8006b20 <pvPortMalloc+0x188>)
 8006ab4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006ab6:	4b1a      	ldr	r3, [pc, #104]	; (8006b20 <pvPortMalloc+0x188>)
 8006ab8:	681a      	ldr	r2, [r3, #0]
 8006aba:	4b1b      	ldr	r3, [pc, #108]	; (8006b28 <pvPortMalloc+0x190>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	429a      	cmp	r2, r3
 8006ac0:	d203      	bcs.n	8006aca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006ac2:	4b17      	ldr	r3, [pc, #92]	; (8006b20 <pvPortMalloc+0x188>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a18      	ldr	r2, [pc, #96]	; (8006b28 <pvPortMalloc+0x190>)
 8006ac8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006acc:	685a      	ldr	r2, [r3, #4]
 8006ace:	4b13      	ldr	r3, [pc, #76]	; (8006b1c <pvPortMalloc+0x184>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	431a      	orrs	r2, r3
 8006ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ada:	2200      	movs	r2, #0
 8006adc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006ade:	4b13      	ldr	r3, [pc, #76]	; (8006b2c <pvPortMalloc+0x194>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	3301      	adds	r3, #1
 8006ae4:	4a11      	ldr	r2, [pc, #68]	; (8006b2c <pvPortMalloc+0x194>)
 8006ae6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006ae8:	f7fe fcfa 	bl	80054e0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006aec:	69fb      	ldr	r3, [r7, #28]
 8006aee:	f003 0307 	and.w	r3, r3, #7
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d00a      	beq.n	8006b0c <pvPortMalloc+0x174>
	__asm volatile
 8006af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006afa:	f383 8811 	msr	BASEPRI, r3
 8006afe:	f3bf 8f6f 	isb	sy
 8006b02:	f3bf 8f4f 	dsb	sy
 8006b06:	60fb      	str	r3, [r7, #12]
}
 8006b08:	bf00      	nop
 8006b0a:	e7fe      	b.n	8006b0a <pvPortMalloc+0x172>
	return pvReturn;
 8006b0c:	69fb      	ldr	r3, [r7, #28]
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	3728      	adds	r7, #40	; 0x28
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}
 8006b16:	bf00      	nop
 8006b18:	20001e70 	.word	0x20001e70
 8006b1c:	20001e84 	.word	0x20001e84
 8006b20:	20001e74 	.word	0x20001e74
 8006b24:	20001e68 	.word	0x20001e68
 8006b28:	20001e78 	.word	0x20001e78
 8006b2c:	20001e7c 	.word	0x20001e7c

08006b30 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b086      	sub	sp, #24
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d04d      	beq.n	8006bde <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006b42:	2308      	movs	r3, #8
 8006b44:	425b      	negs	r3, r3
 8006b46:	697a      	ldr	r2, [r7, #20]
 8006b48:	4413      	add	r3, r2
 8006b4a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006b50:	693b      	ldr	r3, [r7, #16]
 8006b52:	685a      	ldr	r2, [r3, #4]
 8006b54:	4b24      	ldr	r3, [pc, #144]	; (8006be8 <vPortFree+0xb8>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4013      	ands	r3, r2
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d10a      	bne.n	8006b74 <vPortFree+0x44>
	__asm volatile
 8006b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b62:	f383 8811 	msr	BASEPRI, r3
 8006b66:	f3bf 8f6f 	isb	sy
 8006b6a:	f3bf 8f4f 	dsb	sy
 8006b6e:	60fb      	str	r3, [r7, #12]
}
 8006b70:	bf00      	nop
 8006b72:	e7fe      	b.n	8006b72 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006b74:	693b      	ldr	r3, [r7, #16]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d00a      	beq.n	8006b92 <vPortFree+0x62>
	__asm volatile
 8006b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b80:	f383 8811 	msr	BASEPRI, r3
 8006b84:	f3bf 8f6f 	isb	sy
 8006b88:	f3bf 8f4f 	dsb	sy
 8006b8c:	60bb      	str	r3, [r7, #8]
}
 8006b8e:	bf00      	nop
 8006b90:	e7fe      	b.n	8006b90 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	685a      	ldr	r2, [r3, #4]
 8006b96:	4b14      	ldr	r3, [pc, #80]	; (8006be8 <vPortFree+0xb8>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4013      	ands	r3, r2
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d01e      	beq.n	8006bde <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006ba0:	693b      	ldr	r3, [r7, #16]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d11a      	bne.n	8006bde <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	685a      	ldr	r2, [r3, #4]
 8006bac:	4b0e      	ldr	r3, [pc, #56]	; (8006be8 <vPortFree+0xb8>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	43db      	mvns	r3, r3
 8006bb2:	401a      	ands	r2, r3
 8006bb4:	693b      	ldr	r3, [r7, #16]
 8006bb6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006bb8:	f7fe fc84 	bl	80054c4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006bbc:	693b      	ldr	r3, [r7, #16]
 8006bbe:	685a      	ldr	r2, [r3, #4]
 8006bc0:	4b0a      	ldr	r3, [pc, #40]	; (8006bec <vPortFree+0xbc>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4413      	add	r3, r2
 8006bc6:	4a09      	ldr	r2, [pc, #36]	; (8006bec <vPortFree+0xbc>)
 8006bc8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006bca:	6938      	ldr	r0, [r7, #16]
 8006bcc:	f000 f874 	bl	8006cb8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006bd0:	4b07      	ldr	r3, [pc, #28]	; (8006bf0 <vPortFree+0xc0>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	3301      	adds	r3, #1
 8006bd6:	4a06      	ldr	r2, [pc, #24]	; (8006bf0 <vPortFree+0xc0>)
 8006bd8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006bda:	f7fe fc81 	bl	80054e0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006bde:	bf00      	nop
 8006be0:	3718      	adds	r7, #24
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}
 8006be6:	bf00      	nop
 8006be8:	20001e84 	.word	0x20001e84
 8006bec:	20001e74 	.word	0x20001e74
 8006bf0:	20001e80 	.word	0x20001e80

08006bf4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b085      	sub	sp, #20
 8006bf8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006bfa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006bfe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006c00:	4b27      	ldr	r3, [pc, #156]	; (8006ca0 <prvHeapInit+0xac>)
 8006c02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	f003 0307 	and.w	r3, r3, #7
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d00c      	beq.n	8006c28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	3307      	adds	r3, #7
 8006c12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	f023 0307 	bic.w	r3, r3, #7
 8006c1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006c1c:	68ba      	ldr	r2, [r7, #8]
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	1ad3      	subs	r3, r2, r3
 8006c22:	4a1f      	ldr	r2, [pc, #124]	; (8006ca0 <prvHeapInit+0xac>)
 8006c24:	4413      	add	r3, r2
 8006c26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006c2c:	4a1d      	ldr	r2, [pc, #116]	; (8006ca4 <prvHeapInit+0xb0>)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006c32:	4b1c      	ldr	r3, [pc, #112]	; (8006ca4 <prvHeapInit+0xb0>)
 8006c34:	2200      	movs	r2, #0
 8006c36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	68ba      	ldr	r2, [r7, #8]
 8006c3c:	4413      	add	r3, r2
 8006c3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006c40:	2208      	movs	r2, #8
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	1a9b      	subs	r3, r3, r2
 8006c46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	f023 0307 	bic.w	r3, r3, #7
 8006c4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	4a15      	ldr	r2, [pc, #84]	; (8006ca8 <prvHeapInit+0xb4>)
 8006c54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006c56:	4b14      	ldr	r3, [pc, #80]	; (8006ca8 <prvHeapInit+0xb4>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006c5e:	4b12      	ldr	r3, [pc, #72]	; (8006ca8 <prvHeapInit+0xb4>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	2200      	movs	r2, #0
 8006c64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	68fa      	ldr	r2, [r7, #12]
 8006c6e:	1ad2      	subs	r2, r2, r3
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006c74:	4b0c      	ldr	r3, [pc, #48]	; (8006ca8 <prvHeapInit+0xb4>)
 8006c76:	681a      	ldr	r2, [r3, #0]
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	685b      	ldr	r3, [r3, #4]
 8006c80:	4a0a      	ldr	r2, [pc, #40]	; (8006cac <prvHeapInit+0xb8>)
 8006c82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	4a09      	ldr	r2, [pc, #36]	; (8006cb0 <prvHeapInit+0xbc>)
 8006c8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006c8c:	4b09      	ldr	r3, [pc, #36]	; (8006cb4 <prvHeapInit+0xc0>)
 8006c8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006c92:	601a      	str	r2, [r3, #0]
}
 8006c94:	bf00      	nop
 8006c96:	3714      	adds	r7, #20
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9e:	4770      	bx	lr
 8006ca0:	20001268 	.word	0x20001268
 8006ca4:	20001e68 	.word	0x20001e68
 8006ca8:	20001e70 	.word	0x20001e70
 8006cac:	20001e78 	.word	0x20001e78
 8006cb0:	20001e74 	.word	0x20001e74
 8006cb4:	20001e84 	.word	0x20001e84

08006cb8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b085      	sub	sp, #20
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006cc0:	4b28      	ldr	r3, [pc, #160]	; (8006d64 <prvInsertBlockIntoFreeList+0xac>)
 8006cc2:	60fb      	str	r3, [r7, #12]
 8006cc4:	e002      	b.n	8006ccc <prvInsertBlockIntoFreeList+0x14>
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	60fb      	str	r3, [r7, #12]
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	687a      	ldr	r2, [r7, #4]
 8006cd2:	429a      	cmp	r2, r3
 8006cd4:	d8f7      	bhi.n	8006cc6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	68ba      	ldr	r2, [r7, #8]
 8006ce0:	4413      	add	r3, r2
 8006ce2:	687a      	ldr	r2, [r7, #4]
 8006ce4:	429a      	cmp	r2, r3
 8006ce6:	d108      	bne.n	8006cfa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	685a      	ldr	r2, [r3, #4]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	441a      	add	r2, r3
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	68ba      	ldr	r2, [r7, #8]
 8006d04:	441a      	add	r2, r3
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	429a      	cmp	r2, r3
 8006d0c:	d118      	bne.n	8006d40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681a      	ldr	r2, [r3, #0]
 8006d12:	4b15      	ldr	r3, [pc, #84]	; (8006d68 <prvInsertBlockIntoFreeList+0xb0>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	429a      	cmp	r2, r3
 8006d18:	d00d      	beq.n	8006d36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	685a      	ldr	r2, [r3, #4]
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	685b      	ldr	r3, [r3, #4]
 8006d24:	441a      	add	r2, r3
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	681a      	ldr	r2, [r3, #0]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	601a      	str	r2, [r3, #0]
 8006d34:	e008      	b.n	8006d48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006d36:	4b0c      	ldr	r3, [pc, #48]	; (8006d68 <prvInsertBlockIntoFreeList+0xb0>)
 8006d38:	681a      	ldr	r2, [r3, #0]
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	601a      	str	r2, [r3, #0]
 8006d3e:	e003      	b.n	8006d48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681a      	ldr	r2, [r3, #0]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006d48:	68fa      	ldr	r2, [r7, #12]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	429a      	cmp	r2, r3
 8006d4e:	d002      	beq.n	8006d56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	687a      	ldr	r2, [r7, #4]
 8006d54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d56:	bf00      	nop
 8006d58:	3714      	adds	r7, #20
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d60:	4770      	bx	lr
 8006d62:	bf00      	nop
 8006d64:	20001e68 	.word	0x20001e68
 8006d68:	20001e70 	.word	0x20001e70

08006d6c <__errno>:
 8006d6c:	4b01      	ldr	r3, [pc, #4]	; (8006d74 <__errno+0x8>)
 8006d6e:	6818      	ldr	r0, [r3, #0]
 8006d70:	4770      	bx	lr
 8006d72:	bf00      	nop
 8006d74:	20000014 	.word	0x20000014

08006d78 <std>:
 8006d78:	2300      	movs	r3, #0
 8006d7a:	b510      	push	{r4, lr}
 8006d7c:	4604      	mov	r4, r0
 8006d7e:	e9c0 3300 	strd	r3, r3, [r0]
 8006d82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006d86:	6083      	str	r3, [r0, #8]
 8006d88:	8181      	strh	r1, [r0, #12]
 8006d8a:	6643      	str	r3, [r0, #100]	; 0x64
 8006d8c:	81c2      	strh	r2, [r0, #14]
 8006d8e:	6183      	str	r3, [r0, #24]
 8006d90:	4619      	mov	r1, r3
 8006d92:	2208      	movs	r2, #8
 8006d94:	305c      	adds	r0, #92	; 0x5c
 8006d96:	f000 f91a 	bl	8006fce <memset>
 8006d9a:	4b05      	ldr	r3, [pc, #20]	; (8006db0 <std+0x38>)
 8006d9c:	6263      	str	r3, [r4, #36]	; 0x24
 8006d9e:	4b05      	ldr	r3, [pc, #20]	; (8006db4 <std+0x3c>)
 8006da0:	62a3      	str	r3, [r4, #40]	; 0x28
 8006da2:	4b05      	ldr	r3, [pc, #20]	; (8006db8 <std+0x40>)
 8006da4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006da6:	4b05      	ldr	r3, [pc, #20]	; (8006dbc <std+0x44>)
 8006da8:	6224      	str	r4, [r4, #32]
 8006daa:	6323      	str	r3, [r4, #48]	; 0x30
 8006dac:	bd10      	pop	{r4, pc}
 8006dae:	bf00      	nop
 8006db0:	080072e9 	.word	0x080072e9
 8006db4:	0800730b 	.word	0x0800730b
 8006db8:	08007343 	.word	0x08007343
 8006dbc:	08007367 	.word	0x08007367

08006dc0 <_cleanup_r>:
 8006dc0:	4901      	ldr	r1, [pc, #4]	; (8006dc8 <_cleanup_r+0x8>)
 8006dc2:	f000 b8af 	b.w	8006f24 <_fwalk_reent>
 8006dc6:	bf00      	nop
 8006dc8:	08007641 	.word	0x08007641

08006dcc <__sfmoreglue>:
 8006dcc:	b570      	push	{r4, r5, r6, lr}
 8006dce:	2268      	movs	r2, #104	; 0x68
 8006dd0:	1e4d      	subs	r5, r1, #1
 8006dd2:	4355      	muls	r5, r2
 8006dd4:	460e      	mov	r6, r1
 8006dd6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006dda:	f000 f921 	bl	8007020 <_malloc_r>
 8006dde:	4604      	mov	r4, r0
 8006de0:	b140      	cbz	r0, 8006df4 <__sfmoreglue+0x28>
 8006de2:	2100      	movs	r1, #0
 8006de4:	e9c0 1600 	strd	r1, r6, [r0]
 8006de8:	300c      	adds	r0, #12
 8006dea:	60a0      	str	r0, [r4, #8]
 8006dec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006df0:	f000 f8ed 	bl	8006fce <memset>
 8006df4:	4620      	mov	r0, r4
 8006df6:	bd70      	pop	{r4, r5, r6, pc}

08006df8 <__sfp_lock_acquire>:
 8006df8:	4801      	ldr	r0, [pc, #4]	; (8006e00 <__sfp_lock_acquire+0x8>)
 8006dfa:	f000 b8d8 	b.w	8006fae <__retarget_lock_acquire_recursive>
 8006dfe:	bf00      	nop
 8006e00:	20001e89 	.word	0x20001e89

08006e04 <__sfp_lock_release>:
 8006e04:	4801      	ldr	r0, [pc, #4]	; (8006e0c <__sfp_lock_release+0x8>)
 8006e06:	f000 b8d3 	b.w	8006fb0 <__retarget_lock_release_recursive>
 8006e0a:	bf00      	nop
 8006e0c:	20001e89 	.word	0x20001e89

08006e10 <__sinit_lock_acquire>:
 8006e10:	4801      	ldr	r0, [pc, #4]	; (8006e18 <__sinit_lock_acquire+0x8>)
 8006e12:	f000 b8cc 	b.w	8006fae <__retarget_lock_acquire_recursive>
 8006e16:	bf00      	nop
 8006e18:	20001e8a 	.word	0x20001e8a

08006e1c <__sinit_lock_release>:
 8006e1c:	4801      	ldr	r0, [pc, #4]	; (8006e24 <__sinit_lock_release+0x8>)
 8006e1e:	f000 b8c7 	b.w	8006fb0 <__retarget_lock_release_recursive>
 8006e22:	bf00      	nop
 8006e24:	20001e8a 	.word	0x20001e8a

08006e28 <__sinit>:
 8006e28:	b510      	push	{r4, lr}
 8006e2a:	4604      	mov	r4, r0
 8006e2c:	f7ff fff0 	bl	8006e10 <__sinit_lock_acquire>
 8006e30:	69a3      	ldr	r3, [r4, #24]
 8006e32:	b11b      	cbz	r3, 8006e3c <__sinit+0x14>
 8006e34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e38:	f7ff bff0 	b.w	8006e1c <__sinit_lock_release>
 8006e3c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006e40:	6523      	str	r3, [r4, #80]	; 0x50
 8006e42:	4b13      	ldr	r3, [pc, #76]	; (8006e90 <__sinit+0x68>)
 8006e44:	4a13      	ldr	r2, [pc, #76]	; (8006e94 <__sinit+0x6c>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	62a2      	str	r2, [r4, #40]	; 0x28
 8006e4a:	42a3      	cmp	r3, r4
 8006e4c:	bf04      	itt	eq
 8006e4e:	2301      	moveq	r3, #1
 8006e50:	61a3      	streq	r3, [r4, #24]
 8006e52:	4620      	mov	r0, r4
 8006e54:	f000 f820 	bl	8006e98 <__sfp>
 8006e58:	6060      	str	r0, [r4, #4]
 8006e5a:	4620      	mov	r0, r4
 8006e5c:	f000 f81c 	bl	8006e98 <__sfp>
 8006e60:	60a0      	str	r0, [r4, #8]
 8006e62:	4620      	mov	r0, r4
 8006e64:	f000 f818 	bl	8006e98 <__sfp>
 8006e68:	2200      	movs	r2, #0
 8006e6a:	60e0      	str	r0, [r4, #12]
 8006e6c:	2104      	movs	r1, #4
 8006e6e:	6860      	ldr	r0, [r4, #4]
 8006e70:	f7ff ff82 	bl	8006d78 <std>
 8006e74:	68a0      	ldr	r0, [r4, #8]
 8006e76:	2201      	movs	r2, #1
 8006e78:	2109      	movs	r1, #9
 8006e7a:	f7ff ff7d 	bl	8006d78 <std>
 8006e7e:	68e0      	ldr	r0, [r4, #12]
 8006e80:	2202      	movs	r2, #2
 8006e82:	2112      	movs	r1, #18
 8006e84:	f7ff ff78 	bl	8006d78 <std>
 8006e88:	2301      	movs	r3, #1
 8006e8a:	61a3      	str	r3, [r4, #24]
 8006e8c:	e7d2      	b.n	8006e34 <__sinit+0xc>
 8006e8e:	bf00      	nop
 8006e90:	08007a98 	.word	0x08007a98
 8006e94:	08006dc1 	.word	0x08006dc1

08006e98 <__sfp>:
 8006e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e9a:	4607      	mov	r7, r0
 8006e9c:	f7ff ffac 	bl	8006df8 <__sfp_lock_acquire>
 8006ea0:	4b1e      	ldr	r3, [pc, #120]	; (8006f1c <__sfp+0x84>)
 8006ea2:	681e      	ldr	r6, [r3, #0]
 8006ea4:	69b3      	ldr	r3, [r6, #24]
 8006ea6:	b913      	cbnz	r3, 8006eae <__sfp+0x16>
 8006ea8:	4630      	mov	r0, r6
 8006eaa:	f7ff ffbd 	bl	8006e28 <__sinit>
 8006eae:	3648      	adds	r6, #72	; 0x48
 8006eb0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006eb4:	3b01      	subs	r3, #1
 8006eb6:	d503      	bpl.n	8006ec0 <__sfp+0x28>
 8006eb8:	6833      	ldr	r3, [r6, #0]
 8006eba:	b30b      	cbz	r3, 8006f00 <__sfp+0x68>
 8006ebc:	6836      	ldr	r6, [r6, #0]
 8006ebe:	e7f7      	b.n	8006eb0 <__sfp+0x18>
 8006ec0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006ec4:	b9d5      	cbnz	r5, 8006efc <__sfp+0x64>
 8006ec6:	4b16      	ldr	r3, [pc, #88]	; (8006f20 <__sfp+0x88>)
 8006ec8:	60e3      	str	r3, [r4, #12]
 8006eca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006ece:	6665      	str	r5, [r4, #100]	; 0x64
 8006ed0:	f000 f86c 	bl	8006fac <__retarget_lock_init_recursive>
 8006ed4:	f7ff ff96 	bl	8006e04 <__sfp_lock_release>
 8006ed8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006edc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006ee0:	6025      	str	r5, [r4, #0]
 8006ee2:	61a5      	str	r5, [r4, #24]
 8006ee4:	2208      	movs	r2, #8
 8006ee6:	4629      	mov	r1, r5
 8006ee8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006eec:	f000 f86f 	bl	8006fce <memset>
 8006ef0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006ef4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006ef8:	4620      	mov	r0, r4
 8006efa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006efc:	3468      	adds	r4, #104	; 0x68
 8006efe:	e7d9      	b.n	8006eb4 <__sfp+0x1c>
 8006f00:	2104      	movs	r1, #4
 8006f02:	4638      	mov	r0, r7
 8006f04:	f7ff ff62 	bl	8006dcc <__sfmoreglue>
 8006f08:	4604      	mov	r4, r0
 8006f0a:	6030      	str	r0, [r6, #0]
 8006f0c:	2800      	cmp	r0, #0
 8006f0e:	d1d5      	bne.n	8006ebc <__sfp+0x24>
 8006f10:	f7ff ff78 	bl	8006e04 <__sfp_lock_release>
 8006f14:	230c      	movs	r3, #12
 8006f16:	603b      	str	r3, [r7, #0]
 8006f18:	e7ee      	b.n	8006ef8 <__sfp+0x60>
 8006f1a:	bf00      	nop
 8006f1c:	08007a98 	.word	0x08007a98
 8006f20:	ffff0001 	.word	0xffff0001

08006f24 <_fwalk_reent>:
 8006f24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f28:	4606      	mov	r6, r0
 8006f2a:	4688      	mov	r8, r1
 8006f2c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006f30:	2700      	movs	r7, #0
 8006f32:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006f36:	f1b9 0901 	subs.w	r9, r9, #1
 8006f3a:	d505      	bpl.n	8006f48 <_fwalk_reent+0x24>
 8006f3c:	6824      	ldr	r4, [r4, #0]
 8006f3e:	2c00      	cmp	r4, #0
 8006f40:	d1f7      	bne.n	8006f32 <_fwalk_reent+0xe>
 8006f42:	4638      	mov	r0, r7
 8006f44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f48:	89ab      	ldrh	r3, [r5, #12]
 8006f4a:	2b01      	cmp	r3, #1
 8006f4c:	d907      	bls.n	8006f5e <_fwalk_reent+0x3a>
 8006f4e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006f52:	3301      	adds	r3, #1
 8006f54:	d003      	beq.n	8006f5e <_fwalk_reent+0x3a>
 8006f56:	4629      	mov	r1, r5
 8006f58:	4630      	mov	r0, r6
 8006f5a:	47c0      	blx	r8
 8006f5c:	4307      	orrs	r7, r0
 8006f5e:	3568      	adds	r5, #104	; 0x68
 8006f60:	e7e9      	b.n	8006f36 <_fwalk_reent+0x12>
	...

08006f64 <__libc_init_array>:
 8006f64:	b570      	push	{r4, r5, r6, lr}
 8006f66:	4d0d      	ldr	r5, [pc, #52]	; (8006f9c <__libc_init_array+0x38>)
 8006f68:	4c0d      	ldr	r4, [pc, #52]	; (8006fa0 <__libc_init_array+0x3c>)
 8006f6a:	1b64      	subs	r4, r4, r5
 8006f6c:	10a4      	asrs	r4, r4, #2
 8006f6e:	2600      	movs	r6, #0
 8006f70:	42a6      	cmp	r6, r4
 8006f72:	d109      	bne.n	8006f88 <__libc_init_array+0x24>
 8006f74:	4d0b      	ldr	r5, [pc, #44]	; (8006fa4 <__libc_init_array+0x40>)
 8006f76:	4c0c      	ldr	r4, [pc, #48]	; (8006fa8 <__libc_init_array+0x44>)
 8006f78:	f000 fca2 	bl	80078c0 <_init>
 8006f7c:	1b64      	subs	r4, r4, r5
 8006f7e:	10a4      	asrs	r4, r4, #2
 8006f80:	2600      	movs	r6, #0
 8006f82:	42a6      	cmp	r6, r4
 8006f84:	d105      	bne.n	8006f92 <__libc_init_array+0x2e>
 8006f86:	bd70      	pop	{r4, r5, r6, pc}
 8006f88:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f8c:	4798      	blx	r3
 8006f8e:	3601      	adds	r6, #1
 8006f90:	e7ee      	b.n	8006f70 <__libc_init_array+0xc>
 8006f92:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f96:	4798      	blx	r3
 8006f98:	3601      	adds	r6, #1
 8006f9a:	e7f2      	b.n	8006f82 <__libc_init_array+0x1e>
 8006f9c:	08007aa4 	.word	0x08007aa4
 8006fa0:	08007aa4 	.word	0x08007aa4
 8006fa4:	08007aa4 	.word	0x08007aa4
 8006fa8:	08007aa8 	.word	0x08007aa8

08006fac <__retarget_lock_init_recursive>:
 8006fac:	4770      	bx	lr

08006fae <__retarget_lock_acquire_recursive>:
 8006fae:	4770      	bx	lr

08006fb0 <__retarget_lock_release_recursive>:
 8006fb0:	4770      	bx	lr

08006fb2 <memcpy>:
 8006fb2:	440a      	add	r2, r1
 8006fb4:	4291      	cmp	r1, r2
 8006fb6:	f100 33ff 	add.w	r3, r0, #4294967295
 8006fba:	d100      	bne.n	8006fbe <memcpy+0xc>
 8006fbc:	4770      	bx	lr
 8006fbe:	b510      	push	{r4, lr}
 8006fc0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006fc4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006fc8:	4291      	cmp	r1, r2
 8006fca:	d1f9      	bne.n	8006fc0 <memcpy+0xe>
 8006fcc:	bd10      	pop	{r4, pc}

08006fce <memset>:
 8006fce:	4402      	add	r2, r0
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d100      	bne.n	8006fd8 <memset+0xa>
 8006fd6:	4770      	bx	lr
 8006fd8:	f803 1b01 	strb.w	r1, [r3], #1
 8006fdc:	e7f9      	b.n	8006fd2 <memset+0x4>
	...

08006fe0 <sbrk_aligned>:
 8006fe0:	b570      	push	{r4, r5, r6, lr}
 8006fe2:	4e0e      	ldr	r6, [pc, #56]	; (800701c <sbrk_aligned+0x3c>)
 8006fe4:	460c      	mov	r4, r1
 8006fe6:	6831      	ldr	r1, [r6, #0]
 8006fe8:	4605      	mov	r5, r0
 8006fea:	b911      	cbnz	r1, 8006ff2 <sbrk_aligned+0x12>
 8006fec:	f000 f96c 	bl	80072c8 <_sbrk_r>
 8006ff0:	6030      	str	r0, [r6, #0]
 8006ff2:	4621      	mov	r1, r4
 8006ff4:	4628      	mov	r0, r5
 8006ff6:	f000 f967 	bl	80072c8 <_sbrk_r>
 8006ffa:	1c43      	adds	r3, r0, #1
 8006ffc:	d00a      	beq.n	8007014 <sbrk_aligned+0x34>
 8006ffe:	1cc4      	adds	r4, r0, #3
 8007000:	f024 0403 	bic.w	r4, r4, #3
 8007004:	42a0      	cmp	r0, r4
 8007006:	d007      	beq.n	8007018 <sbrk_aligned+0x38>
 8007008:	1a21      	subs	r1, r4, r0
 800700a:	4628      	mov	r0, r5
 800700c:	f000 f95c 	bl	80072c8 <_sbrk_r>
 8007010:	3001      	adds	r0, #1
 8007012:	d101      	bne.n	8007018 <sbrk_aligned+0x38>
 8007014:	f04f 34ff 	mov.w	r4, #4294967295
 8007018:	4620      	mov	r0, r4
 800701a:	bd70      	pop	{r4, r5, r6, pc}
 800701c:	20001e90 	.word	0x20001e90

08007020 <_malloc_r>:
 8007020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007024:	1ccd      	adds	r5, r1, #3
 8007026:	f025 0503 	bic.w	r5, r5, #3
 800702a:	3508      	adds	r5, #8
 800702c:	2d0c      	cmp	r5, #12
 800702e:	bf38      	it	cc
 8007030:	250c      	movcc	r5, #12
 8007032:	2d00      	cmp	r5, #0
 8007034:	4607      	mov	r7, r0
 8007036:	db01      	blt.n	800703c <_malloc_r+0x1c>
 8007038:	42a9      	cmp	r1, r5
 800703a:	d905      	bls.n	8007048 <_malloc_r+0x28>
 800703c:	230c      	movs	r3, #12
 800703e:	603b      	str	r3, [r7, #0]
 8007040:	2600      	movs	r6, #0
 8007042:	4630      	mov	r0, r6
 8007044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007048:	4e2e      	ldr	r6, [pc, #184]	; (8007104 <_malloc_r+0xe4>)
 800704a:	f000 fbad 	bl	80077a8 <__malloc_lock>
 800704e:	6833      	ldr	r3, [r6, #0]
 8007050:	461c      	mov	r4, r3
 8007052:	bb34      	cbnz	r4, 80070a2 <_malloc_r+0x82>
 8007054:	4629      	mov	r1, r5
 8007056:	4638      	mov	r0, r7
 8007058:	f7ff ffc2 	bl	8006fe0 <sbrk_aligned>
 800705c:	1c43      	adds	r3, r0, #1
 800705e:	4604      	mov	r4, r0
 8007060:	d14d      	bne.n	80070fe <_malloc_r+0xde>
 8007062:	6834      	ldr	r4, [r6, #0]
 8007064:	4626      	mov	r6, r4
 8007066:	2e00      	cmp	r6, #0
 8007068:	d140      	bne.n	80070ec <_malloc_r+0xcc>
 800706a:	6823      	ldr	r3, [r4, #0]
 800706c:	4631      	mov	r1, r6
 800706e:	4638      	mov	r0, r7
 8007070:	eb04 0803 	add.w	r8, r4, r3
 8007074:	f000 f928 	bl	80072c8 <_sbrk_r>
 8007078:	4580      	cmp	r8, r0
 800707a:	d13a      	bne.n	80070f2 <_malloc_r+0xd2>
 800707c:	6821      	ldr	r1, [r4, #0]
 800707e:	3503      	adds	r5, #3
 8007080:	1a6d      	subs	r5, r5, r1
 8007082:	f025 0503 	bic.w	r5, r5, #3
 8007086:	3508      	adds	r5, #8
 8007088:	2d0c      	cmp	r5, #12
 800708a:	bf38      	it	cc
 800708c:	250c      	movcc	r5, #12
 800708e:	4629      	mov	r1, r5
 8007090:	4638      	mov	r0, r7
 8007092:	f7ff ffa5 	bl	8006fe0 <sbrk_aligned>
 8007096:	3001      	adds	r0, #1
 8007098:	d02b      	beq.n	80070f2 <_malloc_r+0xd2>
 800709a:	6823      	ldr	r3, [r4, #0]
 800709c:	442b      	add	r3, r5
 800709e:	6023      	str	r3, [r4, #0]
 80070a0:	e00e      	b.n	80070c0 <_malloc_r+0xa0>
 80070a2:	6822      	ldr	r2, [r4, #0]
 80070a4:	1b52      	subs	r2, r2, r5
 80070a6:	d41e      	bmi.n	80070e6 <_malloc_r+0xc6>
 80070a8:	2a0b      	cmp	r2, #11
 80070aa:	d916      	bls.n	80070da <_malloc_r+0xba>
 80070ac:	1961      	adds	r1, r4, r5
 80070ae:	42a3      	cmp	r3, r4
 80070b0:	6025      	str	r5, [r4, #0]
 80070b2:	bf18      	it	ne
 80070b4:	6059      	strne	r1, [r3, #4]
 80070b6:	6863      	ldr	r3, [r4, #4]
 80070b8:	bf08      	it	eq
 80070ba:	6031      	streq	r1, [r6, #0]
 80070bc:	5162      	str	r2, [r4, r5]
 80070be:	604b      	str	r3, [r1, #4]
 80070c0:	4638      	mov	r0, r7
 80070c2:	f104 060b 	add.w	r6, r4, #11
 80070c6:	f000 fb75 	bl	80077b4 <__malloc_unlock>
 80070ca:	f026 0607 	bic.w	r6, r6, #7
 80070ce:	1d23      	adds	r3, r4, #4
 80070d0:	1af2      	subs	r2, r6, r3
 80070d2:	d0b6      	beq.n	8007042 <_malloc_r+0x22>
 80070d4:	1b9b      	subs	r3, r3, r6
 80070d6:	50a3      	str	r3, [r4, r2]
 80070d8:	e7b3      	b.n	8007042 <_malloc_r+0x22>
 80070da:	6862      	ldr	r2, [r4, #4]
 80070dc:	42a3      	cmp	r3, r4
 80070de:	bf0c      	ite	eq
 80070e0:	6032      	streq	r2, [r6, #0]
 80070e2:	605a      	strne	r2, [r3, #4]
 80070e4:	e7ec      	b.n	80070c0 <_malloc_r+0xa0>
 80070e6:	4623      	mov	r3, r4
 80070e8:	6864      	ldr	r4, [r4, #4]
 80070ea:	e7b2      	b.n	8007052 <_malloc_r+0x32>
 80070ec:	4634      	mov	r4, r6
 80070ee:	6876      	ldr	r6, [r6, #4]
 80070f0:	e7b9      	b.n	8007066 <_malloc_r+0x46>
 80070f2:	230c      	movs	r3, #12
 80070f4:	603b      	str	r3, [r7, #0]
 80070f6:	4638      	mov	r0, r7
 80070f8:	f000 fb5c 	bl	80077b4 <__malloc_unlock>
 80070fc:	e7a1      	b.n	8007042 <_malloc_r+0x22>
 80070fe:	6025      	str	r5, [r4, #0]
 8007100:	e7de      	b.n	80070c0 <_malloc_r+0xa0>
 8007102:	bf00      	nop
 8007104:	20001e8c 	.word	0x20001e8c

08007108 <_puts_r>:
 8007108:	b570      	push	{r4, r5, r6, lr}
 800710a:	460e      	mov	r6, r1
 800710c:	4605      	mov	r5, r0
 800710e:	b118      	cbz	r0, 8007118 <_puts_r+0x10>
 8007110:	6983      	ldr	r3, [r0, #24]
 8007112:	b90b      	cbnz	r3, 8007118 <_puts_r+0x10>
 8007114:	f7ff fe88 	bl	8006e28 <__sinit>
 8007118:	69ab      	ldr	r3, [r5, #24]
 800711a:	68ac      	ldr	r4, [r5, #8]
 800711c:	b913      	cbnz	r3, 8007124 <_puts_r+0x1c>
 800711e:	4628      	mov	r0, r5
 8007120:	f7ff fe82 	bl	8006e28 <__sinit>
 8007124:	4b2c      	ldr	r3, [pc, #176]	; (80071d8 <_puts_r+0xd0>)
 8007126:	429c      	cmp	r4, r3
 8007128:	d120      	bne.n	800716c <_puts_r+0x64>
 800712a:	686c      	ldr	r4, [r5, #4]
 800712c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800712e:	07db      	lsls	r3, r3, #31
 8007130:	d405      	bmi.n	800713e <_puts_r+0x36>
 8007132:	89a3      	ldrh	r3, [r4, #12]
 8007134:	0598      	lsls	r0, r3, #22
 8007136:	d402      	bmi.n	800713e <_puts_r+0x36>
 8007138:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800713a:	f7ff ff38 	bl	8006fae <__retarget_lock_acquire_recursive>
 800713e:	89a3      	ldrh	r3, [r4, #12]
 8007140:	0719      	lsls	r1, r3, #28
 8007142:	d51d      	bpl.n	8007180 <_puts_r+0x78>
 8007144:	6923      	ldr	r3, [r4, #16]
 8007146:	b1db      	cbz	r3, 8007180 <_puts_r+0x78>
 8007148:	3e01      	subs	r6, #1
 800714a:	68a3      	ldr	r3, [r4, #8]
 800714c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007150:	3b01      	subs	r3, #1
 8007152:	60a3      	str	r3, [r4, #8]
 8007154:	bb39      	cbnz	r1, 80071a6 <_puts_r+0x9e>
 8007156:	2b00      	cmp	r3, #0
 8007158:	da38      	bge.n	80071cc <_puts_r+0xc4>
 800715a:	4622      	mov	r2, r4
 800715c:	210a      	movs	r1, #10
 800715e:	4628      	mov	r0, r5
 8007160:	f000 f906 	bl	8007370 <__swbuf_r>
 8007164:	3001      	adds	r0, #1
 8007166:	d011      	beq.n	800718c <_puts_r+0x84>
 8007168:	250a      	movs	r5, #10
 800716a:	e011      	b.n	8007190 <_puts_r+0x88>
 800716c:	4b1b      	ldr	r3, [pc, #108]	; (80071dc <_puts_r+0xd4>)
 800716e:	429c      	cmp	r4, r3
 8007170:	d101      	bne.n	8007176 <_puts_r+0x6e>
 8007172:	68ac      	ldr	r4, [r5, #8]
 8007174:	e7da      	b.n	800712c <_puts_r+0x24>
 8007176:	4b1a      	ldr	r3, [pc, #104]	; (80071e0 <_puts_r+0xd8>)
 8007178:	429c      	cmp	r4, r3
 800717a:	bf08      	it	eq
 800717c:	68ec      	ldreq	r4, [r5, #12]
 800717e:	e7d5      	b.n	800712c <_puts_r+0x24>
 8007180:	4621      	mov	r1, r4
 8007182:	4628      	mov	r0, r5
 8007184:	f000 f958 	bl	8007438 <__swsetup_r>
 8007188:	2800      	cmp	r0, #0
 800718a:	d0dd      	beq.n	8007148 <_puts_r+0x40>
 800718c:	f04f 35ff 	mov.w	r5, #4294967295
 8007190:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007192:	07da      	lsls	r2, r3, #31
 8007194:	d405      	bmi.n	80071a2 <_puts_r+0x9a>
 8007196:	89a3      	ldrh	r3, [r4, #12]
 8007198:	059b      	lsls	r3, r3, #22
 800719a:	d402      	bmi.n	80071a2 <_puts_r+0x9a>
 800719c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800719e:	f7ff ff07 	bl	8006fb0 <__retarget_lock_release_recursive>
 80071a2:	4628      	mov	r0, r5
 80071a4:	bd70      	pop	{r4, r5, r6, pc}
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	da04      	bge.n	80071b4 <_puts_r+0xac>
 80071aa:	69a2      	ldr	r2, [r4, #24]
 80071ac:	429a      	cmp	r2, r3
 80071ae:	dc06      	bgt.n	80071be <_puts_r+0xb6>
 80071b0:	290a      	cmp	r1, #10
 80071b2:	d004      	beq.n	80071be <_puts_r+0xb6>
 80071b4:	6823      	ldr	r3, [r4, #0]
 80071b6:	1c5a      	adds	r2, r3, #1
 80071b8:	6022      	str	r2, [r4, #0]
 80071ba:	7019      	strb	r1, [r3, #0]
 80071bc:	e7c5      	b.n	800714a <_puts_r+0x42>
 80071be:	4622      	mov	r2, r4
 80071c0:	4628      	mov	r0, r5
 80071c2:	f000 f8d5 	bl	8007370 <__swbuf_r>
 80071c6:	3001      	adds	r0, #1
 80071c8:	d1bf      	bne.n	800714a <_puts_r+0x42>
 80071ca:	e7df      	b.n	800718c <_puts_r+0x84>
 80071cc:	6823      	ldr	r3, [r4, #0]
 80071ce:	250a      	movs	r5, #10
 80071d0:	1c5a      	adds	r2, r3, #1
 80071d2:	6022      	str	r2, [r4, #0]
 80071d4:	701d      	strb	r5, [r3, #0]
 80071d6:	e7db      	b.n	8007190 <_puts_r+0x88>
 80071d8:	08007a58 	.word	0x08007a58
 80071dc:	08007a78 	.word	0x08007a78
 80071e0:	08007a38 	.word	0x08007a38

080071e4 <puts>:
 80071e4:	4b02      	ldr	r3, [pc, #8]	; (80071f0 <puts+0xc>)
 80071e6:	4601      	mov	r1, r0
 80071e8:	6818      	ldr	r0, [r3, #0]
 80071ea:	f7ff bf8d 	b.w	8007108 <_puts_r>
 80071ee:	bf00      	nop
 80071f0:	20000014 	.word	0x20000014

080071f4 <cleanup_glue>:
 80071f4:	b538      	push	{r3, r4, r5, lr}
 80071f6:	460c      	mov	r4, r1
 80071f8:	6809      	ldr	r1, [r1, #0]
 80071fa:	4605      	mov	r5, r0
 80071fc:	b109      	cbz	r1, 8007202 <cleanup_glue+0xe>
 80071fe:	f7ff fff9 	bl	80071f4 <cleanup_glue>
 8007202:	4621      	mov	r1, r4
 8007204:	4628      	mov	r0, r5
 8007206:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800720a:	f000 bad9 	b.w	80077c0 <_free_r>
	...

08007210 <_reclaim_reent>:
 8007210:	4b2c      	ldr	r3, [pc, #176]	; (80072c4 <_reclaim_reent+0xb4>)
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4283      	cmp	r3, r0
 8007216:	b570      	push	{r4, r5, r6, lr}
 8007218:	4604      	mov	r4, r0
 800721a:	d051      	beq.n	80072c0 <_reclaim_reent+0xb0>
 800721c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800721e:	b143      	cbz	r3, 8007232 <_reclaim_reent+0x22>
 8007220:	68db      	ldr	r3, [r3, #12]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d14a      	bne.n	80072bc <_reclaim_reent+0xac>
 8007226:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007228:	6819      	ldr	r1, [r3, #0]
 800722a:	b111      	cbz	r1, 8007232 <_reclaim_reent+0x22>
 800722c:	4620      	mov	r0, r4
 800722e:	f000 fac7 	bl	80077c0 <_free_r>
 8007232:	6961      	ldr	r1, [r4, #20]
 8007234:	b111      	cbz	r1, 800723c <_reclaim_reent+0x2c>
 8007236:	4620      	mov	r0, r4
 8007238:	f000 fac2 	bl	80077c0 <_free_r>
 800723c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800723e:	b111      	cbz	r1, 8007246 <_reclaim_reent+0x36>
 8007240:	4620      	mov	r0, r4
 8007242:	f000 fabd 	bl	80077c0 <_free_r>
 8007246:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007248:	b111      	cbz	r1, 8007250 <_reclaim_reent+0x40>
 800724a:	4620      	mov	r0, r4
 800724c:	f000 fab8 	bl	80077c0 <_free_r>
 8007250:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007252:	b111      	cbz	r1, 800725a <_reclaim_reent+0x4a>
 8007254:	4620      	mov	r0, r4
 8007256:	f000 fab3 	bl	80077c0 <_free_r>
 800725a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800725c:	b111      	cbz	r1, 8007264 <_reclaim_reent+0x54>
 800725e:	4620      	mov	r0, r4
 8007260:	f000 faae 	bl	80077c0 <_free_r>
 8007264:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007266:	b111      	cbz	r1, 800726e <_reclaim_reent+0x5e>
 8007268:	4620      	mov	r0, r4
 800726a:	f000 faa9 	bl	80077c0 <_free_r>
 800726e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007270:	b111      	cbz	r1, 8007278 <_reclaim_reent+0x68>
 8007272:	4620      	mov	r0, r4
 8007274:	f000 faa4 	bl	80077c0 <_free_r>
 8007278:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800727a:	b111      	cbz	r1, 8007282 <_reclaim_reent+0x72>
 800727c:	4620      	mov	r0, r4
 800727e:	f000 fa9f 	bl	80077c0 <_free_r>
 8007282:	69a3      	ldr	r3, [r4, #24]
 8007284:	b1e3      	cbz	r3, 80072c0 <_reclaim_reent+0xb0>
 8007286:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007288:	4620      	mov	r0, r4
 800728a:	4798      	blx	r3
 800728c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800728e:	b1b9      	cbz	r1, 80072c0 <_reclaim_reent+0xb0>
 8007290:	4620      	mov	r0, r4
 8007292:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007296:	f7ff bfad 	b.w	80071f4 <cleanup_glue>
 800729a:	5949      	ldr	r1, [r1, r5]
 800729c:	b941      	cbnz	r1, 80072b0 <_reclaim_reent+0xa0>
 800729e:	3504      	adds	r5, #4
 80072a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80072a2:	2d80      	cmp	r5, #128	; 0x80
 80072a4:	68d9      	ldr	r1, [r3, #12]
 80072a6:	d1f8      	bne.n	800729a <_reclaim_reent+0x8a>
 80072a8:	4620      	mov	r0, r4
 80072aa:	f000 fa89 	bl	80077c0 <_free_r>
 80072ae:	e7ba      	b.n	8007226 <_reclaim_reent+0x16>
 80072b0:	680e      	ldr	r6, [r1, #0]
 80072b2:	4620      	mov	r0, r4
 80072b4:	f000 fa84 	bl	80077c0 <_free_r>
 80072b8:	4631      	mov	r1, r6
 80072ba:	e7ef      	b.n	800729c <_reclaim_reent+0x8c>
 80072bc:	2500      	movs	r5, #0
 80072be:	e7ef      	b.n	80072a0 <_reclaim_reent+0x90>
 80072c0:	bd70      	pop	{r4, r5, r6, pc}
 80072c2:	bf00      	nop
 80072c4:	20000014 	.word	0x20000014

080072c8 <_sbrk_r>:
 80072c8:	b538      	push	{r3, r4, r5, lr}
 80072ca:	4d06      	ldr	r5, [pc, #24]	; (80072e4 <_sbrk_r+0x1c>)
 80072cc:	2300      	movs	r3, #0
 80072ce:	4604      	mov	r4, r0
 80072d0:	4608      	mov	r0, r1
 80072d2:	602b      	str	r3, [r5, #0]
 80072d4:	f7f9 fcca 	bl	8000c6c <_sbrk>
 80072d8:	1c43      	adds	r3, r0, #1
 80072da:	d102      	bne.n	80072e2 <_sbrk_r+0x1a>
 80072dc:	682b      	ldr	r3, [r5, #0]
 80072de:	b103      	cbz	r3, 80072e2 <_sbrk_r+0x1a>
 80072e0:	6023      	str	r3, [r4, #0]
 80072e2:	bd38      	pop	{r3, r4, r5, pc}
 80072e4:	20001e94 	.word	0x20001e94

080072e8 <__sread>:
 80072e8:	b510      	push	{r4, lr}
 80072ea:	460c      	mov	r4, r1
 80072ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072f0:	f000 fab2 	bl	8007858 <_read_r>
 80072f4:	2800      	cmp	r0, #0
 80072f6:	bfab      	itete	ge
 80072f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80072fa:	89a3      	ldrhlt	r3, [r4, #12]
 80072fc:	181b      	addge	r3, r3, r0
 80072fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007302:	bfac      	ite	ge
 8007304:	6563      	strge	r3, [r4, #84]	; 0x54
 8007306:	81a3      	strhlt	r3, [r4, #12]
 8007308:	bd10      	pop	{r4, pc}

0800730a <__swrite>:
 800730a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800730e:	461f      	mov	r7, r3
 8007310:	898b      	ldrh	r3, [r1, #12]
 8007312:	05db      	lsls	r3, r3, #23
 8007314:	4605      	mov	r5, r0
 8007316:	460c      	mov	r4, r1
 8007318:	4616      	mov	r6, r2
 800731a:	d505      	bpl.n	8007328 <__swrite+0x1e>
 800731c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007320:	2302      	movs	r3, #2
 8007322:	2200      	movs	r2, #0
 8007324:	f000 f9c8 	bl	80076b8 <_lseek_r>
 8007328:	89a3      	ldrh	r3, [r4, #12]
 800732a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800732e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007332:	81a3      	strh	r3, [r4, #12]
 8007334:	4632      	mov	r2, r6
 8007336:	463b      	mov	r3, r7
 8007338:	4628      	mov	r0, r5
 800733a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800733e:	f000 b869 	b.w	8007414 <_write_r>

08007342 <__sseek>:
 8007342:	b510      	push	{r4, lr}
 8007344:	460c      	mov	r4, r1
 8007346:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800734a:	f000 f9b5 	bl	80076b8 <_lseek_r>
 800734e:	1c43      	adds	r3, r0, #1
 8007350:	89a3      	ldrh	r3, [r4, #12]
 8007352:	bf15      	itete	ne
 8007354:	6560      	strne	r0, [r4, #84]	; 0x54
 8007356:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800735a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800735e:	81a3      	strheq	r3, [r4, #12]
 8007360:	bf18      	it	ne
 8007362:	81a3      	strhne	r3, [r4, #12]
 8007364:	bd10      	pop	{r4, pc}

08007366 <__sclose>:
 8007366:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800736a:	f000 b8d3 	b.w	8007514 <_close_r>
	...

08007370 <__swbuf_r>:
 8007370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007372:	460e      	mov	r6, r1
 8007374:	4614      	mov	r4, r2
 8007376:	4605      	mov	r5, r0
 8007378:	b118      	cbz	r0, 8007382 <__swbuf_r+0x12>
 800737a:	6983      	ldr	r3, [r0, #24]
 800737c:	b90b      	cbnz	r3, 8007382 <__swbuf_r+0x12>
 800737e:	f7ff fd53 	bl	8006e28 <__sinit>
 8007382:	4b21      	ldr	r3, [pc, #132]	; (8007408 <__swbuf_r+0x98>)
 8007384:	429c      	cmp	r4, r3
 8007386:	d12b      	bne.n	80073e0 <__swbuf_r+0x70>
 8007388:	686c      	ldr	r4, [r5, #4]
 800738a:	69a3      	ldr	r3, [r4, #24]
 800738c:	60a3      	str	r3, [r4, #8]
 800738e:	89a3      	ldrh	r3, [r4, #12]
 8007390:	071a      	lsls	r2, r3, #28
 8007392:	d52f      	bpl.n	80073f4 <__swbuf_r+0x84>
 8007394:	6923      	ldr	r3, [r4, #16]
 8007396:	b36b      	cbz	r3, 80073f4 <__swbuf_r+0x84>
 8007398:	6923      	ldr	r3, [r4, #16]
 800739a:	6820      	ldr	r0, [r4, #0]
 800739c:	1ac0      	subs	r0, r0, r3
 800739e:	6963      	ldr	r3, [r4, #20]
 80073a0:	b2f6      	uxtb	r6, r6
 80073a2:	4283      	cmp	r3, r0
 80073a4:	4637      	mov	r7, r6
 80073a6:	dc04      	bgt.n	80073b2 <__swbuf_r+0x42>
 80073a8:	4621      	mov	r1, r4
 80073aa:	4628      	mov	r0, r5
 80073ac:	f000 f948 	bl	8007640 <_fflush_r>
 80073b0:	bb30      	cbnz	r0, 8007400 <__swbuf_r+0x90>
 80073b2:	68a3      	ldr	r3, [r4, #8]
 80073b4:	3b01      	subs	r3, #1
 80073b6:	60a3      	str	r3, [r4, #8]
 80073b8:	6823      	ldr	r3, [r4, #0]
 80073ba:	1c5a      	adds	r2, r3, #1
 80073bc:	6022      	str	r2, [r4, #0]
 80073be:	701e      	strb	r6, [r3, #0]
 80073c0:	6963      	ldr	r3, [r4, #20]
 80073c2:	3001      	adds	r0, #1
 80073c4:	4283      	cmp	r3, r0
 80073c6:	d004      	beq.n	80073d2 <__swbuf_r+0x62>
 80073c8:	89a3      	ldrh	r3, [r4, #12]
 80073ca:	07db      	lsls	r3, r3, #31
 80073cc:	d506      	bpl.n	80073dc <__swbuf_r+0x6c>
 80073ce:	2e0a      	cmp	r6, #10
 80073d0:	d104      	bne.n	80073dc <__swbuf_r+0x6c>
 80073d2:	4621      	mov	r1, r4
 80073d4:	4628      	mov	r0, r5
 80073d6:	f000 f933 	bl	8007640 <_fflush_r>
 80073da:	b988      	cbnz	r0, 8007400 <__swbuf_r+0x90>
 80073dc:	4638      	mov	r0, r7
 80073de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80073e0:	4b0a      	ldr	r3, [pc, #40]	; (800740c <__swbuf_r+0x9c>)
 80073e2:	429c      	cmp	r4, r3
 80073e4:	d101      	bne.n	80073ea <__swbuf_r+0x7a>
 80073e6:	68ac      	ldr	r4, [r5, #8]
 80073e8:	e7cf      	b.n	800738a <__swbuf_r+0x1a>
 80073ea:	4b09      	ldr	r3, [pc, #36]	; (8007410 <__swbuf_r+0xa0>)
 80073ec:	429c      	cmp	r4, r3
 80073ee:	bf08      	it	eq
 80073f0:	68ec      	ldreq	r4, [r5, #12]
 80073f2:	e7ca      	b.n	800738a <__swbuf_r+0x1a>
 80073f4:	4621      	mov	r1, r4
 80073f6:	4628      	mov	r0, r5
 80073f8:	f000 f81e 	bl	8007438 <__swsetup_r>
 80073fc:	2800      	cmp	r0, #0
 80073fe:	d0cb      	beq.n	8007398 <__swbuf_r+0x28>
 8007400:	f04f 37ff 	mov.w	r7, #4294967295
 8007404:	e7ea      	b.n	80073dc <__swbuf_r+0x6c>
 8007406:	bf00      	nop
 8007408:	08007a58 	.word	0x08007a58
 800740c:	08007a78 	.word	0x08007a78
 8007410:	08007a38 	.word	0x08007a38

08007414 <_write_r>:
 8007414:	b538      	push	{r3, r4, r5, lr}
 8007416:	4d07      	ldr	r5, [pc, #28]	; (8007434 <_write_r+0x20>)
 8007418:	4604      	mov	r4, r0
 800741a:	4608      	mov	r0, r1
 800741c:	4611      	mov	r1, r2
 800741e:	2200      	movs	r2, #0
 8007420:	602a      	str	r2, [r5, #0]
 8007422:	461a      	mov	r2, r3
 8007424:	f7f9 fbd1 	bl	8000bca <_write>
 8007428:	1c43      	adds	r3, r0, #1
 800742a:	d102      	bne.n	8007432 <_write_r+0x1e>
 800742c:	682b      	ldr	r3, [r5, #0]
 800742e:	b103      	cbz	r3, 8007432 <_write_r+0x1e>
 8007430:	6023      	str	r3, [r4, #0]
 8007432:	bd38      	pop	{r3, r4, r5, pc}
 8007434:	20001e94 	.word	0x20001e94

08007438 <__swsetup_r>:
 8007438:	4b32      	ldr	r3, [pc, #200]	; (8007504 <__swsetup_r+0xcc>)
 800743a:	b570      	push	{r4, r5, r6, lr}
 800743c:	681d      	ldr	r5, [r3, #0]
 800743e:	4606      	mov	r6, r0
 8007440:	460c      	mov	r4, r1
 8007442:	b125      	cbz	r5, 800744e <__swsetup_r+0x16>
 8007444:	69ab      	ldr	r3, [r5, #24]
 8007446:	b913      	cbnz	r3, 800744e <__swsetup_r+0x16>
 8007448:	4628      	mov	r0, r5
 800744a:	f7ff fced 	bl	8006e28 <__sinit>
 800744e:	4b2e      	ldr	r3, [pc, #184]	; (8007508 <__swsetup_r+0xd0>)
 8007450:	429c      	cmp	r4, r3
 8007452:	d10f      	bne.n	8007474 <__swsetup_r+0x3c>
 8007454:	686c      	ldr	r4, [r5, #4]
 8007456:	89a3      	ldrh	r3, [r4, #12]
 8007458:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800745c:	0719      	lsls	r1, r3, #28
 800745e:	d42c      	bmi.n	80074ba <__swsetup_r+0x82>
 8007460:	06dd      	lsls	r5, r3, #27
 8007462:	d411      	bmi.n	8007488 <__swsetup_r+0x50>
 8007464:	2309      	movs	r3, #9
 8007466:	6033      	str	r3, [r6, #0]
 8007468:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800746c:	81a3      	strh	r3, [r4, #12]
 800746e:	f04f 30ff 	mov.w	r0, #4294967295
 8007472:	e03e      	b.n	80074f2 <__swsetup_r+0xba>
 8007474:	4b25      	ldr	r3, [pc, #148]	; (800750c <__swsetup_r+0xd4>)
 8007476:	429c      	cmp	r4, r3
 8007478:	d101      	bne.n	800747e <__swsetup_r+0x46>
 800747a:	68ac      	ldr	r4, [r5, #8]
 800747c:	e7eb      	b.n	8007456 <__swsetup_r+0x1e>
 800747e:	4b24      	ldr	r3, [pc, #144]	; (8007510 <__swsetup_r+0xd8>)
 8007480:	429c      	cmp	r4, r3
 8007482:	bf08      	it	eq
 8007484:	68ec      	ldreq	r4, [r5, #12]
 8007486:	e7e6      	b.n	8007456 <__swsetup_r+0x1e>
 8007488:	0758      	lsls	r0, r3, #29
 800748a:	d512      	bpl.n	80074b2 <__swsetup_r+0x7a>
 800748c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800748e:	b141      	cbz	r1, 80074a2 <__swsetup_r+0x6a>
 8007490:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007494:	4299      	cmp	r1, r3
 8007496:	d002      	beq.n	800749e <__swsetup_r+0x66>
 8007498:	4630      	mov	r0, r6
 800749a:	f000 f991 	bl	80077c0 <_free_r>
 800749e:	2300      	movs	r3, #0
 80074a0:	6363      	str	r3, [r4, #52]	; 0x34
 80074a2:	89a3      	ldrh	r3, [r4, #12]
 80074a4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80074a8:	81a3      	strh	r3, [r4, #12]
 80074aa:	2300      	movs	r3, #0
 80074ac:	6063      	str	r3, [r4, #4]
 80074ae:	6923      	ldr	r3, [r4, #16]
 80074b0:	6023      	str	r3, [r4, #0]
 80074b2:	89a3      	ldrh	r3, [r4, #12]
 80074b4:	f043 0308 	orr.w	r3, r3, #8
 80074b8:	81a3      	strh	r3, [r4, #12]
 80074ba:	6923      	ldr	r3, [r4, #16]
 80074bc:	b94b      	cbnz	r3, 80074d2 <__swsetup_r+0x9a>
 80074be:	89a3      	ldrh	r3, [r4, #12]
 80074c0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80074c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074c8:	d003      	beq.n	80074d2 <__swsetup_r+0x9a>
 80074ca:	4621      	mov	r1, r4
 80074cc:	4630      	mov	r0, r6
 80074ce:	f000 f92b 	bl	8007728 <__smakebuf_r>
 80074d2:	89a0      	ldrh	r0, [r4, #12]
 80074d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80074d8:	f010 0301 	ands.w	r3, r0, #1
 80074dc:	d00a      	beq.n	80074f4 <__swsetup_r+0xbc>
 80074de:	2300      	movs	r3, #0
 80074e0:	60a3      	str	r3, [r4, #8]
 80074e2:	6963      	ldr	r3, [r4, #20]
 80074e4:	425b      	negs	r3, r3
 80074e6:	61a3      	str	r3, [r4, #24]
 80074e8:	6923      	ldr	r3, [r4, #16]
 80074ea:	b943      	cbnz	r3, 80074fe <__swsetup_r+0xc6>
 80074ec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80074f0:	d1ba      	bne.n	8007468 <__swsetup_r+0x30>
 80074f2:	bd70      	pop	{r4, r5, r6, pc}
 80074f4:	0781      	lsls	r1, r0, #30
 80074f6:	bf58      	it	pl
 80074f8:	6963      	ldrpl	r3, [r4, #20]
 80074fa:	60a3      	str	r3, [r4, #8]
 80074fc:	e7f4      	b.n	80074e8 <__swsetup_r+0xb0>
 80074fe:	2000      	movs	r0, #0
 8007500:	e7f7      	b.n	80074f2 <__swsetup_r+0xba>
 8007502:	bf00      	nop
 8007504:	20000014 	.word	0x20000014
 8007508:	08007a58 	.word	0x08007a58
 800750c:	08007a78 	.word	0x08007a78
 8007510:	08007a38 	.word	0x08007a38

08007514 <_close_r>:
 8007514:	b538      	push	{r3, r4, r5, lr}
 8007516:	4d06      	ldr	r5, [pc, #24]	; (8007530 <_close_r+0x1c>)
 8007518:	2300      	movs	r3, #0
 800751a:	4604      	mov	r4, r0
 800751c:	4608      	mov	r0, r1
 800751e:	602b      	str	r3, [r5, #0]
 8007520:	f7f9 fb6f 	bl	8000c02 <_close>
 8007524:	1c43      	adds	r3, r0, #1
 8007526:	d102      	bne.n	800752e <_close_r+0x1a>
 8007528:	682b      	ldr	r3, [r5, #0]
 800752a:	b103      	cbz	r3, 800752e <_close_r+0x1a>
 800752c:	6023      	str	r3, [r4, #0]
 800752e:	bd38      	pop	{r3, r4, r5, pc}
 8007530:	20001e94 	.word	0x20001e94

08007534 <__sflush_r>:
 8007534:	898a      	ldrh	r2, [r1, #12]
 8007536:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800753a:	4605      	mov	r5, r0
 800753c:	0710      	lsls	r0, r2, #28
 800753e:	460c      	mov	r4, r1
 8007540:	d458      	bmi.n	80075f4 <__sflush_r+0xc0>
 8007542:	684b      	ldr	r3, [r1, #4]
 8007544:	2b00      	cmp	r3, #0
 8007546:	dc05      	bgt.n	8007554 <__sflush_r+0x20>
 8007548:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800754a:	2b00      	cmp	r3, #0
 800754c:	dc02      	bgt.n	8007554 <__sflush_r+0x20>
 800754e:	2000      	movs	r0, #0
 8007550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007554:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007556:	2e00      	cmp	r6, #0
 8007558:	d0f9      	beq.n	800754e <__sflush_r+0x1a>
 800755a:	2300      	movs	r3, #0
 800755c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007560:	682f      	ldr	r7, [r5, #0]
 8007562:	602b      	str	r3, [r5, #0]
 8007564:	d032      	beq.n	80075cc <__sflush_r+0x98>
 8007566:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007568:	89a3      	ldrh	r3, [r4, #12]
 800756a:	075a      	lsls	r2, r3, #29
 800756c:	d505      	bpl.n	800757a <__sflush_r+0x46>
 800756e:	6863      	ldr	r3, [r4, #4]
 8007570:	1ac0      	subs	r0, r0, r3
 8007572:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007574:	b10b      	cbz	r3, 800757a <__sflush_r+0x46>
 8007576:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007578:	1ac0      	subs	r0, r0, r3
 800757a:	2300      	movs	r3, #0
 800757c:	4602      	mov	r2, r0
 800757e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007580:	6a21      	ldr	r1, [r4, #32]
 8007582:	4628      	mov	r0, r5
 8007584:	47b0      	blx	r6
 8007586:	1c43      	adds	r3, r0, #1
 8007588:	89a3      	ldrh	r3, [r4, #12]
 800758a:	d106      	bne.n	800759a <__sflush_r+0x66>
 800758c:	6829      	ldr	r1, [r5, #0]
 800758e:	291d      	cmp	r1, #29
 8007590:	d82c      	bhi.n	80075ec <__sflush_r+0xb8>
 8007592:	4a2a      	ldr	r2, [pc, #168]	; (800763c <__sflush_r+0x108>)
 8007594:	40ca      	lsrs	r2, r1
 8007596:	07d6      	lsls	r6, r2, #31
 8007598:	d528      	bpl.n	80075ec <__sflush_r+0xb8>
 800759a:	2200      	movs	r2, #0
 800759c:	6062      	str	r2, [r4, #4]
 800759e:	04d9      	lsls	r1, r3, #19
 80075a0:	6922      	ldr	r2, [r4, #16]
 80075a2:	6022      	str	r2, [r4, #0]
 80075a4:	d504      	bpl.n	80075b0 <__sflush_r+0x7c>
 80075a6:	1c42      	adds	r2, r0, #1
 80075a8:	d101      	bne.n	80075ae <__sflush_r+0x7a>
 80075aa:	682b      	ldr	r3, [r5, #0]
 80075ac:	b903      	cbnz	r3, 80075b0 <__sflush_r+0x7c>
 80075ae:	6560      	str	r0, [r4, #84]	; 0x54
 80075b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80075b2:	602f      	str	r7, [r5, #0]
 80075b4:	2900      	cmp	r1, #0
 80075b6:	d0ca      	beq.n	800754e <__sflush_r+0x1a>
 80075b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80075bc:	4299      	cmp	r1, r3
 80075be:	d002      	beq.n	80075c6 <__sflush_r+0x92>
 80075c0:	4628      	mov	r0, r5
 80075c2:	f000 f8fd 	bl	80077c0 <_free_r>
 80075c6:	2000      	movs	r0, #0
 80075c8:	6360      	str	r0, [r4, #52]	; 0x34
 80075ca:	e7c1      	b.n	8007550 <__sflush_r+0x1c>
 80075cc:	6a21      	ldr	r1, [r4, #32]
 80075ce:	2301      	movs	r3, #1
 80075d0:	4628      	mov	r0, r5
 80075d2:	47b0      	blx	r6
 80075d4:	1c41      	adds	r1, r0, #1
 80075d6:	d1c7      	bne.n	8007568 <__sflush_r+0x34>
 80075d8:	682b      	ldr	r3, [r5, #0]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d0c4      	beq.n	8007568 <__sflush_r+0x34>
 80075de:	2b1d      	cmp	r3, #29
 80075e0:	d001      	beq.n	80075e6 <__sflush_r+0xb2>
 80075e2:	2b16      	cmp	r3, #22
 80075e4:	d101      	bne.n	80075ea <__sflush_r+0xb6>
 80075e6:	602f      	str	r7, [r5, #0]
 80075e8:	e7b1      	b.n	800754e <__sflush_r+0x1a>
 80075ea:	89a3      	ldrh	r3, [r4, #12]
 80075ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075f0:	81a3      	strh	r3, [r4, #12]
 80075f2:	e7ad      	b.n	8007550 <__sflush_r+0x1c>
 80075f4:	690f      	ldr	r7, [r1, #16]
 80075f6:	2f00      	cmp	r7, #0
 80075f8:	d0a9      	beq.n	800754e <__sflush_r+0x1a>
 80075fa:	0793      	lsls	r3, r2, #30
 80075fc:	680e      	ldr	r6, [r1, #0]
 80075fe:	bf08      	it	eq
 8007600:	694b      	ldreq	r3, [r1, #20]
 8007602:	600f      	str	r7, [r1, #0]
 8007604:	bf18      	it	ne
 8007606:	2300      	movne	r3, #0
 8007608:	eba6 0807 	sub.w	r8, r6, r7
 800760c:	608b      	str	r3, [r1, #8]
 800760e:	f1b8 0f00 	cmp.w	r8, #0
 8007612:	dd9c      	ble.n	800754e <__sflush_r+0x1a>
 8007614:	6a21      	ldr	r1, [r4, #32]
 8007616:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007618:	4643      	mov	r3, r8
 800761a:	463a      	mov	r2, r7
 800761c:	4628      	mov	r0, r5
 800761e:	47b0      	blx	r6
 8007620:	2800      	cmp	r0, #0
 8007622:	dc06      	bgt.n	8007632 <__sflush_r+0xfe>
 8007624:	89a3      	ldrh	r3, [r4, #12]
 8007626:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800762a:	81a3      	strh	r3, [r4, #12]
 800762c:	f04f 30ff 	mov.w	r0, #4294967295
 8007630:	e78e      	b.n	8007550 <__sflush_r+0x1c>
 8007632:	4407      	add	r7, r0
 8007634:	eba8 0800 	sub.w	r8, r8, r0
 8007638:	e7e9      	b.n	800760e <__sflush_r+0xda>
 800763a:	bf00      	nop
 800763c:	20400001 	.word	0x20400001

08007640 <_fflush_r>:
 8007640:	b538      	push	{r3, r4, r5, lr}
 8007642:	690b      	ldr	r3, [r1, #16]
 8007644:	4605      	mov	r5, r0
 8007646:	460c      	mov	r4, r1
 8007648:	b913      	cbnz	r3, 8007650 <_fflush_r+0x10>
 800764a:	2500      	movs	r5, #0
 800764c:	4628      	mov	r0, r5
 800764e:	bd38      	pop	{r3, r4, r5, pc}
 8007650:	b118      	cbz	r0, 800765a <_fflush_r+0x1a>
 8007652:	6983      	ldr	r3, [r0, #24]
 8007654:	b90b      	cbnz	r3, 800765a <_fflush_r+0x1a>
 8007656:	f7ff fbe7 	bl	8006e28 <__sinit>
 800765a:	4b14      	ldr	r3, [pc, #80]	; (80076ac <_fflush_r+0x6c>)
 800765c:	429c      	cmp	r4, r3
 800765e:	d11b      	bne.n	8007698 <_fflush_r+0x58>
 8007660:	686c      	ldr	r4, [r5, #4]
 8007662:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d0ef      	beq.n	800764a <_fflush_r+0xa>
 800766a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800766c:	07d0      	lsls	r0, r2, #31
 800766e:	d404      	bmi.n	800767a <_fflush_r+0x3a>
 8007670:	0599      	lsls	r1, r3, #22
 8007672:	d402      	bmi.n	800767a <_fflush_r+0x3a>
 8007674:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007676:	f7ff fc9a 	bl	8006fae <__retarget_lock_acquire_recursive>
 800767a:	4628      	mov	r0, r5
 800767c:	4621      	mov	r1, r4
 800767e:	f7ff ff59 	bl	8007534 <__sflush_r>
 8007682:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007684:	07da      	lsls	r2, r3, #31
 8007686:	4605      	mov	r5, r0
 8007688:	d4e0      	bmi.n	800764c <_fflush_r+0xc>
 800768a:	89a3      	ldrh	r3, [r4, #12]
 800768c:	059b      	lsls	r3, r3, #22
 800768e:	d4dd      	bmi.n	800764c <_fflush_r+0xc>
 8007690:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007692:	f7ff fc8d 	bl	8006fb0 <__retarget_lock_release_recursive>
 8007696:	e7d9      	b.n	800764c <_fflush_r+0xc>
 8007698:	4b05      	ldr	r3, [pc, #20]	; (80076b0 <_fflush_r+0x70>)
 800769a:	429c      	cmp	r4, r3
 800769c:	d101      	bne.n	80076a2 <_fflush_r+0x62>
 800769e:	68ac      	ldr	r4, [r5, #8]
 80076a0:	e7df      	b.n	8007662 <_fflush_r+0x22>
 80076a2:	4b04      	ldr	r3, [pc, #16]	; (80076b4 <_fflush_r+0x74>)
 80076a4:	429c      	cmp	r4, r3
 80076a6:	bf08      	it	eq
 80076a8:	68ec      	ldreq	r4, [r5, #12]
 80076aa:	e7da      	b.n	8007662 <_fflush_r+0x22>
 80076ac:	08007a58 	.word	0x08007a58
 80076b0:	08007a78 	.word	0x08007a78
 80076b4:	08007a38 	.word	0x08007a38

080076b8 <_lseek_r>:
 80076b8:	b538      	push	{r3, r4, r5, lr}
 80076ba:	4d07      	ldr	r5, [pc, #28]	; (80076d8 <_lseek_r+0x20>)
 80076bc:	4604      	mov	r4, r0
 80076be:	4608      	mov	r0, r1
 80076c0:	4611      	mov	r1, r2
 80076c2:	2200      	movs	r2, #0
 80076c4:	602a      	str	r2, [r5, #0]
 80076c6:	461a      	mov	r2, r3
 80076c8:	f7f9 fac2 	bl	8000c50 <_lseek>
 80076cc:	1c43      	adds	r3, r0, #1
 80076ce:	d102      	bne.n	80076d6 <_lseek_r+0x1e>
 80076d0:	682b      	ldr	r3, [r5, #0]
 80076d2:	b103      	cbz	r3, 80076d6 <_lseek_r+0x1e>
 80076d4:	6023      	str	r3, [r4, #0]
 80076d6:	bd38      	pop	{r3, r4, r5, pc}
 80076d8:	20001e94 	.word	0x20001e94

080076dc <__swhatbuf_r>:
 80076dc:	b570      	push	{r4, r5, r6, lr}
 80076de:	460e      	mov	r6, r1
 80076e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076e4:	2900      	cmp	r1, #0
 80076e6:	b096      	sub	sp, #88	; 0x58
 80076e8:	4614      	mov	r4, r2
 80076ea:	461d      	mov	r5, r3
 80076ec:	da08      	bge.n	8007700 <__swhatbuf_r+0x24>
 80076ee:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80076f2:	2200      	movs	r2, #0
 80076f4:	602a      	str	r2, [r5, #0]
 80076f6:	061a      	lsls	r2, r3, #24
 80076f8:	d410      	bmi.n	800771c <__swhatbuf_r+0x40>
 80076fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80076fe:	e00e      	b.n	800771e <__swhatbuf_r+0x42>
 8007700:	466a      	mov	r2, sp
 8007702:	f000 f8bb 	bl	800787c <_fstat_r>
 8007706:	2800      	cmp	r0, #0
 8007708:	dbf1      	blt.n	80076ee <__swhatbuf_r+0x12>
 800770a:	9a01      	ldr	r2, [sp, #4]
 800770c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007710:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007714:	425a      	negs	r2, r3
 8007716:	415a      	adcs	r2, r3
 8007718:	602a      	str	r2, [r5, #0]
 800771a:	e7ee      	b.n	80076fa <__swhatbuf_r+0x1e>
 800771c:	2340      	movs	r3, #64	; 0x40
 800771e:	2000      	movs	r0, #0
 8007720:	6023      	str	r3, [r4, #0]
 8007722:	b016      	add	sp, #88	; 0x58
 8007724:	bd70      	pop	{r4, r5, r6, pc}
	...

08007728 <__smakebuf_r>:
 8007728:	898b      	ldrh	r3, [r1, #12]
 800772a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800772c:	079d      	lsls	r5, r3, #30
 800772e:	4606      	mov	r6, r0
 8007730:	460c      	mov	r4, r1
 8007732:	d507      	bpl.n	8007744 <__smakebuf_r+0x1c>
 8007734:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007738:	6023      	str	r3, [r4, #0]
 800773a:	6123      	str	r3, [r4, #16]
 800773c:	2301      	movs	r3, #1
 800773e:	6163      	str	r3, [r4, #20]
 8007740:	b002      	add	sp, #8
 8007742:	bd70      	pop	{r4, r5, r6, pc}
 8007744:	ab01      	add	r3, sp, #4
 8007746:	466a      	mov	r2, sp
 8007748:	f7ff ffc8 	bl	80076dc <__swhatbuf_r>
 800774c:	9900      	ldr	r1, [sp, #0]
 800774e:	4605      	mov	r5, r0
 8007750:	4630      	mov	r0, r6
 8007752:	f7ff fc65 	bl	8007020 <_malloc_r>
 8007756:	b948      	cbnz	r0, 800776c <__smakebuf_r+0x44>
 8007758:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800775c:	059a      	lsls	r2, r3, #22
 800775e:	d4ef      	bmi.n	8007740 <__smakebuf_r+0x18>
 8007760:	f023 0303 	bic.w	r3, r3, #3
 8007764:	f043 0302 	orr.w	r3, r3, #2
 8007768:	81a3      	strh	r3, [r4, #12]
 800776a:	e7e3      	b.n	8007734 <__smakebuf_r+0xc>
 800776c:	4b0d      	ldr	r3, [pc, #52]	; (80077a4 <__smakebuf_r+0x7c>)
 800776e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007770:	89a3      	ldrh	r3, [r4, #12]
 8007772:	6020      	str	r0, [r4, #0]
 8007774:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007778:	81a3      	strh	r3, [r4, #12]
 800777a:	9b00      	ldr	r3, [sp, #0]
 800777c:	6163      	str	r3, [r4, #20]
 800777e:	9b01      	ldr	r3, [sp, #4]
 8007780:	6120      	str	r0, [r4, #16]
 8007782:	b15b      	cbz	r3, 800779c <__smakebuf_r+0x74>
 8007784:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007788:	4630      	mov	r0, r6
 800778a:	f000 f889 	bl	80078a0 <_isatty_r>
 800778e:	b128      	cbz	r0, 800779c <__smakebuf_r+0x74>
 8007790:	89a3      	ldrh	r3, [r4, #12]
 8007792:	f023 0303 	bic.w	r3, r3, #3
 8007796:	f043 0301 	orr.w	r3, r3, #1
 800779a:	81a3      	strh	r3, [r4, #12]
 800779c:	89a0      	ldrh	r0, [r4, #12]
 800779e:	4305      	orrs	r5, r0
 80077a0:	81a5      	strh	r5, [r4, #12]
 80077a2:	e7cd      	b.n	8007740 <__smakebuf_r+0x18>
 80077a4:	08006dc1 	.word	0x08006dc1

080077a8 <__malloc_lock>:
 80077a8:	4801      	ldr	r0, [pc, #4]	; (80077b0 <__malloc_lock+0x8>)
 80077aa:	f7ff bc00 	b.w	8006fae <__retarget_lock_acquire_recursive>
 80077ae:	bf00      	nop
 80077b0:	20001e88 	.word	0x20001e88

080077b4 <__malloc_unlock>:
 80077b4:	4801      	ldr	r0, [pc, #4]	; (80077bc <__malloc_unlock+0x8>)
 80077b6:	f7ff bbfb 	b.w	8006fb0 <__retarget_lock_release_recursive>
 80077ba:	bf00      	nop
 80077bc:	20001e88 	.word	0x20001e88

080077c0 <_free_r>:
 80077c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80077c2:	2900      	cmp	r1, #0
 80077c4:	d044      	beq.n	8007850 <_free_r+0x90>
 80077c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077ca:	9001      	str	r0, [sp, #4]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	f1a1 0404 	sub.w	r4, r1, #4
 80077d2:	bfb8      	it	lt
 80077d4:	18e4      	addlt	r4, r4, r3
 80077d6:	f7ff ffe7 	bl	80077a8 <__malloc_lock>
 80077da:	4a1e      	ldr	r2, [pc, #120]	; (8007854 <_free_r+0x94>)
 80077dc:	9801      	ldr	r0, [sp, #4]
 80077de:	6813      	ldr	r3, [r2, #0]
 80077e0:	b933      	cbnz	r3, 80077f0 <_free_r+0x30>
 80077e2:	6063      	str	r3, [r4, #4]
 80077e4:	6014      	str	r4, [r2, #0]
 80077e6:	b003      	add	sp, #12
 80077e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80077ec:	f7ff bfe2 	b.w	80077b4 <__malloc_unlock>
 80077f0:	42a3      	cmp	r3, r4
 80077f2:	d908      	bls.n	8007806 <_free_r+0x46>
 80077f4:	6825      	ldr	r5, [r4, #0]
 80077f6:	1961      	adds	r1, r4, r5
 80077f8:	428b      	cmp	r3, r1
 80077fa:	bf01      	itttt	eq
 80077fc:	6819      	ldreq	r1, [r3, #0]
 80077fe:	685b      	ldreq	r3, [r3, #4]
 8007800:	1949      	addeq	r1, r1, r5
 8007802:	6021      	streq	r1, [r4, #0]
 8007804:	e7ed      	b.n	80077e2 <_free_r+0x22>
 8007806:	461a      	mov	r2, r3
 8007808:	685b      	ldr	r3, [r3, #4]
 800780a:	b10b      	cbz	r3, 8007810 <_free_r+0x50>
 800780c:	42a3      	cmp	r3, r4
 800780e:	d9fa      	bls.n	8007806 <_free_r+0x46>
 8007810:	6811      	ldr	r1, [r2, #0]
 8007812:	1855      	adds	r5, r2, r1
 8007814:	42a5      	cmp	r5, r4
 8007816:	d10b      	bne.n	8007830 <_free_r+0x70>
 8007818:	6824      	ldr	r4, [r4, #0]
 800781a:	4421      	add	r1, r4
 800781c:	1854      	adds	r4, r2, r1
 800781e:	42a3      	cmp	r3, r4
 8007820:	6011      	str	r1, [r2, #0]
 8007822:	d1e0      	bne.n	80077e6 <_free_r+0x26>
 8007824:	681c      	ldr	r4, [r3, #0]
 8007826:	685b      	ldr	r3, [r3, #4]
 8007828:	6053      	str	r3, [r2, #4]
 800782a:	4421      	add	r1, r4
 800782c:	6011      	str	r1, [r2, #0]
 800782e:	e7da      	b.n	80077e6 <_free_r+0x26>
 8007830:	d902      	bls.n	8007838 <_free_r+0x78>
 8007832:	230c      	movs	r3, #12
 8007834:	6003      	str	r3, [r0, #0]
 8007836:	e7d6      	b.n	80077e6 <_free_r+0x26>
 8007838:	6825      	ldr	r5, [r4, #0]
 800783a:	1961      	adds	r1, r4, r5
 800783c:	428b      	cmp	r3, r1
 800783e:	bf04      	itt	eq
 8007840:	6819      	ldreq	r1, [r3, #0]
 8007842:	685b      	ldreq	r3, [r3, #4]
 8007844:	6063      	str	r3, [r4, #4]
 8007846:	bf04      	itt	eq
 8007848:	1949      	addeq	r1, r1, r5
 800784a:	6021      	streq	r1, [r4, #0]
 800784c:	6054      	str	r4, [r2, #4]
 800784e:	e7ca      	b.n	80077e6 <_free_r+0x26>
 8007850:	b003      	add	sp, #12
 8007852:	bd30      	pop	{r4, r5, pc}
 8007854:	20001e8c 	.word	0x20001e8c

08007858 <_read_r>:
 8007858:	b538      	push	{r3, r4, r5, lr}
 800785a:	4d07      	ldr	r5, [pc, #28]	; (8007878 <_read_r+0x20>)
 800785c:	4604      	mov	r4, r0
 800785e:	4608      	mov	r0, r1
 8007860:	4611      	mov	r1, r2
 8007862:	2200      	movs	r2, #0
 8007864:	602a      	str	r2, [r5, #0]
 8007866:	461a      	mov	r2, r3
 8007868:	f7f9 f992 	bl	8000b90 <_read>
 800786c:	1c43      	adds	r3, r0, #1
 800786e:	d102      	bne.n	8007876 <_read_r+0x1e>
 8007870:	682b      	ldr	r3, [r5, #0]
 8007872:	b103      	cbz	r3, 8007876 <_read_r+0x1e>
 8007874:	6023      	str	r3, [r4, #0]
 8007876:	bd38      	pop	{r3, r4, r5, pc}
 8007878:	20001e94 	.word	0x20001e94

0800787c <_fstat_r>:
 800787c:	b538      	push	{r3, r4, r5, lr}
 800787e:	4d07      	ldr	r5, [pc, #28]	; (800789c <_fstat_r+0x20>)
 8007880:	2300      	movs	r3, #0
 8007882:	4604      	mov	r4, r0
 8007884:	4608      	mov	r0, r1
 8007886:	4611      	mov	r1, r2
 8007888:	602b      	str	r3, [r5, #0]
 800788a:	f7f9 f9c6 	bl	8000c1a <_fstat>
 800788e:	1c43      	adds	r3, r0, #1
 8007890:	d102      	bne.n	8007898 <_fstat_r+0x1c>
 8007892:	682b      	ldr	r3, [r5, #0]
 8007894:	b103      	cbz	r3, 8007898 <_fstat_r+0x1c>
 8007896:	6023      	str	r3, [r4, #0]
 8007898:	bd38      	pop	{r3, r4, r5, pc}
 800789a:	bf00      	nop
 800789c:	20001e94 	.word	0x20001e94

080078a0 <_isatty_r>:
 80078a0:	b538      	push	{r3, r4, r5, lr}
 80078a2:	4d06      	ldr	r5, [pc, #24]	; (80078bc <_isatty_r+0x1c>)
 80078a4:	2300      	movs	r3, #0
 80078a6:	4604      	mov	r4, r0
 80078a8:	4608      	mov	r0, r1
 80078aa:	602b      	str	r3, [r5, #0]
 80078ac:	f7f9 f9c5 	bl	8000c3a <_isatty>
 80078b0:	1c43      	adds	r3, r0, #1
 80078b2:	d102      	bne.n	80078ba <_isatty_r+0x1a>
 80078b4:	682b      	ldr	r3, [r5, #0]
 80078b6:	b103      	cbz	r3, 80078ba <_isatty_r+0x1a>
 80078b8:	6023      	str	r3, [r4, #0]
 80078ba:	bd38      	pop	{r3, r4, r5, pc}
 80078bc:	20001e94 	.word	0x20001e94

080078c0 <_init>:
 80078c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078c2:	bf00      	nop
 80078c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078c6:	bc08      	pop	{r3}
 80078c8:	469e      	mov	lr, r3
 80078ca:	4770      	bx	lr

080078cc <_fini>:
 80078cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078ce:	bf00      	nop
 80078d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078d2:	bc08      	pop	{r3}
 80078d4:	469e      	mov	lr, r3
 80078d6:	4770      	bx	lr
