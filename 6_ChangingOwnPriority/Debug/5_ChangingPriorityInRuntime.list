
5_ChangingPriorityInRuntime.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d10  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a8  08006e50  08006e50  00016e50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006ff8  08006ff8  00016ff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007000  08007000  00017000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007004  08007004  00017004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  20000004  08007008  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001e20  20000078  0800707c  00020078  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20001e98  0800707c  00021e98  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 10 .debug_info   00025713  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000455c  00000000  00000000  000457bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000021f0  00000000  00000000  00049d18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002078  00000000  00000000  0004bf08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00004e96  00000000  00000000  0004df80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001fa00  00000000  00000000  00052e16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000ee344  00000000  00000000  00072816  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00160b5a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000093d4  00000000  00000000  00160bac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000078 	.word	0x20000078
 800015c:	00000000 	.word	0x00000000
 8000160:	08006e38 	.word	0x08006e38

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000007c 	.word	0x2000007c
 800017c:	08006e38 	.word	0x08006e38

08000180 <__aeabi_uldivmod>:
 8000180:	b953      	cbnz	r3, 8000198 <__aeabi_uldivmod+0x18>
 8000182:	b94a      	cbnz	r2, 8000198 <__aeabi_uldivmod+0x18>
 8000184:	2900      	cmp	r1, #0
 8000186:	bf08      	it	eq
 8000188:	2800      	cmpeq	r0, #0
 800018a:	bf1c      	itt	ne
 800018c:	f04f 31ff 	movne.w	r1, #4294967295
 8000190:	f04f 30ff 	movne.w	r0, #4294967295
 8000194:	f000 b974 	b.w	8000480 <__aeabi_idiv0>
 8000198:	f1ad 0c08 	sub.w	ip, sp, #8
 800019c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001a0:	f000 f806 	bl	80001b0 <__udivmoddi4>
 80001a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001ac:	b004      	add	sp, #16
 80001ae:	4770      	bx	lr

080001b0 <__udivmoddi4>:
 80001b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b4:	9d08      	ldr	r5, [sp, #32]
 80001b6:	4604      	mov	r4, r0
 80001b8:	468e      	mov	lr, r1
 80001ba:	2b00      	cmp	r3, #0
 80001bc:	d14d      	bne.n	800025a <__udivmoddi4+0xaa>
 80001be:	428a      	cmp	r2, r1
 80001c0:	4694      	mov	ip, r2
 80001c2:	d969      	bls.n	8000298 <__udivmoddi4+0xe8>
 80001c4:	fab2 f282 	clz	r2, r2
 80001c8:	b152      	cbz	r2, 80001e0 <__udivmoddi4+0x30>
 80001ca:	fa01 f302 	lsl.w	r3, r1, r2
 80001ce:	f1c2 0120 	rsb	r1, r2, #32
 80001d2:	fa20 f101 	lsr.w	r1, r0, r1
 80001d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80001da:	ea41 0e03 	orr.w	lr, r1, r3
 80001de:	4094      	lsls	r4, r2
 80001e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80001e4:	0c21      	lsrs	r1, r4, #16
 80001e6:	fbbe f6f8 	udiv	r6, lr, r8
 80001ea:	fa1f f78c 	uxth.w	r7, ip
 80001ee:	fb08 e316 	mls	r3, r8, r6, lr
 80001f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80001f6:	fb06 f107 	mul.w	r1, r6, r7
 80001fa:	4299      	cmp	r1, r3
 80001fc:	d90a      	bls.n	8000214 <__udivmoddi4+0x64>
 80001fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000202:	f106 30ff 	add.w	r0, r6, #4294967295
 8000206:	f080 811f 	bcs.w	8000448 <__udivmoddi4+0x298>
 800020a:	4299      	cmp	r1, r3
 800020c:	f240 811c 	bls.w	8000448 <__udivmoddi4+0x298>
 8000210:	3e02      	subs	r6, #2
 8000212:	4463      	add	r3, ip
 8000214:	1a5b      	subs	r3, r3, r1
 8000216:	b2a4      	uxth	r4, r4
 8000218:	fbb3 f0f8 	udiv	r0, r3, r8
 800021c:	fb08 3310 	mls	r3, r8, r0, r3
 8000220:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000224:	fb00 f707 	mul.w	r7, r0, r7
 8000228:	42a7      	cmp	r7, r4
 800022a:	d90a      	bls.n	8000242 <__udivmoddi4+0x92>
 800022c:	eb1c 0404 	adds.w	r4, ip, r4
 8000230:	f100 33ff 	add.w	r3, r0, #4294967295
 8000234:	f080 810a 	bcs.w	800044c <__udivmoddi4+0x29c>
 8000238:	42a7      	cmp	r7, r4
 800023a:	f240 8107 	bls.w	800044c <__udivmoddi4+0x29c>
 800023e:	4464      	add	r4, ip
 8000240:	3802      	subs	r0, #2
 8000242:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000246:	1be4      	subs	r4, r4, r7
 8000248:	2600      	movs	r6, #0
 800024a:	b11d      	cbz	r5, 8000254 <__udivmoddi4+0xa4>
 800024c:	40d4      	lsrs	r4, r2
 800024e:	2300      	movs	r3, #0
 8000250:	e9c5 4300 	strd	r4, r3, [r5]
 8000254:	4631      	mov	r1, r6
 8000256:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800025a:	428b      	cmp	r3, r1
 800025c:	d909      	bls.n	8000272 <__udivmoddi4+0xc2>
 800025e:	2d00      	cmp	r5, #0
 8000260:	f000 80ef 	beq.w	8000442 <__udivmoddi4+0x292>
 8000264:	2600      	movs	r6, #0
 8000266:	e9c5 0100 	strd	r0, r1, [r5]
 800026a:	4630      	mov	r0, r6
 800026c:	4631      	mov	r1, r6
 800026e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000272:	fab3 f683 	clz	r6, r3
 8000276:	2e00      	cmp	r6, #0
 8000278:	d14a      	bne.n	8000310 <__udivmoddi4+0x160>
 800027a:	428b      	cmp	r3, r1
 800027c:	d302      	bcc.n	8000284 <__udivmoddi4+0xd4>
 800027e:	4282      	cmp	r2, r0
 8000280:	f200 80f9 	bhi.w	8000476 <__udivmoddi4+0x2c6>
 8000284:	1a84      	subs	r4, r0, r2
 8000286:	eb61 0303 	sbc.w	r3, r1, r3
 800028a:	2001      	movs	r0, #1
 800028c:	469e      	mov	lr, r3
 800028e:	2d00      	cmp	r5, #0
 8000290:	d0e0      	beq.n	8000254 <__udivmoddi4+0xa4>
 8000292:	e9c5 4e00 	strd	r4, lr, [r5]
 8000296:	e7dd      	b.n	8000254 <__udivmoddi4+0xa4>
 8000298:	b902      	cbnz	r2, 800029c <__udivmoddi4+0xec>
 800029a:	deff      	udf	#255	; 0xff
 800029c:	fab2 f282 	clz	r2, r2
 80002a0:	2a00      	cmp	r2, #0
 80002a2:	f040 8092 	bne.w	80003ca <__udivmoddi4+0x21a>
 80002a6:	eba1 010c 	sub.w	r1, r1, ip
 80002aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ae:	fa1f fe8c 	uxth.w	lr, ip
 80002b2:	2601      	movs	r6, #1
 80002b4:	0c20      	lsrs	r0, r4, #16
 80002b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80002ba:	fb07 1113 	mls	r1, r7, r3, r1
 80002be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80002c2:	fb0e f003 	mul.w	r0, lr, r3
 80002c6:	4288      	cmp	r0, r1
 80002c8:	d908      	bls.n	80002dc <__udivmoddi4+0x12c>
 80002ca:	eb1c 0101 	adds.w	r1, ip, r1
 80002ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0x12a>
 80002d4:	4288      	cmp	r0, r1
 80002d6:	f200 80cb 	bhi.w	8000470 <__udivmoddi4+0x2c0>
 80002da:	4643      	mov	r3, r8
 80002dc:	1a09      	subs	r1, r1, r0
 80002de:	b2a4      	uxth	r4, r4
 80002e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80002e4:	fb07 1110 	mls	r1, r7, r0, r1
 80002e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80002ec:	fb0e fe00 	mul.w	lr, lr, r0
 80002f0:	45a6      	cmp	lr, r4
 80002f2:	d908      	bls.n	8000306 <__udivmoddi4+0x156>
 80002f4:	eb1c 0404 	adds.w	r4, ip, r4
 80002f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80002fc:	d202      	bcs.n	8000304 <__udivmoddi4+0x154>
 80002fe:	45a6      	cmp	lr, r4
 8000300:	f200 80bb 	bhi.w	800047a <__udivmoddi4+0x2ca>
 8000304:	4608      	mov	r0, r1
 8000306:	eba4 040e 	sub.w	r4, r4, lr
 800030a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800030e:	e79c      	b.n	800024a <__udivmoddi4+0x9a>
 8000310:	f1c6 0720 	rsb	r7, r6, #32
 8000314:	40b3      	lsls	r3, r6
 8000316:	fa22 fc07 	lsr.w	ip, r2, r7
 800031a:	ea4c 0c03 	orr.w	ip, ip, r3
 800031e:	fa20 f407 	lsr.w	r4, r0, r7
 8000322:	fa01 f306 	lsl.w	r3, r1, r6
 8000326:	431c      	orrs	r4, r3
 8000328:	40f9      	lsrs	r1, r7
 800032a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800032e:	fa00 f306 	lsl.w	r3, r0, r6
 8000332:	fbb1 f8f9 	udiv	r8, r1, r9
 8000336:	0c20      	lsrs	r0, r4, #16
 8000338:	fa1f fe8c 	uxth.w	lr, ip
 800033c:	fb09 1118 	mls	r1, r9, r8, r1
 8000340:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000344:	fb08 f00e 	mul.w	r0, r8, lr
 8000348:	4288      	cmp	r0, r1
 800034a:	fa02 f206 	lsl.w	r2, r2, r6
 800034e:	d90b      	bls.n	8000368 <__udivmoddi4+0x1b8>
 8000350:	eb1c 0101 	adds.w	r1, ip, r1
 8000354:	f108 3aff 	add.w	sl, r8, #4294967295
 8000358:	f080 8088 	bcs.w	800046c <__udivmoddi4+0x2bc>
 800035c:	4288      	cmp	r0, r1
 800035e:	f240 8085 	bls.w	800046c <__udivmoddi4+0x2bc>
 8000362:	f1a8 0802 	sub.w	r8, r8, #2
 8000366:	4461      	add	r1, ip
 8000368:	1a09      	subs	r1, r1, r0
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000370:	fb09 1110 	mls	r1, r9, r0, r1
 8000374:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	458e      	cmp	lr, r1
 800037e:	d908      	bls.n	8000392 <__udivmoddi4+0x1e2>
 8000380:	eb1c 0101 	adds.w	r1, ip, r1
 8000384:	f100 34ff 	add.w	r4, r0, #4294967295
 8000388:	d26c      	bcs.n	8000464 <__udivmoddi4+0x2b4>
 800038a:	458e      	cmp	lr, r1
 800038c:	d96a      	bls.n	8000464 <__udivmoddi4+0x2b4>
 800038e:	3802      	subs	r0, #2
 8000390:	4461      	add	r1, ip
 8000392:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000396:	fba0 9402 	umull	r9, r4, r0, r2
 800039a:	eba1 010e 	sub.w	r1, r1, lr
 800039e:	42a1      	cmp	r1, r4
 80003a0:	46c8      	mov	r8, r9
 80003a2:	46a6      	mov	lr, r4
 80003a4:	d356      	bcc.n	8000454 <__udivmoddi4+0x2a4>
 80003a6:	d053      	beq.n	8000450 <__udivmoddi4+0x2a0>
 80003a8:	b15d      	cbz	r5, 80003c2 <__udivmoddi4+0x212>
 80003aa:	ebb3 0208 	subs.w	r2, r3, r8
 80003ae:	eb61 010e 	sbc.w	r1, r1, lr
 80003b2:	fa01 f707 	lsl.w	r7, r1, r7
 80003b6:	fa22 f306 	lsr.w	r3, r2, r6
 80003ba:	40f1      	lsrs	r1, r6
 80003bc:	431f      	orrs	r7, r3
 80003be:	e9c5 7100 	strd	r7, r1, [r5]
 80003c2:	2600      	movs	r6, #0
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	f1c2 0320 	rsb	r3, r2, #32
 80003ce:	40d8      	lsrs	r0, r3
 80003d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80003d4:	fa21 f303 	lsr.w	r3, r1, r3
 80003d8:	4091      	lsls	r1, r2
 80003da:	4301      	orrs	r1, r0
 80003dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e0:	fa1f fe8c 	uxth.w	lr, ip
 80003e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80003e8:	fb07 3610 	mls	r6, r7, r0, r3
 80003ec:	0c0b      	lsrs	r3, r1, #16
 80003ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80003f2:	fb00 f60e 	mul.w	r6, r0, lr
 80003f6:	429e      	cmp	r6, r3
 80003f8:	fa04 f402 	lsl.w	r4, r4, r2
 80003fc:	d908      	bls.n	8000410 <__udivmoddi4+0x260>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f100 38ff 	add.w	r8, r0, #4294967295
 8000406:	d22f      	bcs.n	8000468 <__udivmoddi4+0x2b8>
 8000408:	429e      	cmp	r6, r3
 800040a:	d92d      	bls.n	8000468 <__udivmoddi4+0x2b8>
 800040c:	3802      	subs	r0, #2
 800040e:	4463      	add	r3, ip
 8000410:	1b9b      	subs	r3, r3, r6
 8000412:	b289      	uxth	r1, r1
 8000414:	fbb3 f6f7 	udiv	r6, r3, r7
 8000418:	fb07 3316 	mls	r3, r7, r6, r3
 800041c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000420:	fb06 f30e 	mul.w	r3, r6, lr
 8000424:	428b      	cmp	r3, r1
 8000426:	d908      	bls.n	800043a <__udivmoddi4+0x28a>
 8000428:	eb1c 0101 	adds.w	r1, ip, r1
 800042c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000430:	d216      	bcs.n	8000460 <__udivmoddi4+0x2b0>
 8000432:	428b      	cmp	r3, r1
 8000434:	d914      	bls.n	8000460 <__udivmoddi4+0x2b0>
 8000436:	3e02      	subs	r6, #2
 8000438:	4461      	add	r1, ip
 800043a:	1ac9      	subs	r1, r1, r3
 800043c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000440:	e738      	b.n	80002b4 <__udivmoddi4+0x104>
 8000442:	462e      	mov	r6, r5
 8000444:	4628      	mov	r0, r5
 8000446:	e705      	b.n	8000254 <__udivmoddi4+0xa4>
 8000448:	4606      	mov	r6, r0
 800044a:	e6e3      	b.n	8000214 <__udivmoddi4+0x64>
 800044c:	4618      	mov	r0, r3
 800044e:	e6f8      	b.n	8000242 <__udivmoddi4+0x92>
 8000450:	454b      	cmp	r3, r9
 8000452:	d2a9      	bcs.n	80003a8 <__udivmoddi4+0x1f8>
 8000454:	ebb9 0802 	subs.w	r8, r9, r2
 8000458:	eb64 0e0c 	sbc.w	lr, r4, ip
 800045c:	3801      	subs	r0, #1
 800045e:	e7a3      	b.n	80003a8 <__udivmoddi4+0x1f8>
 8000460:	4646      	mov	r6, r8
 8000462:	e7ea      	b.n	800043a <__udivmoddi4+0x28a>
 8000464:	4620      	mov	r0, r4
 8000466:	e794      	b.n	8000392 <__udivmoddi4+0x1e2>
 8000468:	4640      	mov	r0, r8
 800046a:	e7d1      	b.n	8000410 <__udivmoddi4+0x260>
 800046c:	46d0      	mov	r8, sl
 800046e:	e77b      	b.n	8000368 <__udivmoddi4+0x1b8>
 8000470:	3b02      	subs	r3, #2
 8000472:	4461      	add	r1, ip
 8000474:	e732      	b.n	80002dc <__udivmoddi4+0x12c>
 8000476:	4630      	mov	r0, r6
 8000478:	e709      	b.n	800028e <__udivmoddi4+0xde>
 800047a:	4464      	add	r4, ip
 800047c:	3802      	subs	r0, #2
 800047e:	e742      	b.n	8000306 <__udivmoddi4+0x156>

08000480 <__aeabi_idiv0>:
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop

08000484 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000484:	b480      	push	{r7}
 8000486:	b083      	sub	sp, #12
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800048c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000490:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000494:	f023 0218 	bic.w	r2, r3, #24
 8000498:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	4313      	orrs	r3, r2
 80004a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80004a4:	bf00      	nop
 80004a6:	370c      	adds	r7, #12
 80004a8:	46bd      	mov	sp, r7
 80004aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ae:	4770      	bx	lr

080004b0 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004b0:	b480      	push	{r7}
 80004b2:	b085      	sub	sp, #20
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80004b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004bc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	4313      	orrs	r3, r2
 80004c6:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80004c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	4013      	ands	r3, r2
 80004d2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004d4:	68fb      	ldr	r3, [r7, #12]
}
 80004d6:	bf00      	nop
 80004d8:	3714      	adds	r7, #20
 80004da:	46bd      	mov	sp, r7
 80004dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e0:	4770      	bx	lr
	...

080004e4 <main>:
void vBlueLedControllerTask (void *pvParameters);
void vRedLedControllerTask (void *pvParameters);
void vGreenLedControllerTask (void *pvParameters);

int main (void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af02      	add	r7, sp, #8

	HAL_Init ();
 80004ea:	f000 fbdf 	bl	8000cac <HAL_Init>
	SystemClock_Config ();
 80004ee:	f000 f873 	bl	80005d8 <SystemClock_Config>
	MX_GPIO_Init ();
 80004f2:	f000 f95b 	bl	80007ac <MX_GPIO_Init>
	MX_LPUART1_UART_Init ();
 80004f6:	f000 f8e5 	bl	80006c4 <MX_LPUART1_UART_Init>
	MX_USB_PCD_Init ();
 80004fa:	f000 f92f 	bl	800075c <MX_USB_PCD_Init>

	xTaskCreate (vBlueLedControllerTask,
 80004fe:	4b10      	ldr	r3, [pc, #64]	; (8000540 <main+0x5c>)
 8000500:	9301      	str	r3, [sp, #4]
 8000502:	2302      	movs	r3, #2
 8000504:	9300      	str	r3, [sp, #0]
 8000506:	2300      	movs	r3, #0
 8000508:	2264      	movs	r2, #100	; 0x64
 800050a:	490e      	ldr	r1, [pc, #56]	; (8000544 <main+0x60>)
 800050c:	480e      	ldr	r0, [pc, #56]	; (8000548 <main+0x64>)
 800050e:	f004 fcd8 	bl	8004ec2 <xTaskCreate>
	             100,
	             NULL,
	             2,
	             &blueHande);

	xTaskCreate (vRedLedControllerTask,
 8000512:	4b0e      	ldr	r3, [pc, #56]	; (800054c <main+0x68>)
 8000514:	9301      	str	r3, [sp, #4]
 8000516:	2302      	movs	r3, #2
 8000518:	9300      	str	r3, [sp, #0]
 800051a:	2300      	movs	r3, #0
 800051c:	2264      	movs	r2, #100	; 0x64
 800051e:	490c      	ldr	r1, [pc, #48]	; (8000550 <main+0x6c>)
 8000520:	480c      	ldr	r0, [pc, #48]	; (8000554 <main+0x70>)
 8000522:	f004 fcce 	bl	8004ec2 <xTaskCreate>
	             100,
	             NULL,
	             2,
	             &redHandle);

	xTaskCreate (vGreenLedControllerTask,
 8000526:	4b0c      	ldr	r3, [pc, #48]	; (8000558 <main+0x74>)
 8000528:	9301      	str	r3, [sp, #4]
 800052a:	2301      	movs	r3, #1
 800052c:	9300      	str	r3, [sp, #0]
 800052e:	2300      	movs	r3, #0
 8000530:	2264      	movs	r2, #100	; 0x64
 8000532:	490a      	ldr	r1, [pc, #40]	; (800055c <main+0x78>)
 8000534:	480a      	ldr	r0, [pc, #40]	; (8000560 <main+0x7c>)
 8000536:	f004 fcc4 	bl	8004ec2 <xTaskCreate>
	             100,
	             NULL,
	             1,
	             &greenHandle);

	vTaskStartScheduler ();
 800053a:	f004 febb 	bl	80052b4 <vTaskStartScheduler>

	while (1)
 800053e:	e7fe      	b.n	800053e <main+0x5a>
 8000540:	200000a0 	.word	0x200000a0
 8000544:	08006e50 	.word	0x08006e50
 8000548:	08000565 	.word	0x08000565
 800054c:	200000a4 	.word	0x200000a4
 8000550:	08006e64 	.word	0x08006e64
 8000554:	0800057d 	.word	0x0800057d
 8000558:	200000a8 	.word	0x200000a8
 800055c:	08006e78 	.word	0x08006e78
 8000560:	080005c1 	.word	0x080005c1

08000564 <vBlueLedControllerTask>:
	{
	}
}

void vBlueLedControllerTask (void *pvParameters)
{
 8000564:	b480      	push	{r7}
 8000566:	b083      	sub	sp, #12
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
	while (1)
	{
//		printf("Blue LED controller task running.. \n\r");
		BlueTaskProfiler++;
 800056c:	4b02      	ldr	r3, [pc, #8]	; (8000578 <vBlueLedControllerTask+0x14>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	3301      	adds	r3, #1
 8000572:	4a01      	ldr	r2, [pc, #4]	; (8000578 <vBlueLedControllerTask+0x14>)
 8000574:	6013      	str	r3, [r2, #0]
 8000576:	e7f9      	b.n	800056c <vBlueLedControllerTask+0x8>
 8000578:	20000094 	.word	0x20000094

0800057c <vRedLedControllerTask>:
	}
}

void vRedLedControllerTask (void *pvParameters)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b084      	sub	sp, #16
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
	int i = 0;
 8000584:	2300      	movs	r3, #0
 8000586:	60fb      	str	r3, [r7, #12]
	while (1)
	{
//		printf("Red LED controller task running.. \n\r");
		RedTaskProfiler++;
 8000588:	4b0a      	ldr	r3, [pc, #40]	; (80005b4 <vRedLedControllerTask+0x38>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	3301      	adds	r3, #1
 800058e:	4a09      	ldr	r2, [pc, #36]	; (80005b4 <vRedLedControllerTask+0x38>)
 8000590:	6013      	str	r3, [r2, #0]
		for (i = 0; i < 700000; i++) {}
 8000592:	2300      	movs	r3, #0
 8000594:	60fb      	str	r3, [r7, #12]
 8000596:	e002      	b.n	800059e <vRedLedControllerTask+0x22>
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	3301      	adds	r3, #1
 800059c:	60fb      	str	r3, [r7, #12]
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	4a05      	ldr	r2, [pc, #20]	; (80005b8 <vRedLedControllerTask+0x3c>)
 80005a2:	4293      	cmp	r3, r2
 80005a4:	ddf8      	ble.n	8000598 <vRedLedControllerTask+0x1c>
		vTaskPrioritySet(greenHandle, 3);
 80005a6:	4b05      	ldr	r3, [pc, #20]	; (80005bc <vRedLedControllerTask+0x40>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	2103      	movs	r1, #3
 80005ac:	4618      	mov	r0, r3
 80005ae:	f004 fde3 	bl	8005178 <vTaskPrioritySet>
		RedTaskProfiler++;
 80005b2:	e7e9      	b.n	8000588 <vRedLedControllerTask+0xc>
 80005b4:	20000098 	.word	0x20000098
 80005b8:	000aae5f 	.word	0x000aae5f
 80005bc:	200000a8 	.word	0x200000a8

080005c0 <vGreenLedControllerTask>:
	}
}

void vGreenLedControllerTask (void *pvParameters)
{
 80005c0:	b480      	push	{r7}
 80005c2:	b083      	sub	sp, #12
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
	while (1)
	{
//		printf("Green LED controller task running.. \n\r");
		GreenTaskProfiler++;
 80005c8:	4b02      	ldr	r3, [pc, #8]	; (80005d4 <vGreenLedControllerTask+0x14>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	3301      	adds	r3, #1
 80005ce:	4a01      	ldr	r2, [pc, #4]	; (80005d4 <vGreenLedControllerTask+0x14>)
 80005d0:	6013      	str	r3, [r2, #0]
 80005d2:	e7f9      	b.n	80005c8 <vGreenLedControllerTask+0x8>
 80005d4:	2000009c 	.word	0x2000009c

080005d8 <SystemClock_Config>:
	HAL_UART_Transmit (&hlpuart1, (uint8_t*) &ch, 1, 0xFFFF);
	return ch;
}

void SystemClock_Config (void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b09a      	sub	sp, #104	; 0x68
 80005dc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 80005de:	f107 0320 	add.w	r3, r7, #32
 80005e2:	2248      	movs	r2, #72	; 0x48
 80005e4:	2100      	movs	r1, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f006 fb5c 	bl	8006ca4 <memset>
		{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 80005ec:	1d3b      	adds	r3, r7, #4
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
 80005f6:	60da      	str	r2, [r3, #12]
 80005f8:	611a      	str	r2, [r3, #16]
 80005fa:	615a      	str	r2, [r3, #20]
 80005fc:	619a      	str	r2, [r3, #24]
		{ 0 };

	/** Macro to configure the PLL multiplication factor
	 */
	__HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 80005fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000602:	68db      	ldr	r3, [r3, #12]
 8000604:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000608:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800060c:	60d3      	str	r3, [r2, #12]

	/** Macro to configure the PLL clock source
	 */
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 800060e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000612:	68db      	ldr	r3, [r3, #12]
 8000614:	f023 0303 	bic.w	r3, r3, #3
 8000618:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800061c:	f043 0301 	orr.w	r3, r3, #1
 8000620:	60d3      	str	r3, [r2, #12]

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess ();
 8000622:	f000 ff99 	bl	8001558 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000626:	2000      	movs	r0, #0
 8000628:	f7ff ff2c 	bl	8000484 <LL_RCC_LSE_SetDriveCapability>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800062c:	4b24      	ldr	r3, [pc, #144]	; (80006c0 <SystemClock_Config+0xe8>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000634:	4a22      	ldr	r2, [pc, #136]	; (80006c0 <SystemClock_Config+0xe8>)
 8000636:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800063a:	6013      	str	r3, [r2, #0]
 800063c:	4b20      	ldr	r3, [pc, #128]	; (80006c0 <SystemClock_Config+0xe8>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000644:	603b      	str	r3, [r7, #0]
 8000646:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 8000648:	2327      	movs	r3, #39	; 0x27
 800064a:	623b      	str	r3, [r7, #32]
	        | RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_LSE
	        | RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800064c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000650:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000652:	2301      	movs	r3, #1
 8000654:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000656:	f44f 7380 	mov.w	r3, #256	; 0x100
 800065a:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800065c:	2301      	movs	r3, #1
 800065e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000660:	2340      	movs	r3, #64	; 0x40
 8000662:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000664:	2300      	movs	r3, #0
 8000666:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000668:	2360      	movs	r3, #96	; 0x60
 800066a:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800066c:	2300      	movs	r3, #0
 800066e:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig (&RCC_OscInitStruct) != HAL_OK)
 8000670:	f107 0320 	add.w	r3, r7, #32
 8000674:	4618      	mov	r0, r3
 8000676:	f001 fb61 	bl	8001d3c <HAL_RCC_OscConfig>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <SystemClock_Config+0xac>
	{
		Error_Handler ();
 8000680:	f000 f8fe 	bl	8000880 <Error_Handler>
	}

	/** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4 | RCC_CLOCKTYPE_HCLK2
 8000684:	236f      	movs	r3, #111	; 0x6f
 8000686:	607b      	str	r3, [r7, #4]
	        | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1
	        | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000688:	2302      	movs	r3, #2
 800068a:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800068c:	2300      	movs	r3, #0
 800068e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000690:	2300      	movs	r3, #0
 8000692:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000694:	2300      	movs	r3, #0
 8000696:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000698:	2300      	movs	r3, #0
 800069a:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 800069c:	2300      	movs	r3, #0
 800069e:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig (&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006a0:	1d3b      	adds	r3, r7, #4
 80006a2:	2101      	movs	r1, #1
 80006a4:	4618      	mov	r0, r3
 80006a6:	f001 febd 	bl	8002424 <HAL_RCC_ClockConfig>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <SystemClock_Config+0xdc>
	{
		Error_Handler ();
 80006b0:	f000 f8e6 	bl	8000880 <Error_Handler>
	}

	/** Enable MSI Auto calibration
	 */
	HAL_RCCEx_EnableMSIPLLMode ();
 80006b4:	f002 fcaa 	bl	800300c <HAL_RCCEx_EnableMSIPLLMode>
}
 80006b8:	bf00      	nop
 80006ba:	3768      	adds	r7, #104	; 0x68
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	58000400 	.word	0x58000400

080006c4 <MX_LPUART1_UART_Init>:
 * @brief LPUART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_LPUART1_UART_Init (void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
	/* USER CODE END LPUART1_Init 0 */

	/* USER CODE BEGIN LPUART1_Init 1 */

	/* USER CODE END LPUART1_Init 1 */
	hlpuart1.Instance = LPUART1;
 80006c8:	4b22      	ldr	r3, [pc, #136]	; (8000754 <MX_LPUART1_UART_Init+0x90>)
 80006ca:	4a23      	ldr	r2, [pc, #140]	; (8000758 <MX_LPUART1_UART_Init+0x94>)
 80006cc:	601a      	str	r2, [r3, #0]
	hlpuart1.Init.BaudRate = 115200;
 80006ce:	4b21      	ldr	r3, [pc, #132]	; (8000754 <MX_LPUART1_UART_Init+0x90>)
 80006d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006d4:	605a      	str	r2, [r3, #4]
	hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006d6:	4b1f      	ldr	r3, [pc, #124]	; (8000754 <MX_LPUART1_UART_Init+0x90>)
 80006d8:	2200      	movs	r2, #0
 80006da:	609a      	str	r2, [r3, #8]
	hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80006dc:	4b1d      	ldr	r3, [pc, #116]	; (8000754 <MX_LPUART1_UART_Init+0x90>)
 80006de:	2200      	movs	r2, #0
 80006e0:	60da      	str	r2, [r3, #12]
	hlpuart1.Init.Parity = UART_PARITY_NONE;
 80006e2:	4b1c      	ldr	r3, [pc, #112]	; (8000754 <MX_LPUART1_UART_Init+0x90>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	611a      	str	r2, [r3, #16]
	hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80006e8:	4b1a      	ldr	r3, [pc, #104]	; (8000754 <MX_LPUART1_UART_Init+0x90>)
 80006ea:	220c      	movs	r2, #12
 80006ec:	615a      	str	r2, [r3, #20]
	hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ee:	4b19      	ldr	r3, [pc, #100]	; (8000754 <MX_LPUART1_UART_Init+0x90>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	619a      	str	r2, [r3, #24]
	hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006f4:	4b17      	ldr	r3, [pc, #92]	; (8000754 <MX_LPUART1_UART_Init+0x90>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	621a      	str	r2, [r3, #32]
	hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80006fa:	4b16      	ldr	r3, [pc, #88]	; (8000754 <MX_LPUART1_UART_Init+0x90>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	625a      	str	r2, [r3, #36]	; 0x24
	hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000700:	4b14      	ldr	r3, [pc, #80]	; (8000754 <MX_LPUART1_UART_Init+0x90>)
 8000702:	2200      	movs	r2, #0
 8000704:	629a      	str	r2, [r3, #40]	; 0x28
	hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000706:	4b13      	ldr	r3, [pc, #76]	; (8000754 <MX_LPUART1_UART_Init+0x90>)
 8000708:	2200      	movs	r2, #0
 800070a:	665a      	str	r2, [r3, #100]	; 0x64
	if (HAL_UART_Init (&hlpuart1) != HAL_OK)
 800070c:	4811      	ldr	r0, [pc, #68]	; (8000754 <MX_LPUART1_UART_Init+0x90>)
 800070e:	f003 f82d 	bl	800376c <HAL_UART_Init>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_LPUART1_UART_Init+0x58>
	{
		Error_Handler ();
 8000718:	f000 f8b2 	bl	8000880 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold (&hlpuart1, UART_TXFIFO_THRESHOLD_1_8)
 800071c:	2100      	movs	r1, #0
 800071e:	480d      	ldr	r0, [pc, #52]	; (8000754 <MX_LPUART1_UART_Init+0x90>)
 8000720:	f003 fc88 	bl	8004034 <HAL_UARTEx_SetTxFifoThreshold>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_LPUART1_UART_Init+0x6a>
	        != HAL_OK)
	{
		Error_Handler ();
 800072a:	f000 f8a9 	bl	8000880 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold (&hlpuart1, UART_RXFIFO_THRESHOLD_1_8)
 800072e:	2100      	movs	r1, #0
 8000730:	4808      	ldr	r0, [pc, #32]	; (8000754 <MX_LPUART1_UART_Init+0x90>)
 8000732:	f003 fcbd 	bl	80040b0 <HAL_UARTEx_SetRxFifoThreshold>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <MX_LPUART1_UART_Init+0x7c>
	        != HAL_OK)
	{
		Error_Handler ();
 800073c:	f000 f8a0 	bl	8000880 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode (&hlpuart1) != HAL_OK)
 8000740:	4804      	ldr	r0, [pc, #16]	; (8000754 <MX_LPUART1_UART_Init+0x90>)
 8000742:	f003 fc3e 	bl	8003fc2 <HAL_UARTEx_DisableFifoMode>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_LPUART1_UART_Init+0x8c>
	{
		Error_Handler ();
 800074c:	f000 f898 	bl	8000880 <Error_Handler>
	}
	/* USER CODE BEGIN LPUART1_Init 2 */

	/* USER CODE END LPUART1_Init 2 */

}
 8000750:	bf00      	nop
 8000752:	bd80      	pop	{r7, pc}
 8000754:	200000ac 	.word	0x200000ac
 8000758:	40008000 	.word	0x40008000

0800075c <MX_USB_PCD_Init>:
 * @brief USB Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_PCD_Init (void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
	/* USER CODE END USB_Init 0 */

	/* USER CODE BEGIN USB_Init 1 */

	/* USER CODE END USB_Init 1 */
	hpcd_USB_FS.Instance = USB;
 8000760:	4b10      	ldr	r3, [pc, #64]	; (80007a4 <MX_USB_PCD_Init+0x48>)
 8000762:	4a11      	ldr	r2, [pc, #68]	; (80007a8 <MX_USB_PCD_Init+0x4c>)
 8000764:	601a      	str	r2, [r3, #0]
	hpcd_USB_FS.Init.dev_endpoints = 8;
 8000766:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <MX_USB_PCD_Init+0x48>)
 8000768:	2208      	movs	r2, #8
 800076a:	605a      	str	r2, [r3, #4]
	hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800076c:	4b0d      	ldr	r3, [pc, #52]	; (80007a4 <MX_USB_PCD_Init+0x48>)
 800076e:	2202      	movs	r2, #2
 8000770:	609a      	str	r2, [r3, #8]
	hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000772:	4b0c      	ldr	r3, [pc, #48]	; (80007a4 <MX_USB_PCD_Init+0x48>)
 8000774:	2202      	movs	r2, #2
 8000776:	611a      	str	r2, [r3, #16]
	hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000778:	4b0a      	ldr	r3, [pc, #40]	; (80007a4 <MX_USB_PCD_Init+0x48>)
 800077a:	2200      	movs	r2, #0
 800077c:	615a      	str	r2, [r3, #20]
	hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800077e:	4b09      	ldr	r3, [pc, #36]	; (80007a4 <MX_USB_PCD_Init+0x48>)
 8000780:	2200      	movs	r2, #0
 8000782:	619a      	str	r2, [r3, #24]
	hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000784:	4b07      	ldr	r3, [pc, #28]	; (80007a4 <MX_USB_PCD_Init+0x48>)
 8000786:	2200      	movs	r2, #0
 8000788:	61da      	str	r2, [r3, #28]
	hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800078a:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <MX_USB_PCD_Init+0x48>)
 800078c:	2200      	movs	r2, #0
 800078e:	621a      	str	r2, [r3, #32]
	if (HAL_PCD_Init (&hpcd_USB_FS) != HAL_OK)
 8000790:	4804      	ldr	r0, [pc, #16]	; (80007a4 <MX_USB_PCD_Init+0x48>)
 8000792:	f000 fd3f 	bl	8001214 <HAL_PCD_Init>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_USB_PCD_Init+0x44>
	{
		Error_Handler ();
 800079c:	f000 f870 	bl	8000880 <Error_Handler>
	}
	/* USER CODE BEGIN USB_Init 2 */

	/* USER CODE END USB_Init 2 */

}
 80007a0:	bf00      	nop
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	2000013c 	.word	0x2000013c
 80007a8:	40006800 	.word	0x40006800

080007ac <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init (void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b086      	sub	sp, #24
 80007b0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct =
 80007b2:	1d3b      	adds	r3, r7, #4
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	605a      	str	r2, [r3, #4]
 80007ba:	609a      	str	r2, [r3, #8]
 80007bc:	60da      	str	r2, [r3, #12]
 80007be:	611a      	str	r2, [r3, #16]
		{ 0 };

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80007c0:	2004      	movs	r0, #4
 80007c2:	f7ff fe75 	bl	80004b0 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80007c6:	2001      	movs	r0, #1
 80007c8:	f7ff fe72 	bl	80004b0 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80007cc:	2002      	movs	r0, #2
 80007ce:	f7ff fe6f 	bl	80004b0 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80007d2:	2008      	movs	r0, #8
 80007d4:	f7ff fe6c 	bl	80004b0 <LL_AHB2_GRP1_EnableClock>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin (GPIOB, LD2_Pin | LD3_Pin | LD1_Pin, GPIO_PIN_RESET);
 80007d8:	2200      	movs	r2, #0
 80007da:	2123      	movs	r1, #35	; 0x23
 80007dc:	481c      	ldr	r0, [pc, #112]	; (8000850 <MX_GPIO_Init+0xa4>)
 80007de:	f000 fd01 	bl	80011e4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80007e2:	2310      	movs	r3, #16
 80007e4:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007e6:	2300      	movs	r3, #0
 80007e8:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ea:	2300      	movs	r3, #0
 80007ec:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init (B1_GPIO_Port, &GPIO_InitStruct);
 80007ee:	1d3b      	adds	r3, r7, #4
 80007f0:	4619      	mov	r1, r3
 80007f2:	4818      	ldr	r0, [pc, #96]	; (8000854 <MX_GPIO_Init+0xa8>)
 80007f4:	f000 fb86 	bl	8000f04 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
	GPIO_InitStruct.Pin = LD2_Pin | LD3_Pin | LD1_Pin;
 80007f8:	2323      	movs	r3, #35	; 0x23
 80007fa:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fc:	2301      	movs	r3, #1
 80007fe:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000800:	2300      	movs	r3, #0
 8000802:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000804:	2300      	movs	r3, #0
 8000806:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init (GPIOB, &GPIO_InitStruct);
 8000808:	1d3b      	adds	r3, r7, #4
 800080a:	4619      	mov	r1, r3
 800080c:	4810      	ldr	r0, [pc, #64]	; (8000850 <MX_GPIO_Init+0xa4>)
 800080e:	f000 fb79 	bl	8000f04 <HAL_GPIO_Init>

	/*Configure GPIO pins : B2_Pin B3_Pin */
	GPIO_InitStruct.Pin = B2_Pin | B3_Pin;
 8000812:	2303      	movs	r3, #3
 8000814:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000816:	2300      	movs	r3, #0
 8000818:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081a:	2300      	movs	r3, #0
 800081c:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init (GPIOD, &GPIO_InitStruct);
 800081e:	1d3b      	adds	r3, r7, #4
 8000820:	4619      	mov	r1, r3
 8000822:	480d      	ldr	r0, [pc, #52]	; (8000858 <MX_GPIO_Init+0xac>)
 8000824:	f000 fb6e 	bl	8000f04 <HAL_GPIO_Init>

	/*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
	GPIO_InitStruct.Pin = STLINK_RX_Pin | STLINK_TX_Pin;
 8000828:	23c0      	movs	r3, #192	; 0xc0
 800082a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800082c:	2302      	movs	r3, #2
 800082e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000830:	2301      	movs	r3, #1
 8000832:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000834:	2300      	movs	r3, #0
 8000836:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000838:	2307      	movs	r3, #7
 800083a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init (GPIOB, &GPIO_InitStruct);
 800083c:	1d3b      	adds	r3, r7, #4
 800083e:	4619      	mov	r1, r3
 8000840:	4803      	ldr	r0, [pc, #12]	; (8000850 <MX_GPIO_Init+0xa4>)
 8000842:	f000 fb5f 	bl	8000f04 <HAL_GPIO_Init>

}
 8000846:	bf00      	nop
 8000848:	3718      	adds	r7, #24
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	48000400 	.word	0x48000400
 8000854:	48000800 	.word	0x48000800
 8000858:	48000c00 	.word	0x48000c00

0800085c <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1)
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a04      	ldr	r2, [pc, #16]	; (800087c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800086a:	4293      	cmp	r3, r2
 800086c:	d101      	bne.n	8000872 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		HAL_IncTick ();
 800086e:	f000 fa3d 	bl	8000cec <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000872:	bf00      	nop
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	40012c00 	.word	0x40012c00

08000880 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler (void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000884:	b672      	cpsid	i
}
 8000886:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq ();
	while (1)
 8000888:	e7fe      	b.n	8000888 <Error_Handler+0x8>

0800088a <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800088a:	b480      	push	{r7}
 800088c:	b085      	sub	sp, #20
 800088e:	af00      	add	r7, sp, #0
 8000890:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000892:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000896:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000898:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	4313      	orrs	r3, r2
 80008a0:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80008a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	4013      	ands	r3, r2
 80008ac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008ae:	68fb      	ldr	r3, [r7, #12]
}
 80008b0:	bf00      	nop
 80008b2:	3714      	adds	r7, #20
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr

080008bc <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80008bc:	b480      	push	{r7}
 80008be:	b085      	sub	sp, #20
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80008c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008c8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80008ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	4313      	orrs	r3, r2
 80008d2:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80008d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008d8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	4013      	ands	r3, r2
 80008de:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008e0:	68fb      	ldr	r3, [r7, #12]
}
 80008e2:	bf00      	nop
 80008e4:	3714      	adds	r7, #20
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr

080008ee <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM2
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 80008ee:	b480      	push	{r7}
 80008f0:	b085      	sub	sp, #20
 80008f2:	af00      	add	r7, sp, #0
 80008f4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 80008f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008fa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80008fc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	4313      	orrs	r3, r2
 8000904:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8000906:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800090a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	4013      	ands	r3, r2
 8000910:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000912:	68fb      	ldr	r3, [r7, #12]
}
 8000914:	bf00      	nop
 8000916:	3714      	adds	r7, #20
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr

08000920 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */
  PWR_PVDTypeDef sConfigPVD = {0};
 8000926:	463b      	mov	r3, r7
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	605a      	str	r2, [r3, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800092e:	2200      	movs	r2, #0
 8000930:	210f      	movs	r1, #15
 8000932:	f06f 0001 	mvn.w	r0, #1
 8000936:	f000 fabd 	bl	8000eb4 <HAL_NVIC_SetPriority>

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_0;
 800093a:	2300      	movs	r3, #0
 800093c:	603b      	str	r3, [r7, #0]
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
 800093e:	2300      	movs	r3, #0
 8000940:	607b      	str	r3, [r7, #4]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 8000942:	463b      	mov	r3, r7
 8000944:	4618      	mov	r0, r3
 8000946:	f000 fe17 	bl	8001578 <HAL_PWR_ConfigPVD>

  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 800094a:	f000 fe57 	bl	80015fc <HAL_PWR_EnablePVD>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800094e:	bf00      	nop
 8000950:	3708      	adds	r7, #8
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
	...

08000958 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b09c      	sub	sp, #112	; 0x70
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000960:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000964:	2200      	movs	r2, #0
 8000966:	601a      	str	r2, [r3, #0]
 8000968:	605a      	str	r2, [r3, #4]
 800096a:	609a      	str	r2, [r3, #8]
 800096c:	60da      	str	r2, [r3, #12]
 800096e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000970:	f107 030c 	add.w	r3, r7, #12
 8000974:	2250      	movs	r2, #80	; 0x50
 8000976:	2100      	movs	r1, #0
 8000978:	4618      	mov	r0, r3
 800097a:	f006 f993 	bl	8006ca4 <memset>
  if(huart->Instance==LPUART1)
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	4a16      	ldr	r2, [pc, #88]	; (80009dc <HAL_UART_MspInit+0x84>)
 8000984:	4293      	cmp	r3, r2
 8000986:	d124      	bne.n	80009d2 <HAL_UART_MspInit+0x7a>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000988:	2302      	movs	r3, #2
 800098a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800098c:	2300      	movs	r3, #0
 800098e:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000990:	f107 030c 	add.w	r3, r7, #12
 8000994:	4618      	mov	r0, r3
 8000996:	f002 f9c3 	bl	8002d20 <HAL_RCCEx_PeriphCLKConfig>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80009a0:	f7ff ff6e 	bl	8000880 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80009a4:	2001      	movs	r0, #1
 80009a6:	f7ff ffa2 	bl	80008ee <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009aa:	2001      	movs	r0, #1
 80009ac:	f7ff ff6d 	bl	800088a <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009b0:	230c      	movs	r3, #12
 80009b2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b4:	2302      	movs	r3, #2
 80009b6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	2300      	movs	r3, #0
 80009ba:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009bc:	2300      	movs	r3, #0
 80009be:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80009c0:	2308      	movs	r3, #8
 80009c2:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80009c8:	4619      	mov	r1, r3
 80009ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009ce:	f000 fa99 	bl	8000f04 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80009d2:	bf00      	nop
 80009d4:	3770      	adds	r7, #112	; 0x70
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	40008000 	.word	0x40008000

080009e0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b09c      	sub	sp, #112	; 0x70
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
 80009f0:	605a      	str	r2, [r3, #4]
 80009f2:	609a      	str	r2, [r3, #8]
 80009f4:	60da      	str	r2, [r3, #12]
 80009f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009f8:	f107 030c 	add.w	r3, r7, #12
 80009fc:	2250      	movs	r2, #80	; 0x50
 80009fe:	2100      	movs	r1, #0
 8000a00:	4618      	mov	r0, r3
 8000a02:	f006 f94f 	bl	8006ca4 <memset>
  if(hpcd->Instance==USB)
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	4a1f      	ldr	r2, [pc, #124]	; (8000a88 <HAL_PCD_MspInit+0xa8>)
 8000a0c:	4293      	cmp	r3, r2
 8000a0e:	d136      	bne.n	8000a7e <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000a10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a14:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8000a16:	2318      	movs	r3, #24
 8000a18:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8000a1a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a1e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8000a20:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000a24:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8000a26:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000a2a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8000a2c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000a30:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000a32:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000a36:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a38:	f107 030c 	add.w	r3, r7, #12
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f002 f96f 	bl	8002d20 <HAL_RCCEx_PeriphCLKConfig>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8000a48:	f7ff ff1a 	bl	8000880 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4c:	2001      	movs	r0, #1
 8000a4e:	f7ff ff1c 	bl	800088a <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000a52:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000a56:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a60:	2300      	movs	r3, #0
 8000a62:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000a64:	230a      	movs	r3, #10
 8000a66:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a68:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a72:	f000 fa47 	bl	8000f04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000a76:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000a7a:	f7ff ff1f 	bl	80008bc <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000a7e:	bf00      	nop
 8000a80:	3770      	adds	r7, #112	; 0x70
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	40006800 	.word	0x40006800

08000a8c <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b085      	sub	sp, #20
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000a94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a98:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000a9a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	4313      	orrs	r3, r2
 8000aa2:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000aa4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000aa8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	4013      	ands	r3, r2
 8000aae:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ab0:	68fb      	ldr	r3, [r7, #12]
}
 8000ab2:	bf00      	nop
 8000ab4:	3714      	adds	r7, #20
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr
	...

08000ac0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b08c      	sub	sp, #48	; 0x30
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000acc:	2300      	movs	r3, #0
 8000ace:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	6879      	ldr	r1, [r7, #4]
 8000ad4:	2019      	movs	r0, #25
 8000ad6:	f000 f9ed 	bl	8000eb4 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000ada:	2019      	movs	r0, #25
 8000adc:	f000 fa04 	bl	8000ee8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000ae0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000ae4:	f7ff ffd2 	bl	8000a8c <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ae8:	f107 0208 	add.w	r2, r7, #8
 8000aec:	f107 030c 	add.w	r3, r7, #12
 8000af0:	4611      	mov	r1, r2
 8000af2:	4618      	mov	r0, r3
 8000af4:	f001 fe82 	bl	80027fc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000af8:	f001 fe6a 	bl	80027d0 <HAL_RCC_GetPCLK2Freq>
 8000afc:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b00:	4a12      	ldr	r2, [pc, #72]	; (8000b4c <HAL_InitTick+0x8c>)
 8000b02:	fba2 2303 	umull	r2, r3, r2, r3
 8000b06:	0c9b      	lsrs	r3, r3, #18
 8000b08:	3b01      	subs	r3, #1
 8000b0a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000b0c:	4b10      	ldr	r3, [pc, #64]	; (8000b50 <HAL_InitTick+0x90>)
 8000b0e:	4a11      	ldr	r2, [pc, #68]	; (8000b54 <HAL_InitTick+0x94>)
 8000b10:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000b12:	4b0f      	ldr	r3, [pc, #60]	; (8000b50 <HAL_InitTick+0x90>)
 8000b14:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b18:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000b1a:	4a0d      	ldr	r2, [pc, #52]	; (8000b50 <HAL_InitTick+0x90>)
 8000b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b1e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000b20:	4b0b      	ldr	r3, [pc, #44]	; (8000b50 <HAL_InitTick+0x90>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b26:	4b0a      	ldr	r3, [pc, #40]	; (8000b50 <HAL_InitTick+0x90>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000b2c:	4808      	ldr	r0, [pc, #32]	; (8000b50 <HAL_InitTick+0x90>)
 8000b2e:	f002 fb84 	bl	800323a <HAL_TIM_Base_Init>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d104      	bne.n	8000b42 <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000b38:	4805      	ldr	r0, [pc, #20]	; (8000b50 <HAL_InitTick+0x90>)
 8000b3a:	f002 fbdf 	bl	80032fc <HAL_TIM_Base_Start_IT>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	e000      	b.n	8000b44 <HAL_InitTick+0x84>
  }

  /* Return function status */
  return HAL_ERROR;
 8000b42:	2301      	movs	r3, #1
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	3730      	adds	r7, #48	; 0x30
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	431bde83 	.word	0x431bde83
 8000b50:	20000434 	.word	0x20000434
 8000b54:	40012c00 	.word	0x40012c00

08000b58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b5c:	e7fe      	b.n	8000b5c <NMI_Handler+0x4>

08000b5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b62:	e7fe      	b.n	8000b62 <HardFault_Handler+0x4>

08000b64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b68:	e7fe      	b.n	8000b68 <MemManage_Handler+0x4>

08000b6a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b6e:	e7fe      	b.n	8000b6e <BusFault_Handler+0x4>

08000b70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b74:	e7fe      	b.n	8000b74 <UsageFault_Handler+0x4>

08000b76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b76:	b480      	push	{r7}
 8000b78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b7a:	bf00      	nop
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr

08000b84 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b88:	4802      	ldr	r0, [pc, #8]	; (8000b94 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000b8a:	f002 fc05 	bl	8003398 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	20000434 	.word	0x20000434

08000b98 <SystemInit>:
 * @param  None
 * @retval None
 */
void
SystemInit (void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8000b9c:	4b24      	ldr	r3, [pc, #144]	; (8000c30 <SystemInit+0x98>)
 8000b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ba2:	4a23      	ldr	r2, [pc, #140]	; (8000c30 <SystemInit+0x98>)
 8000ba4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ba8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000bac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000bb6:	f043 0301 	orr.w	r3, r3, #1
 8000bba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000bbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bc0:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000bc4:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t) 0xFAF6FEFBU;
 8000bc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bca:	681a      	ldr	r2, [r3, #0]
 8000bcc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000bd0:	4b18      	ldr	r3, [pc, #96]	; (8000c34 <SystemInit+0x9c>)
 8000bd2:	4013      	ands	r3, r2
 8000bd4:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t) 0xFFFFFFFAU;
 8000bd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000bde:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000be2:	f023 0305 	bic.w	r3, r3, #5
 8000be6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t) 0xFFFFFFFEU;
 8000bea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000bf2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000bf6:	f023 0301 	bic.w	r3, r3, #1
 8000bfa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000bfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c02:	4a0d      	ldr	r2, [pc, #52]	; (8000c38 <SystemInit+0xa0>)
 8000c04:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000c06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c0a:	4a0b      	ldr	r2, [pc, #44]	; (8000c38 <SystemInit+0xa0>)
 8000c0c:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000c18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c1c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000c1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c22:	2200      	movs	r2, #0
 8000c24:	619a      	str	r2, [r3, #24]
}
 8000c26:	bf00      	nop
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr
 8000c30:	e000ed00 	.word	0xe000ed00
 8000c34:	faf6fefb 	.word	0xfaf6fefb
 8000c38:	22041000 	.word	0x22041000

08000c3c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000c3c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c3e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c40:	3304      	adds	r3, #4

08000c42 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c42:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c44:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000c46:	d3f9      	bcc.n	8000c3c <CopyDataInit>
  bx lr
 8000c48:	4770      	bx	lr

08000c4a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000c4a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000c4c:	3004      	adds	r0, #4

08000c4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000c4e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000c50:	d3fb      	bcc.n	8000c4a <FillZerobss>
  bx lr
 8000c52:	4770      	bx	lr

08000c54 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c54:	480c      	ldr	r0, [pc, #48]	; (8000c88 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8000c56:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c58:	f7ff ff9e 	bl	8000b98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000c5c:	480b      	ldr	r0, [pc, #44]	; (8000c8c <LoopForever+0x8>)
 8000c5e:	490c      	ldr	r1, [pc, #48]	; (8000c90 <LoopForever+0xc>)
 8000c60:	4a0c      	ldr	r2, [pc, #48]	; (8000c94 <LoopForever+0x10>)
 8000c62:	2300      	movs	r3, #0
 8000c64:	f7ff ffed 	bl	8000c42 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000c68:	480b      	ldr	r0, [pc, #44]	; (8000c98 <LoopForever+0x14>)
 8000c6a:	490c      	ldr	r1, [pc, #48]	; (8000c9c <LoopForever+0x18>)
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	f7ff ffee 	bl	8000c4e <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000c72:	480b      	ldr	r0, [pc, #44]	; (8000ca0 <LoopForever+0x1c>)
 8000c74:	490b      	ldr	r1, [pc, #44]	; (8000ca4 <LoopForever+0x20>)
 8000c76:	2300      	movs	r3, #0
 8000c78:	f7ff ffe9 	bl	8000c4e <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c7c:	f005 ffde 	bl	8006c3c <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8000c80:	f7ff fc30 	bl	80004e4 <main>

08000c84 <LoopForever>:

LoopForever:
  b LoopForever
 8000c84:	e7fe      	b.n	8000c84 <LoopForever>
 8000c86:	0000      	.short	0x0000
  ldr   r0, =_estack
 8000c88:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000c8c:	20000004 	.word	0x20000004
 8000c90:	20000078 	.word	0x20000078
 8000c94:	08007008 	.word	0x08007008
  INIT_BSS _sbss, _ebss
 8000c98:	20000078 	.word	0x20000078
 8000c9c:	20001e98 	.word	0x20001e98
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000ca0:	20030000 	.word	0x20030000
 8000ca4:	20030000 	.word	0x20030000

08000ca8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ca8:	e7fe      	b.n	8000ca8 <ADC1_IRQHandler>
	...

08000cac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cb6:	4b0c      	ldr	r3, [pc, #48]	; (8000ce8 <HAL_Init+0x3c>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4a0b      	ldr	r2, [pc, #44]	; (8000ce8 <HAL_Init+0x3c>)
 8000cbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cc0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cc2:	2003      	movs	r0, #3
 8000cc4:	f000 f8eb 	bl	8000e9e <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cc8:	200f      	movs	r0, #15
 8000cca:	f7ff fef9 	bl	8000ac0 <HAL_InitTick>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d002      	beq.n	8000cda <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	71fb      	strb	r3, [r7, #7]
 8000cd8:	e001      	b.n	8000cde <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cda:	f7ff fe21 	bl	8000920 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cde:	79fb      	ldrb	r3, [r7, #7]
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	3708      	adds	r7, #8
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	58004000 	.word	0x58004000

08000cec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cf0:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <HAL_IncTick+0x20>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	461a      	mov	r2, r3
 8000cf6:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <HAL_IncTick+0x24>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4413      	add	r3, r2
 8000cfc:	4a04      	ldr	r2, [pc, #16]	; (8000d10 <HAL_IncTick+0x24>)
 8000cfe:	6013      	str	r3, [r2, #0]
}
 8000d00:	bf00      	nop
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	2000000c 	.word	0x2000000c
 8000d10:	20000480 	.word	0x20000480

08000d14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  return uwTick;
 8000d18:	4b03      	ldr	r3, [pc, #12]	; (8000d28 <HAL_GetTick+0x14>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	20000480 	.word	0x20000480

08000d2c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8000d30:	4b03      	ldr	r3, [pc, #12]	; (8000d40 <HAL_GetTickPrio+0x14>)
 8000d32:	681b      	ldr	r3, [r3, #0]
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	20000008 	.word	0x20000008

08000d44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b085      	sub	sp, #20
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	f003 0307 	and.w	r3, r3, #7
 8000d52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d54:	4b0c      	ldr	r3, [pc, #48]	; (8000d88 <__NVIC_SetPriorityGrouping+0x44>)
 8000d56:	68db      	ldr	r3, [r3, #12]
 8000d58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d5a:	68ba      	ldr	r2, [r7, #8]
 8000d5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d60:	4013      	ands	r3, r2
 8000d62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d76:	4a04      	ldr	r2, [pc, #16]	; (8000d88 <__NVIC_SetPriorityGrouping+0x44>)
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	60d3      	str	r3, [r2, #12]
}
 8000d7c:	bf00      	nop
 8000d7e:	3714      	adds	r7, #20
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr
 8000d88:	e000ed00 	.word	0xe000ed00

08000d8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d90:	4b04      	ldr	r3, [pc, #16]	; (8000da4 <__NVIC_GetPriorityGrouping+0x18>)
 8000d92:	68db      	ldr	r3, [r3, #12]
 8000d94:	0a1b      	lsrs	r3, r3, #8
 8000d96:	f003 0307 	and.w	r3, r3, #7
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr
 8000da4:	e000ed00 	.word	0xe000ed00

08000da8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	db0b      	blt.n	8000dd2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dba:	79fb      	ldrb	r3, [r7, #7]
 8000dbc:	f003 021f 	and.w	r2, r3, #31
 8000dc0:	4907      	ldr	r1, [pc, #28]	; (8000de0 <__NVIC_EnableIRQ+0x38>)
 8000dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc6:	095b      	lsrs	r3, r3, #5
 8000dc8:	2001      	movs	r0, #1
 8000dca:	fa00 f202 	lsl.w	r2, r0, r2
 8000dce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000dd2:	bf00      	nop
 8000dd4:	370c      	adds	r7, #12
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	e000e100 	.word	0xe000e100

08000de4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	4603      	mov	r3, r0
 8000dec:	6039      	str	r1, [r7, #0]
 8000dee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000df0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	db0a      	blt.n	8000e0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	b2da      	uxtb	r2, r3
 8000dfc:	490c      	ldr	r1, [pc, #48]	; (8000e30 <__NVIC_SetPriority+0x4c>)
 8000dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e02:	0112      	lsls	r2, r2, #4
 8000e04:	b2d2      	uxtb	r2, r2
 8000e06:	440b      	add	r3, r1
 8000e08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e0c:	e00a      	b.n	8000e24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	b2da      	uxtb	r2, r3
 8000e12:	4908      	ldr	r1, [pc, #32]	; (8000e34 <__NVIC_SetPriority+0x50>)
 8000e14:	79fb      	ldrb	r3, [r7, #7]
 8000e16:	f003 030f 	and.w	r3, r3, #15
 8000e1a:	3b04      	subs	r3, #4
 8000e1c:	0112      	lsls	r2, r2, #4
 8000e1e:	b2d2      	uxtb	r2, r2
 8000e20:	440b      	add	r3, r1
 8000e22:	761a      	strb	r2, [r3, #24]
}
 8000e24:	bf00      	nop
 8000e26:	370c      	adds	r7, #12
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr
 8000e30:	e000e100 	.word	0xe000e100
 8000e34:	e000ed00 	.word	0xe000ed00

08000e38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b089      	sub	sp, #36	; 0x24
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	60f8      	str	r0, [r7, #12]
 8000e40:	60b9      	str	r1, [r7, #8]
 8000e42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	f003 0307 	and.w	r3, r3, #7
 8000e4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e4c:	69fb      	ldr	r3, [r7, #28]
 8000e4e:	f1c3 0307 	rsb	r3, r3, #7
 8000e52:	2b04      	cmp	r3, #4
 8000e54:	bf28      	it	cs
 8000e56:	2304      	movcs	r3, #4
 8000e58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	3304      	adds	r3, #4
 8000e5e:	2b06      	cmp	r3, #6
 8000e60:	d902      	bls.n	8000e68 <NVIC_EncodePriority+0x30>
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	3b03      	subs	r3, #3
 8000e66:	e000      	b.n	8000e6a <NVIC_EncodePriority+0x32>
 8000e68:	2300      	movs	r3, #0
 8000e6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e6c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e70:	69bb      	ldr	r3, [r7, #24]
 8000e72:	fa02 f303 	lsl.w	r3, r2, r3
 8000e76:	43da      	mvns	r2, r3
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	401a      	ands	r2, r3
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e80:	f04f 31ff 	mov.w	r1, #4294967295
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	fa01 f303 	lsl.w	r3, r1, r3
 8000e8a:	43d9      	mvns	r1, r3
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e90:	4313      	orrs	r3, r2
         );
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3724      	adds	r7, #36	; 0x24
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr

08000e9e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	b082      	sub	sp, #8
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ea6:	6878      	ldr	r0, [r7, #4]
 8000ea8:	f7ff ff4c 	bl	8000d44 <__NVIC_SetPriorityGrouping>
}
 8000eac:	bf00      	nop
 8000eae:	3708      	adds	r7, #8
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b086      	sub	sp, #24
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	4603      	mov	r3, r0
 8000ebc:	60b9      	str	r1, [r7, #8]
 8000ebe:	607a      	str	r2, [r7, #4]
 8000ec0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ec2:	f7ff ff63 	bl	8000d8c <__NVIC_GetPriorityGrouping>
 8000ec6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ec8:	687a      	ldr	r2, [r7, #4]
 8000eca:	68b9      	ldr	r1, [r7, #8]
 8000ecc:	6978      	ldr	r0, [r7, #20]
 8000ece:	f7ff ffb3 	bl	8000e38 <NVIC_EncodePriority>
 8000ed2:	4602      	mov	r2, r0
 8000ed4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ed8:	4611      	mov	r1, r2
 8000eda:	4618      	mov	r0, r3
 8000edc:	f7ff ff82 	bl	8000de4 <__NVIC_SetPriority>
}
 8000ee0:	bf00      	nop
 8000ee2:	3718      	adds	r7, #24
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f7ff ff56 	bl	8000da8 <__NVIC_EnableIRQ>
}
 8000efc:	bf00      	nop
 8000efe:	3708      	adds	r7, #8
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b087      	sub	sp, #28
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f12:	e14c      	b.n	80011ae <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	2101      	movs	r1, #1
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f20:	4013      	ands	r3, r2
 8000f22:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	f000 813e 	beq.w	80011a8 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	f003 0303 	and.w	r3, r3, #3
 8000f34:	2b01      	cmp	r3, #1
 8000f36:	d005      	beq.n	8000f44 <HAL_GPIO_Init+0x40>
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	f003 0303 	and.w	r3, r3, #3
 8000f40:	2b02      	cmp	r3, #2
 8000f42:	d130      	bne.n	8000fa6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	689b      	ldr	r3, [r3, #8]
 8000f48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	2203      	movs	r2, #3
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	43db      	mvns	r3, r3
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	4013      	ands	r3, r2
 8000f5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	68da      	ldr	r2, [r3, #12]
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	005b      	lsls	r3, r3, #1
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	693a      	ldr	r2, [r7, #16]
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	693a      	ldr	r2, [r7, #16]
 8000f72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f82:	43db      	mvns	r3, r3
 8000f84:	693a      	ldr	r2, [r7, #16]
 8000f86:	4013      	ands	r3, r2
 8000f88:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	091b      	lsrs	r3, r3, #4
 8000f90:	f003 0201 	and.w	r2, r3, #1
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9a:	693a      	ldr	r2, [r7, #16]
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	693a      	ldr	r2, [r7, #16]
 8000fa4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	f003 0303 	and.w	r3, r3, #3
 8000fae:	2b03      	cmp	r3, #3
 8000fb0:	d017      	beq.n	8000fe2 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	68db      	ldr	r3, [r3, #12]
 8000fb6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	005b      	lsls	r3, r3, #1
 8000fbc:	2203      	movs	r2, #3
 8000fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc2:	43db      	mvns	r3, r3
 8000fc4:	693a      	ldr	r2, [r7, #16]
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	689a      	ldr	r2, [r3, #8]
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	005b      	lsls	r3, r3, #1
 8000fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	693a      	ldr	r2, [r7, #16]
 8000fe0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	f003 0303 	and.w	r3, r3, #3
 8000fea:	2b02      	cmp	r3, #2
 8000fec:	d123      	bne.n	8001036 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	08da      	lsrs	r2, r3, #3
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	3208      	adds	r2, #8
 8000ff6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ffa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	f003 0307 	and.w	r3, r3, #7
 8001002:	009b      	lsls	r3, r3, #2
 8001004:	220f      	movs	r2, #15
 8001006:	fa02 f303 	lsl.w	r3, r2, r3
 800100a:	43db      	mvns	r3, r3
 800100c:	693a      	ldr	r2, [r7, #16]
 800100e:	4013      	ands	r3, r2
 8001010:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	691a      	ldr	r2, [r3, #16]
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	f003 0307 	and.w	r3, r3, #7
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	fa02 f303 	lsl.w	r3, r2, r3
 8001022:	693a      	ldr	r2, [r7, #16]
 8001024:	4313      	orrs	r3, r2
 8001026:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	08da      	lsrs	r2, r3, #3
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	3208      	adds	r2, #8
 8001030:	6939      	ldr	r1, [r7, #16]
 8001032:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	2203      	movs	r2, #3
 8001042:	fa02 f303 	lsl.w	r3, r2, r3
 8001046:	43db      	mvns	r3, r3
 8001048:	693a      	ldr	r2, [r7, #16]
 800104a:	4013      	ands	r3, r2
 800104c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	f003 0203 	and.w	r2, r3, #3
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	005b      	lsls	r3, r3, #1
 800105a:	fa02 f303 	lsl.w	r3, r2, r3
 800105e:	693a      	ldr	r2, [r7, #16]
 8001060:	4313      	orrs	r3, r2
 8001062:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001072:	2b00      	cmp	r3, #0
 8001074:	f000 8098 	beq.w	80011a8 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001078:	4a54      	ldr	r2, [pc, #336]	; (80011cc <HAL_GPIO_Init+0x2c8>)
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	089b      	lsrs	r3, r3, #2
 800107e:	3302      	adds	r3, #2
 8001080:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001084:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	f003 0303 	and.w	r3, r3, #3
 800108c:	009b      	lsls	r3, r3, #2
 800108e:	220f      	movs	r2, #15
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	43db      	mvns	r3, r3
 8001096:	693a      	ldr	r2, [r7, #16]
 8001098:	4013      	ands	r3, r2
 800109a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80010a2:	d019      	beq.n	80010d8 <HAL_GPIO_Init+0x1d4>
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	4a4a      	ldr	r2, [pc, #296]	; (80011d0 <HAL_GPIO_Init+0x2cc>)
 80010a8:	4293      	cmp	r3, r2
 80010aa:	d013      	beq.n	80010d4 <HAL_GPIO_Init+0x1d0>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	4a49      	ldr	r2, [pc, #292]	; (80011d4 <HAL_GPIO_Init+0x2d0>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d00d      	beq.n	80010d0 <HAL_GPIO_Init+0x1cc>
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	4a48      	ldr	r2, [pc, #288]	; (80011d8 <HAL_GPIO_Init+0x2d4>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d007      	beq.n	80010cc <HAL_GPIO_Init+0x1c8>
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	4a47      	ldr	r2, [pc, #284]	; (80011dc <HAL_GPIO_Init+0x2d8>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d101      	bne.n	80010c8 <HAL_GPIO_Init+0x1c4>
 80010c4:	2304      	movs	r3, #4
 80010c6:	e008      	b.n	80010da <HAL_GPIO_Init+0x1d6>
 80010c8:	2307      	movs	r3, #7
 80010ca:	e006      	b.n	80010da <HAL_GPIO_Init+0x1d6>
 80010cc:	2303      	movs	r3, #3
 80010ce:	e004      	b.n	80010da <HAL_GPIO_Init+0x1d6>
 80010d0:	2302      	movs	r3, #2
 80010d2:	e002      	b.n	80010da <HAL_GPIO_Init+0x1d6>
 80010d4:	2301      	movs	r3, #1
 80010d6:	e000      	b.n	80010da <HAL_GPIO_Init+0x1d6>
 80010d8:	2300      	movs	r3, #0
 80010da:	697a      	ldr	r2, [r7, #20]
 80010dc:	f002 0203 	and.w	r2, r2, #3
 80010e0:	0092      	lsls	r2, r2, #2
 80010e2:	4093      	lsls	r3, r2
 80010e4:	693a      	ldr	r2, [r7, #16]
 80010e6:	4313      	orrs	r3, r2
 80010e8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80010ea:	4938      	ldr	r1, [pc, #224]	; (80011cc <HAL_GPIO_Init+0x2c8>)
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	089b      	lsrs	r3, r3, #2
 80010f0:	3302      	adds	r3, #2
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80010f8:	4b39      	ldr	r3, [pc, #228]	; (80011e0 <HAL_GPIO_Init+0x2dc>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	43db      	mvns	r3, r3
 8001102:	693a      	ldr	r2, [r7, #16]
 8001104:	4013      	ands	r3, r2
 8001106:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001110:	2b00      	cmp	r3, #0
 8001112:	d003      	beq.n	800111c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001114:	693a      	ldr	r2, [r7, #16]
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	4313      	orrs	r3, r2
 800111a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800111c:	4a30      	ldr	r2, [pc, #192]	; (80011e0 <HAL_GPIO_Init+0x2dc>)
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001122:	4b2f      	ldr	r3, [pc, #188]	; (80011e0 <HAL_GPIO_Init+0x2dc>)
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	43db      	mvns	r3, r3
 800112c:	693a      	ldr	r2, [r7, #16]
 800112e:	4013      	ands	r3, r2
 8001130:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800113a:	2b00      	cmp	r3, #0
 800113c:	d003      	beq.n	8001146 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	4313      	orrs	r3, r2
 8001144:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001146:	4a26      	ldr	r2, [pc, #152]	; (80011e0 <HAL_GPIO_Init+0x2dc>)
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800114c:	4b24      	ldr	r3, [pc, #144]	; (80011e0 <HAL_GPIO_Init+0x2dc>)
 800114e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001152:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	43db      	mvns	r3, r3
 8001158:	693a      	ldr	r2, [r7, #16]
 800115a:	4013      	ands	r3, r2
 800115c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001166:	2b00      	cmp	r3, #0
 8001168:	d003      	beq.n	8001172 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800116a:	693a      	ldr	r2, [r7, #16]
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	4313      	orrs	r3, r2
 8001170:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001172:	4a1b      	ldr	r2, [pc, #108]	; (80011e0 <HAL_GPIO_Init+0x2dc>)
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 800117a:	4b19      	ldr	r3, [pc, #100]	; (80011e0 <HAL_GPIO_Init+0x2dc>)
 800117c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001180:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	43db      	mvns	r3, r3
 8001186:	693a      	ldr	r2, [r7, #16]
 8001188:	4013      	ands	r3, r2
 800118a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001194:	2b00      	cmp	r3, #0
 8001196:	d003      	beq.n	80011a0 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001198:	693a      	ldr	r2, [r7, #16]
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	4313      	orrs	r3, r2
 800119e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80011a0:	4a0f      	ldr	r2, [pc, #60]	; (80011e0 <HAL_GPIO_Init+0x2dc>)
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	3301      	adds	r3, #1
 80011ac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	fa22 f303 	lsr.w	r3, r2, r3
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	f47f aeab 	bne.w	8000f14 <HAL_GPIO_Init+0x10>
  }
}
 80011be:	bf00      	nop
 80011c0:	bf00      	nop
 80011c2:	371c      	adds	r7, #28
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr
 80011cc:	40010000 	.word	0x40010000
 80011d0:	48000400 	.word	0x48000400
 80011d4:	48000800 	.word	0x48000800
 80011d8:	48000c00 	.word	0x48000c00
 80011dc:	48001000 	.word	0x48001000
 80011e0:	58000800 	.word	0x58000800

080011e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	460b      	mov	r3, r1
 80011ee:	807b      	strh	r3, [r7, #2]
 80011f0:	4613      	mov	r3, r2
 80011f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011f4:	787b      	ldrb	r3, [r7, #1]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d003      	beq.n	8001202 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011fa:	887a      	ldrh	r2, [r7, #2]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001200:	e002      	b.n	8001208 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001202:	887a      	ldrh	r2, [r7, #2]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001208:	bf00      	nop
 800120a:	370c      	adds	r7, #12
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr

08001214 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001214:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001216:	b08b      	sub	sp, #44	; 0x2c
 8001218:	af06      	add	r7, sp, #24
 800121a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d101      	bne.n	8001226 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	e0dd      	b.n	80013e2 <HAL_PCD_Init+0x1ce>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	f893 32ad 	ldrb.w	r3, [r3, #685]	; 0x2ad
 800122c:	b2db      	uxtb	r3, r3
 800122e:	2b00      	cmp	r3, #0
 8001230:	d106      	bne.n	8001240 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2200      	movs	r2, #0
 8001236:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f7ff fbd0 	bl	80009e0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2203      	movs	r2, #3
 8001244:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad

  /* DMA Not supported for FS instance, Force to Zero */
  hpcd->Init.dma_enable = 0U;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2200      	movs	r2, #0
 800124c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4618      	mov	r0, r3
 8001254:	f002 ffb8 	bl	80041c8 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001258:	2300      	movs	r3, #0
 800125a:	73fb      	strb	r3, [r7, #15]
 800125c:	e04d      	b.n	80012fa <HAL_PCD_Init+0xe6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800125e:	7bfb      	ldrb	r3, [r7, #15]
 8001260:	6879      	ldr	r1, [r7, #4]
 8001262:	1c5a      	adds	r2, r3, #1
 8001264:	4613      	mov	r3, r2
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	4413      	add	r3, r2
 800126a:	00db      	lsls	r3, r3, #3
 800126c:	440b      	add	r3, r1
 800126e:	3305      	adds	r3, #5
 8001270:	2201      	movs	r2, #1
 8001272:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001274:	7bfb      	ldrb	r3, [r7, #15]
 8001276:	6879      	ldr	r1, [r7, #4]
 8001278:	1c5a      	adds	r2, r3, #1
 800127a:	4613      	mov	r3, r2
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	4413      	add	r3, r2
 8001280:	00db      	lsls	r3, r3, #3
 8001282:	440b      	add	r3, r1
 8001284:	3304      	adds	r3, #4
 8001286:	7bfa      	ldrb	r2, [r7, #15]
 8001288:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800128a:	7bfa      	ldrb	r2, [r7, #15]
 800128c:	7bfb      	ldrb	r3, [r7, #15]
 800128e:	b298      	uxth	r0, r3
 8001290:	6879      	ldr	r1, [r7, #4]
 8001292:	4613      	mov	r3, r2
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	4413      	add	r3, r2
 8001298:	00db      	lsls	r3, r3, #3
 800129a:	440b      	add	r3, r1
 800129c:	333a      	adds	r3, #58	; 0x3a
 800129e:	4602      	mov	r2, r0
 80012a0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80012a2:	7bfb      	ldrb	r3, [r7, #15]
 80012a4:	6879      	ldr	r1, [r7, #4]
 80012a6:	1c5a      	adds	r2, r3, #1
 80012a8:	4613      	mov	r3, r2
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	4413      	add	r3, r2
 80012ae:	00db      	lsls	r3, r3, #3
 80012b0:	440b      	add	r3, r1
 80012b2:	3307      	adds	r3, #7
 80012b4:	2200      	movs	r2, #0
 80012b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80012b8:	7bfa      	ldrb	r2, [r7, #15]
 80012ba:	6879      	ldr	r1, [r7, #4]
 80012bc:	4613      	mov	r3, r2
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	4413      	add	r3, r2
 80012c2:	00db      	lsls	r3, r3, #3
 80012c4:	440b      	add	r3, r1
 80012c6:	333c      	adds	r3, #60	; 0x3c
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80012cc:	7bfa      	ldrb	r2, [r7, #15]
 80012ce:	6879      	ldr	r1, [r7, #4]
 80012d0:	4613      	mov	r3, r2
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	4413      	add	r3, r2
 80012d6:	00db      	lsls	r3, r3, #3
 80012d8:	440b      	add	r3, r1
 80012da:	3340      	adds	r3, #64	; 0x40
 80012dc:	2200      	movs	r2, #0
 80012de:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80012e0:	7bfa      	ldrb	r2, [r7, #15]
 80012e2:	6879      	ldr	r1, [r7, #4]
 80012e4:	4613      	mov	r3, r2
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	4413      	add	r3, r2
 80012ea:	00db      	lsls	r3, r3, #3
 80012ec:	440b      	add	r3, r1
 80012ee:	3344      	adds	r3, #68	; 0x44
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012f4:	7bfb      	ldrb	r3, [r7, #15]
 80012f6:	3301      	adds	r3, #1
 80012f8:	73fb      	strb	r3, [r7, #15]
 80012fa:	7bfa      	ldrb	r2, [r7, #15]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	429a      	cmp	r2, r3
 8001302:	d3ac      	bcc.n	800125e <HAL_PCD_Init+0x4a>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001304:	2300      	movs	r3, #0
 8001306:	73fb      	strb	r3, [r7, #15]
 8001308:	e044      	b.n	8001394 <HAL_PCD_Init+0x180>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800130a:	7bfa      	ldrb	r2, [r7, #15]
 800130c:	6879      	ldr	r1, [r7, #4]
 800130e:	4613      	mov	r3, r2
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	4413      	add	r3, r2
 8001314:	00db      	lsls	r3, r3, #3
 8001316:	440b      	add	r3, r1
 8001318:	f203 136d 	addw	r3, r3, #365	; 0x16d
 800131c:	2200      	movs	r2, #0
 800131e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001320:	7bfa      	ldrb	r2, [r7, #15]
 8001322:	6879      	ldr	r1, [r7, #4]
 8001324:	4613      	mov	r3, r2
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	4413      	add	r3, r2
 800132a:	00db      	lsls	r3, r3, #3
 800132c:	440b      	add	r3, r1
 800132e:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8001332:	7bfa      	ldrb	r2, [r7, #15]
 8001334:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001336:	7bfa      	ldrb	r2, [r7, #15]
 8001338:	6879      	ldr	r1, [r7, #4]
 800133a:	4613      	mov	r3, r2
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	4413      	add	r3, r2
 8001340:	00db      	lsls	r3, r3, #3
 8001342:	440b      	add	r3, r1
 8001344:	f203 136f 	addw	r3, r3, #367	; 0x16f
 8001348:	2200      	movs	r2, #0
 800134a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800134c:	7bfa      	ldrb	r2, [r7, #15]
 800134e:	6879      	ldr	r1, [r7, #4]
 8001350:	4613      	mov	r3, r2
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	4413      	add	r3, r2
 8001356:	00db      	lsls	r3, r3, #3
 8001358:	440b      	add	r3, r1
 800135a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800135e:	2200      	movs	r2, #0
 8001360:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001362:	7bfa      	ldrb	r2, [r7, #15]
 8001364:	6879      	ldr	r1, [r7, #4]
 8001366:	4613      	mov	r3, r2
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	4413      	add	r3, r2
 800136c:	00db      	lsls	r3, r3, #3
 800136e:	440b      	add	r3, r1
 8001370:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001378:	7bfa      	ldrb	r2, [r7, #15]
 800137a:	6879      	ldr	r1, [r7, #4]
 800137c:	4613      	mov	r3, r2
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	4413      	add	r3, r2
 8001382:	00db      	lsls	r3, r3, #3
 8001384:	440b      	add	r3, r1
 8001386:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800138a:	2200      	movs	r2, #0
 800138c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800138e:	7bfb      	ldrb	r3, [r7, #15]
 8001390:	3301      	adds	r3, #1
 8001392:	73fb      	strb	r3, [r7, #15]
 8001394:	7bfa      	ldrb	r2, [r7, #15]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	429a      	cmp	r2, r3
 800139c:	d3b5      	bcc.n	800130a <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	603b      	str	r3, [r7, #0]
 80013a4:	687e      	ldr	r6, [r7, #4]
 80013a6:	466d      	mov	r5, sp
 80013a8:	f106 0410 	add.w	r4, r6, #16
 80013ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013b0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80013b4:	e885 0003 	stmia.w	r5, {r0, r1}
 80013b8:	1d33      	adds	r3, r6, #4
 80013ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013bc:	6838      	ldr	r0, [r7, #0]
 80013be:	f002 ff1e 	bl	80041fe <USB_DevInit>

  hpcd->USB_Address = 0U;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2200      	movs	r2, #0
 80013c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  hpcd->State = HAL_PCD_STATE_READY;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2201      	movs	r2, #1
 80013ce:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	69db      	ldr	r3, [r3, #28]
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d102      	bne.n	80013e0 <HAL_PCD_Init+0x1cc>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f000 f805 	bl	80013ea <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80013e0:	2300      	movs	r3, #0
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3714      	adds	r7, #20
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080013ea <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80013ea:	b480      	push	{r7}
 80013ec:	b085      	sub	sp, #20
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2201      	movs	r2, #1
 80013fc:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
  hpcd->LPM_State = LPM_L0;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2200      	movs	r2, #0
 8001404:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800140e:	b29b      	uxth	r3, r3
 8001410:	f043 0301 	orr.w	r3, r3, #1
 8001414:	b29a      	uxth	r2, r3
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001422:	b29b      	uxth	r3, r3
 8001424:	f043 0302 	orr.w	r3, r3, #2
 8001428:	b29a      	uxth	r2, r3
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8001430:	2300      	movs	r3, #0
}
 8001432:	4618      	mov	r0, r3
 8001434:	3714      	adds	r7, #20
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
	...

08001440 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001448:	4b06      	ldr	r3, [pc, #24]	; (8001464 <LL_EXTI_EnableIT_0_31+0x24>)
 800144a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800144e:	4905      	ldr	r1, [pc, #20]	; (8001464 <LL_EXTI_EnableIT_0_31+0x24>)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	4313      	orrs	r3, r2
 8001454:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8001458:	bf00      	nop
 800145a:	370c      	adds	r7, #12
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr
 8001464:	58000800 	.word	0x58000800

08001468 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8001470:	4b07      	ldr	r3, [pc, #28]	; (8001490 <LL_EXTI_DisableIT_0_31+0x28>)
 8001472:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	43db      	mvns	r3, r3
 800147a:	4905      	ldr	r1, [pc, #20]	; (8001490 <LL_EXTI_DisableIT_0_31+0x28>)
 800147c:	4013      	ands	r3, r2
 800147e:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8001482:	bf00      	nop
 8001484:	370c      	adds	r7, #12
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	58000800 	.word	0x58000800

08001494 <LL_C2_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->C2IMR1, ExtiLine);
 800149c:	4b07      	ldr	r3, [pc, #28]	; (80014bc <LL_C2_EXTI_DisableIT_0_31+0x28>)
 800149e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	43db      	mvns	r3, r3
 80014a6:	4905      	ldr	r1, [pc, #20]	; (80014bc <LL_C2_EXTI_DisableIT_0_31+0x28>)
 80014a8:	4013      	ands	r3, r2
 80014aa:	f8c1 30c0 	str.w	r3, [r1, #192]	; 0xc0
}
 80014ae:	bf00      	nop
 80014b0:	370c      	adds	r7, #12
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	58000800 	.word	0x58000800

080014c0 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80014c8:	4b05      	ldr	r3, [pc, #20]	; (80014e0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	4904      	ldr	r1, [pc, #16]	; (80014e0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4313      	orrs	r3, r2
 80014d2:	600b      	str	r3, [r1, #0]

}
 80014d4:	bf00      	nop
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr
 80014e0:	58000800 	.word	0x58000800

080014e4 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80014ec:	4b06      	ldr	r3, [pc, #24]	; (8001508 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	43db      	mvns	r3, r3
 80014f4:	4904      	ldr	r1, [pc, #16]	; (8001508 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80014f6:	4013      	ands	r3, r2
 80014f8:	600b      	str	r3, [r1, #0]

}
 80014fa:	bf00      	nop
 80014fc:	370c      	adds	r7, #12
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	58000800 	.word	0x58000800

0800150c <LL_EXTI_EnableFallingTrig_0_31>:
  *         (*) value not defined in all devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8001514:	4b05      	ldr	r3, [pc, #20]	; (800152c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8001516:	685a      	ldr	r2, [r3, #4]
 8001518:	4904      	ldr	r1, [pc, #16]	; (800152c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4313      	orrs	r3, r2
 800151e:	604b      	str	r3, [r1, #4]
}
 8001520:	bf00      	nop
 8001522:	370c      	adds	r7, #12
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr
 800152c:	58000800 	.word	0x58000800

08001530 <LL_EXTI_DisableFallingTrig_0_31>:
  *         (*) value not defined in all devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8001538:	4b06      	ldr	r3, [pc, #24]	; (8001554 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800153a:	685a      	ldr	r2, [r3, #4]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	43db      	mvns	r3, r3
 8001540:	4904      	ldr	r1, [pc, #16]	; (8001554 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8001542:	4013      	ands	r3, r2
 8001544:	604b      	str	r3, [r1, #4]
}
 8001546:	bf00      	nop
 8001548:	370c      	adds	r7, #12
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	58000800 	.word	0x58000800

08001558 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800155c:	4b05      	ldr	r3, [pc, #20]	; (8001574 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a04      	ldr	r2, [pc, #16]	; (8001574 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001562:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001566:	6013      	str	r3, [r2, #0]
}
 8001568:	bf00      	nop
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	58000400 	.word	0x58000400

08001578 <HAL_PWR_ConfigPVD>:
  *         (and optionally, to select CPU2 only (not both CPU1 and CPU2):
  *         "__HAL_PWR_PVD_EXTI_DISABLE_IT()").
  * @retval None
  */
HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS bits according to PVDLevel value */
  MODIFY_REG(PWR->CR2, PWR_CR2_PLS, sConfigPVD->PVDLevel);
 8001580:	4b1d      	ldr	r3, [pc, #116]	; (80015f8 <HAL_PWR_ConfigPVD+0x80>)
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f023 020e 	bic.w	r2, r3, #14
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	491a      	ldr	r1, [pc, #104]	; (80015f8 <HAL_PWR_ConfigPVD+0x80>)
 800158e:	4313      	orrs	r3, r2
 8001590:	604b      	str	r3, [r1, #4]
  
  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  
  /* Note: On STM32WB series, power PVD event is not available on AIEC lines   */
  /*       (only interruption is available through AIEC line 16).             */
  __HAL_PWR_PVD_EXTI_DISABLE_IT();      /*CPU1*/
 8001592:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001596:	f7ff ff67 	bl	8001468 <LL_EXTI_DisableIT_0_31>
  __HAL_PWR_PVD_EXTIC2_DISABLE_IT();    /*CPU2*/
 800159a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800159e:	f7ff ff79 	bl	8001494 <LL_C2_EXTI_DisableIT_0_31>
    
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 80015a2:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80015a6:	f7ff ffc3 	bl	8001530 <LL_EXTI_DisableFallingTrig_0_31>
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE(); 
 80015aa:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80015ae:	f7ff ff99 	bl	80014e4 <LL_EXTI_DisableRisingTrig_0_31>

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d003      	beq.n	80015c6 <HAL_PWR_ConfigPVD+0x4e>
  {
    /* Set CPU1 as wakeup target */
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 80015be:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80015c2:	f7ff ff3d 	bl	8001440 <LL_EXTI_EnableIT_0_31>
  }
  
  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	f003 0301 	and.w	r3, r3, #1
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d003      	beq.n	80015da <HAL_PWR_ConfigPVD+0x62>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 80015d2:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80015d6:	f7ff ff73 	bl	80014c0 <LL_EXTI_EnableRisingTrig_0_31>
  }
  
  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f003 0302 	and.w	r3, r3, #2
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d003      	beq.n	80015ee <HAL_PWR_ConfigPVD+0x76>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 80015e6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80015ea:	f7ff ff8f 	bl	800150c <LL_EXTI_EnableFallingTrig_0_31>
  }

  return HAL_OK;
 80015ee:	2300      	movs	r3, #0
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3708      	adds	r7, #8
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	58000400 	.word	0x58000400

080015fc <HAL_PWR_EnablePVD>:
/**
  * @brief Enables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  /* Enable the power voltage detector */
  SET_BIT(PWR->CR2, PWR_CR2_PVDE);
 8001600:	4b05      	ldr	r3, [pc, #20]	; (8001618 <HAL_PWR_EnablePVD+0x1c>)
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	4a04      	ldr	r2, [pc, #16]	; (8001618 <HAL_PWR_EnablePVD+0x1c>)
 8001606:	f043 0301 	orr.w	r3, r3, #1
 800160a:	6053      	str	r3, [r2, #4]
}
 800160c:	bf00      	nop
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	58000400 	.word	0x58000400

0800161c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001620:	4b04      	ldr	r3, [pc, #16]	; (8001634 <HAL_PWREx_GetVoltageRange+0x18>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001628:	4618      	mov	r0, r3
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	58000400 	.word	0x58000400

08001638 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800163c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001646:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800164a:	d101      	bne.n	8001650 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800164c:	2301      	movs	r3, #1
 800164e:	e000      	b.n	8001652 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001650:	2300      	movs	r3, #0
}
 8001652:	4618      	mov	r0, r3
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr

0800165c <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001660:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800166a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800166e:	6013      	str	r3, [r2, #0]
}
 8001670:	bf00      	nop
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr

0800167a <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 800167a:	b480      	push	{r7}
 800167c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800167e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001688:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800168c:	6013      	str	r3, [r2, #0]
}
 800168e:	bf00      	nop
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr

08001698 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800169c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80016aa:	d101      	bne.n	80016b0 <LL_RCC_HSE_IsReady+0x18>
 80016ac:	2301      	movs	r3, #1
 80016ae:	e000      	b.n	80016b2 <LL_RCC_HSE_IsReady+0x1a>
 80016b0:	2300      	movs	r3, #0
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr

080016bc <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80016c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016ce:	6013      	str	r3, [r2, #0]
}
 80016d0:	bf00      	nop
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr

080016da <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 80016da:	b480      	push	{r7}
 80016dc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80016de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80016ec:	6013      	str	r3, [r2, #0]
}
 80016ee:	bf00      	nop
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr

080016f8 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80016fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001706:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800170a:	d101      	bne.n	8001710 <LL_RCC_HSI_IsReady+0x18>
 800170c:	2301      	movs	r3, #1
 800170e:	e000      	b.n	8001712 <LL_RCC_HSI_IsReady+0x1a>
 8001710:	2300      	movs	r3, #0
}
 8001712:	4618      	mov	r0, r3
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001724:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	061b      	lsls	r3, r3, #24
 8001732:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001736:	4313      	orrs	r3, r2
 8001738:	604b      	str	r3, [r1, #4]
}
 800173a:	bf00      	nop
 800173c:	370c      	adds	r7, #12
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr

08001746 <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8001746:	b480      	push	{r7}
 8001748:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800174a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800174e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001752:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001756:	f043 0301 	orr.w	r3, r3, #1
 800175a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800175e:	bf00      	nop
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800176c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001770:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001774:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001778:	f023 0301 	bic.w	r3, r3, #1
 800177c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001780:	bf00      	nop
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr

0800178a <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 800178a:	b480      	push	{r7}
 800178c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800178e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001792:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001796:	f003 0302 	and.w	r3, r3, #2
 800179a:	2b02      	cmp	r3, #2
 800179c:	d101      	bne.n	80017a2 <LL_RCC_HSI48_IsReady+0x18>
 800179e:	2301      	movs	r3, #1
 80017a0:	e000      	b.n	80017a4 <LL_RCC_HSI48_IsReady+0x1a>
 80017a2:	2300      	movs	r3, #0
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr

080017ae <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 80017ae:	b480      	push	{r7}
 80017b0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80017b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017be:	f043 0301 	orr.w	r3, r3, #1
 80017c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80017c6:	bf00      	nop
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80017d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017e0:	f023 0301 	bic.w	r3, r3, #1
 80017e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80017e8:	bf00      	nop
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr

080017f2 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 80017f2:	b480      	push	{r7}
 80017f4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80017f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001802:	f043 0304 	orr.w	r3, r3, #4
 8001806:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800180a:	bf00      	nop
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr

08001814 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001818:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800181c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001820:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001824:	f023 0304 	bic.w	r3, r3, #4
 8001828:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800182c:	bf00      	nop
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr

08001836 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001836:	b480      	push	{r7}
 8001838:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800183a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800183e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001842:	f003 0302 	and.w	r3, r3, #2
 8001846:	2b02      	cmp	r3, #2
 8001848:	d101      	bne.n	800184e <LL_RCC_LSE_IsReady+0x18>
 800184a:	2301      	movs	r3, #1
 800184c:	e000      	b.n	8001850 <LL_RCC_LSE_IsReady+0x1a>
 800184e:	2300      	movs	r3, #0
}
 8001850:	4618      	mov	r0, r3
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr

0800185a <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 800185a:	b480      	push	{r7}
 800185c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800185e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001862:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001866:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800186a:	f043 0301 	orr.w	r3, r3, #1
 800186e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001872:	bf00      	nop
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001880:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001884:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001888:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800188c:	f023 0301 	bic.w	r3, r3, #1
 8001890:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001894:	bf00      	nop
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr

0800189e <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 800189e:	b480      	push	{r7}
 80018a0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80018a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018aa:	f003 0302 	and.w	r3, r3, #2
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	d101      	bne.n	80018b6 <LL_RCC_LSI1_IsReady+0x18>
 80018b2:	2301      	movs	r3, #1
 80018b4:	e000      	b.n	80018b8 <LL_RCC_LSI1_IsReady+0x1a>
 80018b6:	2300      	movs	r3, #0
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr

080018c2 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 80018c2:	b480      	push	{r7}
 80018c4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80018c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018d2:	f043 0304 	orr.w	r3, r3, #4
 80018d6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80018da:	bf00      	nop
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr

080018e4 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80018e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018f4:	f023 0304 	bic.w	r3, r3, #4
 80018f8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80018fc:	bf00      	nop
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr

08001906 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8001906:	b480      	push	{r7}
 8001908:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800190a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800190e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001912:	f003 0308 	and.w	r3, r3, #8
 8001916:	2b08      	cmp	r3, #8
 8001918:	d101      	bne.n	800191e <LL_RCC_LSI2_IsReady+0x18>
 800191a:	2301      	movs	r3, #1
 800191c:	e000      	b.n	8001920 <LL_RCC_LSI2_IsReady+0x1a>
 800191e:	2300      	movs	r3, #0
}
 8001920:	4618      	mov	r0, r3
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr

0800192a <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 800192a:	b480      	push	{r7}
 800192c:	b083      	sub	sp, #12
 800192e:	af00      	add	r7, sp, #0
 8001930:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8001932:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001936:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800193a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	021b      	lsls	r3, r3, #8
 8001942:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001946:	4313      	orrs	r3, r2
 8001948:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800194c:	bf00      	nop
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800195c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001966:	f043 0301 	orr.w	r3, r3, #1
 800196a:	6013      	str	r3, [r2, #0]
}
 800196c:	bf00      	nop
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr

08001976 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001976:	b480      	push	{r7}
 8001978:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800197a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001984:	f023 0301 	bic.w	r3, r3, #1
 8001988:	6013      	str	r3, [r2, #0]
}
 800198a:	bf00      	nop
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr

08001994 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001998:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0302 	and.w	r3, r3, #2
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d101      	bne.n	80019aa <LL_RCC_MSI_IsReady+0x16>
 80019a6:	2301      	movs	r3, #1
 80019a8:	e000      	b.n	80019ac <LL_RCC_MSI_IsReady+0x18>
 80019aa:	2300      	movs	r3, #0
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr

080019b6 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 80019b6:	b480      	push	{r7}
 80019b8:	b083      	sub	sp, #12
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80019be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	4313      	orrs	r3, r2
 80019d0:	600b      	str	r3, [r1, #0]
}
 80019d2:	bf00      	nop
 80019d4:	370c      	adds	r7, #12
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr

080019de <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80019de:	b480      	push	{r7}
 80019e0:	b083      	sub	sp, #12
 80019e2:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80019e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019ee:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2bb0      	cmp	r3, #176	; 0xb0
 80019f4:	d901      	bls.n	80019fa <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 80019f6:	23b0      	movs	r3, #176	; 0xb0
 80019f8:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 80019fa:	687b      	ldr	r3, [r7, #4]
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	370c      	adds	r7, #12
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001a10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	021b      	lsls	r3, r3, #8
 8001a1e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a22:	4313      	orrs	r3, r2
 8001a24:	604b      	str	r3, [r1, #4]
}
 8001a26:	bf00      	nop
 8001a28:	370c      	adds	r7, #12
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr

08001a32 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001a32:	b480      	push	{r7}
 8001a34:	b083      	sub	sp, #12
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001a3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	f023 0203 	bic.w	r2, r3, #3
 8001a44:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	608b      	str	r3, [r1, #8]
}
 8001a4e:	bf00      	nop
 8001a50:	370c      	adds	r7, #12
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr

08001a5a <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001a5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	f003 030c 	and.w	r3, r3, #12
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr

08001a72 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001a72:	b480      	push	{r7}
 8001a74:	b083      	sub	sp, #12
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001a7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a84:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	608b      	str	r3, [r1, #8]
}
 8001a8e:	bf00      	nop
 8001a90:	370c      	adds	r7, #12
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr

08001a9a <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	b083      	sub	sp, #12
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001aa2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001aa6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001aaa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001aae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001aba:	bf00      	nop
 8001abc:	370c      	adds	r7, #12
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr

08001ac6 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8001ac6:	b480      	push	{r7}
 8001ac8:	b083      	sub	sp, #12
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001ace:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ad2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001ad6:	f023 020f 	bic.w	r2, r3, #15
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	091b      	lsrs	r3, r3, #4
 8001ade:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001ae8:	bf00      	nop
 8001aea:	370c      	adds	r7, #12
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr

08001af4 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001afc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	608b      	str	r3, [r1, #8]
}
 8001b10:	bf00      	nop
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr

08001b1c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001b24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b2e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4313      	orrs	r3, r2
 8001b36:	608b      	str	r3, [r1, #8]
}
 8001b38:	bf00      	nop
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001b48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr

08001b5c <LL_C2_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_C2_RCC_GetAHBPrescaler(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 8001b60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b64:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001b68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr

08001b76 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8001b76:	b480      	push	{r7}
 8001b78:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001b7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b7e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001b82:	011b      	lsls	r3, r3, #4
 8001b84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr

08001b92 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001b92:	b480      	push	{r7}
 8001b94:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001b96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr

08001baa <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001baa:	b480      	push	{r7}
 8001bac:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001bae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr

08001bc2 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001bc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bd0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bd4:	6013      	str	r3, [r2, #0]
}
 8001bd6:	bf00      	nop
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr

08001be0 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001be4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001bf2:	6013      	str	r3, [r2, #0]
}
 8001bf4:	bf00      	nop
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr

08001bfe <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001bfe:	b480      	push	{r7}
 8001c00:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001c02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c0c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001c10:	d101      	bne.n	8001c16 <LL_RCC_PLL_IsReady+0x18>
 8001c12:	2301      	movs	r3, #1
 8001c14:	e000      	b.n	8001c18 <LL_RCC_PLL_IsReady+0x1a>
 8001c16:	2300      	movs	r3, #0
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr

08001c22 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001c22:	b480      	push	{r7}
 8001c24:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001c26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	0a1b      	lsrs	r3, r3, #8
 8001c2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr

08001c3c <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001c40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c44:	68db      	ldr	r3, [r3, #12]
 8001c46:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr

08001c54 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001c58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c5c:	68db      	ldr	r3, [r3, #12]
 8001c5e:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001c70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c74:	68db      	ldr	r3, [r3, #12]
 8001c76:	f003 0303 	and.w	r3, r3, #3
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr

08001c84 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001c88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c96:	d101      	bne.n	8001c9c <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e000      	b.n	8001c9e <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001c9c:	2300      	movs	r3, #0
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr

08001ca8 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001cac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cb0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001cb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cb8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001cbc:	d101      	bne.n	8001cc2 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e000      	b.n	8001cc4 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8001cc2:	2300      	movs	r3, #0
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr

08001cce <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001cd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cd6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001cda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ce2:	d101      	bne.n	8001ce8 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e000      	b.n	8001cea <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001ce8:	2300      	movs	r3, #0
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr

08001cf4 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001cf8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d02:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001d06:	d101      	bne.n	8001d0c <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e000      	b.n	8001d0e <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001d0c:	2300      	movs	r3, #0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr

08001d18 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001d1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d26:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001d2a:	d101      	bne.n	8001d30 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e000      	b.n	8001d32 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001d30:	2300      	movs	r3, #0
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d3c:	b590      	push	{r4, r7, lr}
 8001d3e:	b08d      	sub	sp, #52	; 0x34
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d101      	bne.n	8001d4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e363      	b.n	8002416 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0320 	and.w	r3, r3, #32
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	f000 808d 	beq.w	8001e76 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d5c:	f7ff fe7d 	bl	8001a5a <LL_RCC_GetSysClkSource>
 8001d60:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d62:	f7ff ff83 	bl	8001c6c <LL_RCC_PLL_GetMainSource>
 8001d66:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d005      	beq.n	8001d7a <HAL_RCC_OscConfig+0x3e>
 8001d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d70:	2b0c      	cmp	r3, #12
 8001d72:	d147      	bne.n	8001e04 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8001d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d144      	bne.n	8001e04 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	69db      	ldr	r3, [r3, #28]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d101      	bne.n	8001d86 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e347      	b.n	8002416 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8001d8a:	f7ff fe28 	bl	80019de <LL_RCC_MSI_GetRange>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	429c      	cmp	r4, r3
 8001d92:	d914      	bls.n	8001dbe <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f000 fd61 	bl	8002860 <RCC_SetFlashLatencyFromMSIRange>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d001      	beq.n	8001da8 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e336      	b.n	8002416 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dac:	4618      	mov	r0, r3
 8001dae:	f7ff fe02 	bl	80019b6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6a1b      	ldr	r3, [r3, #32]
 8001db6:	4618      	mov	r0, r3
 8001db8:	f7ff fe26 	bl	8001a08 <LL_RCC_MSI_SetCalibTrimming>
 8001dbc:	e013      	b.n	8001de6 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7ff fdf7 	bl	80019b6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6a1b      	ldr	r3, [r3, #32]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7ff fe1b 	bl	8001a08 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f000 fd42 	bl	8002860 <RCC_SetFlashLatencyFromMSIRange>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e317      	b.n	8002416 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001de6:	f000 fcc9 	bl	800277c <HAL_RCC_GetHCLKFreq>
 8001dea:	4603      	mov	r3, r0
 8001dec:	4aa4      	ldr	r2, [pc, #656]	; (8002080 <HAL_RCC_OscConfig+0x344>)
 8001dee:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001df0:	4ba4      	ldr	r3, [pc, #656]	; (8002084 <HAL_RCC_OscConfig+0x348>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7fe fe63 	bl	8000ac0 <HAL_InitTick>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d039      	beq.n	8001e74 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e308      	b.n	8002416 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	69db      	ldr	r3, [r3, #28]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d01e      	beq.n	8001e4a <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001e0c:	f7ff fda4 	bl	8001958 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e10:	f7fe ff80 	bl	8000d14 <HAL_GetTick>
 8001e14:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001e16:	e008      	b.n	8001e2a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e18:	f7fe ff7c 	bl	8000d14 <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	2b02      	cmp	r3, #2
 8001e24:	d901      	bls.n	8001e2a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e2f5      	b.n	8002416 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8001e2a:	f7ff fdb3 	bl	8001994 <LL_RCC_MSI_IsReady>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d0f1      	beq.n	8001e18 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7ff fdbc 	bl	80019b6 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6a1b      	ldr	r3, [r3, #32]
 8001e42:	4618      	mov	r0, r3
 8001e44:	f7ff fde0 	bl	8001a08 <LL_RCC_MSI_SetCalibTrimming>
 8001e48:	e015      	b.n	8001e76 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001e4a:	f7ff fd94 	bl	8001976 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e4e:	f7fe ff61 	bl	8000d14 <HAL_GetTick>
 8001e52:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8001e54:	e008      	b.n	8001e68 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e56:	f7fe ff5d 	bl	8000d14 <HAL_GetTick>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d901      	bls.n	8001e68 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8001e64:	2303      	movs	r3, #3
 8001e66:	e2d6      	b.n	8002416 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8001e68:	f7ff fd94 	bl	8001994 <LL_RCC_MSI_IsReady>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d1f1      	bne.n	8001e56 <HAL_RCC_OscConfig+0x11a>
 8001e72:	e000      	b.n	8001e76 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001e74:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0301 	and.w	r3, r3, #1
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d047      	beq.n	8001f12 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e82:	f7ff fdea 	bl	8001a5a <LL_RCC_GetSysClkSource>
 8001e86:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e88:	f7ff fef0 	bl	8001c6c <LL_RCC_PLL_GetMainSource>
 8001e8c:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001e8e:	6a3b      	ldr	r3, [r7, #32]
 8001e90:	2b08      	cmp	r3, #8
 8001e92:	d005      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x164>
 8001e94:	6a3b      	ldr	r3, [r7, #32]
 8001e96:	2b0c      	cmp	r3, #12
 8001e98:	d108      	bne.n	8001eac <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	2b03      	cmp	r3, #3
 8001e9e:	d105      	bne.n	8001eac <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d134      	bne.n	8001f12 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e2b4      	b.n	8002416 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eb4:	d102      	bne.n	8001ebc <HAL_RCC_OscConfig+0x180>
 8001eb6:	f7ff fbd1 	bl	800165c <LL_RCC_HSE_Enable>
 8001eba:	e001      	b.n	8001ec0 <HAL_RCC_OscConfig+0x184>
 8001ebc:	f7ff fbdd 	bl	800167a <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d012      	beq.n	8001eee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec8:	f7fe ff24 	bl	8000d14 <HAL_GetTick>
 8001ecc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8001ece:	e008      	b.n	8001ee2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ed0:	f7fe ff20 	bl	8000d14 <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	2b64      	cmp	r3, #100	; 0x64
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e299      	b.n	8002416 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8001ee2:	f7ff fbd9 	bl	8001698 <LL_RCC_HSE_IsReady>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d0f1      	beq.n	8001ed0 <HAL_RCC_OscConfig+0x194>
 8001eec:	e011      	b.n	8001f12 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eee:	f7fe ff11 	bl	8000d14 <HAL_GetTick>
 8001ef2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8001ef4:	e008      	b.n	8001f08 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ef6:	f7fe ff0d 	bl	8000d14 <HAL_GetTick>
 8001efa:	4602      	mov	r2, r0
 8001efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efe:	1ad3      	subs	r3, r2, r3
 8001f00:	2b64      	cmp	r3, #100	; 0x64
 8001f02:	d901      	bls.n	8001f08 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001f04:	2303      	movs	r3, #3
 8001f06:	e286      	b.n	8002416 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8001f08:	f7ff fbc6 	bl	8001698 <LL_RCC_HSE_IsReady>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d1f1      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0302 	and.w	r3, r3, #2
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d04c      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f1e:	f7ff fd9c 	bl	8001a5a <LL_RCC_GetSysClkSource>
 8001f22:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f24:	f7ff fea2 	bl	8001c6c <LL_RCC_PLL_GetMainSource>
 8001f28:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001f2a:	69bb      	ldr	r3, [r7, #24]
 8001f2c:	2b04      	cmp	r3, #4
 8001f2e:	d005      	beq.n	8001f3c <HAL_RCC_OscConfig+0x200>
 8001f30:	69bb      	ldr	r3, [r7, #24]
 8001f32:	2b0c      	cmp	r3, #12
 8001f34:	d10e      	bne.n	8001f54 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	d10b      	bne.n	8001f54 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d101      	bne.n	8001f48 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e266      	b.n	8002416 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	691b      	ldr	r3, [r3, #16]
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7ff fbe5 	bl	800171c <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001f52:	e031      	b.n	8001fb8 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d019      	beq.n	8001f90 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f5c:	f7ff fbae 	bl	80016bc <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f60:	f7fe fed8 	bl	8000d14 <HAL_GetTick>
 8001f64:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8001f66:	e008      	b.n	8001f7a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f68:	f7fe fed4 	bl	8000d14 <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d901      	bls.n	8001f7a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e24d      	b.n	8002416 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8001f7a:	f7ff fbbd 	bl	80016f8 <LL_RCC_HSI_IsReady>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d0f1      	beq.n	8001f68 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	691b      	ldr	r3, [r3, #16]
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7ff fbc7 	bl	800171c <LL_RCC_HSI_SetCalibTrimming>
 8001f8e:	e013      	b.n	8001fb8 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f90:	f7ff fba3 	bl	80016da <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f94:	f7fe febe 	bl	8000d14 <HAL_GetTick>
 8001f98:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8001f9a:	e008      	b.n	8001fae <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f9c:	f7fe feba 	bl	8000d14 <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d901      	bls.n	8001fae <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e233      	b.n	8002416 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8001fae:	f7ff fba3 	bl	80016f8 <LL_RCC_HSI_IsReady>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d1f1      	bne.n	8001f9c <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0308 	and.w	r3, r3, #8
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d106      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	f000 80a3 	beq.w	8002118 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	695b      	ldr	r3, [r3, #20]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d076      	beq.n	80020c8 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0310 	and.w	r3, r3, #16
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d046      	beq.n	8002074 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8001fe6:	f7ff fc5a 	bl	800189e <LL_RCC_LSI1_IsReady>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d113      	bne.n	8002018 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8001ff0:	f7ff fc33 	bl	800185a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ff4:	f7fe fe8e 	bl	8000d14 <HAL_GetTick>
 8001ff8:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8001ffa:	e008      	b.n	800200e <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001ffc:	f7fe fe8a 	bl	8000d14 <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	2b02      	cmp	r3, #2
 8002008:	d901      	bls.n	800200e <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e203      	b.n	8002416 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800200e:	f7ff fc46 	bl	800189e <LL_RCC_LSI1_IsReady>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d0f1      	beq.n	8001ffc <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8002018:	f7ff fc53 	bl	80018c2 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800201c:	f7fe fe7a 	bl	8000d14 <HAL_GetTick>
 8002020:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002022:	e008      	b.n	8002036 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002024:	f7fe fe76 	bl	8000d14 <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	2b03      	cmp	r3, #3
 8002030:	d901      	bls.n	8002036 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e1ef      	b.n	8002416 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002036:	f7ff fc66 	bl	8001906 <LL_RCC_LSI2_IsReady>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d0f1      	beq.n	8002024 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	699b      	ldr	r3, [r3, #24]
 8002044:	4618      	mov	r0, r3
 8002046:	f7ff fc70 	bl	800192a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800204a:	f7ff fc17 	bl	800187c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800204e:	f7fe fe61 	bl	8000d14 <HAL_GetTick>
 8002052:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002054:	e008      	b.n	8002068 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002056:	f7fe fe5d 	bl	8000d14 <HAL_GetTick>
 800205a:	4602      	mov	r2, r0
 800205c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	2b02      	cmp	r3, #2
 8002062:	d901      	bls.n	8002068 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8002064:	2303      	movs	r3, #3
 8002066:	e1d6      	b.n	8002416 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002068:	f7ff fc19 	bl	800189e <LL_RCC_LSI1_IsReady>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d1f1      	bne.n	8002056 <HAL_RCC_OscConfig+0x31a>
 8002072:	e051      	b.n	8002118 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8002074:	f7ff fbf1 	bl	800185a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002078:	f7fe fe4c 	bl	8000d14 <HAL_GetTick>
 800207c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800207e:	e00c      	b.n	800209a <HAL_RCC_OscConfig+0x35e>
 8002080:	20000004 	.word	0x20000004
 8002084:	20000008 	.word	0x20000008
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002088:	f7fe fe44 	bl	8000d14 <HAL_GetTick>
 800208c:	4602      	mov	r2, r0
 800208e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	2b02      	cmp	r3, #2
 8002094:	d901      	bls.n	800209a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002096:	2303      	movs	r3, #3
 8002098:	e1bd      	b.n	8002416 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800209a:	f7ff fc00 	bl	800189e <LL_RCC_LSI1_IsReady>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d0f1      	beq.n	8002088 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80020a4:	f7ff fc1e 	bl	80018e4 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80020a8:	e008      	b.n	80020bc <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80020aa:	f7fe fe33 	bl	8000d14 <HAL_GetTick>
 80020ae:	4602      	mov	r2, r0
 80020b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	2b03      	cmp	r3, #3
 80020b6:	d901      	bls.n	80020bc <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80020b8:	2303      	movs	r3, #3
 80020ba:	e1ac      	b.n	8002416 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80020bc:	f7ff fc23 	bl	8001906 <LL_RCC_LSI2_IsReady>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d1f1      	bne.n	80020aa <HAL_RCC_OscConfig+0x36e>
 80020c6:	e027      	b.n	8002118 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80020c8:	f7ff fc0c 	bl	80018e4 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020cc:	f7fe fe22 	bl	8000d14 <HAL_GetTick>
 80020d0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80020d2:	e008      	b.n	80020e6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80020d4:	f7fe fe1e 	bl	8000d14 <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	2b03      	cmp	r3, #3
 80020e0:	d901      	bls.n	80020e6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e197      	b.n	8002416 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80020e6:	f7ff fc0e 	bl	8001906 <LL_RCC_LSI2_IsReady>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d1f1      	bne.n	80020d4 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80020f0:	f7ff fbc4 	bl	800187c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020f4:	f7fe fe0e 	bl	8000d14 <HAL_GetTick>
 80020f8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80020fa:	e008      	b.n	800210e <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80020fc:	f7fe fe0a 	bl	8000d14 <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	2b02      	cmp	r3, #2
 8002108:	d901      	bls.n	800210e <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	e183      	b.n	8002416 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800210e:	f7ff fbc6 	bl	800189e <LL_RCC_LSI1_IsReady>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d1f1      	bne.n	80020fc <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0304 	and.w	r3, r3, #4
 8002120:	2b00      	cmp	r3, #0
 8002122:	d05b      	beq.n	80021dc <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002124:	4ba7      	ldr	r3, [pc, #668]	; (80023c4 <HAL_RCC_OscConfig+0x688>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800212c:	2b00      	cmp	r3, #0
 800212e:	d114      	bne.n	800215a <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002130:	f7ff fa12 	bl	8001558 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002134:	f7fe fdee 	bl	8000d14 <HAL_GetTick>
 8002138:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800213a:	e008      	b.n	800214e <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800213c:	f7fe fdea 	bl	8000d14 <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	2b02      	cmp	r3, #2
 8002148:	d901      	bls.n	800214e <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e163      	b.n	8002416 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800214e:	4b9d      	ldr	r3, [pc, #628]	; (80023c4 <HAL_RCC_OscConfig+0x688>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002156:	2b00      	cmp	r3, #0
 8002158:	d0f0      	beq.n	800213c <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	2b01      	cmp	r3, #1
 8002160:	d102      	bne.n	8002168 <HAL_RCC_OscConfig+0x42c>
 8002162:	f7ff fb24 	bl	80017ae <LL_RCC_LSE_Enable>
 8002166:	e00c      	b.n	8002182 <HAL_RCC_OscConfig+0x446>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	2b05      	cmp	r3, #5
 800216e:	d104      	bne.n	800217a <HAL_RCC_OscConfig+0x43e>
 8002170:	f7ff fb3f 	bl	80017f2 <LL_RCC_LSE_EnableBypass>
 8002174:	f7ff fb1b 	bl	80017ae <LL_RCC_LSE_Enable>
 8002178:	e003      	b.n	8002182 <HAL_RCC_OscConfig+0x446>
 800217a:	f7ff fb29 	bl	80017d0 <LL_RCC_LSE_Disable>
 800217e:	f7ff fb49 	bl	8001814 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d014      	beq.n	80021b4 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800218a:	f7fe fdc3 	bl	8000d14 <HAL_GetTick>
 800218e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002190:	e00a      	b.n	80021a8 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002192:	f7fe fdbf 	bl	8000d14 <HAL_GetTick>
 8002196:	4602      	mov	r2, r0
 8002198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	f241 3288 	movw	r2, #5000	; 0x1388
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d901      	bls.n	80021a8 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80021a4:	2303      	movs	r3, #3
 80021a6:	e136      	b.n	8002416 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80021a8:	f7ff fb45 	bl	8001836 <LL_RCC_LSE_IsReady>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d0ef      	beq.n	8002192 <HAL_RCC_OscConfig+0x456>
 80021b2:	e013      	b.n	80021dc <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021b4:	f7fe fdae 	bl	8000d14 <HAL_GetTick>
 80021b8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80021ba:	e00a      	b.n	80021d2 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021bc:	f7fe fdaa 	bl	8000d14 <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d901      	bls.n	80021d2 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e121      	b.n	8002416 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 80021d2:	f7ff fb30 	bl	8001836 <LL_RCC_LSE_IsReady>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d1ef      	bne.n	80021bc <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d02c      	beq.n	8002242 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d014      	beq.n	800221a <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80021f0:	f7ff faa9 	bl	8001746 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021f4:	f7fe fd8e 	bl	8000d14 <HAL_GetTick>
 80021f8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80021fa:	e008      	b.n	800220e <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021fc:	f7fe fd8a 	bl	8000d14 <HAL_GetTick>
 8002200:	4602      	mov	r2, r0
 8002202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	2b02      	cmp	r3, #2
 8002208:	d901      	bls.n	800220e <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e103      	b.n	8002416 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800220e:	f7ff fabc 	bl	800178a <LL_RCC_HSI48_IsReady>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d0f1      	beq.n	80021fc <HAL_RCC_OscConfig+0x4c0>
 8002218:	e013      	b.n	8002242 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800221a:	f7ff faa5 	bl	8001768 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800221e:	f7fe fd79 	bl	8000d14 <HAL_GetTick>
 8002222:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002224:	e008      	b.n	8002238 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002226:	f7fe fd75 	bl	8000d14 <HAL_GetTick>
 800222a:	4602      	mov	r2, r0
 800222c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	2b02      	cmp	r3, #2
 8002232:	d901      	bls.n	8002238 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8002234:	2303      	movs	r3, #3
 8002236:	e0ee      	b.n	8002416 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002238:	f7ff faa7 	bl	800178a <LL_RCC_HSI48_IsReady>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d1f1      	bne.n	8002226 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002246:	2b00      	cmp	r3, #0
 8002248:	f000 80e4 	beq.w	8002414 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800224c:	f7ff fc05 	bl	8001a5a <LL_RCC_GetSysClkSource>
 8002250:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8002252:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800225e:	2b02      	cmp	r3, #2
 8002260:	f040 80b4 	bne.w	80023cc <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	f003 0203 	and.w	r2, r3, #3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226e:	429a      	cmp	r2, r3
 8002270:	d123      	bne.n	80022ba <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800227c:	429a      	cmp	r2, r3
 800227e:	d11c      	bne.n	80022ba <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	0a1b      	lsrs	r3, r3, #8
 8002284:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800228c:	429a      	cmp	r2, r3
 800228e:	d114      	bne.n	80022ba <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800229a:	429a      	cmp	r2, r3
 800229c:	d10d      	bne.n	80022ba <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d106      	bne.n	80022ba <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d05d      	beq.n	8002376 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	2b0c      	cmp	r3, #12
 80022be:	d058      	beq.n	8002372 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80022c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e0a1      	b.n	8002416 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80022d2:	f7ff fc85 	bl	8001be0 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80022d6:	f7fe fd1d 	bl	8000d14 <HAL_GetTick>
 80022da:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022dc:	e008      	b.n	80022f0 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022de:	f7fe fd19 	bl	8000d14 <HAL_GetTick>
 80022e2:	4602      	mov	r2, r0
 80022e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d901      	bls.n	80022f0 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 80022ec:	2303      	movs	r3, #3
 80022ee:	e092      	b.n	8002416 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d1ef      	bne.n	80022de <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002302:	68da      	ldr	r2, [r3, #12]
 8002304:	4b30      	ldr	r3, [pc, #192]	; (80023c8 <HAL_RCC_OscConfig+0x68c>)
 8002306:	4013      	ands	r3, r2
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002310:	4311      	orrs	r1, r2
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002316:	0212      	lsls	r2, r2, #8
 8002318:	4311      	orrs	r1, r2
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800231e:	4311      	orrs	r1, r2
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002324:	4311      	orrs	r1, r2
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800232a:	430a      	orrs	r2, r1
 800232c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002330:	4313      	orrs	r3, r2
 8002332:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002334:	f7ff fc45 	bl	8001bc2 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002338:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002342:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002346:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002348:	f7fe fce4 	bl	8000d14 <HAL_GetTick>
 800234c:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800234e:	e008      	b.n	8002362 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002350:	f7fe fce0 	bl	8000d14 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b02      	cmp	r3, #2
 800235c:	d901      	bls.n	8002362 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e059      	b.n	8002416 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002362:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d0ef      	beq.n	8002350 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002370:	e050      	b.n	8002414 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e04f      	b.n	8002416 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002376:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d147      	bne.n	8002414 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002384:	f7ff fc1d 	bl	8001bc2 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002388:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800238c:	68db      	ldr	r3, [r3, #12]
 800238e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002392:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002396:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002398:	f7fe fcbc 	bl	8000d14 <HAL_GetTick>
 800239c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800239e:	e008      	b.n	80023b2 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023a0:	f7fe fcb8 	bl	8000d14 <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d901      	bls.n	80023b2 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e031      	b.n	8002416 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d0ef      	beq.n	80023a0 <HAL_RCC_OscConfig+0x664>
 80023c0:	e028      	b.n	8002414 <HAL_RCC_OscConfig+0x6d8>
 80023c2:	bf00      	nop
 80023c4:	58000400 	.word	0x58000400
 80023c8:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	2b0c      	cmp	r3, #12
 80023d0:	d01e      	beq.n	8002410 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023d2:	f7ff fc05 	bl	8001be0 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023d6:	f7fe fc9d 	bl	8000d14 <HAL_GetTick>
 80023da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023dc:	e008      	b.n	80023f0 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023de:	f7fe fc99 	bl	8000d14 <HAL_GetTick>
 80023e2:	4602      	mov	r2, r0
 80023e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e6:	1ad3      	subs	r3, r2, r3
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d901      	bls.n	80023f0 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 80023ec:	2303      	movs	r3, #3
 80023ee:	e012      	b.n	8002416 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d1ef      	bne.n	80023de <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80023fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002402:	68da      	ldr	r2, [r3, #12]
 8002404:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002408:	4b05      	ldr	r3, [pc, #20]	; (8002420 <HAL_RCC_OscConfig+0x6e4>)
 800240a:	4013      	ands	r3, r2
 800240c:	60cb      	str	r3, [r1, #12]
 800240e:	e001      	b.n	8002414 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e000      	b.n	8002416 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8002414:	2300      	movs	r3, #0
}
 8002416:	4618      	mov	r0, r3
 8002418:	3734      	adds	r7, #52	; 0x34
 800241a:	46bd      	mov	sp, r7
 800241c:	bd90      	pop	{r4, r7, pc}
 800241e:	bf00      	nop
 8002420:	eefefffc 	.word	0xeefefffc

08002424 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b084      	sub	sp, #16
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d101      	bne.n	8002438 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e12d      	b.n	8002694 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002438:	4b98      	ldr	r3, [pc, #608]	; (800269c <HAL_RCC_ClockConfig+0x278>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0307 	and.w	r3, r3, #7
 8002440:	683a      	ldr	r2, [r7, #0]
 8002442:	429a      	cmp	r2, r3
 8002444:	d91b      	bls.n	800247e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002446:	4b95      	ldr	r3, [pc, #596]	; (800269c <HAL_RCC_ClockConfig+0x278>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f023 0207 	bic.w	r2, r3, #7
 800244e:	4993      	ldr	r1, [pc, #588]	; (800269c <HAL_RCC_ClockConfig+0x278>)
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	4313      	orrs	r3, r2
 8002454:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002456:	f7fe fc5d 	bl	8000d14 <HAL_GetTick>
 800245a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800245c:	e008      	b.n	8002470 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800245e:	f7fe fc59 	bl	8000d14 <HAL_GetTick>
 8002462:	4602      	mov	r2, r0
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	2b02      	cmp	r3, #2
 800246a:	d901      	bls.n	8002470 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800246c:	2303      	movs	r3, #3
 800246e:	e111      	b.n	8002694 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002470:	4b8a      	ldr	r3, [pc, #552]	; (800269c <HAL_RCC_ClockConfig+0x278>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0307 	and.w	r3, r3, #7
 8002478:	683a      	ldr	r2, [r7, #0]
 800247a:	429a      	cmp	r2, r3
 800247c:	d1ef      	bne.n	800245e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0302 	and.w	r3, r3, #2
 8002486:	2b00      	cmp	r3, #0
 8002488:	d016      	beq.n	80024b8 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	4618      	mov	r0, r3
 8002490:	f7ff faef 	bl	8001a72 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002494:	f7fe fc3e 	bl	8000d14 <HAL_GetTick>
 8002498:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800249a:	e008      	b.n	80024ae <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800249c:	f7fe fc3a 	bl	8000d14 <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d901      	bls.n	80024ae <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e0f2      	b.n	8002694 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80024ae:	f7ff fbe9 	bl	8001c84 <LL_RCC_IsActiveFlag_HPRE>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d0f1      	beq.n	800249c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0320 	and.w	r3, r3, #32
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d016      	beq.n	80024f2 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	695b      	ldr	r3, [r3, #20]
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7ff fae6 	bl	8001a9a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80024ce:	f7fe fc21 	bl	8000d14 <HAL_GetTick>
 80024d2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80024d4:	e008      	b.n	80024e8 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80024d6:	f7fe fc1d 	bl	8000d14 <HAL_GetTick>
 80024da:	4602      	mov	r2, r0
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d901      	bls.n	80024e8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80024e4:	2303      	movs	r3, #3
 80024e6:	e0d5      	b.n	8002694 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80024e8:	f7ff fbde 	bl	8001ca8 <LL_RCC_IsActiveFlag_C2HPRE>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d0f1      	beq.n	80024d6 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d016      	beq.n	800252c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	699b      	ldr	r3, [r3, #24]
 8002502:	4618      	mov	r0, r3
 8002504:	f7ff fadf 	bl	8001ac6 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002508:	f7fe fc04 	bl	8000d14 <HAL_GetTick>
 800250c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800250e:	e008      	b.n	8002522 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002510:	f7fe fc00 	bl	8000d14 <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	2b02      	cmp	r3, #2
 800251c:	d901      	bls.n	8002522 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e0b8      	b.n	8002694 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002522:	f7ff fbd4 	bl	8001cce <LL_RCC_IsActiveFlag_SHDHPRE>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d0f1      	beq.n	8002510 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0304 	and.w	r3, r3, #4
 8002534:	2b00      	cmp	r3, #0
 8002536:	d016      	beq.n	8002566 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	4618      	mov	r0, r3
 800253e:	f7ff fad9 	bl	8001af4 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002542:	f7fe fbe7 	bl	8000d14 <HAL_GetTick>
 8002546:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002548:	e008      	b.n	800255c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800254a:	f7fe fbe3 	bl	8000d14 <HAL_GetTick>
 800254e:	4602      	mov	r2, r0
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	1ad3      	subs	r3, r2, r3
 8002554:	2b02      	cmp	r3, #2
 8002556:	d901      	bls.n	800255c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002558:	2303      	movs	r3, #3
 800255a:	e09b      	b.n	8002694 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800255c:	f7ff fbca 	bl	8001cf4 <LL_RCC_IsActiveFlag_PPRE1>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d0f1      	beq.n	800254a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0308 	and.w	r3, r3, #8
 800256e:	2b00      	cmp	r3, #0
 8002570:	d017      	beq.n	80025a2 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	691b      	ldr	r3, [r3, #16]
 8002576:	00db      	lsls	r3, r3, #3
 8002578:	4618      	mov	r0, r3
 800257a:	f7ff facf 	bl	8001b1c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800257e:	f7fe fbc9 	bl	8000d14 <HAL_GetTick>
 8002582:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002584:	e008      	b.n	8002598 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002586:	f7fe fbc5 	bl	8000d14 <HAL_GetTick>
 800258a:	4602      	mov	r2, r0
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	2b02      	cmp	r3, #2
 8002592:	d901      	bls.n	8002598 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002594:	2303      	movs	r3, #3
 8002596:	e07d      	b.n	8002694 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002598:	f7ff fbbe 	bl	8001d18 <LL_RCC_IsActiveFlag_PPRE2>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d0f1      	beq.n	8002586 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0301 	and.w	r3, r3, #1
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d043      	beq.n	8002636 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d106      	bne.n	80025c4 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80025b6:	f7ff f86f 	bl	8001698 <LL_RCC_HSE_IsReady>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d11e      	bne.n	80025fe <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e067      	b.n	8002694 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	2b03      	cmp	r3, #3
 80025ca:	d106      	bne.n	80025da <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80025cc:	f7ff fb17 	bl	8001bfe <LL_RCC_PLL_IsReady>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d113      	bne.n	80025fe <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e05c      	b.n	8002694 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d106      	bne.n	80025f0 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80025e2:	f7ff f9d7 	bl	8001994 <LL_RCC_MSI_IsReady>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d108      	bne.n	80025fe <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e051      	b.n	8002694 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80025f0:	f7ff f882 	bl	80016f8 <LL_RCC_HSI_IsReady>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d101      	bne.n	80025fe <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e04a      	b.n	8002694 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	4618      	mov	r0, r3
 8002604:	f7ff fa15 	bl	8001a32 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002608:	f7fe fb84 	bl	8000d14 <HAL_GetTick>
 800260c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800260e:	e00a      	b.n	8002626 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002610:	f7fe fb80 	bl	8000d14 <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	f241 3288 	movw	r2, #5000	; 0x1388
 800261e:	4293      	cmp	r3, r2
 8002620:	d901      	bls.n	8002626 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e036      	b.n	8002694 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002626:	f7ff fa18 	bl	8001a5a <LL_RCC_GetSysClkSource>
 800262a:	4602      	mov	r2, r0
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	429a      	cmp	r2, r3
 8002634:	d1ec      	bne.n	8002610 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002636:	4b19      	ldr	r3, [pc, #100]	; (800269c <HAL_RCC_ClockConfig+0x278>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0307 	and.w	r3, r3, #7
 800263e:	683a      	ldr	r2, [r7, #0]
 8002640:	429a      	cmp	r2, r3
 8002642:	d21b      	bcs.n	800267c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002644:	4b15      	ldr	r3, [pc, #84]	; (800269c <HAL_RCC_ClockConfig+0x278>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f023 0207 	bic.w	r2, r3, #7
 800264c:	4913      	ldr	r1, [pc, #76]	; (800269c <HAL_RCC_ClockConfig+0x278>)
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	4313      	orrs	r3, r2
 8002652:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002654:	f7fe fb5e 	bl	8000d14 <HAL_GetTick>
 8002658:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800265a:	e008      	b.n	800266e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800265c:	f7fe fb5a 	bl	8000d14 <HAL_GetTick>
 8002660:	4602      	mov	r2, r0
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	2b02      	cmp	r3, #2
 8002668:	d901      	bls.n	800266e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e012      	b.n	8002694 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800266e:	4b0b      	ldr	r3, [pc, #44]	; (800269c <HAL_RCC_ClockConfig+0x278>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0307 	and.w	r3, r3, #7
 8002676:	683a      	ldr	r2, [r7, #0]
 8002678:	429a      	cmp	r2, r3
 800267a:	d1ef      	bne.n	800265c <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800267c:	f000 f87e 	bl	800277c <HAL_RCC_GetHCLKFreq>
 8002680:	4603      	mov	r3, r0
 8002682:	4a07      	ldr	r2, [pc, #28]	; (80026a0 <HAL_RCC_ClockConfig+0x27c>)
 8002684:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8002686:	f7fe fb51 	bl	8000d2c <HAL_GetTickPrio>
 800268a:	4603      	mov	r3, r0
 800268c:	4618      	mov	r0, r3
 800268e:	f7fe fa17 	bl	8000ac0 <HAL_InitTick>
 8002692:	4603      	mov	r3, r0
}
 8002694:	4618      	mov	r0, r3
 8002696:	3710      	adds	r7, #16
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	58004000 	.word	0x58004000
 80026a0:	20000004 	.word	0x20000004

080026a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026a4:	b590      	push	{r4, r7, lr}
 80026a6:	b085      	sub	sp, #20
 80026a8:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026aa:	f7ff f9d6 	bl	8001a5a <LL_RCC_GetSysClkSource>
 80026ae:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d10a      	bne.n	80026cc <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80026b6:	f7ff f992 	bl	80019de <LL_RCC_MSI_GetRange>
 80026ba:	4603      	mov	r3, r0
 80026bc:	091b      	lsrs	r3, r3, #4
 80026be:	f003 030f 	and.w	r3, r3, #15
 80026c2:	4a2b      	ldr	r2, [pc, #172]	; (8002770 <HAL_RCC_GetSysClockFreq+0xcc>)
 80026c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026c8:	60fb      	str	r3, [r7, #12]
 80026ca:	e04b      	b.n	8002764 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2b04      	cmp	r3, #4
 80026d0:	d102      	bne.n	80026d8 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80026d2:	4b28      	ldr	r3, [pc, #160]	; (8002774 <HAL_RCC_GetSysClockFreq+0xd0>)
 80026d4:	60fb      	str	r3, [r7, #12]
 80026d6:	e045      	b.n	8002764 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2b08      	cmp	r3, #8
 80026dc:	d10a      	bne.n	80026f4 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80026de:	f7fe ffab 	bl	8001638 <LL_RCC_HSE_IsEnabledDiv2>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d102      	bne.n	80026ee <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80026e8:	4b22      	ldr	r3, [pc, #136]	; (8002774 <HAL_RCC_GetSysClockFreq+0xd0>)
 80026ea:	60fb      	str	r3, [r7, #12]
 80026ec:	e03a      	b.n	8002764 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80026ee:	4b22      	ldr	r3, [pc, #136]	; (8002778 <HAL_RCC_GetSysClockFreq+0xd4>)
 80026f0:	60fb      	str	r3, [r7, #12]
 80026f2:	e037      	b.n	8002764 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80026f4:	f7ff faba 	bl	8001c6c <LL_RCC_PLL_GetMainSource>
 80026f8:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d003      	beq.n	8002708 <HAL_RCC_GetSysClockFreq+0x64>
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	2b03      	cmp	r3, #3
 8002704:	d003      	beq.n	800270e <HAL_RCC_GetSysClockFreq+0x6a>
 8002706:	e00d      	b.n	8002724 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002708:	4b1a      	ldr	r3, [pc, #104]	; (8002774 <HAL_RCC_GetSysClockFreq+0xd0>)
 800270a:	60bb      	str	r3, [r7, #8]
        break;
 800270c:	e015      	b.n	800273a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800270e:	f7fe ff93 	bl	8001638 <LL_RCC_HSE_IsEnabledDiv2>
 8002712:	4603      	mov	r3, r0
 8002714:	2b01      	cmp	r3, #1
 8002716:	d102      	bne.n	800271e <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002718:	4b16      	ldr	r3, [pc, #88]	; (8002774 <HAL_RCC_GetSysClockFreq+0xd0>)
 800271a:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800271c:	e00d      	b.n	800273a <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800271e:	4b16      	ldr	r3, [pc, #88]	; (8002778 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002720:	60bb      	str	r3, [r7, #8]
        break;
 8002722:	e00a      	b.n	800273a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002724:	f7ff f95b 	bl	80019de <LL_RCC_MSI_GetRange>
 8002728:	4603      	mov	r3, r0
 800272a:	091b      	lsrs	r3, r3, #4
 800272c:	f003 030f 	and.w	r3, r3, #15
 8002730:	4a0f      	ldr	r2, [pc, #60]	; (8002770 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002732:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002736:	60bb      	str	r3, [r7, #8]
        break;
 8002738:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800273a:	f7ff fa72 	bl	8001c22 <LL_RCC_PLL_GetN>
 800273e:	4602      	mov	r2, r0
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	fb03 f402 	mul.w	r4, r3, r2
 8002746:	f7ff fa85 	bl	8001c54 <LL_RCC_PLL_GetDivider>
 800274a:	4603      	mov	r3, r0
 800274c:	091b      	lsrs	r3, r3, #4
 800274e:	3301      	adds	r3, #1
 8002750:	fbb4 f4f3 	udiv	r4, r4, r3
 8002754:	f7ff fa72 	bl	8001c3c <LL_RCC_PLL_GetR>
 8002758:	4603      	mov	r3, r0
 800275a:	0f5b      	lsrs	r3, r3, #29
 800275c:	3301      	adds	r3, #1
 800275e:	fbb4 f3f3 	udiv	r3, r4, r3
 8002762:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002764:	68fb      	ldr	r3, [r7, #12]
}
 8002766:	4618      	mov	r0, r3
 8002768:	3714      	adds	r7, #20
 800276a:	46bd      	mov	sp, r7
 800276c:	bd90      	pop	{r4, r7, pc}
 800276e:	bf00      	nop
 8002770:	08006f30 	.word	0x08006f30
 8002774:	00f42400 	.word	0x00f42400
 8002778:	01e84800 	.word	0x01e84800

0800277c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800277c:	b598      	push	{r3, r4, r7, lr}
 800277e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002780:	f7ff ff90 	bl	80026a4 <HAL_RCC_GetSysClockFreq>
 8002784:	4604      	mov	r4, r0
 8002786:	f7ff f9dd 	bl	8001b44 <LL_RCC_GetAHBPrescaler>
 800278a:	4603      	mov	r3, r0
 800278c:	091b      	lsrs	r3, r3, #4
 800278e:	f003 030f 	and.w	r3, r3, #15
 8002792:	4a03      	ldr	r2, [pc, #12]	; (80027a0 <HAL_RCC_GetHCLKFreq+0x24>)
 8002794:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002798:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800279c:	4618      	mov	r0, r3
 800279e:	bd98      	pop	{r3, r4, r7, pc}
 80027a0:	08006ed0 	.word	0x08006ed0

080027a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027a4:	b598      	push	{r3, r4, r7, lr}
 80027a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80027a8:	f7ff ffe8 	bl	800277c <HAL_RCC_GetHCLKFreq>
 80027ac:	4604      	mov	r4, r0
 80027ae:	f7ff f9f0 	bl	8001b92 <LL_RCC_GetAPB1Prescaler>
 80027b2:	4603      	mov	r3, r0
 80027b4:	0a1b      	lsrs	r3, r3, #8
 80027b6:	f003 0307 	and.w	r3, r3, #7
 80027ba:	4a04      	ldr	r2, [pc, #16]	; (80027cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80027bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027c0:	f003 031f 	and.w	r3, r3, #31
 80027c4:	fa24 f303 	lsr.w	r3, r4, r3
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	bd98      	pop	{r3, r4, r7, pc}
 80027cc:	08006f10 	.word	0x08006f10

080027d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027d0:	b598      	push	{r3, r4, r7, lr}
 80027d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80027d4:	f7ff ffd2 	bl	800277c <HAL_RCC_GetHCLKFreq>
 80027d8:	4604      	mov	r4, r0
 80027da:	f7ff f9e6 	bl	8001baa <LL_RCC_GetAPB2Prescaler>
 80027de:	4603      	mov	r3, r0
 80027e0:	0adb      	lsrs	r3, r3, #11
 80027e2:	f003 0307 	and.w	r3, r3, #7
 80027e6:	4a04      	ldr	r2, [pc, #16]	; (80027f8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80027e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027ec:	f003 031f 	and.w	r3, r3, #31
 80027f0:	fa24 f303 	lsr.w	r3, r4, r3
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	bd98      	pop	{r3, r4, r7, pc}
 80027f8:	08006f10 	.word	0x08006f10

080027fc <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b082      	sub	sp, #8
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 |
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	226f      	movs	r2, #111	; 0x6f
 800280a:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 800280c:	f7ff f925 	bl	8001a5a <LL_RCC_GetSysClkSource>
 8002810:	4602      	mov	r2, r0
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 8002816:	f7ff f995 	bl	8001b44 <LL_RCC_GetAHBPrescaler>
 800281a:	4602      	mov	r2, r0
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 8002820:	f7ff f9b7 	bl	8001b92 <LL_RCC_GetAPB1Prescaler>
 8002824:	4602      	mov	r2, r0
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 800282a:	f7ff f9be 	bl	8001baa <LL_RCC_GetAPB2Prescaler>
 800282e:	4602      	mov	r2, r0
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 8002834:	f7ff f992 	bl	8001b5c <LL_C2_RCC_GetAHBPrescaler>
 8002838:	4602      	mov	r2, r0
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 800283e:	f7ff f99a 	bl	8001b76 <LL_RCC_GetAHB4Prescaler>
 8002842:	4602      	mov	r2, r0
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002848:	4b04      	ldr	r3, [pc, #16]	; (800285c <HAL_RCC_GetClockConfig+0x60>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0207 	and.w	r2, r3, #7
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	601a      	str	r2, [r3, #0]
}
 8002854:	bf00      	nop
 8002856:	3708      	adds	r7, #8
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	58004000 	.word	0x58004000

08002860 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002860:	b590      	push	{r4, r7, lr}
 8002862:	b085      	sub	sp, #20
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2bb0      	cmp	r3, #176	; 0xb0
 800286c:	d903      	bls.n	8002876 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800286e:	4b15      	ldr	r3, [pc, #84]	; (80028c4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002872:	60fb      	str	r3, [r7, #12]
 8002874:	e007      	b.n	8002886 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	091b      	lsrs	r3, r3, #4
 800287a:	f003 030f 	and.w	r3, r3, #15
 800287e:	4a11      	ldr	r2, [pc, #68]	; (80028c4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002880:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002884:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8002886:	f7ff f976 	bl	8001b76 <LL_RCC_GetAHB4Prescaler>
 800288a:	4603      	mov	r3, r0
 800288c:	091b      	lsrs	r3, r3, #4
 800288e:	f003 030f 	and.w	r3, r3, #15
 8002892:	4a0d      	ldr	r2, [pc, #52]	; (80028c8 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8002894:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002898:	68fa      	ldr	r2, [r7, #12]
 800289a:	fbb2 f3f3 	udiv	r3, r2, r3
 800289e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	4a0a      	ldr	r2, [pc, #40]	; (80028cc <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 80028a4:	fba2 2303 	umull	r2, r3, r2, r3
 80028a8:	0c9c      	lsrs	r4, r3, #18
 80028aa:	f7fe feb7 	bl	800161c <HAL_PWREx_GetVoltageRange>
 80028ae:	4603      	mov	r3, r0
 80028b0:	4619      	mov	r1, r3
 80028b2:	4620      	mov	r0, r4
 80028b4:	f000 f80c 	bl	80028d0 <RCC_SetFlashLatency>
 80028b8:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3714      	adds	r7, #20
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd90      	pop	{r4, r7, pc}
 80028c2:	bf00      	nop
 80028c4:	08006f30 	.word	0x08006f30
 80028c8:	08006ed0 	.word	0x08006ed0
 80028cc:	431bde83 	.word	0x431bde83

080028d0 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80028d0:	b590      	push	{r4, r7, lr}
 80028d2:	b093      	sub	sp, #76	; 0x4c
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80028da:	4b37      	ldr	r3, [pc, #220]	; (80029b8 <RCC_SetFlashLatency+0xe8>)
 80028dc:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80028e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80028e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80028e6:	4a35      	ldr	r2, [pc, #212]	; (80029bc <RCC_SetFlashLatency+0xec>)
 80028e8:	f107 031c 	add.w	r3, r7, #28
 80028ec:	ca07      	ldmia	r2, {r0, r1, r2}
 80028ee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80028f2:	4b33      	ldr	r3, [pc, #204]	; (80029c0 <RCC_SetFlashLatency+0xf0>)
 80028f4:	f107 040c 	add.w	r4, r7, #12
 80028f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80028fa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80028fe:	2300      	movs	r3, #0
 8002900:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002908:	d11a      	bne.n	8002940 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800290a:	2300      	movs	r3, #0
 800290c:	643b      	str	r3, [r7, #64]	; 0x40
 800290e:	e013      	b.n	8002938 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002910:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	3348      	adds	r3, #72	; 0x48
 8002916:	443b      	add	r3, r7
 8002918:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	429a      	cmp	r2, r3
 8002920:	d807      	bhi.n	8002932 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002922:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	3348      	adds	r3, #72	; 0x48
 8002928:	443b      	add	r3, r7
 800292a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800292e:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002930:	e020      	b.n	8002974 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002932:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002934:	3301      	adds	r3, #1
 8002936:	643b      	str	r3, [r7, #64]	; 0x40
 8002938:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800293a:	2b03      	cmp	r3, #3
 800293c:	d9e8      	bls.n	8002910 <RCC_SetFlashLatency+0x40>
 800293e:	e019      	b.n	8002974 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002940:	2300      	movs	r3, #0
 8002942:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002944:	e013      	b.n	800296e <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002946:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	3348      	adds	r3, #72	; 0x48
 800294c:	443b      	add	r3, r7
 800294e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	429a      	cmp	r2, r3
 8002956:	d807      	bhi.n	8002968 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002958:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	3348      	adds	r3, #72	; 0x48
 800295e:	443b      	add	r3, r7
 8002960:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002964:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002966:	e005      	b.n	8002974 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002968:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800296a:	3301      	adds	r3, #1
 800296c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800296e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002970:	2b02      	cmp	r3, #2
 8002972:	d9e8      	bls.n	8002946 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8002974:	4b13      	ldr	r3, [pc, #76]	; (80029c4 <RCC_SetFlashLatency+0xf4>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f023 0207 	bic.w	r2, r3, #7
 800297c:	4911      	ldr	r1, [pc, #68]	; (80029c4 <RCC_SetFlashLatency+0xf4>)
 800297e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002980:	4313      	orrs	r3, r2
 8002982:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002984:	f7fe f9c6 	bl	8000d14 <HAL_GetTick>
 8002988:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800298a:	e008      	b.n	800299e <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800298c:	f7fe f9c2 	bl	8000d14 <HAL_GetTick>
 8002990:	4602      	mov	r2, r0
 8002992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	2b02      	cmp	r3, #2
 8002998:	d901      	bls.n	800299e <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	e007      	b.n	80029ae <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800299e:	4b09      	ldr	r3, [pc, #36]	; (80029c4 <RCC_SetFlashLatency+0xf4>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0307 	and.w	r3, r3, #7
 80029a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d1ef      	bne.n	800298c <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	374c      	adds	r7, #76	; 0x4c
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd90      	pop	{r4, r7, pc}
 80029b6:	bf00      	nop
 80029b8:	08006e8c 	.word	0x08006e8c
 80029bc:	08006e9c 	.word	0x08006e9c
 80029c0:	08006ea8 	.word	0x08006ea8
 80029c4:	58004000 	.word	0x58004000

080029c8 <LL_RCC_LSE_IsEnabled>:
{
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80029cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029d4:	f003 0301 	and.w	r3, r3, #1
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d101      	bne.n	80029e0 <LL_RCC_LSE_IsEnabled+0x18>
 80029dc:	2301      	movs	r3, #1
 80029de:	e000      	b.n	80029e2 <LL_RCC_LSE_IsEnabled+0x1a>
 80029e0:	2300      	movs	r3, #0
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr

080029ec <LL_RCC_LSE_IsReady>:
{
 80029ec:	b480      	push	{r7}
 80029ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80029f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029f8:	f003 0302 	and.w	r3, r3, #2
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	d101      	bne.n	8002a04 <LL_RCC_LSE_IsReady+0x18>
 8002a00:	2301      	movs	r3, #1
 8002a02:	e000      	b.n	8002a06 <LL_RCC_LSE_IsReady+0x1a>
 8002a04:	2300      	movs	r3, #0
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr

08002a10 <LL_RCC_MSI_EnablePLLMode>:
{
 8002a10:	b480      	push	{r7}
 8002a12:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8002a14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a1e:	f043 0304 	orr.w	r3, r3, #4
 8002a22:	6013      	str	r3, [r2, #0]
}
 8002a24:	bf00      	nop
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr

08002a2e <LL_RCC_SetRFWKPClockSource>:
{
 8002a2e:	b480      	push	{r7}
 8002a30:	b083      	sub	sp, #12
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8002a36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a3e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002a4e:	bf00      	nop
 8002a50:	370c      	adds	r7, #12
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr

08002a5a <LL_RCC_SetSMPSClockSource>:
{
 8002a5a:	b480      	push	{r7}
 8002a5c:	b083      	sub	sp, #12
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8002a62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a68:	f023 0203 	bic.w	r2, r3, #3
 8002a6c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002a76:	bf00      	nop
 8002a78:	370c      	adds	r7, #12
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr

08002a82 <LL_RCC_SetSMPSPrescaler>:
{
 8002a82:	b480      	push	{r7}
 8002a84:	b083      	sub	sp, #12
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8002a8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a90:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002a94:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002a9e:	bf00      	nop
 8002aa0:	370c      	adds	r7, #12
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr

08002aaa <LL_RCC_SetUSARTClockSource>:
{
 8002aaa:	b480      	push	{r7}
 8002aac:	b083      	sub	sp, #12
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8002ab2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aba:	f023 0203 	bic.w	r2, r3, #3
 8002abe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002aca:	bf00      	nop
 8002acc:	370c      	adds	r7, #12
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr

08002ad6 <LL_RCC_SetLPUARTClockSource>:
{
 8002ad6:	b480      	push	{r7}
 8002ad8:	b083      	sub	sp, #12
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002ade:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ae6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002aea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002af6:	bf00      	nop
 8002af8:	370c      	adds	r7, #12
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr

08002b02 <LL_RCC_SetI2CClockSource>:
{
 8002b02:	b480      	push	{r7}
 8002b04:	b083      	sub	sp, #12
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002b0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b0e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	091b      	lsrs	r3, r3, #4
 8002b16:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002b1a:	43db      	mvns	r3, r3
 8002b1c:	401a      	ands	r2, r3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	011b      	lsls	r3, r3, #4
 8002b22:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002b26:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002b30:	bf00      	nop
 8002b32:	370c      	adds	r7, #12
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr

08002b3c <LL_RCC_SetLPTIMClockSource>:
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002b44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b48:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	0c1b      	lsrs	r3, r3, #16
 8002b50:	041b      	lsls	r3, r3, #16
 8002b52:	43db      	mvns	r3, r3
 8002b54:	401a      	ands	r2, r3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	041b      	lsls	r3, r3, #16
 8002b5a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002b64:	bf00      	nop
 8002b66:	370c      	adds	r7, #12
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr

08002b70 <LL_RCC_SetSAIClockSource>:
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8002b78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b80:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b84:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002b90:	bf00      	nop
 8002b92:	370c      	adds	r7, #12
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr

08002b9c <LL_RCC_SetRNGClockSource>:
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002ba4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ba8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bac:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002bb0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002bbc:	bf00      	nop
 8002bbe:	370c      	adds	r7, #12
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr

08002bc8 <LL_RCC_SetCLK48ClockSource>:
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8002bd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bd8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002bdc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002be8:	bf00      	nop
 8002bea:	370c      	adds	r7, #12
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr

08002bf4 <LL_RCC_SetUSBClockSource>:
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f7ff ffe3 	bl	8002bc8 <LL_RCC_SetCLK48ClockSource>
}
 8002c02:	bf00      	nop
 8002c04:	3708      	adds	r7, #8
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}

08002c0a <LL_RCC_SetADCClockSource>:
{
 8002c0a:	b480      	push	{r7}
 8002c0c:	b083      	sub	sp, #12
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002c12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c1a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002c1e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4313      	orrs	r3, r2
 8002c26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002c2a:	bf00      	nop
 8002c2c:	370c      	adds	r7, #12
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr

08002c36 <LL_RCC_SetRTCClockSource>:
{
 8002c36:	b480      	push	{r7}
 8002c38:	b083      	sub	sp, #12
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002c3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c46:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c4a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002c56:	bf00      	nop
 8002c58:	370c      	adds	r7, #12
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr

08002c62 <LL_RCC_GetRTCClockSource>:
{
 8002c62:	b480      	push	{r7}
 8002c64:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002c66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr

08002c7c <LL_RCC_ForceBackupDomainReset>:
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002c80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c88:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002c94:	bf00      	nop
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr

08002c9e <LL_RCC_ReleaseBackupDomainReset>:
{
 8002c9e:	b480      	push	{r7}
 8002ca0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002ca2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002caa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cb2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002cb6:	bf00      	nop
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr

08002cc0 <LL_RCC_PLLSAI1_Enable>:
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002cc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002cd2:	6013      	str	r3, [r2, #0]
}
 8002cd4:	bf00      	nop
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr

08002cde <LL_RCC_PLLSAI1_Disable>:
{
 8002cde:	b480      	push	{r7}
 8002ce0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002ce2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cec:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002cf0:	6013      	str	r3, [r2, #0]
}
 8002cf2:	bf00      	nop
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr

08002cfc <LL_RCC_PLLSAI1_IsReady>:
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8002d00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d0a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d0e:	d101      	bne.n	8002d14 <LL_RCC_PLLSAI1_IsReady+0x18>
 8002d10:	2301      	movs	r3, #1
 8002d12:	e000      	b.n	8002d16 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8002d14:	2300      	movs	r3, #0
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr

08002d20 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b088      	sub	sp, #32
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8002d28:	2300      	movs	r3, #0
 8002d2a:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d034      	beq.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d40:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002d44:	d021      	beq.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8002d46:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002d4a:	d81b      	bhi.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002d4c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002d50:	d01d      	beq.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8002d52:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002d56:	d815      	bhi.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d00b      	beq.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8002d5c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d60:	d110      	bne.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8002d62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d70:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8002d72:	e00d      	b.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	3304      	adds	r3, #4
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f000 f94d 	bl	8003018 <RCCEx_PLLSAI1_ConfigNP>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002d82:	e005      	b.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	77fb      	strb	r3, [r7, #31]
        break;
 8002d88:	e002      	b.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8002d8a:	bf00      	nop
 8002d8c:	e000      	b.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8002d8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d90:	7ffb      	ldrb	r3, [r7, #31]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d105      	bne.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f7ff fee8 	bl	8002b70 <LL_RCC_SetSAIClockSource>
 8002da0:	e001      	b.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002da2:	7ffb      	ldrb	r3, [r7, #31]
 8002da4:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d046      	beq.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8002db2:	f7ff ff56 	bl	8002c62 <LL_RCC_GetRTCClockSource>
 8002db6:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dbc:	69ba      	ldr	r2, [r7, #24]
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d03c      	beq.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002dc2:	f7fe fbc9 	bl	8001558 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8002dc6:	69bb      	ldr	r3, [r7, #24]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d105      	bne.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f7ff ff30 	bl	8002c36 <LL_RCC_SetRTCClockSource>
 8002dd6:	e02e      	b.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8002dd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ddc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002de0:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8002de2:	f7ff ff4b 	bl	8002c7c <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8002de6:	f7ff ff5a 	bl	8002c9e <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df4:	4313      	orrs	r3, r2
 8002df6:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8002df8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8002e02:	f7ff fde1 	bl	80029c8 <LL_RCC_LSE_IsEnabled>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d114      	bne.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002e0c:	f7fd ff82 	bl	8000d14 <HAL_GetTick>
 8002e10:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8002e12:	e00b      	b.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e14:	f7fd ff7e 	bl	8000d14 <HAL_GetTick>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d902      	bls.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	77fb      	strb	r3, [r7, #31]
              break;
 8002e2a:	e004      	b.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8002e2c:	f7ff fdde 	bl	80029ec <LL_RCC_LSE_IsReady>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d1ee      	bne.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8002e36:	7ffb      	ldrb	r3, [r7, #31]
 8002e38:	77bb      	strb	r3, [r7, #30]
 8002e3a:	e001      	b.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e3c:	7ffb      	ldrb	r3, [r7, #31]
 8002e3e:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0301 	and.w	r3, r3, #1
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d004      	beq.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	699b      	ldr	r3, [r3, #24]
 8002e50:	4618      	mov	r0, r3
 8002e52:	f7ff fe2a 	bl	8002aaa <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0302 	and.w	r3, r3, #2
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d004      	beq.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	69db      	ldr	r3, [r3, #28]
 8002e66:	4618      	mov	r0, r3
 8002e68:	f7ff fe35 	bl	8002ad6 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0310 	and.w	r3, r3, #16
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d004      	beq.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f7ff fe5d 	bl	8002b3c <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0320 	and.w	r3, r3, #32
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d004      	beq.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e92:	4618      	mov	r0, r3
 8002e94:	f7ff fe52 	bl	8002b3c <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0304 	and.w	r3, r3, #4
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d004      	beq.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6a1b      	ldr	r3, [r3, #32]
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f7ff fe2a 	bl	8002b02 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0308 	and.w	r3, r3, #8
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d004      	beq.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f7ff fe1f 	bl	8002b02 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d022      	beq.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f7ff fe8d 	bl	8002bf4 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ede:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ee2:	d107      	bne.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8002ee4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002eee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ef2:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ef8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002efc:	d10b      	bne.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	3304      	adds	r3, #4
 8002f02:	4618      	mov	r0, r3
 8002f04:	f000 f8e3 	bl	80030ce <RCCEx_PLLSAI1_ConfigNQ>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8002f0c:	7ffb      	ldrb	r3, [r7, #31]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d001      	beq.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8002f12:	7ffb      	ldrb	r3, [r7, #31]
 8002f14:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d02b      	beq.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f2a:	d008      	beq.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f30:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f34:	d003      	beq.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d105      	bne.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f42:	4618      	mov	r0, r3
 8002f44:	f7ff fe2a 	bl	8002b9c <LL_RCC_SetRNGClockSource>
 8002f48:	e00a      	b.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f52:	60fb      	str	r3, [r7, #12]
 8002f54:	2000      	movs	r0, #0
 8002f56:	f7ff fe21 	bl	8002b9c <LL_RCC_SetRNGClockSource>
 8002f5a:	68f8      	ldr	r0, [r7, #12]
 8002f5c:	f7ff fe34 	bl	8002bc8 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f64:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8002f68:	d107      	bne.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8002f6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f74:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f78:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d022      	beq.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f7ff fe3d 	bl	8002c0a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f98:	d107      	bne.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002f9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fa8:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002fb2:	d10b      	bne.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	3304      	adds	r3, #4
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f000 f8e3 	bl	8003184 <RCCEx_PLLSAI1_ConfigNR>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8002fc2:	7ffb      	ldrb	r3, [r7, #31]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d001      	beq.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8002fc8:	7ffb      	ldrb	r3, [r7, #31]
 8002fca:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d004      	beq.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f7ff fd26 	bl	8002a2e <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d009      	beq.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f7ff fd45 	bl	8002a82 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f7ff fd2c 	bl	8002a5a <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8003002:	7fbb      	ldrb	r3, [r7, #30]
}
 8003004:	4618      	mov	r0, r3
 8003006:	3720      	adds	r7, #32
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}

0800300c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8003010:	f7ff fcfe 	bl	8002a10 <LL_RCC_MSI_EnablePLLMode>
}
 8003014:	bf00      	nop
 8003016:	bd80      	pop	{r7, pc}

08003018 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003020:	2300      	movs	r3, #0
 8003022:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003024:	f7ff fe5b 	bl	8002cde <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003028:	f7fd fe74 	bl	8000d14 <HAL_GetTick>
 800302c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800302e:	e009      	b.n	8003044 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003030:	f7fd fe70 	bl	8000d14 <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	2b02      	cmp	r3, #2
 800303c:	d902      	bls.n	8003044 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	73fb      	strb	r3, [r7, #15]
      break;
 8003042:	e004      	b.n	800304e <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003044:	f7ff fe5a 	bl	8002cfc <LL_RCC_PLLSAI1_IsReady>
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d1f0      	bne.n	8003030 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800304e:	7bfb      	ldrb	r3, [r7, #15]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d137      	bne.n	80030c4 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003054:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003058:	691b      	ldr	r3, [r3, #16]
 800305a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	021b      	lsls	r3, r3, #8
 8003064:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003068:	4313      	orrs	r3, r2
 800306a:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800306c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003070:	691b      	ldr	r3, [r3, #16]
 8003072:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800307e:	4313      	orrs	r3, r2
 8003080:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003082:	f7ff fe1d 	bl	8002cc0 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003086:	f7fd fe45 	bl	8000d14 <HAL_GetTick>
 800308a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800308c:	e009      	b.n	80030a2 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800308e:	f7fd fe41 	bl	8000d14 <HAL_GetTick>
 8003092:	4602      	mov	r2, r0
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	2b02      	cmp	r3, #2
 800309a:	d902      	bls.n	80030a2 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800309c:	2303      	movs	r3, #3
 800309e:	73fb      	strb	r3, [r7, #15]
        break;
 80030a0:	e004      	b.n	80030ac <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80030a2:	f7ff fe2b 	bl	8002cfc <LL_RCC_PLLSAI1_IsReady>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d1f0      	bne.n	800308e <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80030ac:	7bfb      	ldrb	r3, [r7, #15]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d108      	bne.n	80030c4 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80030b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030b6:	691a      	ldr	r2, [r3, #16]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	691b      	ldr	r3, [r3, #16]
 80030bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030c0:	4313      	orrs	r3, r2
 80030c2:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80030c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3710      	adds	r7, #16
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}

080030ce <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80030ce:	b580      	push	{r7, lr}
 80030d0:	b084      	sub	sp, #16
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80030d6:	2300      	movs	r3, #0
 80030d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80030da:	f7ff fe00 	bl	8002cde <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80030de:	f7fd fe19 	bl	8000d14 <HAL_GetTick>
 80030e2:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80030e4:	e009      	b.n	80030fa <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80030e6:	f7fd fe15 	bl	8000d14 <HAL_GetTick>
 80030ea:	4602      	mov	r2, r0
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	2b02      	cmp	r3, #2
 80030f2:	d902      	bls.n	80030fa <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80030f4:	2303      	movs	r3, #3
 80030f6:	73fb      	strb	r3, [r7, #15]
      break;
 80030f8:	e004      	b.n	8003104 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80030fa:	f7ff fdff 	bl	8002cfc <LL_RCC_PLLSAI1_IsReady>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d1f0      	bne.n	80030e6 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8003104:	7bfb      	ldrb	r3, [r7, #15]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d137      	bne.n	800317a <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800310a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800310e:	691b      	ldr	r3, [r3, #16]
 8003110:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	021b      	lsls	r3, r3, #8
 800311a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800311e:	4313      	orrs	r3, r2
 8003120:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8003122:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003126:	691b      	ldr	r3, [r3, #16]
 8003128:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003134:	4313      	orrs	r3, r2
 8003136:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003138:	f7ff fdc2 	bl	8002cc0 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800313c:	f7fd fdea 	bl	8000d14 <HAL_GetTick>
 8003140:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003142:	e009      	b.n	8003158 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003144:	f7fd fde6 	bl	8000d14 <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	2b02      	cmp	r3, #2
 8003150:	d902      	bls.n	8003158 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	73fb      	strb	r3, [r7, #15]
        break;
 8003156:	e004      	b.n	8003162 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003158:	f7ff fdd0 	bl	8002cfc <LL_RCC_PLLSAI1_IsReady>
 800315c:	4603      	mov	r3, r0
 800315e:	2b01      	cmp	r3, #1
 8003160:	d1f0      	bne.n	8003144 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8003162:	7bfb      	ldrb	r3, [r7, #15]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d108      	bne.n	800317a <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003168:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800316c:	691a      	ldr	r2, [r3, #16]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	691b      	ldr	r3, [r3, #16]
 8003172:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003176:	4313      	orrs	r3, r2
 8003178:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800317a:	7bfb      	ldrb	r3, [r7, #15]
}
 800317c:	4618      	mov	r0, r3
 800317e:	3710      	adds	r7, #16
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}

08003184 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b084      	sub	sp, #16
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800318c:	2300      	movs	r3, #0
 800318e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003190:	f7ff fda5 	bl	8002cde <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003194:	f7fd fdbe 	bl	8000d14 <HAL_GetTick>
 8003198:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800319a:	e009      	b.n	80031b0 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800319c:	f7fd fdba 	bl	8000d14 <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	d902      	bls.n	80031b0 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	73fb      	strb	r3, [r7, #15]
      break;
 80031ae:	e004      	b.n	80031ba <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80031b0:	f7ff fda4 	bl	8002cfc <LL_RCC_PLLSAI1_IsReady>
 80031b4:	4603      	mov	r3, r0
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d1f0      	bne.n	800319c <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80031ba:	7bfb      	ldrb	r3, [r7, #15]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d137      	bne.n	8003230 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80031c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031c4:	691b      	ldr	r3, [r3, #16]
 80031c6:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	021b      	lsls	r3, r3, #8
 80031d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031d4:	4313      	orrs	r3, r2
 80031d6:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80031d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031dc:	691b      	ldr	r3, [r3, #16]
 80031de:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	68db      	ldr	r3, [r3, #12]
 80031e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031ea:	4313      	orrs	r3, r2
 80031ec:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80031ee:	f7ff fd67 	bl	8002cc0 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031f2:	f7fd fd8f 	bl	8000d14 <HAL_GetTick>
 80031f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80031f8:	e009      	b.n	800320e <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80031fa:	f7fd fd8b 	bl	8000d14 <HAL_GetTick>
 80031fe:	4602      	mov	r2, r0
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	2b02      	cmp	r3, #2
 8003206:	d902      	bls.n	800320e <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8003208:	2303      	movs	r3, #3
 800320a:	73fb      	strb	r3, [r7, #15]
        break;
 800320c:	e004      	b.n	8003218 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800320e:	f7ff fd75 	bl	8002cfc <LL_RCC_PLLSAI1_IsReady>
 8003212:	4603      	mov	r3, r0
 8003214:	2b01      	cmp	r3, #1
 8003216:	d1f0      	bne.n	80031fa <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8003218:	7bfb      	ldrb	r3, [r7, #15]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d108      	bne.n	8003230 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800321e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003222:	691a      	ldr	r2, [r3, #16]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	691b      	ldr	r3, [r3, #16]
 8003228:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800322c:	4313      	orrs	r3, r2
 800322e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003230:	7bfb      	ldrb	r3, [r7, #15]
}
 8003232:	4618      	mov	r0, r3
 8003234:	3710      	adds	r7, #16
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}

0800323a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800323a:	b580      	push	{r7, lr}
 800323c:	b082      	sub	sp, #8
 800323e:	af00      	add	r7, sp, #0
 8003240:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d101      	bne.n	800324c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e049      	b.n	80032e0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003252:	b2db      	uxtb	r3, r3
 8003254:	2b00      	cmp	r3, #0
 8003256:	d106      	bne.n	8003266 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	f000 f841 	bl	80032e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2202      	movs	r2, #2
 800326a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	3304      	adds	r3, #4
 8003276:	4619      	mov	r1, r3
 8003278:	4610      	mov	r0, r2
 800327a:	f000 f9d5 	bl	8003628 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2201      	movs	r2, #1
 8003282:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2201      	movs	r2, #1
 800328a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2201      	movs	r2, #1
 8003292:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2201      	movs	r2, #1
 800329a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2201      	movs	r2, #1
 80032a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2201      	movs	r2, #1
 80032aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2201      	movs	r2, #1
 80032b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2201      	movs	r2, #1
 80032ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2201      	movs	r2, #1
 80032c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2201      	movs	r2, #1
 80032ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2201      	movs	r2, #1
 80032d2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2201      	movs	r2, #1
 80032da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032de:	2300      	movs	r3, #0
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3708      	adds	r7, #8
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b083      	sub	sp, #12
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80032f0:	bf00      	nop
 80032f2:	370c      	adds	r7, #12
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr

080032fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b085      	sub	sp, #20
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800330a:	b2db      	uxtb	r3, r3
 800330c:	2b01      	cmp	r3, #1
 800330e:	d001      	beq.n	8003314 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e036      	b.n	8003382 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2202      	movs	r2, #2
 8003318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	68da      	ldr	r2, [r3, #12]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f042 0201 	orr.w	r2, r2, #1
 800332a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a17      	ldr	r2, [pc, #92]	; (8003390 <HAL_TIM_Base_Start_IT+0x94>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d004      	beq.n	8003340 <HAL_TIM_Base_Start_IT+0x44>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800333e:	d115      	bne.n	800336c <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	689a      	ldr	r2, [r3, #8]
 8003346:	4b13      	ldr	r3, [pc, #76]	; (8003394 <HAL_TIM_Base_Start_IT+0x98>)
 8003348:	4013      	ands	r3, r2
 800334a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2b06      	cmp	r3, #6
 8003350:	d015      	beq.n	800337e <HAL_TIM_Base_Start_IT+0x82>
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003358:	d011      	beq.n	800337e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f042 0201 	orr.w	r2, r2, #1
 8003368:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800336a:	e008      	b.n	800337e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f042 0201 	orr.w	r2, r2, #1
 800337a:	601a      	str	r2, [r3, #0]
 800337c:	e000      	b.n	8003380 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800337e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003380:	2300      	movs	r3, #0
}
 8003382:	4618      	mov	r0, r3
 8003384:	3714      	adds	r7, #20
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop
 8003390:	40012c00 	.word	0x40012c00
 8003394:	00010007 	.word	0x00010007

08003398 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b082      	sub	sp, #8
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	691b      	ldr	r3, [r3, #16]
 80033a6:	f003 0302 	and.w	r3, r3, #2
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d122      	bne.n	80033f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	f003 0302 	and.w	r3, r3, #2
 80033b8:	2b02      	cmp	r3, #2
 80033ba:	d11b      	bne.n	80033f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f06f 0202 	mvn.w	r2, #2
 80033c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2201      	movs	r2, #1
 80033ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	699b      	ldr	r3, [r3, #24]
 80033d2:	f003 0303 	and.w	r3, r3, #3
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d003      	beq.n	80033e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f000 f905 	bl	80035ea <HAL_TIM_IC_CaptureCallback>
 80033e0:	e005      	b.n	80033ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f000 f8f7 	bl	80035d6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	f000 f908 	bl	80035fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	691b      	ldr	r3, [r3, #16]
 80033fa:	f003 0304 	and.w	r3, r3, #4
 80033fe:	2b04      	cmp	r3, #4
 8003400:	d122      	bne.n	8003448 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	f003 0304 	and.w	r3, r3, #4
 800340c:	2b04      	cmp	r3, #4
 800340e:	d11b      	bne.n	8003448 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f06f 0204 	mvn.w	r2, #4
 8003418:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2202      	movs	r2, #2
 800341e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	699b      	ldr	r3, [r3, #24]
 8003426:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800342a:	2b00      	cmp	r3, #0
 800342c:	d003      	beq.n	8003436 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f000 f8db 	bl	80035ea <HAL_TIM_IC_CaptureCallback>
 8003434:	e005      	b.n	8003442 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f000 f8cd 	bl	80035d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f000 f8de 	bl	80035fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	691b      	ldr	r3, [r3, #16]
 800344e:	f003 0308 	and.w	r3, r3, #8
 8003452:	2b08      	cmp	r3, #8
 8003454:	d122      	bne.n	800349c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	f003 0308 	and.w	r3, r3, #8
 8003460:	2b08      	cmp	r3, #8
 8003462:	d11b      	bne.n	800349c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f06f 0208 	mvn.w	r2, #8
 800346c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2204      	movs	r2, #4
 8003472:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	69db      	ldr	r3, [r3, #28]
 800347a:	f003 0303 	and.w	r3, r3, #3
 800347e:	2b00      	cmp	r3, #0
 8003480:	d003      	beq.n	800348a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f000 f8b1 	bl	80035ea <HAL_TIM_IC_CaptureCallback>
 8003488:	e005      	b.n	8003496 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f000 f8a3 	bl	80035d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f000 f8b4 	bl	80035fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	691b      	ldr	r3, [r3, #16]
 80034a2:	f003 0310 	and.w	r3, r3, #16
 80034a6:	2b10      	cmp	r3, #16
 80034a8:	d122      	bne.n	80034f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	f003 0310 	and.w	r3, r3, #16
 80034b4:	2b10      	cmp	r3, #16
 80034b6:	d11b      	bne.n	80034f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f06f 0210 	mvn.w	r2, #16
 80034c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2208      	movs	r2, #8
 80034c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	69db      	ldr	r3, [r3, #28]
 80034ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d003      	beq.n	80034de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f000 f887 	bl	80035ea <HAL_TIM_IC_CaptureCallback>
 80034dc:	e005      	b.n	80034ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f000 f879 	bl	80035d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f000 f88a 	bl	80035fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	691b      	ldr	r3, [r3, #16]
 80034f6:	f003 0301 	and.w	r3, r3, #1
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d10e      	bne.n	800351c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	f003 0301 	and.w	r3, r3, #1
 8003508:	2b01      	cmp	r3, #1
 800350a:	d107      	bne.n	800351c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f06f 0201 	mvn.w	r2, #1
 8003514:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f7fd f9a0 	bl	800085c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	691b      	ldr	r3, [r3, #16]
 8003522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003526:	2b80      	cmp	r3, #128	; 0x80
 8003528:	d10e      	bne.n	8003548 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003534:	2b80      	cmp	r3, #128	; 0x80
 8003536:	d107      	bne.n	8003548 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003540:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f000 f8de 	bl	8003704 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	691b      	ldr	r3, [r3, #16]
 800354e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003552:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003556:	d10e      	bne.n	8003576 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	68db      	ldr	r3, [r3, #12]
 800355e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003562:	2b80      	cmp	r3, #128	; 0x80
 8003564:	d107      	bne.n	8003576 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800356e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f000 f8d1 	bl	8003718 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	691b      	ldr	r3, [r3, #16]
 800357c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003580:	2b40      	cmp	r3, #64	; 0x40
 8003582:	d10e      	bne.n	80035a2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	68db      	ldr	r3, [r3, #12]
 800358a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800358e:	2b40      	cmp	r3, #64	; 0x40
 8003590:	d107      	bne.n	80035a2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800359a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f000 f838 	bl	8003612 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	691b      	ldr	r3, [r3, #16]
 80035a8:	f003 0320 	and.w	r3, r3, #32
 80035ac:	2b20      	cmp	r3, #32
 80035ae:	d10e      	bne.n	80035ce <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	68db      	ldr	r3, [r3, #12]
 80035b6:	f003 0320 	and.w	r3, r3, #32
 80035ba:	2b20      	cmp	r3, #32
 80035bc:	d107      	bne.n	80035ce <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f06f 0220 	mvn.w	r2, #32
 80035c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f000 f891 	bl	80036f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80035ce:	bf00      	nop
 80035d0:	3708      	adds	r7, #8
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}

080035d6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035d6:	b480      	push	{r7}
 80035d8:	b083      	sub	sp, #12
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80035de:	bf00      	nop
 80035e0:	370c      	adds	r7, #12
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr

080035ea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80035ea:	b480      	push	{r7}
 80035ec:	b083      	sub	sp, #12
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80035f2:	bf00      	nop
 80035f4:	370c      	adds	r7, #12
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr

080035fe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80035fe:	b480      	push	{r7}
 8003600:	b083      	sub	sp, #12
 8003602:	af00      	add	r7, sp, #0
 8003604:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003606:	bf00      	nop
 8003608:	370c      	adds	r7, #12
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr

08003612 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003612:	b480      	push	{r7}
 8003614:	b083      	sub	sp, #12
 8003616:	af00      	add	r7, sp, #0
 8003618:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800361a:	bf00      	nop
 800361c:	370c      	adds	r7, #12
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr
	...

08003628 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003628:	b480      	push	{r7}
 800362a:	b085      	sub	sp, #20
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	4a2a      	ldr	r2, [pc, #168]	; (80036e4 <TIM_Base_SetConfig+0xbc>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d003      	beq.n	8003648 <TIM_Base_SetConfig+0x20>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003646:	d108      	bne.n	800365a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800364e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	68fa      	ldr	r2, [r7, #12]
 8003656:	4313      	orrs	r3, r2
 8003658:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4a21      	ldr	r2, [pc, #132]	; (80036e4 <TIM_Base_SetConfig+0xbc>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d00b      	beq.n	800367a <TIM_Base_SetConfig+0x52>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003668:	d007      	beq.n	800367a <TIM_Base_SetConfig+0x52>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4a1e      	ldr	r2, [pc, #120]	; (80036e8 <TIM_Base_SetConfig+0xc0>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d003      	beq.n	800367a <TIM_Base_SetConfig+0x52>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	4a1d      	ldr	r2, [pc, #116]	; (80036ec <TIM_Base_SetConfig+0xc4>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d108      	bne.n	800368c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003680:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	68fa      	ldr	r2, [r7, #12]
 8003688:	4313      	orrs	r3, r2
 800368a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	695b      	ldr	r3, [r3, #20]
 8003696:	4313      	orrs	r3, r2
 8003698:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	68fa      	ldr	r2, [r7, #12]
 800369e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	689a      	ldr	r2, [r3, #8]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	4a0c      	ldr	r2, [pc, #48]	; (80036e4 <TIM_Base_SetConfig+0xbc>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d007      	beq.n	80036c8 <TIM_Base_SetConfig+0xa0>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	4a0b      	ldr	r2, [pc, #44]	; (80036e8 <TIM_Base_SetConfig+0xc0>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d003      	beq.n	80036c8 <TIM_Base_SetConfig+0xa0>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	4a0a      	ldr	r2, [pc, #40]	; (80036ec <TIM_Base_SetConfig+0xc4>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d103      	bne.n	80036d0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	691a      	ldr	r2, [r3, #16]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2201      	movs	r2, #1
 80036d4:	615a      	str	r2, [r3, #20]
}
 80036d6:	bf00      	nop
 80036d8:	3714      	adds	r7, #20
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr
 80036e2:	bf00      	nop
 80036e4:	40012c00 	.word	0x40012c00
 80036e8:	40014400 	.word	0x40014400
 80036ec:	40014800 	.word	0x40014800

080036f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80036f8:	bf00      	nop
 80036fa:	370c      	adds	r7, #12
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr

08003704 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800370c:	bf00      	nop
 800370e:	370c      	adds	r7, #12
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr

08003718 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003720:	bf00      	nop
 8003722:	370c      	adds	r7, #12
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr

0800372c <LL_RCC_GetUSARTClockSource>:
{
 800372c:	b480      	push	{r7}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8003734:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003738:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	4013      	ands	r3, r2
}
 8003740:	4618      	mov	r0, r3
 8003742:	370c      	adds	r7, #12
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr

0800374c <LL_RCC_GetLPUARTClockSource>:
{
 800374c:	b480      	push	{r7}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8003754:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003758:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	4013      	ands	r3, r2
}
 8003760:	4618      	mov	r0, r3
 8003762:	370c      	adds	r7, #12
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr

0800376c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b082      	sub	sp, #8
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d101      	bne.n	800377e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e042      	b.n	8003804 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003784:	2b00      	cmp	r3, #0
 8003786:	d106      	bne.n	8003796 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f7fd f8e1 	bl	8000958 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2224      	movs	r2, #36	; 0x24
 800379a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f022 0201 	bic.w	r2, r2, #1
 80037ac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f000 f82c 	bl	800380c <UART_SetConfig>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d101      	bne.n	80037be <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e022      	b.n	8003804 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d002      	beq.n	80037cc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f000 fa46 	bl	8003c58 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	685a      	ldr	r2, [r3, #4]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	689a      	ldr	r2, [r3, #8]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f042 0201 	orr.w	r2, r2, #1
 80037fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f000 facd 	bl	8003d9c <UART_CheckIdleState>
 8003802:	4603      	mov	r3, r0
}
 8003804:	4618      	mov	r0, r3
 8003806:	3708      	adds	r7, #8
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}

0800380c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800380c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003810:	b08c      	sub	sp, #48	; 0x30
 8003812:	af00      	add	r7, sp, #0
 8003814:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003816:	2300      	movs	r3, #0
 8003818:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	689a      	ldr	r2, [r3, #8]
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	691b      	ldr	r3, [r3, #16]
 8003824:	431a      	orrs	r2, r3
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	695b      	ldr	r3, [r3, #20]
 800382a:	431a      	orrs	r2, r3
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	69db      	ldr	r3, [r3, #28]
 8003830:	4313      	orrs	r3, r2
 8003832:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	4baf      	ldr	r3, [pc, #700]	; (8003af8 <UART_SetConfig+0x2ec>)
 800383c:	4013      	ands	r3, r2
 800383e:	697a      	ldr	r2, [r7, #20]
 8003840:	6812      	ldr	r2, [r2, #0]
 8003842:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003844:	430b      	orrs	r3, r1
 8003846:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	68da      	ldr	r2, [r3, #12]
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	430a      	orrs	r2, r1
 800385c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	699b      	ldr	r3, [r3, #24]
 8003862:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4aa4      	ldr	r2, [pc, #656]	; (8003afc <UART_SetConfig+0x2f0>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d004      	beq.n	8003878 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	6a1b      	ldr	r3, [r3, #32]
 8003872:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003874:	4313      	orrs	r3, r2
 8003876:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003882:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003886:	697a      	ldr	r2, [r7, #20]
 8003888:	6812      	ldr	r2, [r2, #0]
 800388a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800388c:	430b      	orrs	r3, r1
 800388e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003896:	f023 010f 	bic.w	r1, r3, #15
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	430a      	orrs	r2, r1
 80038a4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a95      	ldr	r2, [pc, #596]	; (8003b00 <UART_SetConfig+0x2f4>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d125      	bne.n	80038fc <UART_SetConfig+0xf0>
 80038b0:	2003      	movs	r0, #3
 80038b2:	f7ff ff3b 	bl	800372c <LL_RCC_GetUSARTClockSource>
 80038b6:	4603      	mov	r3, r0
 80038b8:	2b03      	cmp	r3, #3
 80038ba:	d81b      	bhi.n	80038f4 <UART_SetConfig+0xe8>
 80038bc:	a201      	add	r2, pc, #4	; (adr r2, 80038c4 <UART_SetConfig+0xb8>)
 80038be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038c2:	bf00      	nop
 80038c4:	080038d5 	.word	0x080038d5
 80038c8:	080038e5 	.word	0x080038e5
 80038cc:	080038dd 	.word	0x080038dd
 80038d0:	080038ed 	.word	0x080038ed
 80038d4:	2301      	movs	r3, #1
 80038d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038da:	e042      	b.n	8003962 <UART_SetConfig+0x156>
 80038dc:	2302      	movs	r3, #2
 80038de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038e2:	e03e      	b.n	8003962 <UART_SetConfig+0x156>
 80038e4:	2304      	movs	r3, #4
 80038e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038ea:	e03a      	b.n	8003962 <UART_SetConfig+0x156>
 80038ec:	2308      	movs	r3, #8
 80038ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038f2:	e036      	b.n	8003962 <UART_SetConfig+0x156>
 80038f4:	2310      	movs	r3, #16
 80038f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038fa:	e032      	b.n	8003962 <UART_SetConfig+0x156>
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a7e      	ldr	r2, [pc, #504]	; (8003afc <UART_SetConfig+0x2f0>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d12a      	bne.n	800395c <UART_SetConfig+0x150>
 8003906:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800390a:	f7ff ff1f 	bl	800374c <LL_RCC_GetLPUARTClockSource>
 800390e:	4603      	mov	r3, r0
 8003910:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003914:	d01a      	beq.n	800394c <UART_SetConfig+0x140>
 8003916:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800391a:	d81b      	bhi.n	8003954 <UART_SetConfig+0x148>
 800391c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003920:	d00c      	beq.n	800393c <UART_SetConfig+0x130>
 8003922:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003926:	d815      	bhi.n	8003954 <UART_SetConfig+0x148>
 8003928:	2b00      	cmp	r3, #0
 800392a:	d003      	beq.n	8003934 <UART_SetConfig+0x128>
 800392c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003930:	d008      	beq.n	8003944 <UART_SetConfig+0x138>
 8003932:	e00f      	b.n	8003954 <UART_SetConfig+0x148>
 8003934:	2300      	movs	r3, #0
 8003936:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800393a:	e012      	b.n	8003962 <UART_SetConfig+0x156>
 800393c:	2302      	movs	r3, #2
 800393e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003942:	e00e      	b.n	8003962 <UART_SetConfig+0x156>
 8003944:	2304      	movs	r3, #4
 8003946:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800394a:	e00a      	b.n	8003962 <UART_SetConfig+0x156>
 800394c:	2308      	movs	r3, #8
 800394e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003952:	e006      	b.n	8003962 <UART_SetConfig+0x156>
 8003954:	2310      	movs	r3, #16
 8003956:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800395a:	e002      	b.n	8003962 <UART_SetConfig+0x156>
 800395c:	2310      	movs	r3, #16
 800395e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a65      	ldr	r2, [pc, #404]	; (8003afc <UART_SetConfig+0x2f0>)
 8003968:	4293      	cmp	r3, r2
 800396a:	f040 8097 	bne.w	8003a9c <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800396e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003972:	2b08      	cmp	r3, #8
 8003974:	d823      	bhi.n	80039be <UART_SetConfig+0x1b2>
 8003976:	a201      	add	r2, pc, #4	; (adr r2, 800397c <UART_SetConfig+0x170>)
 8003978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800397c:	080039a1 	.word	0x080039a1
 8003980:	080039bf 	.word	0x080039bf
 8003984:	080039a9 	.word	0x080039a9
 8003988:	080039bf 	.word	0x080039bf
 800398c:	080039af 	.word	0x080039af
 8003990:	080039bf 	.word	0x080039bf
 8003994:	080039bf 	.word	0x080039bf
 8003998:	080039bf 	.word	0x080039bf
 800399c:	080039b7 	.word	0x080039b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039a0:	f7fe ff00 	bl	80027a4 <HAL_RCC_GetPCLK1Freq>
 80039a4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80039a6:	e010      	b.n	80039ca <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039a8:	4b56      	ldr	r3, [pc, #344]	; (8003b04 <UART_SetConfig+0x2f8>)
 80039aa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80039ac:	e00d      	b.n	80039ca <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039ae:	f7fe fe79 	bl	80026a4 <HAL_RCC_GetSysClockFreq>
 80039b2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80039b4:	e009      	b.n	80039ca <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039ba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80039bc:	e005      	b.n	80039ca <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 80039be:	2300      	movs	r3, #0
 80039c0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80039c8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80039ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	f000 812a 	beq.w	8003c26 <UART_SetConfig+0x41a>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d6:	4a4c      	ldr	r2, [pc, #304]	; (8003b08 <UART_SetConfig+0x2fc>)
 80039d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80039dc:	461a      	mov	r2, r3
 80039de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80039e4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	685a      	ldr	r2, [r3, #4]
 80039ea:	4613      	mov	r3, r2
 80039ec:	005b      	lsls	r3, r3, #1
 80039ee:	4413      	add	r3, r2
 80039f0:	69ba      	ldr	r2, [r7, #24]
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d305      	bcc.n	8003a02 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80039fc:	69ba      	ldr	r2, [r7, #24]
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d903      	bls.n	8003a0a <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003a08:	e10d      	b.n	8003c26 <UART_SetConfig+0x41a>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	60bb      	str	r3, [r7, #8]
 8003a10:	60fa      	str	r2, [r7, #12]
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a16:	4a3c      	ldr	r2, [pc, #240]	; (8003b08 <UART_SetConfig+0x2fc>)
 8003a18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	2200      	movs	r2, #0
 8003a20:	603b      	str	r3, [r7, #0]
 8003a22:	607a      	str	r2, [r7, #4]
 8003a24:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a28:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003a2c:	f7fc fba8 	bl	8000180 <__aeabi_uldivmod>
 8003a30:	4602      	mov	r2, r0
 8003a32:	460b      	mov	r3, r1
 8003a34:	4610      	mov	r0, r2
 8003a36:	4619      	mov	r1, r3
 8003a38:	f04f 0200 	mov.w	r2, #0
 8003a3c:	f04f 0300 	mov.w	r3, #0
 8003a40:	020b      	lsls	r3, r1, #8
 8003a42:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003a46:	0202      	lsls	r2, r0, #8
 8003a48:	6979      	ldr	r1, [r7, #20]
 8003a4a:	6849      	ldr	r1, [r1, #4]
 8003a4c:	0849      	lsrs	r1, r1, #1
 8003a4e:	2000      	movs	r0, #0
 8003a50:	460c      	mov	r4, r1
 8003a52:	4605      	mov	r5, r0
 8003a54:	eb12 0804 	adds.w	r8, r2, r4
 8003a58:	eb43 0905 	adc.w	r9, r3, r5
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	2200      	movs	r2, #0
 8003a62:	469a      	mov	sl, r3
 8003a64:	4693      	mov	fp, r2
 8003a66:	4652      	mov	r2, sl
 8003a68:	465b      	mov	r3, fp
 8003a6a:	4640      	mov	r0, r8
 8003a6c:	4649      	mov	r1, r9
 8003a6e:	f7fc fb87 	bl	8000180 <__aeabi_uldivmod>
 8003a72:	4602      	mov	r2, r0
 8003a74:	460b      	mov	r3, r1
 8003a76:	4613      	mov	r3, r2
 8003a78:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003a7a:	6a3b      	ldr	r3, [r7, #32]
 8003a7c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a80:	d308      	bcc.n	8003a94 <UART_SetConfig+0x288>
 8003a82:	6a3b      	ldr	r3, [r7, #32]
 8003a84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a88:	d204      	bcs.n	8003a94 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	6a3a      	ldr	r2, [r7, #32]
 8003a90:	60da      	str	r2, [r3, #12]
 8003a92:	e0c8      	b.n	8003c26 <UART_SetConfig+0x41a>
        }
        else
        {
          ret = HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003a9a:	e0c4      	b.n	8003c26 <UART_SetConfig+0x41a>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	69db      	ldr	r3, [r3, #28]
 8003aa0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003aa4:	d16d      	bne.n	8003b82 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8003aa6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003aaa:	3b01      	subs	r3, #1
 8003aac:	2b07      	cmp	r3, #7
 8003aae:	d82d      	bhi.n	8003b0c <UART_SetConfig+0x300>
 8003ab0:	a201      	add	r2, pc, #4	; (adr r2, 8003ab8 <UART_SetConfig+0x2ac>)
 8003ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ab6:	bf00      	nop
 8003ab8:	08003ad9 	.word	0x08003ad9
 8003abc:	08003ae1 	.word	0x08003ae1
 8003ac0:	08003b0d 	.word	0x08003b0d
 8003ac4:	08003ae7 	.word	0x08003ae7
 8003ac8:	08003b0d 	.word	0x08003b0d
 8003acc:	08003b0d 	.word	0x08003b0d
 8003ad0:	08003b0d 	.word	0x08003b0d
 8003ad4:	08003aef 	.word	0x08003aef
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ad8:	f7fe fe7a 	bl	80027d0 <HAL_RCC_GetPCLK2Freq>
 8003adc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003ade:	e01b      	b.n	8003b18 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ae0:	4b08      	ldr	r3, [pc, #32]	; (8003b04 <UART_SetConfig+0x2f8>)
 8003ae2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003ae4:	e018      	b.n	8003b18 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ae6:	f7fe fddd 	bl	80026a4 <HAL_RCC_GetSysClockFreq>
 8003aea:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003aec:	e014      	b.n	8003b18 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003aee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003af2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003af4:	e010      	b.n	8003b18 <UART_SetConfig+0x30c>
 8003af6:	bf00      	nop
 8003af8:	cfff69f3 	.word	0xcfff69f3
 8003afc:	40008000 	.word	0x40008000
 8003b00:	40013800 	.word	0x40013800
 8003b04:	00f42400 	.word	0x00f42400
 8003b08:	08006f70 	.word	0x08006f70
      default:
        pclk = 0U;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003b16:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	f000 8083 	beq.w	8003c26 <UART_SetConfig+0x41a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b24:	4a4a      	ldr	r2, [pc, #296]	; (8003c50 <UART_SetConfig+0x444>)
 8003b26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003b32:	005a      	lsls	r2, r3, #1
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	085b      	lsrs	r3, r3, #1
 8003b3a:	441a      	add	r2, r3
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b44:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b46:	6a3b      	ldr	r3, [r7, #32]
 8003b48:	2b0f      	cmp	r3, #15
 8003b4a:	d916      	bls.n	8003b7a <UART_SetConfig+0x36e>
 8003b4c:	6a3b      	ldr	r3, [r7, #32]
 8003b4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b52:	d212      	bcs.n	8003b7a <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003b54:	6a3b      	ldr	r3, [r7, #32]
 8003b56:	b29b      	uxth	r3, r3
 8003b58:	f023 030f 	bic.w	r3, r3, #15
 8003b5c:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003b5e:	6a3b      	ldr	r3, [r7, #32]
 8003b60:	085b      	lsrs	r3, r3, #1
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	f003 0307 	and.w	r3, r3, #7
 8003b68:	b29a      	uxth	r2, r3
 8003b6a:	8bfb      	ldrh	r3, [r7, #30]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	8bfa      	ldrh	r2, [r7, #30]
 8003b76:	60da      	str	r2, [r3, #12]
 8003b78:	e055      	b.n	8003c26 <UART_SetConfig+0x41a>
      }
      else
      {
        ret = HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003b80:	e051      	b.n	8003c26 <UART_SetConfig+0x41a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003b82:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003b86:	3b01      	subs	r3, #1
 8003b88:	2b07      	cmp	r3, #7
 8003b8a:	d822      	bhi.n	8003bd2 <UART_SetConfig+0x3c6>
 8003b8c:	a201      	add	r2, pc, #4	; (adr r2, 8003b94 <UART_SetConfig+0x388>)
 8003b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b92:	bf00      	nop
 8003b94:	08003bb5 	.word	0x08003bb5
 8003b98:	08003bbd 	.word	0x08003bbd
 8003b9c:	08003bd3 	.word	0x08003bd3
 8003ba0:	08003bc3 	.word	0x08003bc3
 8003ba4:	08003bd3 	.word	0x08003bd3
 8003ba8:	08003bd3 	.word	0x08003bd3
 8003bac:	08003bd3 	.word	0x08003bd3
 8003bb0:	08003bcb 	.word	0x08003bcb
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003bb4:	f7fe fe0c 	bl	80027d0 <HAL_RCC_GetPCLK2Freq>
 8003bb8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003bba:	e010      	b.n	8003bde <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003bbc:	4b25      	ldr	r3, [pc, #148]	; (8003c54 <UART_SetConfig+0x448>)
 8003bbe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003bc0:	e00d      	b.n	8003bde <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bc2:	f7fe fd6f 	bl	80026a4 <HAL_RCC_GetSysClockFreq>
 8003bc6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003bc8:	e009      	b.n	8003bde <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003bca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003bd0:	e005      	b.n	8003bde <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003bdc:	bf00      	nop
    }

    if (pclk != 0U)
 8003bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d020      	beq.n	8003c26 <UART_SetConfig+0x41a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be8:	4a19      	ldr	r2, [pc, #100]	; (8003c50 <UART_SetConfig+0x444>)
 8003bea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003bee:	461a      	mov	r2, r3
 8003bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf2:	fbb3 f2f2 	udiv	r2, r3, r2
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	085b      	lsrs	r3, r3, #1
 8003bfc:	441a      	add	r2, r3
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c06:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c08:	6a3b      	ldr	r3, [r7, #32]
 8003c0a:	2b0f      	cmp	r3, #15
 8003c0c:	d908      	bls.n	8003c20 <UART_SetConfig+0x414>
 8003c0e:	6a3b      	ldr	r3, [r7, #32]
 8003c10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c14:	d204      	bcs.n	8003c20 <UART_SetConfig+0x414>
      {
        huart->Instance->BRR = usartdiv;
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	6a3a      	ldr	r2, [r7, #32]
 8003c1c:	60da      	str	r2, [r3, #12]
 8003c1e:	e002      	b.n	8003c26 <UART_SetConfig+0x41a>
      }
      else
      {
        ret = HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	2201      	movs	r2, #1
 8003c2a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	2201      	movs	r2, #1
 8003c32:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003c42:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3730      	adds	r7, #48	; 0x30
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c50:	08006f70 	.word	0x08006f70
 8003c54:	00f42400 	.word	0x00f42400

08003c58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b083      	sub	sp, #12
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c64:	f003 0301 	and.w	r3, r3, #1
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d00a      	beq.n	8003c82 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	430a      	orrs	r2, r1
 8003c80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c86:	f003 0302 	and.w	r3, r3, #2
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d00a      	beq.n	8003ca4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	430a      	orrs	r2, r1
 8003ca2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca8:	f003 0304 	and.w	r3, r3, #4
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d00a      	beq.n	8003cc6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	430a      	orrs	r2, r1
 8003cc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cca:	f003 0308 	and.w	r3, r3, #8
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d00a      	beq.n	8003ce8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	430a      	orrs	r2, r1
 8003ce6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cec:	f003 0310 	and.w	r3, r3, #16
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d00a      	beq.n	8003d0a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	430a      	orrs	r2, r1
 8003d08:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d0e:	f003 0320 	and.w	r3, r3, #32
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d00a      	beq.n	8003d2c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	430a      	orrs	r2, r1
 8003d2a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d01a      	beq.n	8003d6e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	430a      	orrs	r2, r1
 8003d4c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d56:	d10a      	bne.n	8003d6e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	430a      	orrs	r2, r1
 8003d6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d00a      	beq.n	8003d90 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	430a      	orrs	r2, r1
 8003d8e:	605a      	str	r2, [r3, #4]
  }
}
 8003d90:	bf00      	nop
 8003d92:	370c      	adds	r7, #12
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr

08003d9c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b086      	sub	sp, #24
 8003da0:	af02      	add	r7, sp, #8
 8003da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003dac:	f7fc ffb2 	bl	8000d14 <HAL_GetTick>
 8003db0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 0308 	and.w	r3, r3, #8
 8003dbc:	2b08      	cmp	r3, #8
 8003dbe:	d10e      	bne.n	8003dde <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003dc0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003dc4:	9300      	str	r3, [sp, #0]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f000 f82f 	bl	8003e32 <UART_WaitOnFlagUntilTimeout>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d001      	beq.n	8003dde <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003dda:	2303      	movs	r3, #3
 8003ddc:	e025      	b.n	8003e2a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0304 	and.w	r3, r3, #4
 8003de8:	2b04      	cmp	r3, #4
 8003dea:	d10e      	bne.n	8003e0a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003dec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003df0:	9300      	str	r3, [sp, #0]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2200      	movs	r2, #0
 8003df6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f000 f819 	bl	8003e32 <UART_WaitOnFlagUntilTimeout>
 8003e00:	4603      	mov	r3, r0
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d001      	beq.n	8003e0a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e06:	2303      	movs	r3, #3
 8003e08:	e00f      	b.n	8003e2a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2220      	movs	r2, #32
 8003e0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2220      	movs	r2, #32
 8003e16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2200      	movs	r2, #0
 8003e24:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003e28:	2300      	movs	r3, #0
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3710      	adds	r7, #16
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}

08003e32 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003e32:	b580      	push	{r7, lr}
 8003e34:	b09c      	sub	sp, #112	; 0x70
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	60f8      	str	r0, [r7, #12]
 8003e3a:	60b9      	str	r1, [r7, #8]
 8003e3c:	603b      	str	r3, [r7, #0]
 8003e3e:	4613      	mov	r3, r2
 8003e40:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e42:	e0a9      	b.n	8003f98 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e4a:	f000 80a5 	beq.w	8003f98 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e4e:	f7fc ff61 	bl	8000d14 <HAL_GetTick>
 8003e52:	4602      	mov	r2, r0
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	1ad3      	subs	r3, r2, r3
 8003e58:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d302      	bcc.n	8003e64 <UART_WaitOnFlagUntilTimeout+0x32>
 8003e5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d140      	bne.n	8003ee6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e6c:	e853 3f00 	ldrex	r3, [r3]
 8003e70:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003e72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e74:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003e78:	667b      	str	r3, [r7, #100]	; 0x64
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	461a      	mov	r2, r3
 8003e80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e82:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e84:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e86:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003e88:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003e8a:	e841 2300 	strex	r3, r2, [r1]
 8003e8e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003e90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d1e6      	bne.n	8003e64 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	3308      	adds	r3, #8
 8003e9c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ea0:	e853 3f00 	ldrex	r3, [r3]
 8003ea4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ea8:	f023 0301 	bic.w	r3, r3, #1
 8003eac:	663b      	str	r3, [r7, #96]	; 0x60
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	3308      	adds	r3, #8
 8003eb4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003eb6:	64ba      	str	r2, [r7, #72]	; 0x48
 8003eb8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003ebc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ebe:	e841 2300 	strex	r3, r2, [r1]
 8003ec2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003ec4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d1e5      	bne.n	8003e96 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2220      	movs	r2, #32
 8003ece:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2220      	movs	r2, #32
 8003ed6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2200      	movs	r2, #0
 8003ede:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	e069      	b.n	8003fba <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 0304 	and.w	r3, r3, #4
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d051      	beq.n	8003f98 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	69db      	ldr	r3, [r3, #28]
 8003efa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003efe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f02:	d149      	bne.n	8003f98 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f0c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f16:	e853 3f00 	ldrex	r3, [r3]
 8003f1a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f22:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	461a      	mov	r2, r3
 8003f2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f2c:	637b      	str	r3, [r7, #52]	; 0x34
 8003f2e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f30:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f34:	e841 2300 	strex	r3, r2, [r1]
 8003f38:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d1e6      	bne.n	8003f0e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	3308      	adds	r3, #8
 8003f46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	e853 3f00 	ldrex	r3, [r3]
 8003f4e:	613b      	str	r3, [r7, #16]
   return(result);
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	f023 0301 	bic.w	r3, r3, #1
 8003f56:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	3308      	adds	r3, #8
 8003f5e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003f60:	623a      	str	r2, [r7, #32]
 8003f62:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f64:	69f9      	ldr	r1, [r7, #28]
 8003f66:	6a3a      	ldr	r2, [r7, #32]
 8003f68:	e841 2300 	strex	r3, r2, [r1]
 8003f6c:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d1e5      	bne.n	8003f40 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2220      	movs	r2, #32
 8003f78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2220      	movs	r2, #32
 8003f80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2220      	movs	r2, #32
 8003f88:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8003f94:	2303      	movs	r3, #3
 8003f96:	e010      	b.n	8003fba <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	69da      	ldr	r2, [r3, #28]
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	68ba      	ldr	r2, [r7, #8]
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	bf0c      	ite	eq
 8003fa8:	2301      	moveq	r3, #1
 8003faa:	2300      	movne	r3, #0
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	461a      	mov	r2, r3
 8003fb0:	79fb      	ldrb	r3, [r7, #7]
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	f43f af46 	beq.w	8003e44 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003fb8:	2300      	movs	r3, #0
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3770      	adds	r7, #112	; 0x70
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}

08003fc2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003fc2:	b480      	push	{r7}
 8003fc4:	b085      	sub	sp, #20
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d101      	bne.n	8003fd8 <HAL_UARTEx_DisableFifoMode+0x16>
 8003fd4:	2302      	movs	r3, #2
 8003fd6:	e027      	b.n	8004028 <HAL_UARTEx_DisableFifoMode+0x66>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2224      	movs	r2, #36	; 0x24
 8003fe4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f022 0201 	bic.w	r2, r2, #1
 8003ffe:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004006:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2200      	movs	r2, #0
 800400c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	68fa      	ldr	r2, [r7, #12]
 8004014:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2220      	movs	r2, #32
 800401a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2200      	movs	r2, #0
 8004022:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004026:	2300      	movs	r3, #0
}
 8004028:	4618      	mov	r0, r3
 800402a:	3714      	adds	r7, #20
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr

08004034 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b084      	sub	sp, #16
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
 800403c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004044:	2b01      	cmp	r3, #1
 8004046:	d101      	bne.n	800404c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004048:	2302      	movs	r3, #2
 800404a:	e02d      	b.n	80040a8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2201      	movs	r2, #1
 8004050:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2224      	movs	r2, #36	; 0x24
 8004058:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f022 0201 	bic.w	r2, r2, #1
 8004072:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	683a      	ldr	r2, [r7, #0]
 8004084:	430a      	orrs	r2, r1
 8004086:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	f000 f84f 	bl	800412c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	68fa      	ldr	r2, [r7, #12]
 8004094:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2220      	movs	r2, #32
 800409a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80040a6:	2300      	movs	r3, #0
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3710      	adds	r7, #16
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b084      	sub	sp, #16
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
 80040b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d101      	bne.n	80040c8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80040c4:	2302      	movs	r3, #2
 80040c6:	e02d      	b.n	8004124 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2201      	movs	r2, #1
 80040cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2224      	movs	r2, #36	; 0x24
 80040d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f022 0201 	bic.w	r2, r2, #1
 80040ee:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	683a      	ldr	r2, [r7, #0]
 8004100:	430a      	orrs	r2, r1
 8004102:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f000 f811 	bl	800412c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	68fa      	ldr	r2, [r7, #12]
 8004110:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2220      	movs	r2, #32
 8004116:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2200      	movs	r2, #0
 800411e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004122:	2300      	movs	r3, #0
}
 8004124:	4618      	mov	r0, r3
 8004126:	3710      	adds	r7, #16
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}

0800412c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800412c:	b480      	push	{r7}
 800412e:	b085      	sub	sp, #20
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004138:	2b00      	cmp	r3, #0
 800413a:	d108      	bne.n	800414e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2201      	movs	r2, #1
 8004140:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2201      	movs	r2, #1
 8004148:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800414c:	e031      	b.n	80041b2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800414e:	2308      	movs	r3, #8
 8004150:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004152:	2308      	movs	r3, #8
 8004154:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	0e5b      	lsrs	r3, r3, #25
 800415e:	b2db      	uxtb	r3, r3
 8004160:	f003 0307 	and.w	r3, r3, #7
 8004164:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	0f5b      	lsrs	r3, r3, #29
 800416e:	b2db      	uxtb	r3, r3
 8004170:	f003 0307 	and.w	r3, r3, #7
 8004174:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004176:	7bbb      	ldrb	r3, [r7, #14]
 8004178:	7b3a      	ldrb	r2, [r7, #12]
 800417a:	4911      	ldr	r1, [pc, #68]	; (80041c0 <UARTEx_SetNbDataToProcess+0x94>)
 800417c:	5c8a      	ldrb	r2, [r1, r2]
 800417e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004182:	7b3a      	ldrb	r2, [r7, #12]
 8004184:	490f      	ldr	r1, [pc, #60]	; (80041c4 <UARTEx_SetNbDataToProcess+0x98>)
 8004186:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004188:	fb93 f3f2 	sdiv	r3, r3, r2
 800418c:	b29a      	uxth	r2, r3
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004194:	7bfb      	ldrb	r3, [r7, #15]
 8004196:	7b7a      	ldrb	r2, [r7, #13]
 8004198:	4909      	ldr	r1, [pc, #36]	; (80041c0 <UARTEx_SetNbDataToProcess+0x94>)
 800419a:	5c8a      	ldrb	r2, [r1, r2]
 800419c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80041a0:	7b7a      	ldrb	r2, [r7, #13]
 80041a2:	4908      	ldr	r1, [pc, #32]	; (80041c4 <UARTEx_SetNbDataToProcess+0x98>)
 80041a4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80041a6:	fb93 f3f2 	sdiv	r3, r3, r2
 80041aa:	b29a      	uxth	r2, r3
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80041b2:	bf00      	nop
 80041b4:	3714      	adds	r7, #20
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr
 80041be:	bf00      	nop
 80041c0:	08006f88 	.word	0x08006f88
 80041c4:	08006f90 	.word	0x08006f90

080041c8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b085      	sub	sp, #20
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80041d0:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80041d4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80041dc:	b29a      	uxth	r2, r3
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	43db      	mvns	r3, r3
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	4013      	ands	r3, r2
 80041e8:	b29a      	uxth	r2, r3
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80041f0:	2300      	movs	r3, #0
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3714      	adds	r7, #20
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr

080041fe <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80041fe:	b084      	sub	sp, #16
 8004200:	b480      	push	{r7}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	f107 0014 	add.w	r0, r7, #20
 800420c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2201      	movs	r2, #1
 8004214:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2200      	movs	r2, #0
 800421c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2200      	movs	r2, #0
 8004224:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2200      	movs	r2, #0
 800422c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004230:	2300      	movs	r3, #0
}
 8004232:	4618      	mov	r0, r3
 8004234:	370c      	adds	r7, #12
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	b004      	add	sp, #16
 800423e:	4770      	bx	lr

08004240 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004240:	b580      	push	{r7, lr}
 8004242:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004244:	4b05      	ldr	r3, [pc, #20]	; (800425c <SysTick_Handler+0x1c>)
 8004246:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004248:	f001 fc90 	bl	8005b6c <xTaskGetSchedulerState>
 800424c:	4603      	mov	r3, r0
 800424e:	2b01      	cmp	r3, #1
 8004250:	d001      	beq.n	8004256 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004252:	f002 fa79 	bl	8006748 <xPortSysTickHandler>
  }
}
 8004256:	bf00      	nop
 8004258:	bd80      	pop	{r7, pc}
 800425a:	bf00      	nop
 800425c:	e000e010 	.word	0xe000e010

08004260 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004260:	b480      	push	{r7}
 8004262:	b085      	sub	sp, #20
 8004264:	af00      	add	r7, sp, #0
 8004266:	60f8      	str	r0, [r7, #12]
 8004268:	60b9      	str	r1, [r7, #8]
 800426a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	4a07      	ldr	r2, [pc, #28]	; (800428c <vApplicationGetIdleTaskMemory+0x2c>)
 8004270:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	4a06      	ldr	r2, [pc, #24]	; (8004290 <vApplicationGetIdleTaskMemory+0x30>)
 8004276:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2280      	movs	r2, #128	; 0x80
 800427c:	601a      	str	r2, [r3, #0]
}
 800427e:	bf00      	nop
 8004280:	3714      	adds	r7, #20
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr
 800428a:	bf00      	nop
 800428c:	20000484 	.word	0x20000484
 8004290:	20000540 	.word	0x20000540

08004294 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004294:	b480      	push	{r7}
 8004296:	b085      	sub	sp, #20
 8004298:	af00      	add	r7, sp, #0
 800429a:	60f8      	str	r0, [r7, #12]
 800429c:	60b9      	str	r1, [r7, #8]
 800429e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	4a07      	ldr	r2, [pc, #28]	; (80042c0 <vApplicationGetTimerTaskMemory+0x2c>)
 80042a4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	4a06      	ldr	r2, [pc, #24]	; (80042c4 <vApplicationGetTimerTaskMemory+0x30>)
 80042aa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80042b2:	601a      	str	r2, [r3, #0]
}
 80042b4:	bf00      	nop
 80042b6:	3714      	adds	r7, #20
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr
 80042c0:	20000740 	.word	0x20000740
 80042c4:	200007fc 	.word	0x200007fc

080042c8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80042c8:	b480      	push	{r7}
 80042ca:	b083      	sub	sp, #12
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	f103 0208 	add.w	r2, r3, #8
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f04f 32ff 	mov.w	r2, #4294967295
 80042e0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f103 0208 	add.w	r2, r3, #8
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	f103 0208 	add.w	r2, r3, #8
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2200      	movs	r2, #0
 80042fa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80042fc:	bf00      	nop
 80042fe:	370c      	adds	r7, #12
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr

08004308 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004308:	b480      	push	{r7}
 800430a:	b083      	sub	sp, #12
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2200      	movs	r2, #0
 8004314:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004316:	bf00      	nop
 8004318:	370c      	adds	r7, #12
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr

08004322 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004322:	b480      	push	{r7}
 8004324:	b085      	sub	sp, #20
 8004326:	af00      	add	r7, sp, #0
 8004328:	6078      	str	r0, [r7, #4]
 800432a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	68fa      	ldr	r2, [r7, #12]
 8004336:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	689a      	ldr	r2, [r3, #8]
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	683a      	ldr	r2, [r7, #0]
 8004346:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	683a      	ldr	r2, [r7, #0]
 800434c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	1c5a      	adds	r2, r3, #1
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	601a      	str	r2, [r3, #0]
}
 800435e:	bf00      	nop
 8004360:	3714      	adds	r7, #20
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr

0800436a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800436a:	b480      	push	{r7}
 800436c:	b085      	sub	sp, #20
 800436e:	af00      	add	r7, sp, #0
 8004370:	6078      	str	r0, [r7, #4]
 8004372:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004380:	d103      	bne.n	800438a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	691b      	ldr	r3, [r3, #16]
 8004386:	60fb      	str	r3, [r7, #12]
 8004388:	e00c      	b.n	80043a4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	3308      	adds	r3, #8
 800438e:	60fb      	str	r3, [r7, #12]
 8004390:	e002      	b.n	8004398 <vListInsert+0x2e>
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	60fb      	str	r3, [r7, #12]
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	68ba      	ldr	r2, [r7, #8]
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d2f6      	bcs.n	8004392 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	685a      	ldr	r2, [r3, #4]
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	683a      	ldr	r2, [r7, #0]
 80043b2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	68fa      	ldr	r2, [r7, #12]
 80043b8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	683a      	ldr	r2, [r7, #0]
 80043be:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	687a      	ldr	r2, [r7, #4]
 80043c4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	1c5a      	adds	r2, r3, #1
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	601a      	str	r2, [r3, #0]
}
 80043d0:	bf00      	nop
 80043d2:	3714      	adds	r7, #20
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr

080043dc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80043dc:	b480      	push	{r7}
 80043de:	b085      	sub	sp, #20
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	691b      	ldr	r3, [r3, #16]
 80043e8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	687a      	ldr	r2, [r7, #4]
 80043f0:	6892      	ldr	r2, [r2, #8]
 80043f2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	687a      	ldr	r2, [r7, #4]
 80043fa:	6852      	ldr	r2, [r2, #4]
 80043fc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	429a      	cmp	r2, r3
 8004406:	d103      	bne.n	8004410 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	689a      	ldr	r2, [r3, #8]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2200      	movs	r2, #0
 8004414:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	1e5a      	subs	r2, r3, #1
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
}
 8004424:	4618      	mov	r0, r3
 8004426:	3714      	adds	r7, #20
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr

08004430 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b084      	sub	sp, #16
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
 8004438:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d10a      	bne.n	800445a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004448:	f383 8811 	msr	BASEPRI, r3
 800444c:	f3bf 8f6f 	isb	sy
 8004450:	f3bf 8f4f 	dsb	sy
 8004454:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004456:	bf00      	nop
 8004458:	e7fe      	b.n	8004458 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800445a:	f002 f8e3 	bl	8006624 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004466:	68f9      	ldr	r1, [r7, #12]
 8004468:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800446a:	fb01 f303 	mul.w	r3, r1, r3
 800446e:	441a      	add	r2, r3
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2200      	movs	r2, #0
 8004478:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800448a:	3b01      	subs	r3, #1
 800448c:	68f9      	ldr	r1, [r7, #12]
 800448e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004490:	fb01 f303 	mul.w	r3, r1, r3
 8004494:	441a      	add	r2, r3
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	22ff      	movs	r2, #255	; 0xff
 800449e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	22ff      	movs	r2, #255	; 0xff
 80044a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d114      	bne.n	80044da <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	691b      	ldr	r3, [r3, #16]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d01a      	beq.n	80044ee <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	3310      	adds	r3, #16
 80044bc:	4618      	mov	r0, r3
 80044be:	f001 f993 	bl	80057e8 <xTaskRemoveFromEventList>
 80044c2:	4603      	mov	r3, r0
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d012      	beq.n	80044ee <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80044c8:	4b0c      	ldr	r3, [pc, #48]	; (80044fc <xQueueGenericReset+0xcc>)
 80044ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044ce:	601a      	str	r2, [r3, #0]
 80044d0:	f3bf 8f4f 	dsb	sy
 80044d4:	f3bf 8f6f 	isb	sy
 80044d8:	e009      	b.n	80044ee <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	3310      	adds	r3, #16
 80044de:	4618      	mov	r0, r3
 80044e0:	f7ff fef2 	bl	80042c8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	3324      	adds	r3, #36	; 0x24
 80044e8:	4618      	mov	r0, r3
 80044ea:	f7ff feed 	bl	80042c8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80044ee:	f002 f8c9 	bl	8006684 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80044f2:	2301      	movs	r3, #1
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3710      	adds	r7, #16
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}
 80044fc:	e000ed04 	.word	0xe000ed04

08004500 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004500:	b580      	push	{r7, lr}
 8004502:	b08e      	sub	sp, #56	; 0x38
 8004504:	af02      	add	r7, sp, #8
 8004506:	60f8      	str	r0, [r7, #12]
 8004508:	60b9      	str	r1, [r7, #8]
 800450a:	607a      	str	r2, [r7, #4]
 800450c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d10a      	bne.n	800452a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004518:	f383 8811 	msr	BASEPRI, r3
 800451c:	f3bf 8f6f 	isb	sy
 8004520:	f3bf 8f4f 	dsb	sy
 8004524:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004526:	bf00      	nop
 8004528:	e7fe      	b.n	8004528 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d10a      	bne.n	8004546 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004534:	f383 8811 	msr	BASEPRI, r3
 8004538:	f3bf 8f6f 	isb	sy
 800453c:	f3bf 8f4f 	dsb	sy
 8004540:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004542:	bf00      	nop
 8004544:	e7fe      	b.n	8004544 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d002      	beq.n	8004552 <xQueueGenericCreateStatic+0x52>
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d001      	beq.n	8004556 <xQueueGenericCreateStatic+0x56>
 8004552:	2301      	movs	r3, #1
 8004554:	e000      	b.n	8004558 <xQueueGenericCreateStatic+0x58>
 8004556:	2300      	movs	r3, #0
 8004558:	2b00      	cmp	r3, #0
 800455a:	d10a      	bne.n	8004572 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800455c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004560:	f383 8811 	msr	BASEPRI, r3
 8004564:	f3bf 8f6f 	isb	sy
 8004568:	f3bf 8f4f 	dsb	sy
 800456c:	623b      	str	r3, [r7, #32]
}
 800456e:	bf00      	nop
 8004570:	e7fe      	b.n	8004570 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d102      	bne.n	800457e <xQueueGenericCreateStatic+0x7e>
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d101      	bne.n	8004582 <xQueueGenericCreateStatic+0x82>
 800457e:	2301      	movs	r3, #1
 8004580:	e000      	b.n	8004584 <xQueueGenericCreateStatic+0x84>
 8004582:	2300      	movs	r3, #0
 8004584:	2b00      	cmp	r3, #0
 8004586:	d10a      	bne.n	800459e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800458c:	f383 8811 	msr	BASEPRI, r3
 8004590:	f3bf 8f6f 	isb	sy
 8004594:	f3bf 8f4f 	dsb	sy
 8004598:	61fb      	str	r3, [r7, #28]
}
 800459a:	bf00      	nop
 800459c:	e7fe      	b.n	800459c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800459e:	2350      	movs	r3, #80	; 0x50
 80045a0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	2b50      	cmp	r3, #80	; 0x50
 80045a6:	d00a      	beq.n	80045be <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80045a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ac:	f383 8811 	msr	BASEPRI, r3
 80045b0:	f3bf 8f6f 	isb	sy
 80045b4:	f3bf 8f4f 	dsb	sy
 80045b8:	61bb      	str	r3, [r7, #24]
}
 80045ba:	bf00      	nop
 80045bc:	e7fe      	b.n	80045bc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80045be:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80045c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d00d      	beq.n	80045e6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80045ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045cc:	2201      	movs	r2, #1
 80045ce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80045d2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80045d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045d8:	9300      	str	r3, [sp, #0]
 80045da:	4613      	mov	r3, r2
 80045dc:	687a      	ldr	r2, [r7, #4]
 80045de:	68b9      	ldr	r1, [r7, #8]
 80045e0:	68f8      	ldr	r0, [r7, #12]
 80045e2:	f000 f805 	bl	80045f0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80045e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3730      	adds	r7, #48	; 0x30
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}

080045f0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b084      	sub	sp, #16
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	60f8      	str	r0, [r7, #12]
 80045f8:	60b9      	str	r1, [r7, #8]
 80045fa:	607a      	str	r2, [r7, #4]
 80045fc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d103      	bne.n	800460c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004604:	69bb      	ldr	r3, [r7, #24]
 8004606:	69ba      	ldr	r2, [r7, #24]
 8004608:	601a      	str	r2, [r3, #0]
 800460a:	e002      	b.n	8004612 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800460c:	69bb      	ldr	r3, [r7, #24]
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004612:	69bb      	ldr	r3, [r7, #24]
 8004614:	68fa      	ldr	r2, [r7, #12]
 8004616:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004618:	69bb      	ldr	r3, [r7, #24]
 800461a:	68ba      	ldr	r2, [r7, #8]
 800461c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800461e:	2101      	movs	r1, #1
 8004620:	69b8      	ldr	r0, [r7, #24]
 8004622:	f7ff ff05 	bl	8004430 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004626:	69bb      	ldr	r3, [r7, #24]
 8004628:	78fa      	ldrb	r2, [r7, #3]
 800462a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800462e:	bf00      	nop
 8004630:	3710      	adds	r7, #16
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}
	...

08004638 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b08e      	sub	sp, #56	; 0x38
 800463c:	af00      	add	r7, sp, #0
 800463e:	60f8      	str	r0, [r7, #12]
 8004640:	60b9      	str	r1, [r7, #8]
 8004642:	607a      	str	r2, [r7, #4]
 8004644:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004646:	2300      	movs	r3, #0
 8004648:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800464e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004650:	2b00      	cmp	r3, #0
 8004652:	d10a      	bne.n	800466a <xQueueGenericSend+0x32>
	__asm volatile
 8004654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004658:	f383 8811 	msr	BASEPRI, r3
 800465c:	f3bf 8f6f 	isb	sy
 8004660:	f3bf 8f4f 	dsb	sy
 8004664:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004666:	bf00      	nop
 8004668:	e7fe      	b.n	8004668 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d103      	bne.n	8004678 <xQueueGenericSend+0x40>
 8004670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004674:	2b00      	cmp	r3, #0
 8004676:	d101      	bne.n	800467c <xQueueGenericSend+0x44>
 8004678:	2301      	movs	r3, #1
 800467a:	e000      	b.n	800467e <xQueueGenericSend+0x46>
 800467c:	2300      	movs	r3, #0
 800467e:	2b00      	cmp	r3, #0
 8004680:	d10a      	bne.n	8004698 <xQueueGenericSend+0x60>
	__asm volatile
 8004682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004686:	f383 8811 	msr	BASEPRI, r3
 800468a:	f3bf 8f6f 	isb	sy
 800468e:	f3bf 8f4f 	dsb	sy
 8004692:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004694:	bf00      	nop
 8004696:	e7fe      	b.n	8004696 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	2b02      	cmp	r3, #2
 800469c:	d103      	bne.n	80046a6 <xQueueGenericSend+0x6e>
 800469e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d101      	bne.n	80046aa <xQueueGenericSend+0x72>
 80046a6:	2301      	movs	r3, #1
 80046a8:	e000      	b.n	80046ac <xQueueGenericSend+0x74>
 80046aa:	2300      	movs	r3, #0
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d10a      	bne.n	80046c6 <xQueueGenericSend+0x8e>
	__asm volatile
 80046b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b4:	f383 8811 	msr	BASEPRI, r3
 80046b8:	f3bf 8f6f 	isb	sy
 80046bc:	f3bf 8f4f 	dsb	sy
 80046c0:	623b      	str	r3, [r7, #32]
}
 80046c2:	bf00      	nop
 80046c4:	e7fe      	b.n	80046c4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80046c6:	f001 fa51 	bl	8005b6c <xTaskGetSchedulerState>
 80046ca:	4603      	mov	r3, r0
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d102      	bne.n	80046d6 <xQueueGenericSend+0x9e>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d101      	bne.n	80046da <xQueueGenericSend+0xa2>
 80046d6:	2301      	movs	r3, #1
 80046d8:	e000      	b.n	80046dc <xQueueGenericSend+0xa4>
 80046da:	2300      	movs	r3, #0
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d10a      	bne.n	80046f6 <xQueueGenericSend+0xbe>
	__asm volatile
 80046e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046e4:	f383 8811 	msr	BASEPRI, r3
 80046e8:	f3bf 8f6f 	isb	sy
 80046ec:	f3bf 8f4f 	dsb	sy
 80046f0:	61fb      	str	r3, [r7, #28]
}
 80046f2:	bf00      	nop
 80046f4:	e7fe      	b.n	80046f4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80046f6:	f001 ff95 	bl	8006624 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80046fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004700:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004702:	429a      	cmp	r2, r3
 8004704:	d302      	bcc.n	800470c <xQueueGenericSend+0xd4>
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	2b02      	cmp	r3, #2
 800470a:	d129      	bne.n	8004760 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800470c:	683a      	ldr	r2, [r7, #0]
 800470e:	68b9      	ldr	r1, [r7, #8]
 8004710:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004712:	f000 fa0b 	bl	8004b2c <prvCopyDataToQueue>
 8004716:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800471a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800471c:	2b00      	cmp	r3, #0
 800471e:	d010      	beq.n	8004742 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004722:	3324      	adds	r3, #36	; 0x24
 8004724:	4618      	mov	r0, r3
 8004726:	f001 f85f 	bl	80057e8 <xTaskRemoveFromEventList>
 800472a:	4603      	mov	r3, r0
 800472c:	2b00      	cmp	r3, #0
 800472e:	d013      	beq.n	8004758 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004730:	4b3f      	ldr	r3, [pc, #252]	; (8004830 <xQueueGenericSend+0x1f8>)
 8004732:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004736:	601a      	str	r2, [r3, #0]
 8004738:	f3bf 8f4f 	dsb	sy
 800473c:	f3bf 8f6f 	isb	sy
 8004740:	e00a      	b.n	8004758 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004744:	2b00      	cmp	r3, #0
 8004746:	d007      	beq.n	8004758 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004748:	4b39      	ldr	r3, [pc, #228]	; (8004830 <xQueueGenericSend+0x1f8>)
 800474a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800474e:	601a      	str	r2, [r3, #0]
 8004750:	f3bf 8f4f 	dsb	sy
 8004754:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004758:	f001 ff94 	bl	8006684 <vPortExitCritical>
				return pdPASS;
 800475c:	2301      	movs	r3, #1
 800475e:	e063      	b.n	8004828 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d103      	bne.n	800476e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004766:	f001 ff8d 	bl	8006684 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800476a:	2300      	movs	r3, #0
 800476c:	e05c      	b.n	8004828 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800476e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004770:	2b00      	cmp	r3, #0
 8004772:	d106      	bne.n	8004782 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004774:	f107 0314 	add.w	r3, r7, #20
 8004778:	4618      	mov	r0, r3
 800477a:	f001 f899 	bl	80058b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800477e:	2301      	movs	r3, #1
 8004780:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004782:	f001 ff7f 	bl	8006684 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004786:	f000 fe05 	bl	8005394 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800478a:	f001 ff4b 	bl	8006624 <vPortEnterCritical>
 800478e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004790:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004794:	b25b      	sxtb	r3, r3
 8004796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800479a:	d103      	bne.n	80047a4 <xQueueGenericSend+0x16c>
 800479c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800479e:	2200      	movs	r2, #0
 80047a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80047aa:	b25b      	sxtb	r3, r3
 80047ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047b0:	d103      	bne.n	80047ba <xQueueGenericSend+0x182>
 80047b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047b4:	2200      	movs	r2, #0
 80047b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80047ba:	f001 ff63 	bl	8006684 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80047be:	1d3a      	adds	r2, r7, #4
 80047c0:	f107 0314 	add.w	r3, r7, #20
 80047c4:	4611      	mov	r1, r2
 80047c6:	4618      	mov	r0, r3
 80047c8:	f001 f888 	bl	80058dc <xTaskCheckForTimeOut>
 80047cc:	4603      	mov	r3, r0
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d124      	bne.n	800481c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80047d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80047d4:	f000 faa2 	bl	8004d1c <prvIsQueueFull>
 80047d8:	4603      	mov	r3, r0
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d018      	beq.n	8004810 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80047de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047e0:	3310      	adds	r3, #16
 80047e2:	687a      	ldr	r2, [r7, #4]
 80047e4:	4611      	mov	r1, r2
 80047e6:	4618      	mov	r0, r3
 80047e8:	f000 ffae 	bl	8005748 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80047ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80047ee:	f000 fa2d 	bl	8004c4c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80047f2:	f000 fddd 	bl	80053b0 <xTaskResumeAll>
 80047f6:	4603      	mov	r3, r0
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	f47f af7c 	bne.w	80046f6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80047fe:	4b0c      	ldr	r3, [pc, #48]	; (8004830 <xQueueGenericSend+0x1f8>)
 8004800:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004804:	601a      	str	r2, [r3, #0]
 8004806:	f3bf 8f4f 	dsb	sy
 800480a:	f3bf 8f6f 	isb	sy
 800480e:	e772      	b.n	80046f6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004810:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004812:	f000 fa1b 	bl	8004c4c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004816:	f000 fdcb 	bl	80053b0 <xTaskResumeAll>
 800481a:	e76c      	b.n	80046f6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800481c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800481e:	f000 fa15 	bl	8004c4c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004822:	f000 fdc5 	bl	80053b0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004826:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004828:	4618      	mov	r0, r3
 800482a:	3738      	adds	r7, #56	; 0x38
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}
 8004830:	e000ed04 	.word	0xe000ed04

08004834 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b090      	sub	sp, #64	; 0x40
 8004838:	af00      	add	r7, sp, #0
 800483a:	60f8      	str	r0, [r7, #12]
 800483c:	60b9      	str	r1, [r7, #8]
 800483e:	607a      	str	r2, [r7, #4]
 8004840:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004848:	2b00      	cmp	r3, #0
 800484a:	d10a      	bne.n	8004862 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800484c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004850:	f383 8811 	msr	BASEPRI, r3
 8004854:	f3bf 8f6f 	isb	sy
 8004858:	f3bf 8f4f 	dsb	sy
 800485c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800485e:	bf00      	nop
 8004860:	e7fe      	b.n	8004860 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d103      	bne.n	8004870 <xQueueGenericSendFromISR+0x3c>
 8004868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800486a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486c:	2b00      	cmp	r3, #0
 800486e:	d101      	bne.n	8004874 <xQueueGenericSendFromISR+0x40>
 8004870:	2301      	movs	r3, #1
 8004872:	e000      	b.n	8004876 <xQueueGenericSendFromISR+0x42>
 8004874:	2300      	movs	r3, #0
 8004876:	2b00      	cmp	r3, #0
 8004878:	d10a      	bne.n	8004890 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800487a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800487e:	f383 8811 	msr	BASEPRI, r3
 8004882:	f3bf 8f6f 	isb	sy
 8004886:	f3bf 8f4f 	dsb	sy
 800488a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800488c:	bf00      	nop
 800488e:	e7fe      	b.n	800488e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	2b02      	cmp	r3, #2
 8004894:	d103      	bne.n	800489e <xQueueGenericSendFromISR+0x6a>
 8004896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004898:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800489a:	2b01      	cmp	r3, #1
 800489c:	d101      	bne.n	80048a2 <xQueueGenericSendFromISR+0x6e>
 800489e:	2301      	movs	r3, #1
 80048a0:	e000      	b.n	80048a4 <xQueueGenericSendFromISR+0x70>
 80048a2:	2300      	movs	r3, #0
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d10a      	bne.n	80048be <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80048a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ac:	f383 8811 	msr	BASEPRI, r3
 80048b0:	f3bf 8f6f 	isb	sy
 80048b4:	f3bf 8f4f 	dsb	sy
 80048b8:	623b      	str	r3, [r7, #32]
}
 80048ba:	bf00      	nop
 80048bc:	e7fe      	b.n	80048bc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80048be:	f001 ff93 	bl	80067e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80048c2:	f3ef 8211 	mrs	r2, BASEPRI
 80048c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ca:	f383 8811 	msr	BASEPRI, r3
 80048ce:	f3bf 8f6f 	isb	sy
 80048d2:	f3bf 8f4f 	dsb	sy
 80048d6:	61fa      	str	r2, [r7, #28]
 80048d8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80048da:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80048dc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80048de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048e6:	429a      	cmp	r2, r3
 80048e8:	d302      	bcc.n	80048f0 <xQueueGenericSendFromISR+0xbc>
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	2b02      	cmp	r3, #2
 80048ee:	d12f      	bne.n	8004950 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80048f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80048f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80048fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048fe:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004900:	683a      	ldr	r2, [r7, #0]
 8004902:	68b9      	ldr	r1, [r7, #8]
 8004904:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004906:	f000 f911 	bl	8004b2c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800490a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800490e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004912:	d112      	bne.n	800493a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004918:	2b00      	cmp	r3, #0
 800491a:	d016      	beq.n	800494a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800491c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800491e:	3324      	adds	r3, #36	; 0x24
 8004920:	4618      	mov	r0, r3
 8004922:	f000 ff61 	bl	80057e8 <xTaskRemoveFromEventList>
 8004926:	4603      	mov	r3, r0
 8004928:	2b00      	cmp	r3, #0
 800492a:	d00e      	beq.n	800494a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d00b      	beq.n	800494a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2201      	movs	r2, #1
 8004936:	601a      	str	r2, [r3, #0]
 8004938:	e007      	b.n	800494a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800493a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800493e:	3301      	adds	r3, #1
 8004940:	b2db      	uxtb	r3, r3
 8004942:	b25a      	sxtb	r2, r3
 8004944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004946:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800494a:	2301      	movs	r3, #1
 800494c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800494e:	e001      	b.n	8004954 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004950:	2300      	movs	r3, #0
 8004952:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004954:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004956:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800495e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004960:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004962:	4618      	mov	r0, r3
 8004964:	3740      	adds	r7, #64	; 0x40
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}
	...

0800496c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b08c      	sub	sp, #48	; 0x30
 8004970:	af00      	add	r7, sp, #0
 8004972:	60f8      	str	r0, [r7, #12]
 8004974:	60b9      	str	r1, [r7, #8]
 8004976:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004978:	2300      	movs	r3, #0
 800497a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004982:	2b00      	cmp	r3, #0
 8004984:	d10a      	bne.n	800499c <xQueueReceive+0x30>
	__asm volatile
 8004986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800498a:	f383 8811 	msr	BASEPRI, r3
 800498e:	f3bf 8f6f 	isb	sy
 8004992:	f3bf 8f4f 	dsb	sy
 8004996:	623b      	str	r3, [r7, #32]
}
 8004998:	bf00      	nop
 800499a:	e7fe      	b.n	800499a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d103      	bne.n	80049aa <xQueueReceive+0x3e>
 80049a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d101      	bne.n	80049ae <xQueueReceive+0x42>
 80049aa:	2301      	movs	r3, #1
 80049ac:	e000      	b.n	80049b0 <xQueueReceive+0x44>
 80049ae:	2300      	movs	r3, #0
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d10a      	bne.n	80049ca <xQueueReceive+0x5e>
	__asm volatile
 80049b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049b8:	f383 8811 	msr	BASEPRI, r3
 80049bc:	f3bf 8f6f 	isb	sy
 80049c0:	f3bf 8f4f 	dsb	sy
 80049c4:	61fb      	str	r3, [r7, #28]
}
 80049c6:	bf00      	nop
 80049c8:	e7fe      	b.n	80049c8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80049ca:	f001 f8cf 	bl	8005b6c <xTaskGetSchedulerState>
 80049ce:	4603      	mov	r3, r0
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d102      	bne.n	80049da <xQueueReceive+0x6e>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d101      	bne.n	80049de <xQueueReceive+0x72>
 80049da:	2301      	movs	r3, #1
 80049dc:	e000      	b.n	80049e0 <xQueueReceive+0x74>
 80049de:	2300      	movs	r3, #0
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d10a      	bne.n	80049fa <xQueueReceive+0x8e>
	__asm volatile
 80049e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049e8:	f383 8811 	msr	BASEPRI, r3
 80049ec:	f3bf 8f6f 	isb	sy
 80049f0:	f3bf 8f4f 	dsb	sy
 80049f4:	61bb      	str	r3, [r7, #24]
}
 80049f6:	bf00      	nop
 80049f8:	e7fe      	b.n	80049f8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80049fa:	f001 fe13 	bl	8006624 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80049fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a02:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d01f      	beq.n	8004a4a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004a0a:	68b9      	ldr	r1, [r7, #8]
 8004a0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a0e:	f000 f8f7 	bl	8004c00 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a14:	1e5a      	subs	r2, r3, #1
 8004a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a18:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a1c:	691b      	ldr	r3, [r3, #16]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d00f      	beq.n	8004a42 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a24:	3310      	adds	r3, #16
 8004a26:	4618      	mov	r0, r3
 8004a28:	f000 fede 	bl	80057e8 <xTaskRemoveFromEventList>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d007      	beq.n	8004a42 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004a32:	4b3d      	ldr	r3, [pc, #244]	; (8004b28 <xQueueReceive+0x1bc>)
 8004a34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a38:	601a      	str	r2, [r3, #0]
 8004a3a:	f3bf 8f4f 	dsb	sy
 8004a3e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004a42:	f001 fe1f 	bl	8006684 <vPortExitCritical>
				return pdPASS;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e069      	b.n	8004b1e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d103      	bne.n	8004a58 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004a50:	f001 fe18 	bl	8006684 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004a54:	2300      	movs	r3, #0
 8004a56:	e062      	b.n	8004b1e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d106      	bne.n	8004a6c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004a5e:	f107 0310 	add.w	r3, r7, #16
 8004a62:	4618      	mov	r0, r3
 8004a64:	f000 ff24 	bl	80058b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004a6c:	f001 fe0a 	bl	8006684 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004a70:	f000 fc90 	bl	8005394 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004a74:	f001 fdd6 	bl	8006624 <vPortEnterCritical>
 8004a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a7a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a7e:	b25b      	sxtb	r3, r3
 8004a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a84:	d103      	bne.n	8004a8e <xQueueReceive+0x122>
 8004a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a88:	2200      	movs	r2, #0
 8004a8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a94:	b25b      	sxtb	r3, r3
 8004a96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a9a:	d103      	bne.n	8004aa4 <xQueueReceive+0x138>
 8004a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004aa4:	f001 fdee 	bl	8006684 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004aa8:	1d3a      	adds	r2, r7, #4
 8004aaa:	f107 0310 	add.w	r3, r7, #16
 8004aae:	4611      	mov	r1, r2
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f000 ff13 	bl	80058dc <xTaskCheckForTimeOut>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d123      	bne.n	8004b04 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004abc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004abe:	f000 f917 	bl	8004cf0 <prvIsQueueEmpty>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d017      	beq.n	8004af8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aca:	3324      	adds	r3, #36	; 0x24
 8004acc:	687a      	ldr	r2, [r7, #4]
 8004ace:	4611      	mov	r1, r2
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f000 fe39 	bl	8005748 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004ad6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ad8:	f000 f8b8 	bl	8004c4c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004adc:	f000 fc68 	bl	80053b0 <xTaskResumeAll>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d189      	bne.n	80049fa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004ae6:	4b10      	ldr	r3, [pc, #64]	; (8004b28 <xQueueReceive+0x1bc>)
 8004ae8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004aec:	601a      	str	r2, [r3, #0]
 8004aee:	f3bf 8f4f 	dsb	sy
 8004af2:	f3bf 8f6f 	isb	sy
 8004af6:	e780      	b.n	80049fa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004af8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004afa:	f000 f8a7 	bl	8004c4c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004afe:	f000 fc57 	bl	80053b0 <xTaskResumeAll>
 8004b02:	e77a      	b.n	80049fa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004b04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b06:	f000 f8a1 	bl	8004c4c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004b0a:	f000 fc51 	bl	80053b0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004b0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b10:	f000 f8ee 	bl	8004cf0 <prvIsQueueEmpty>
 8004b14:	4603      	mov	r3, r0
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	f43f af6f 	beq.w	80049fa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004b1c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3730      	adds	r7, #48	; 0x30
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
 8004b26:	bf00      	nop
 8004b28:	e000ed04 	.word	0xe000ed04

08004b2c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b086      	sub	sp, #24
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	60f8      	str	r0, [r7, #12]
 8004b34:	60b9      	str	r1, [r7, #8]
 8004b36:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b40:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d10d      	bne.n	8004b66 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d14d      	bne.n	8004bee <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	4618      	mov	r0, r3
 8004b58:	f001 f826 	bl	8005ba8 <xTaskPriorityDisinherit>
 8004b5c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2200      	movs	r2, #0
 8004b62:	609a      	str	r2, [r3, #8]
 8004b64:	e043      	b.n	8004bee <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d119      	bne.n	8004ba0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6858      	ldr	r0, [r3, #4]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b74:	461a      	mov	r2, r3
 8004b76:	68b9      	ldr	r1, [r7, #8]
 8004b78:	f002 f886 	bl	8006c88 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	685a      	ldr	r2, [r3, #4]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b84:	441a      	add	r2, r3
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	685a      	ldr	r2, [r3, #4]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d32b      	bcc.n	8004bee <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	605a      	str	r2, [r3, #4]
 8004b9e:	e026      	b.n	8004bee <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	68d8      	ldr	r0, [r3, #12]
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba8:	461a      	mov	r2, r3
 8004baa:	68b9      	ldr	r1, [r7, #8]
 8004bac:	f002 f86c 	bl	8006c88 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	68da      	ldr	r2, [r3, #12]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb8:	425b      	negs	r3, r3
 8004bba:	441a      	add	r2, r3
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	68da      	ldr	r2, [r3, #12]
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d207      	bcs.n	8004bdc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	689a      	ldr	r2, [r3, #8]
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd4:	425b      	negs	r3, r3
 8004bd6:	441a      	add	r2, r3
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2b02      	cmp	r3, #2
 8004be0:	d105      	bne.n	8004bee <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d002      	beq.n	8004bee <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	3b01      	subs	r3, #1
 8004bec:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	1c5a      	adds	r2, r3, #1
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004bf6:	697b      	ldr	r3, [r7, #20]
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3718      	adds	r7, #24
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}

08004c00 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b082      	sub	sp, #8
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
 8004c08:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d018      	beq.n	8004c44 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	68da      	ldr	r2, [r3, #12]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c1a:	441a      	add	r2, r3
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	68da      	ldr	r2, [r3, #12]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d303      	bcc.n	8004c34 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	68d9      	ldr	r1, [r3, #12]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c3c:	461a      	mov	r2, r3
 8004c3e:	6838      	ldr	r0, [r7, #0]
 8004c40:	f002 f822 	bl	8006c88 <memcpy>
	}
}
 8004c44:	bf00      	nop
 8004c46:	3708      	adds	r7, #8
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}

08004c4c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b084      	sub	sp, #16
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004c54:	f001 fce6 	bl	8006624 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c5e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004c60:	e011      	b.n	8004c86 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d012      	beq.n	8004c90 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	3324      	adds	r3, #36	; 0x24
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f000 fdba 	bl	80057e8 <xTaskRemoveFromEventList>
 8004c74:	4603      	mov	r3, r0
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d001      	beq.n	8004c7e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004c7a:	f000 fe91 	bl	80059a0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004c7e:	7bfb      	ldrb	r3, [r7, #15]
 8004c80:	3b01      	subs	r3, #1
 8004c82:	b2db      	uxtb	r3, r3
 8004c84:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004c86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	dce9      	bgt.n	8004c62 <prvUnlockQueue+0x16>
 8004c8e:	e000      	b.n	8004c92 <prvUnlockQueue+0x46>
					break;
 8004c90:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	22ff      	movs	r2, #255	; 0xff
 8004c96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004c9a:	f001 fcf3 	bl	8006684 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004c9e:	f001 fcc1 	bl	8006624 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ca8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004caa:	e011      	b.n	8004cd0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	691b      	ldr	r3, [r3, #16]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d012      	beq.n	8004cda <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	3310      	adds	r3, #16
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f000 fd95 	bl	80057e8 <xTaskRemoveFromEventList>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d001      	beq.n	8004cc8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004cc4:	f000 fe6c 	bl	80059a0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004cc8:	7bbb      	ldrb	r3, [r7, #14]
 8004cca:	3b01      	subs	r3, #1
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004cd0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	dce9      	bgt.n	8004cac <prvUnlockQueue+0x60>
 8004cd8:	e000      	b.n	8004cdc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004cda:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	22ff      	movs	r2, #255	; 0xff
 8004ce0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004ce4:	f001 fcce 	bl	8006684 <vPortExitCritical>
}
 8004ce8:	bf00      	nop
 8004cea:	3710      	adds	r7, #16
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}

08004cf0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b084      	sub	sp, #16
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004cf8:	f001 fc94 	bl	8006624 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d102      	bne.n	8004d0a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004d04:	2301      	movs	r3, #1
 8004d06:	60fb      	str	r3, [r7, #12]
 8004d08:	e001      	b.n	8004d0e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004d0e:	f001 fcb9 	bl	8006684 <vPortExitCritical>

	return xReturn;
 8004d12:	68fb      	ldr	r3, [r7, #12]
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	3710      	adds	r7, #16
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}

08004d1c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b084      	sub	sp, #16
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004d24:	f001 fc7e 	bl	8006624 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d102      	bne.n	8004d3a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004d34:	2301      	movs	r3, #1
 8004d36:	60fb      	str	r3, [r7, #12]
 8004d38:	e001      	b.n	8004d3e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004d3e:	f001 fca1 	bl	8006684 <vPortExitCritical>

	return xReturn;
 8004d42:	68fb      	ldr	r3, [r7, #12]
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	3710      	adds	r7, #16
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}

08004d4c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b085      	sub	sp, #20
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
 8004d54:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004d56:	2300      	movs	r3, #0
 8004d58:	60fb      	str	r3, [r7, #12]
 8004d5a:	e014      	b.n	8004d86 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004d5c:	4a0f      	ldr	r2, [pc, #60]	; (8004d9c <vQueueAddToRegistry+0x50>)
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d10b      	bne.n	8004d80 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004d68:	490c      	ldr	r1, [pc, #48]	; (8004d9c <vQueueAddToRegistry+0x50>)
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	683a      	ldr	r2, [r7, #0]
 8004d6e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004d72:	4a0a      	ldr	r2, [pc, #40]	; (8004d9c <vQueueAddToRegistry+0x50>)
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	00db      	lsls	r3, r3, #3
 8004d78:	4413      	add	r3, r2
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004d7e:	e006      	b.n	8004d8e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	3301      	adds	r3, #1
 8004d84:	60fb      	str	r3, [r7, #12]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2b07      	cmp	r3, #7
 8004d8a:	d9e7      	bls.n	8004d5c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004d8c:	bf00      	nop
 8004d8e:	bf00      	nop
 8004d90:	3714      	adds	r7, #20
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr
 8004d9a:	bf00      	nop
 8004d9c:	20000bfc 	.word	0x20000bfc

08004da0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b086      	sub	sp, #24
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	60f8      	str	r0, [r7, #12]
 8004da8:	60b9      	str	r1, [r7, #8]
 8004daa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004db0:	f001 fc38 	bl	8006624 <vPortEnterCritical>
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004dba:	b25b      	sxtb	r3, r3
 8004dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dc0:	d103      	bne.n	8004dca <vQueueWaitForMessageRestricted+0x2a>
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004dd0:	b25b      	sxtb	r3, r3
 8004dd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dd6:	d103      	bne.n	8004de0 <vQueueWaitForMessageRestricted+0x40>
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004de0:	f001 fc50 	bl	8006684 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d106      	bne.n	8004dfa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	3324      	adds	r3, #36	; 0x24
 8004df0:	687a      	ldr	r2, [r7, #4]
 8004df2:	68b9      	ldr	r1, [r7, #8]
 8004df4:	4618      	mov	r0, r3
 8004df6:	f000 fccb 	bl	8005790 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004dfa:	6978      	ldr	r0, [r7, #20]
 8004dfc:	f7ff ff26 	bl	8004c4c <prvUnlockQueue>
	}
 8004e00:	bf00      	nop
 8004e02:	3718      	adds	r7, #24
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}

08004e08 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b08e      	sub	sp, #56	; 0x38
 8004e0c:	af04      	add	r7, sp, #16
 8004e0e:	60f8      	str	r0, [r7, #12]
 8004e10:	60b9      	str	r1, [r7, #8]
 8004e12:	607a      	str	r2, [r7, #4]
 8004e14:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004e16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d10a      	bne.n	8004e32 <xTaskCreateStatic+0x2a>
	__asm volatile
 8004e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e20:	f383 8811 	msr	BASEPRI, r3
 8004e24:	f3bf 8f6f 	isb	sy
 8004e28:	f3bf 8f4f 	dsb	sy
 8004e2c:	623b      	str	r3, [r7, #32]
}
 8004e2e:	bf00      	nop
 8004e30:	e7fe      	b.n	8004e30 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d10a      	bne.n	8004e4e <xTaskCreateStatic+0x46>
	__asm volatile
 8004e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e3c:	f383 8811 	msr	BASEPRI, r3
 8004e40:	f3bf 8f6f 	isb	sy
 8004e44:	f3bf 8f4f 	dsb	sy
 8004e48:	61fb      	str	r3, [r7, #28]
}
 8004e4a:	bf00      	nop
 8004e4c:	e7fe      	b.n	8004e4c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004e4e:	23bc      	movs	r3, #188	; 0xbc
 8004e50:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	2bbc      	cmp	r3, #188	; 0xbc
 8004e56:	d00a      	beq.n	8004e6e <xTaskCreateStatic+0x66>
	__asm volatile
 8004e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e5c:	f383 8811 	msr	BASEPRI, r3
 8004e60:	f3bf 8f6f 	isb	sy
 8004e64:	f3bf 8f4f 	dsb	sy
 8004e68:	61bb      	str	r3, [r7, #24]
}
 8004e6a:	bf00      	nop
 8004e6c:	e7fe      	b.n	8004e6c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004e6e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d01e      	beq.n	8004eb4 <xTaskCreateStatic+0xac>
 8004e76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d01b      	beq.n	8004eb4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e7e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e84:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e88:	2202      	movs	r2, #2
 8004e8a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004e8e:	2300      	movs	r3, #0
 8004e90:	9303      	str	r3, [sp, #12]
 8004e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e94:	9302      	str	r3, [sp, #8]
 8004e96:	f107 0314 	add.w	r3, r7, #20
 8004e9a:	9301      	str	r3, [sp, #4]
 8004e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e9e:	9300      	str	r3, [sp, #0]
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	68b9      	ldr	r1, [r7, #8]
 8004ea6:	68f8      	ldr	r0, [r7, #12]
 8004ea8:	f000 f850 	bl	8004f4c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004eac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004eae:	f000 f8f3 	bl	8005098 <prvAddNewTaskToReadyList>
 8004eb2:	e001      	b.n	8004eb8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004eb8:	697b      	ldr	r3, [r7, #20]
	}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3728      	adds	r7, #40	; 0x28
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}

08004ec2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004ec2:	b580      	push	{r7, lr}
 8004ec4:	b08c      	sub	sp, #48	; 0x30
 8004ec6:	af04      	add	r7, sp, #16
 8004ec8:	60f8      	str	r0, [r7, #12]
 8004eca:	60b9      	str	r1, [r7, #8]
 8004ecc:	603b      	str	r3, [r7, #0]
 8004ece:	4613      	mov	r3, r2
 8004ed0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004ed2:	88fb      	ldrh	r3, [r7, #6]
 8004ed4:	009b      	lsls	r3, r3, #2
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f001 fcc6 	bl	8006868 <pvPortMalloc>
 8004edc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d00e      	beq.n	8004f02 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004ee4:	20bc      	movs	r0, #188	; 0xbc
 8004ee6:	f001 fcbf 	bl	8006868 <pvPortMalloc>
 8004eea:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004eec:	69fb      	ldr	r3, [r7, #28]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d003      	beq.n	8004efa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004ef2:	69fb      	ldr	r3, [r7, #28]
 8004ef4:	697a      	ldr	r2, [r7, #20]
 8004ef6:	631a      	str	r2, [r3, #48]	; 0x30
 8004ef8:	e005      	b.n	8004f06 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004efa:	6978      	ldr	r0, [r7, #20]
 8004efc:	f001 fd80 	bl	8006a00 <vPortFree>
 8004f00:	e001      	b.n	8004f06 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004f02:	2300      	movs	r3, #0
 8004f04:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d017      	beq.n	8004f3c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004f0c:	69fb      	ldr	r3, [r7, #28]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004f14:	88fa      	ldrh	r2, [r7, #6]
 8004f16:	2300      	movs	r3, #0
 8004f18:	9303      	str	r3, [sp, #12]
 8004f1a:	69fb      	ldr	r3, [r7, #28]
 8004f1c:	9302      	str	r3, [sp, #8]
 8004f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f20:	9301      	str	r3, [sp, #4]
 8004f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f24:	9300      	str	r3, [sp, #0]
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	68b9      	ldr	r1, [r7, #8]
 8004f2a:	68f8      	ldr	r0, [r7, #12]
 8004f2c:	f000 f80e 	bl	8004f4c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004f30:	69f8      	ldr	r0, [r7, #28]
 8004f32:	f000 f8b1 	bl	8005098 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004f36:	2301      	movs	r3, #1
 8004f38:	61bb      	str	r3, [r7, #24]
 8004f3a:	e002      	b.n	8004f42 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004f3c:	f04f 33ff 	mov.w	r3, #4294967295
 8004f40:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004f42:	69bb      	ldr	r3, [r7, #24]
	}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3720      	adds	r7, #32
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}

08004f4c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b088      	sub	sp, #32
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	60f8      	str	r0, [r7, #12]
 8004f54:	60b9      	str	r1, [r7, #8]
 8004f56:	607a      	str	r2, [r7, #4]
 8004f58:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f5c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	009b      	lsls	r3, r3, #2
 8004f62:	461a      	mov	r2, r3
 8004f64:	21a5      	movs	r1, #165	; 0xa5
 8004f66:	f001 fe9d 	bl	8006ca4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004f74:	3b01      	subs	r3, #1
 8004f76:	009b      	lsls	r3, r3, #2
 8004f78:	4413      	add	r3, r2
 8004f7a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004f7c:	69bb      	ldr	r3, [r7, #24]
 8004f7e:	f023 0307 	bic.w	r3, r3, #7
 8004f82:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004f84:	69bb      	ldr	r3, [r7, #24]
 8004f86:	f003 0307 	and.w	r3, r3, #7
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d00a      	beq.n	8004fa4 <prvInitialiseNewTask+0x58>
	__asm volatile
 8004f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f92:	f383 8811 	msr	BASEPRI, r3
 8004f96:	f3bf 8f6f 	isb	sy
 8004f9a:	f3bf 8f4f 	dsb	sy
 8004f9e:	617b      	str	r3, [r7, #20]
}
 8004fa0:	bf00      	nop
 8004fa2:	e7fe      	b.n	8004fa2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d01f      	beq.n	8004fea <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004faa:	2300      	movs	r3, #0
 8004fac:	61fb      	str	r3, [r7, #28]
 8004fae:	e012      	b.n	8004fd6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004fb0:	68ba      	ldr	r2, [r7, #8]
 8004fb2:	69fb      	ldr	r3, [r7, #28]
 8004fb4:	4413      	add	r3, r2
 8004fb6:	7819      	ldrb	r1, [r3, #0]
 8004fb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fba:	69fb      	ldr	r3, [r7, #28]
 8004fbc:	4413      	add	r3, r2
 8004fbe:	3334      	adds	r3, #52	; 0x34
 8004fc0:	460a      	mov	r2, r1
 8004fc2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004fc4:	68ba      	ldr	r2, [r7, #8]
 8004fc6:	69fb      	ldr	r3, [r7, #28]
 8004fc8:	4413      	add	r3, r2
 8004fca:	781b      	ldrb	r3, [r3, #0]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d006      	beq.n	8004fde <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004fd0:	69fb      	ldr	r3, [r7, #28]
 8004fd2:	3301      	adds	r3, #1
 8004fd4:	61fb      	str	r3, [r7, #28]
 8004fd6:	69fb      	ldr	r3, [r7, #28]
 8004fd8:	2b0f      	cmp	r3, #15
 8004fda:	d9e9      	bls.n	8004fb0 <prvInitialiseNewTask+0x64>
 8004fdc:	e000      	b.n	8004fe0 <prvInitialiseNewTask+0x94>
			{
				break;
 8004fde:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004fe8:	e003      	b.n	8004ff2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fec:	2200      	movs	r2, #0
 8004fee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ff4:	2b37      	cmp	r3, #55	; 0x37
 8004ff6:	d901      	bls.n	8004ffc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004ff8:	2337      	movs	r3, #55	; 0x37
 8004ffa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ffe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005000:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005004:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005006:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800500a:	2200      	movs	r2, #0
 800500c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800500e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005010:	3304      	adds	r3, #4
 8005012:	4618      	mov	r0, r3
 8005014:	f7ff f978 	bl	8004308 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800501a:	3318      	adds	r3, #24
 800501c:	4618      	mov	r0, r3
 800501e:	f7ff f973 	bl	8004308 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005024:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005026:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800502a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800502e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005030:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005034:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005036:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800503a:	2200      	movs	r2, #0
 800503c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005042:	2200      	movs	r2, #0
 8005044:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800504a:	3354      	adds	r3, #84	; 0x54
 800504c:	2260      	movs	r2, #96	; 0x60
 800504e:	2100      	movs	r1, #0
 8005050:	4618      	mov	r0, r3
 8005052:	f001 fe27 	bl	8006ca4 <memset>
 8005056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005058:	4a0c      	ldr	r2, [pc, #48]	; (800508c <prvInitialiseNewTask+0x140>)
 800505a:	659a      	str	r2, [r3, #88]	; 0x58
 800505c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800505e:	4a0c      	ldr	r2, [pc, #48]	; (8005090 <prvInitialiseNewTask+0x144>)
 8005060:	65da      	str	r2, [r3, #92]	; 0x5c
 8005062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005064:	4a0b      	ldr	r2, [pc, #44]	; (8005094 <prvInitialiseNewTask+0x148>)
 8005066:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005068:	683a      	ldr	r2, [r7, #0]
 800506a:	68f9      	ldr	r1, [r7, #12]
 800506c:	69b8      	ldr	r0, [r7, #24]
 800506e:	f001 f9ab 	bl	80063c8 <pxPortInitialiseStack>
 8005072:	4602      	mov	r2, r0
 8005074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005076:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800507a:	2b00      	cmp	r3, #0
 800507c:	d002      	beq.n	8005084 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800507e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005080:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005082:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005084:	bf00      	nop
 8005086:	3720      	adds	r7, #32
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}
 800508c:	08006fb8 	.word	0x08006fb8
 8005090:	08006fd8 	.word	0x08006fd8
 8005094:	08006f98 	.word	0x08006f98

08005098 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b082      	sub	sp, #8
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80050a0:	f001 fac0 	bl	8006624 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80050a4:	4b2d      	ldr	r3, [pc, #180]	; (800515c <prvAddNewTaskToReadyList+0xc4>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	3301      	adds	r3, #1
 80050aa:	4a2c      	ldr	r2, [pc, #176]	; (800515c <prvAddNewTaskToReadyList+0xc4>)
 80050ac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80050ae:	4b2c      	ldr	r3, [pc, #176]	; (8005160 <prvAddNewTaskToReadyList+0xc8>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d109      	bne.n	80050ca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80050b6:	4a2a      	ldr	r2, [pc, #168]	; (8005160 <prvAddNewTaskToReadyList+0xc8>)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80050bc:	4b27      	ldr	r3, [pc, #156]	; (800515c <prvAddNewTaskToReadyList+0xc4>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d110      	bne.n	80050e6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80050c4:	f000 fc90 	bl	80059e8 <prvInitialiseTaskLists>
 80050c8:	e00d      	b.n	80050e6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80050ca:	4b26      	ldr	r3, [pc, #152]	; (8005164 <prvAddNewTaskToReadyList+0xcc>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d109      	bne.n	80050e6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80050d2:	4b23      	ldr	r3, [pc, #140]	; (8005160 <prvAddNewTaskToReadyList+0xc8>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050dc:	429a      	cmp	r2, r3
 80050de:	d802      	bhi.n	80050e6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80050e0:	4a1f      	ldr	r2, [pc, #124]	; (8005160 <prvAddNewTaskToReadyList+0xc8>)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80050e6:	4b20      	ldr	r3, [pc, #128]	; (8005168 <prvAddNewTaskToReadyList+0xd0>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	3301      	adds	r3, #1
 80050ec:	4a1e      	ldr	r2, [pc, #120]	; (8005168 <prvAddNewTaskToReadyList+0xd0>)
 80050ee:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80050f0:	4b1d      	ldr	r3, [pc, #116]	; (8005168 <prvAddNewTaskToReadyList+0xd0>)
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050fc:	4b1b      	ldr	r3, [pc, #108]	; (800516c <prvAddNewTaskToReadyList+0xd4>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	429a      	cmp	r2, r3
 8005102:	d903      	bls.n	800510c <prvAddNewTaskToReadyList+0x74>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005108:	4a18      	ldr	r2, [pc, #96]	; (800516c <prvAddNewTaskToReadyList+0xd4>)
 800510a:	6013      	str	r3, [r2, #0]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005110:	4613      	mov	r3, r2
 8005112:	009b      	lsls	r3, r3, #2
 8005114:	4413      	add	r3, r2
 8005116:	009b      	lsls	r3, r3, #2
 8005118:	4a15      	ldr	r2, [pc, #84]	; (8005170 <prvAddNewTaskToReadyList+0xd8>)
 800511a:	441a      	add	r2, r3
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	3304      	adds	r3, #4
 8005120:	4619      	mov	r1, r3
 8005122:	4610      	mov	r0, r2
 8005124:	f7ff f8fd 	bl	8004322 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005128:	f001 faac 	bl	8006684 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800512c:	4b0d      	ldr	r3, [pc, #52]	; (8005164 <prvAddNewTaskToReadyList+0xcc>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d00e      	beq.n	8005152 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005134:	4b0a      	ldr	r3, [pc, #40]	; (8005160 <prvAddNewTaskToReadyList+0xc8>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800513e:	429a      	cmp	r2, r3
 8005140:	d207      	bcs.n	8005152 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005142:	4b0c      	ldr	r3, [pc, #48]	; (8005174 <prvAddNewTaskToReadyList+0xdc>)
 8005144:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005148:	601a      	str	r2, [r3, #0]
 800514a:	f3bf 8f4f 	dsb	sy
 800514e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005152:	bf00      	nop
 8005154:	3708      	adds	r7, #8
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}
 800515a:	bf00      	nop
 800515c:	20001110 	.word	0x20001110
 8005160:	20000c3c 	.word	0x20000c3c
 8005164:	2000111c 	.word	0x2000111c
 8005168:	2000112c 	.word	0x2000112c
 800516c:	20001118 	.word	0x20001118
 8005170:	20000c40 	.word	0x20000c40
 8005174:	e000ed04 	.word	0xe000ed04

08005178 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 8005178:	b580      	push	{r7, lr}
 800517a:	b088      	sub	sp, #32
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
 8005180:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 8005182:	2300      	movs	r3, #0
 8005184:	61fb      	str	r3, [r7, #28]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	2b37      	cmp	r3, #55	; 0x37
 800518a:	d90a      	bls.n	80051a2 <vTaskPrioritySet+0x2a>
	__asm volatile
 800518c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005190:	f383 8811 	msr	BASEPRI, r3
 8005194:	f3bf 8f6f 	isb	sy
 8005198:	f3bf 8f4f 	dsb	sy
 800519c:	60fb      	str	r3, [r7, #12]
}
 800519e:	bf00      	nop
 80051a0:	e7fe      	b.n	80051a0 <vTaskPrioritySet+0x28>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	2b37      	cmp	r3, #55	; 0x37
 80051a6:	d901      	bls.n	80051ac <vTaskPrioritySet+0x34>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80051a8:	2337      	movs	r3, #55	; 0x37
 80051aa:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 80051ac:	f001 fa3a 	bl	8006624 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d102      	bne.n	80051bc <vTaskPrioritySet+0x44>
 80051b6:	4b3b      	ldr	r3, [pc, #236]	; (80052a4 <vTaskPrioritySet+0x12c>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	e000      	b.n	80051be <vTaskPrioritySet+0x46>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	61bb      	str	r3, [r7, #24]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 80051c0:	69bb      	ldr	r3, [r7, #24]
 80051c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051c4:	617b      	str	r3, [r7, #20]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 80051c6:	697a      	ldr	r2, [r7, #20]
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d063      	beq.n	8005296 <vTaskPrioritySet+0x11e>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 80051ce:	683a      	ldr	r2, [r7, #0]
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	429a      	cmp	r2, r3
 80051d4:	d90d      	bls.n	80051f2 <vTaskPrioritySet+0x7a>
				{
					if( pxTCB != pxCurrentTCB )
 80051d6:	4b33      	ldr	r3, [pc, #204]	; (80052a4 <vTaskPrioritySet+0x12c>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	69ba      	ldr	r2, [r7, #24]
 80051dc:	429a      	cmp	r2, r3
 80051de:	d00f      	beq.n	8005200 <vTaskPrioritySet+0x88>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 80051e0:	4b30      	ldr	r3, [pc, #192]	; (80052a4 <vTaskPrioritySet+0x12c>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051e6:	683a      	ldr	r2, [r7, #0]
 80051e8:	429a      	cmp	r2, r3
 80051ea:	d309      	bcc.n	8005200 <vTaskPrioritySet+0x88>
						{
							xYieldRequired = pdTRUE;
 80051ec:	2301      	movs	r3, #1
 80051ee:	61fb      	str	r3, [r7, #28]
 80051f0:	e006      	b.n	8005200 <vTaskPrioritySet+0x88>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 80051f2:	4b2c      	ldr	r3, [pc, #176]	; (80052a4 <vTaskPrioritySet+0x12c>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	69ba      	ldr	r2, [r7, #24]
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d101      	bne.n	8005200 <vTaskPrioritySet+0x88>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 80051fc:	2301      	movs	r3, #1
 80051fe:	61fb      	str	r3, [r7, #28]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005200:	69bb      	ldr	r3, [r7, #24]
 8005202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005204:	613b      	str	r3, [r7, #16]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 8005206:	69bb      	ldr	r3, [r7, #24]
 8005208:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800520a:	69bb      	ldr	r3, [r7, #24]
 800520c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800520e:	429a      	cmp	r2, r3
 8005210:	d102      	bne.n	8005218 <vTaskPrioritySet+0xa0>
					{
						pxTCB->uxPriority = uxNewPriority;
 8005212:	69bb      	ldr	r3, [r7, #24]
 8005214:	683a      	ldr	r2, [r7, #0]
 8005216:	62da      	str	r2, [r3, #44]	; 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 8005218:	69bb      	ldr	r3, [r7, #24]
 800521a:	683a      	ldr	r2, [r7, #0]
 800521c:	64da      	str	r2, [r3, #76]	; 0x4c
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800521e:	69bb      	ldr	r3, [r7, #24]
 8005220:	699b      	ldr	r3, [r3, #24]
 8005222:	2b00      	cmp	r3, #0
 8005224:	db04      	blt.n	8005230 <vTaskPrioritySet+0xb8>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800522c:	69bb      	ldr	r3, [r7, #24]
 800522e:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005230:	69bb      	ldr	r3, [r7, #24]
 8005232:	6959      	ldr	r1, [r3, #20]
 8005234:	693a      	ldr	r2, [r7, #16]
 8005236:	4613      	mov	r3, r2
 8005238:	009b      	lsls	r3, r3, #2
 800523a:	4413      	add	r3, r2
 800523c:	009b      	lsls	r3, r3, #2
 800523e:	4a1a      	ldr	r2, [pc, #104]	; (80052a8 <vTaskPrioritySet+0x130>)
 8005240:	4413      	add	r3, r2
 8005242:	4299      	cmp	r1, r3
 8005244:	d11c      	bne.n	8005280 <vTaskPrioritySet+0x108>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005246:	69bb      	ldr	r3, [r7, #24]
 8005248:	3304      	adds	r3, #4
 800524a:	4618      	mov	r0, r3
 800524c:	f7ff f8c6 	bl	80043dc <uxListRemove>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 8005250:	69bb      	ldr	r3, [r7, #24]
 8005252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005254:	4b15      	ldr	r3, [pc, #84]	; (80052ac <vTaskPrioritySet+0x134>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	429a      	cmp	r2, r3
 800525a:	d903      	bls.n	8005264 <vTaskPrioritySet+0xec>
 800525c:	69bb      	ldr	r3, [r7, #24]
 800525e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005260:	4a12      	ldr	r2, [pc, #72]	; (80052ac <vTaskPrioritySet+0x134>)
 8005262:	6013      	str	r3, [r2, #0]
 8005264:	69bb      	ldr	r3, [r7, #24]
 8005266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005268:	4613      	mov	r3, r2
 800526a:	009b      	lsls	r3, r3, #2
 800526c:	4413      	add	r3, r2
 800526e:	009b      	lsls	r3, r3, #2
 8005270:	4a0d      	ldr	r2, [pc, #52]	; (80052a8 <vTaskPrioritySet+0x130>)
 8005272:	441a      	add	r2, r3
 8005274:	69bb      	ldr	r3, [r7, #24]
 8005276:	3304      	adds	r3, #4
 8005278:	4619      	mov	r1, r3
 800527a:	4610      	mov	r0, r2
 800527c:	f7ff f851 	bl	8004322 <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 8005280:	69fb      	ldr	r3, [r7, #28]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d007      	beq.n	8005296 <vTaskPrioritySet+0x11e>
				{
					taskYIELD_IF_USING_PREEMPTION();
 8005286:	4b0a      	ldr	r3, [pc, #40]	; (80052b0 <vTaskPrioritySet+0x138>)
 8005288:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800528c:	601a      	str	r2, [r3, #0]
 800528e:	f3bf 8f4f 	dsb	sy
 8005292:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 8005296:	f001 f9f5 	bl	8006684 <vPortExitCritical>
	}
 800529a:	bf00      	nop
 800529c:	3720      	adds	r7, #32
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}
 80052a2:	bf00      	nop
 80052a4:	20000c3c 	.word	0x20000c3c
 80052a8:	20000c40 	.word	0x20000c40
 80052ac:	20001118 	.word	0x20001118
 80052b0:	e000ed04 	.word	0xe000ed04

080052b4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b08a      	sub	sp, #40	; 0x28
 80052b8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80052ba:	2300      	movs	r3, #0
 80052bc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80052be:	2300      	movs	r3, #0
 80052c0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80052c2:	463a      	mov	r2, r7
 80052c4:	1d39      	adds	r1, r7, #4
 80052c6:	f107 0308 	add.w	r3, r7, #8
 80052ca:	4618      	mov	r0, r3
 80052cc:	f7fe ffc8 	bl	8004260 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80052d0:	6839      	ldr	r1, [r7, #0]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	68ba      	ldr	r2, [r7, #8]
 80052d6:	9202      	str	r2, [sp, #8]
 80052d8:	9301      	str	r3, [sp, #4]
 80052da:	2300      	movs	r3, #0
 80052dc:	9300      	str	r3, [sp, #0]
 80052de:	2300      	movs	r3, #0
 80052e0:	460a      	mov	r2, r1
 80052e2:	4924      	ldr	r1, [pc, #144]	; (8005374 <vTaskStartScheduler+0xc0>)
 80052e4:	4824      	ldr	r0, [pc, #144]	; (8005378 <vTaskStartScheduler+0xc4>)
 80052e6:	f7ff fd8f 	bl	8004e08 <xTaskCreateStatic>
 80052ea:	4603      	mov	r3, r0
 80052ec:	4a23      	ldr	r2, [pc, #140]	; (800537c <vTaskStartScheduler+0xc8>)
 80052ee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80052f0:	4b22      	ldr	r3, [pc, #136]	; (800537c <vTaskStartScheduler+0xc8>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d002      	beq.n	80052fe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80052f8:	2301      	movs	r3, #1
 80052fa:	617b      	str	r3, [r7, #20]
 80052fc:	e001      	b.n	8005302 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80052fe:	2300      	movs	r3, #0
 8005300:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	2b01      	cmp	r3, #1
 8005306:	d102      	bne.n	800530e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005308:	f000 fd10 	bl	8005d2c <xTimerCreateTimerTask>
 800530c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	2b01      	cmp	r3, #1
 8005312:	d11b      	bne.n	800534c <vTaskStartScheduler+0x98>
	__asm volatile
 8005314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005318:	f383 8811 	msr	BASEPRI, r3
 800531c:	f3bf 8f6f 	isb	sy
 8005320:	f3bf 8f4f 	dsb	sy
 8005324:	613b      	str	r3, [r7, #16]
}
 8005326:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005328:	4b15      	ldr	r3, [pc, #84]	; (8005380 <vTaskStartScheduler+0xcc>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	3354      	adds	r3, #84	; 0x54
 800532e:	4a15      	ldr	r2, [pc, #84]	; (8005384 <vTaskStartScheduler+0xd0>)
 8005330:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005332:	4b15      	ldr	r3, [pc, #84]	; (8005388 <vTaskStartScheduler+0xd4>)
 8005334:	f04f 32ff 	mov.w	r2, #4294967295
 8005338:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800533a:	4b14      	ldr	r3, [pc, #80]	; (800538c <vTaskStartScheduler+0xd8>)
 800533c:	2201      	movs	r2, #1
 800533e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005340:	4b13      	ldr	r3, [pc, #76]	; (8005390 <vTaskStartScheduler+0xdc>)
 8005342:	2200      	movs	r2, #0
 8005344:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005346:	f001 f8cb 	bl	80064e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800534a:	e00e      	b.n	800536a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005352:	d10a      	bne.n	800536a <vTaskStartScheduler+0xb6>
	__asm volatile
 8005354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005358:	f383 8811 	msr	BASEPRI, r3
 800535c:	f3bf 8f6f 	isb	sy
 8005360:	f3bf 8f4f 	dsb	sy
 8005364:	60fb      	str	r3, [r7, #12]
}
 8005366:	bf00      	nop
 8005368:	e7fe      	b.n	8005368 <vTaskStartScheduler+0xb4>
}
 800536a:	bf00      	nop
 800536c:	3718      	adds	r7, #24
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}
 8005372:	bf00      	nop
 8005374:	08006eb8 	.word	0x08006eb8
 8005378:	080059b9 	.word	0x080059b9
 800537c:	20001134 	.word	0x20001134
 8005380:	20000c3c 	.word	0x20000c3c
 8005384:	20000014 	.word	0x20000014
 8005388:	20001130 	.word	0x20001130
 800538c:	2000111c 	.word	0x2000111c
 8005390:	20001114 	.word	0x20001114

08005394 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005394:	b480      	push	{r7}
 8005396:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005398:	4b04      	ldr	r3, [pc, #16]	; (80053ac <vTaskSuspendAll+0x18>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	3301      	adds	r3, #1
 800539e:	4a03      	ldr	r2, [pc, #12]	; (80053ac <vTaskSuspendAll+0x18>)
 80053a0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80053a2:	bf00      	nop
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr
 80053ac:	20001138 	.word	0x20001138

080053b0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b084      	sub	sp, #16
 80053b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80053b6:	2300      	movs	r3, #0
 80053b8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80053ba:	2300      	movs	r3, #0
 80053bc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80053be:	4b42      	ldr	r3, [pc, #264]	; (80054c8 <xTaskResumeAll+0x118>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d10a      	bne.n	80053dc <xTaskResumeAll+0x2c>
	__asm volatile
 80053c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ca:	f383 8811 	msr	BASEPRI, r3
 80053ce:	f3bf 8f6f 	isb	sy
 80053d2:	f3bf 8f4f 	dsb	sy
 80053d6:	603b      	str	r3, [r7, #0]
}
 80053d8:	bf00      	nop
 80053da:	e7fe      	b.n	80053da <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80053dc:	f001 f922 	bl	8006624 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80053e0:	4b39      	ldr	r3, [pc, #228]	; (80054c8 <xTaskResumeAll+0x118>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	3b01      	subs	r3, #1
 80053e6:	4a38      	ldr	r2, [pc, #224]	; (80054c8 <xTaskResumeAll+0x118>)
 80053e8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80053ea:	4b37      	ldr	r3, [pc, #220]	; (80054c8 <xTaskResumeAll+0x118>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d162      	bne.n	80054b8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80053f2:	4b36      	ldr	r3, [pc, #216]	; (80054cc <xTaskResumeAll+0x11c>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d05e      	beq.n	80054b8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80053fa:	e02f      	b.n	800545c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053fc:	4b34      	ldr	r3, [pc, #208]	; (80054d0 <xTaskResumeAll+0x120>)
 80053fe:	68db      	ldr	r3, [r3, #12]
 8005400:	68db      	ldr	r3, [r3, #12]
 8005402:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	3318      	adds	r3, #24
 8005408:	4618      	mov	r0, r3
 800540a:	f7fe ffe7 	bl	80043dc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	3304      	adds	r3, #4
 8005412:	4618      	mov	r0, r3
 8005414:	f7fe ffe2 	bl	80043dc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800541c:	4b2d      	ldr	r3, [pc, #180]	; (80054d4 <xTaskResumeAll+0x124>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	429a      	cmp	r2, r3
 8005422:	d903      	bls.n	800542c <xTaskResumeAll+0x7c>
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005428:	4a2a      	ldr	r2, [pc, #168]	; (80054d4 <xTaskResumeAll+0x124>)
 800542a:	6013      	str	r3, [r2, #0]
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005430:	4613      	mov	r3, r2
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	4413      	add	r3, r2
 8005436:	009b      	lsls	r3, r3, #2
 8005438:	4a27      	ldr	r2, [pc, #156]	; (80054d8 <xTaskResumeAll+0x128>)
 800543a:	441a      	add	r2, r3
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	3304      	adds	r3, #4
 8005440:	4619      	mov	r1, r3
 8005442:	4610      	mov	r0, r2
 8005444:	f7fe ff6d 	bl	8004322 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800544c:	4b23      	ldr	r3, [pc, #140]	; (80054dc <xTaskResumeAll+0x12c>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005452:	429a      	cmp	r2, r3
 8005454:	d302      	bcc.n	800545c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005456:	4b22      	ldr	r3, [pc, #136]	; (80054e0 <xTaskResumeAll+0x130>)
 8005458:	2201      	movs	r2, #1
 800545a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800545c:	4b1c      	ldr	r3, [pc, #112]	; (80054d0 <xTaskResumeAll+0x120>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d1cb      	bne.n	80053fc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d001      	beq.n	800546e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800546a:	f000 fb5f 	bl	8005b2c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800546e:	4b1d      	ldr	r3, [pc, #116]	; (80054e4 <xTaskResumeAll+0x134>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d010      	beq.n	800549c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800547a:	f000 f847 	bl	800550c <xTaskIncrementTick>
 800547e:	4603      	mov	r3, r0
 8005480:	2b00      	cmp	r3, #0
 8005482:	d002      	beq.n	800548a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005484:	4b16      	ldr	r3, [pc, #88]	; (80054e0 <xTaskResumeAll+0x130>)
 8005486:	2201      	movs	r2, #1
 8005488:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	3b01      	subs	r3, #1
 800548e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d1f1      	bne.n	800547a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005496:	4b13      	ldr	r3, [pc, #76]	; (80054e4 <xTaskResumeAll+0x134>)
 8005498:	2200      	movs	r2, #0
 800549a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800549c:	4b10      	ldr	r3, [pc, #64]	; (80054e0 <xTaskResumeAll+0x130>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d009      	beq.n	80054b8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80054a4:	2301      	movs	r3, #1
 80054a6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80054a8:	4b0f      	ldr	r3, [pc, #60]	; (80054e8 <xTaskResumeAll+0x138>)
 80054aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054ae:	601a      	str	r2, [r3, #0]
 80054b0:	f3bf 8f4f 	dsb	sy
 80054b4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80054b8:	f001 f8e4 	bl	8006684 <vPortExitCritical>

	return xAlreadyYielded;
 80054bc:	68bb      	ldr	r3, [r7, #8]
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3710      	adds	r7, #16
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}
 80054c6:	bf00      	nop
 80054c8:	20001138 	.word	0x20001138
 80054cc:	20001110 	.word	0x20001110
 80054d0:	200010d0 	.word	0x200010d0
 80054d4:	20001118 	.word	0x20001118
 80054d8:	20000c40 	.word	0x20000c40
 80054dc:	20000c3c 	.word	0x20000c3c
 80054e0:	20001124 	.word	0x20001124
 80054e4:	20001120 	.word	0x20001120
 80054e8:	e000ed04 	.word	0xe000ed04

080054ec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80054ec:	b480      	push	{r7}
 80054ee:	b083      	sub	sp, #12
 80054f0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80054f2:	4b05      	ldr	r3, [pc, #20]	; (8005508 <xTaskGetTickCount+0x1c>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80054f8:	687b      	ldr	r3, [r7, #4]
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	370c      	adds	r7, #12
 80054fe:	46bd      	mov	sp, r7
 8005500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005504:	4770      	bx	lr
 8005506:	bf00      	nop
 8005508:	20001114 	.word	0x20001114

0800550c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b086      	sub	sp, #24
 8005510:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005512:	2300      	movs	r3, #0
 8005514:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005516:	4b4f      	ldr	r3, [pc, #316]	; (8005654 <xTaskIncrementTick+0x148>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	2b00      	cmp	r3, #0
 800551c:	f040 808f 	bne.w	800563e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005520:	4b4d      	ldr	r3, [pc, #308]	; (8005658 <xTaskIncrementTick+0x14c>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	3301      	adds	r3, #1
 8005526:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005528:	4a4b      	ldr	r2, [pc, #300]	; (8005658 <xTaskIncrementTick+0x14c>)
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d120      	bne.n	8005576 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005534:	4b49      	ldr	r3, [pc, #292]	; (800565c <xTaskIncrementTick+0x150>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d00a      	beq.n	8005554 <xTaskIncrementTick+0x48>
	__asm volatile
 800553e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005542:	f383 8811 	msr	BASEPRI, r3
 8005546:	f3bf 8f6f 	isb	sy
 800554a:	f3bf 8f4f 	dsb	sy
 800554e:	603b      	str	r3, [r7, #0]
}
 8005550:	bf00      	nop
 8005552:	e7fe      	b.n	8005552 <xTaskIncrementTick+0x46>
 8005554:	4b41      	ldr	r3, [pc, #260]	; (800565c <xTaskIncrementTick+0x150>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	60fb      	str	r3, [r7, #12]
 800555a:	4b41      	ldr	r3, [pc, #260]	; (8005660 <xTaskIncrementTick+0x154>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a3f      	ldr	r2, [pc, #252]	; (800565c <xTaskIncrementTick+0x150>)
 8005560:	6013      	str	r3, [r2, #0]
 8005562:	4a3f      	ldr	r2, [pc, #252]	; (8005660 <xTaskIncrementTick+0x154>)
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	6013      	str	r3, [r2, #0]
 8005568:	4b3e      	ldr	r3, [pc, #248]	; (8005664 <xTaskIncrementTick+0x158>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	3301      	adds	r3, #1
 800556e:	4a3d      	ldr	r2, [pc, #244]	; (8005664 <xTaskIncrementTick+0x158>)
 8005570:	6013      	str	r3, [r2, #0]
 8005572:	f000 fadb 	bl	8005b2c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005576:	4b3c      	ldr	r3, [pc, #240]	; (8005668 <xTaskIncrementTick+0x15c>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	693a      	ldr	r2, [r7, #16]
 800557c:	429a      	cmp	r2, r3
 800557e:	d349      	bcc.n	8005614 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005580:	4b36      	ldr	r3, [pc, #216]	; (800565c <xTaskIncrementTick+0x150>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d104      	bne.n	8005594 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800558a:	4b37      	ldr	r3, [pc, #220]	; (8005668 <xTaskIncrementTick+0x15c>)
 800558c:	f04f 32ff 	mov.w	r2, #4294967295
 8005590:	601a      	str	r2, [r3, #0]
					break;
 8005592:	e03f      	b.n	8005614 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005594:	4b31      	ldr	r3, [pc, #196]	; (800565c <xTaskIncrementTick+0x150>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	68db      	ldr	r3, [r3, #12]
 800559a:	68db      	ldr	r3, [r3, #12]
 800559c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80055a4:	693a      	ldr	r2, [r7, #16]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	429a      	cmp	r2, r3
 80055aa:	d203      	bcs.n	80055b4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80055ac:	4a2e      	ldr	r2, [pc, #184]	; (8005668 <xTaskIncrementTick+0x15c>)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80055b2:	e02f      	b.n	8005614 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	3304      	adds	r3, #4
 80055b8:	4618      	mov	r0, r3
 80055ba:	f7fe ff0f 	bl	80043dc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d004      	beq.n	80055d0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	3318      	adds	r3, #24
 80055ca:	4618      	mov	r0, r3
 80055cc:	f7fe ff06 	bl	80043dc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055d4:	4b25      	ldr	r3, [pc, #148]	; (800566c <xTaskIncrementTick+0x160>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	429a      	cmp	r2, r3
 80055da:	d903      	bls.n	80055e4 <xTaskIncrementTick+0xd8>
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055e0:	4a22      	ldr	r2, [pc, #136]	; (800566c <xTaskIncrementTick+0x160>)
 80055e2:	6013      	str	r3, [r2, #0]
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055e8:	4613      	mov	r3, r2
 80055ea:	009b      	lsls	r3, r3, #2
 80055ec:	4413      	add	r3, r2
 80055ee:	009b      	lsls	r3, r3, #2
 80055f0:	4a1f      	ldr	r2, [pc, #124]	; (8005670 <xTaskIncrementTick+0x164>)
 80055f2:	441a      	add	r2, r3
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	3304      	adds	r3, #4
 80055f8:	4619      	mov	r1, r3
 80055fa:	4610      	mov	r0, r2
 80055fc:	f7fe fe91 	bl	8004322 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005604:	4b1b      	ldr	r3, [pc, #108]	; (8005674 <xTaskIncrementTick+0x168>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800560a:	429a      	cmp	r2, r3
 800560c:	d3b8      	bcc.n	8005580 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800560e:	2301      	movs	r3, #1
 8005610:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005612:	e7b5      	b.n	8005580 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005614:	4b17      	ldr	r3, [pc, #92]	; (8005674 <xTaskIncrementTick+0x168>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800561a:	4915      	ldr	r1, [pc, #84]	; (8005670 <xTaskIncrementTick+0x164>)
 800561c:	4613      	mov	r3, r2
 800561e:	009b      	lsls	r3, r3, #2
 8005620:	4413      	add	r3, r2
 8005622:	009b      	lsls	r3, r3, #2
 8005624:	440b      	add	r3, r1
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	2b01      	cmp	r3, #1
 800562a:	d901      	bls.n	8005630 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800562c:	2301      	movs	r3, #1
 800562e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005630:	4b11      	ldr	r3, [pc, #68]	; (8005678 <xTaskIncrementTick+0x16c>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d007      	beq.n	8005648 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005638:	2301      	movs	r3, #1
 800563a:	617b      	str	r3, [r7, #20]
 800563c:	e004      	b.n	8005648 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800563e:	4b0f      	ldr	r3, [pc, #60]	; (800567c <xTaskIncrementTick+0x170>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	3301      	adds	r3, #1
 8005644:	4a0d      	ldr	r2, [pc, #52]	; (800567c <xTaskIncrementTick+0x170>)
 8005646:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005648:	697b      	ldr	r3, [r7, #20]
}
 800564a:	4618      	mov	r0, r3
 800564c:	3718      	adds	r7, #24
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}
 8005652:	bf00      	nop
 8005654:	20001138 	.word	0x20001138
 8005658:	20001114 	.word	0x20001114
 800565c:	200010c8 	.word	0x200010c8
 8005660:	200010cc 	.word	0x200010cc
 8005664:	20001128 	.word	0x20001128
 8005668:	20001130 	.word	0x20001130
 800566c:	20001118 	.word	0x20001118
 8005670:	20000c40 	.word	0x20000c40
 8005674:	20000c3c 	.word	0x20000c3c
 8005678:	20001124 	.word	0x20001124
 800567c:	20001120 	.word	0x20001120

08005680 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005680:	b480      	push	{r7}
 8005682:	b085      	sub	sp, #20
 8005684:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005686:	4b2a      	ldr	r3, [pc, #168]	; (8005730 <vTaskSwitchContext+0xb0>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d003      	beq.n	8005696 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800568e:	4b29      	ldr	r3, [pc, #164]	; (8005734 <vTaskSwitchContext+0xb4>)
 8005690:	2201      	movs	r2, #1
 8005692:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005694:	e046      	b.n	8005724 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8005696:	4b27      	ldr	r3, [pc, #156]	; (8005734 <vTaskSwitchContext+0xb4>)
 8005698:	2200      	movs	r2, #0
 800569a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800569c:	4b26      	ldr	r3, [pc, #152]	; (8005738 <vTaskSwitchContext+0xb8>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	60fb      	str	r3, [r7, #12]
 80056a2:	e010      	b.n	80056c6 <vTaskSwitchContext+0x46>
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d10a      	bne.n	80056c0 <vTaskSwitchContext+0x40>
	__asm volatile
 80056aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ae:	f383 8811 	msr	BASEPRI, r3
 80056b2:	f3bf 8f6f 	isb	sy
 80056b6:	f3bf 8f4f 	dsb	sy
 80056ba:	607b      	str	r3, [r7, #4]
}
 80056bc:	bf00      	nop
 80056be:	e7fe      	b.n	80056be <vTaskSwitchContext+0x3e>
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	3b01      	subs	r3, #1
 80056c4:	60fb      	str	r3, [r7, #12]
 80056c6:	491d      	ldr	r1, [pc, #116]	; (800573c <vTaskSwitchContext+0xbc>)
 80056c8:	68fa      	ldr	r2, [r7, #12]
 80056ca:	4613      	mov	r3, r2
 80056cc:	009b      	lsls	r3, r3, #2
 80056ce:	4413      	add	r3, r2
 80056d0:	009b      	lsls	r3, r3, #2
 80056d2:	440b      	add	r3, r1
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d0e4      	beq.n	80056a4 <vTaskSwitchContext+0x24>
 80056da:	68fa      	ldr	r2, [r7, #12]
 80056dc:	4613      	mov	r3, r2
 80056de:	009b      	lsls	r3, r3, #2
 80056e0:	4413      	add	r3, r2
 80056e2:	009b      	lsls	r3, r3, #2
 80056e4:	4a15      	ldr	r2, [pc, #84]	; (800573c <vTaskSwitchContext+0xbc>)
 80056e6:	4413      	add	r3, r2
 80056e8:	60bb      	str	r3, [r7, #8]
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	685a      	ldr	r2, [r3, #4]
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	605a      	str	r2, [r3, #4]
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	685a      	ldr	r2, [r3, #4]
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	3308      	adds	r3, #8
 80056fc:	429a      	cmp	r2, r3
 80056fe:	d104      	bne.n	800570a <vTaskSwitchContext+0x8a>
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	685a      	ldr	r2, [r3, #4]
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	605a      	str	r2, [r3, #4]
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	68db      	ldr	r3, [r3, #12]
 8005710:	4a0b      	ldr	r2, [pc, #44]	; (8005740 <vTaskSwitchContext+0xc0>)
 8005712:	6013      	str	r3, [r2, #0]
 8005714:	4a08      	ldr	r2, [pc, #32]	; (8005738 <vTaskSwitchContext+0xb8>)
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800571a:	4b09      	ldr	r3, [pc, #36]	; (8005740 <vTaskSwitchContext+0xc0>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	3354      	adds	r3, #84	; 0x54
 8005720:	4a08      	ldr	r2, [pc, #32]	; (8005744 <vTaskSwitchContext+0xc4>)
 8005722:	6013      	str	r3, [r2, #0]
}
 8005724:	bf00      	nop
 8005726:	3714      	adds	r7, #20
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr
 8005730:	20001138 	.word	0x20001138
 8005734:	20001124 	.word	0x20001124
 8005738:	20001118 	.word	0x20001118
 800573c:	20000c40 	.word	0x20000c40
 8005740:	20000c3c 	.word	0x20000c3c
 8005744:	20000014 	.word	0x20000014

08005748 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b084      	sub	sp, #16
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d10a      	bne.n	800576e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800575c:	f383 8811 	msr	BASEPRI, r3
 8005760:	f3bf 8f6f 	isb	sy
 8005764:	f3bf 8f4f 	dsb	sy
 8005768:	60fb      	str	r3, [r7, #12]
}
 800576a:	bf00      	nop
 800576c:	e7fe      	b.n	800576c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800576e:	4b07      	ldr	r3, [pc, #28]	; (800578c <vTaskPlaceOnEventList+0x44>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	3318      	adds	r3, #24
 8005774:	4619      	mov	r1, r3
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f7fe fdf7 	bl	800436a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800577c:	2101      	movs	r1, #1
 800577e:	6838      	ldr	r0, [r7, #0]
 8005780:	f000 fa80 	bl	8005c84 <prvAddCurrentTaskToDelayedList>
}
 8005784:	bf00      	nop
 8005786:	3710      	adds	r7, #16
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}
 800578c:	20000c3c 	.word	0x20000c3c

08005790 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005790:	b580      	push	{r7, lr}
 8005792:	b086      	sub	sp, #24
 8005794:	af00      	add	r7, sp, #0
 8005796:	60f8      	str	r0, [r7, #12]
 8005798:	60b9      	str	r1, [r7, #8]
 800579a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d10a      	bne.n	80057b8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80057a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057a6:	f383 8811 	msr	BASEPRI, r3
 80057aa:	f3bf 8f6f 	isb	sy
 80057ae:	f3bf 8f4f 	dsb	sy
 80057b2:	617b      	str	r3, [r7, #20]
}
 80057b4:	bf00      	nop
 80057b6:	e7fe      	b.n	80057b6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80057b8:	4b0a      	ldr	r3, [pc, #40]	; (80057e4 <vTaskPlaceOnEventListRestricted+0x54>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	3318      	adds	r3, #24
 80057be:	4619      	mov	r1, r3
 80057c0:	68f8      	ldr	r0, [r7, #12]
 80057c2:	f7fe fdae 	bl	8004322 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d002      	beq.n	80057d2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80057cc:	f04f 33ff 	mov.w	r3, #4294967295
 80057d0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80057d2:	6879      	ldr	r1, [r7, #4]
 80057d4:	68b8      	ldr	r0, [r7, #8]
 80057d6:	f000 fa55 	bl	8005c84 <prvAddCurrentTaskToDelayedList>
	}
 80057da:	bf00      	nop
 80057dc:	3718      	adds	r7, #24
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}
 80057e2:	bf00      	nop
 80057e4:	20000c3c 	.word	0x20000c3c

080057e8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b086      	sub	sp, #24
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	68db      	ldr	r3, [r3, #12]
 80057f4:	68db      	ldr	r3, [r3, #12]
 80057f6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d10a      	bne.n	8005814 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80057fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005802:	f383 8811 	msr	BASEPRI, r3
 8005806:	f3bf 8f6f 	isb	sy
 800580a:	f3bf 8f4f 	dsb	sy
 800580e:	60fb      	str	r3, [r7, #12]
}
 8005810:	bf00      	nop
 8005812:	e7fe      	b.n	8005812 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	3318      	adds	r3, #24
 8005818:	4618      	mov	r0, r3
 800581a:	f7fe fddf 	bl	80043dc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800581e:	4b1e      	ldr	r3, [pc, #120]	; (8005898 <xTaskRemoveFromEventList+0xb0>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d11d      	bne.n	8005862 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	3304      	adds	r3, #4
 800582a:	4618      	mov	r0, r3
 800582c:	f7fe fdd6 	bl	80043dc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005834:	4b19      	ldr	r3, [pc, #100]	; (800589c <xTaskRemoveFromEventList+0xb4>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	429a      	cmp	r2, r3
 800583a:	d903      	bls.n	8005844 <xTaskRemoveFromEventList+0x5c>
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005840:	4a16      	ldr	r2, [pc, #88]	; (800589c <xTaskRemoveFromEventList+0xb4>)
 8005842:	6013      	str	r3, [r2, #0]
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005848:	4613      	mov	r3, r2
 800584a:	009b      	lsls	r3, r3, #2
 800584c:	4413      	add	r3, r2
 800584e:	009b      	lsls	r3, r3, #2
 8005850:	4a13      	ldr	r2, [pc, #76]	; (80058a0 <xTaskRemoveFromEventList+0xb8>)
 8005852:	441a      	add	r2, r3
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	3304      	adds	r3, #4
 8005858:	4619      	mov	r1, r3
 800585a:	4610      	mov	r0, r2
 800585c:	f7fe fd61 	bl	8004322 <vListInsertEnd>
 8005860:	e005      	b.n	800586e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	3318      	adds	r3, #24
 8005866:	4619      	mov	r1, r3
 8005868:	480e      	ldr	r0, [pc, #56]	; (80058a4 <xTaskRemoveFromEventList+0xbc>)
 800586a:	f7fe fd5a 	bl	8004322 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005872:	4b0d      	ldr	r3, [pc, #52]	; (80058a8 <xTaskRemoveFromEventList+0xc0>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005878:	429a      	cmp	r2, r3
 800587a:	d905      	bls.n	8005888 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800587c:	2301      	movs	r3, #1
 800587e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005880:	4b0a      	ldr	r3, [pc, #40]	; (80058ac <xTaskRemoveFromEventList+0xc4>)
 8005882:	2201      	movs	r2, #1
 8005884:	601a      	str	r2, [r3, #0]
 8005886:	e001      	b.n	800588c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005888:	2300      	movs	r3, #0
 800588a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800588c:	697b      	ldr	r3, [r7, #20]
}
 800588e:	4618      	mov	r0, r3
 8005890:	3718      	adds	r7, #24
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}
 8005896:	bf00      	nop
 8005898:	20001138 	.word	0x20001138
 800589c:	20001118 	.word	0x20001118
 80058a0:	20000c40 	.word	0x20000c40
 80058a4:	200010d0 	.word	0x200010d0
 80058a8:	20000c3c 	.word	0x20000c3c
 80058ac:	20001124 	.word	0x20001124

080058b0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80058b0:	b480      	push	{r7}
 80058b2:	b083      	sub	sp, #12
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80058b8:	4b06      	ldr	r3, [pc, #24]	; (80058d4 <vTaskInternalSetTimeOutState+0x24>)
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80058c0:	4b05      	ldr	r3, [pc, #20]	; (80058d8 <vTaskInternalSetTimeOutState+0x28>)
 80058c2:	681a      	ldr	r2, [r3, #0]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	605a      	str	r2, [r3, #4]
}
 80058c8:	bf00      	nop
 80058ca:	370c      	adds	r7, #12
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr
 80058d4:	20001128 	.word	0x20001128
 80058d8:	20001114 	.word	0x20001114

080058dc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b088      	sub	sp, #32
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
 80058e4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d10a      	bne.n	8005902 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80058ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058f0:	f383 8811 	msr	BASEPRI, r3
 80058f4:	f3bf 8f6f 	isb	sy
 80058f8:	f3bf 8f4f 	dsb	sy
 80058fc:	613b      	str	r3, [r7, #16]
}
 80058fe:	bf00      	nop
 8005900:	e7fe      	b.n	8005900 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d10a      	bne.n	800591e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800590c:	f383 8811 	msr	BASEPRI, r3
 8005910:	f3bf 8f6f 	isb	sy
 8005914:	f3bf 8f4f 	dsb	sy
 8005918:	60fb      	str	r3, [r7, #12]
}
 800591a:	bf00      	nop
 800591c:	e7fe      	b.n	800591c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800591e:	f000 fe81 	bl	8006624 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005922:	4b1d      	ldr	r3, [pc, #116]	; (8005998 <xTaskCheckForTimeOut+0xbc>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	69ba      	ldr	r2, [r7, #24]
 800592e:	1ad3      	subs	r3, r2, r3
 8005930:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800593a:	d102      	bne.n	8005942 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800593c:	2300      	movs	r3, #0
 800593e:	61fb      	str	r3, [r7, #28]
 8005940:	e023      	b.n	800598a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681a      	ldr	r2, [r3, #0]
 8005946:	4b15      	ldr	r3, [pc, #84]	; (800599c <xTaskCheckForTimeOut+0xc0>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	429a      	cmp	r2, r3
 800594c:	d007      	beq.n	800595e <xTaskCheckForTimeOut+0x82>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	69ba      	ldr	r2, [r7, #24]
 8005954:	429a      	cmp	r2, r3
 8005956:	d302      	bcc.n	800595e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005958:	2301      	movs	r3, #1
 800595a:	61fb      	str	r3, [r7, #28]
 800595c:	e015      	b.n	800598a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	697a      	ldr	r2, [r7, #20]
 8005964:	429a      	cmp	r2, r3
 8005966:	d20b      	bcs.n	8005980 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	681a      	ldr	r2, [r3, #0]
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	1ad2      	subs	r2, r2, r3
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	f7ff ff9b 	bl	80058b0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800597a:	2300      	movs	r3, #0
 800597c:	61fb      	str	r3, [r7, #28]
 800597e:	e004      	b.n	800598a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	2200      	movs	r2, #0
 8005984:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005986:	2301      	movs	r3, #1
 8005988:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800598a:	f000 fe7b 	bl	8006684 <vPortExitCritical>

	return xReturn;
 800598e:	69fb      	ldr	r3, [r7, #28]
}
 8005990:	4618      	mov	r0, r3
 8005992:	3720      	adds	r7, #32
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}
 8005998:	20001114 	.word	0x20001114
 800599c:	20001128 	.word	0x20001128

080059a0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80059a0:	b480      	push	{r7}
 80059a2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80059a4:	4b03      	ldr	r3, [pc, #12]	; (80059b4 <vTaskMissedYield+0x14>)
 80059a6:	2201      	movs	r2, #1
 80059a8:	601a      	str	r2, [r3, #0]
}
 80059aa:	bf00      	nop
 80059ac:	46bd      	mov	sp, r7
 80059ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b2:	4770      	bx	lr
 80059b4:	20001124 	.word	0x20001124

080059b8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b082      	sub	sp, #8
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80059c0:	f000 f852 	bl	8005a68 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80059c4:	4b06      	ldr	r3, [pc, #24]	; (80059e0 <prvIdleTask+0x28>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	d9f9      	bls.n	80059c0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80059cc:	4b05      	ldr	r3, [pc, #20]	; (80059e4 <prvIdleTask+0x2c>)
 80059ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059d2:	601a      	str	r2, [r3, #0]
 80059d4:	f3bf 8f4f 	dsb	sy
 80059d8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80059dc:	e7f0      	b.n	80059c0 <prvIdleTask+0x8>
 80059de:	bf00      	nop
 80059e0:	20000c40 	.word	0x20000c40
 80059e4:	e000ed04 	.word	0xe000ed04

080059e8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b082      	sub	sp, #8
 80059ec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80059ee:	2300      	movs	r3, #0
 80059f0:	607b      	str	r3, [r7, #4]
 80059f2:	e00c      	b.n	8005a0e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80059f4:	687a      	ldr	r2, [r7, #4]
 80059f6:	4613      	mov	r3, r2
 80059f8:	009b      	lsls	r3, r3, #2
 80059fa:	4413      	add	r3, r2
 80059fc:	009b      	lsls	r3, r3, #2
 80059fe:	4a12      	ldr	r2, [pc, #72]	; (8005a48 <prvInitialiseTaskLists+0x60>)
 8005a00:	4413      	add	r3, r2
 8005a02:	4618      	mov	r0, r3
 8005a04:	f7fe fc60 	bl	80042c8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	3301      	adds	r3, #1
 8005a0c:	607b      	str	r3, [r7, #4]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2b37      	cmp	r3, #55	; 0x37
 8005a12:	d9ef      	bls.n	80059f4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005a14:	480d      	ldr	r0, [pc, #52]	; (8005a4c <prvInitialiseTaskLists+0x64>)
 8005a16:	f7fe fc57 	bl	80042c8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005a1a:	480d      	ldr	r0, [pc, #52]	; (8005a50 <prvInitialiseTaskLists+0x68>)
 8005a1c:	f7fe fc54 	bl	80042c8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005a20:	480c      	ldr	r0, [pc, #48]	; (8005a54 <prvInitialiseTaskLists+0x6c>)
 8005a22:	f7fe fc51 	bl	80042c8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005a26:	480c      	ldr	r0, [pc, #48]	; (8005a58 <prvInitialiseTaskLists+0x70>)
 8005a28:	f7fe fc4e 	bl	80042c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005a2c:	480b      	ldr	r0, [pc, #44]	; (8005a5c <prvInitialiseTaskLists+0x74>)
 8005a2e:	f7fe fc4b 	bl	80042c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005a32:	4b0b      	ldr	r3, [pc, #44]	; (8005a60 <prvInitialiseTaskLists+0x78>)
 8005a34:	4a05      	ldr	r2, [pc, #20]	; (8005a4c <prvInitialiseTaskLists+0x64>)
 8005a36:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005a38:	4b0a      	ldr	r3, [pc, #40]	; (8005a64 <prvInitialiseTaskLists+0x7c>)
 8005a3a:	4a05      	ldr	r2, [pc, #20]	; (8005a50 <prvInitialiseTaskLists+0x68>)
 8005a3c:	601a      	str	r2, [r3, #0]
}
 8005a3e:	bf00      	nop
 8005a40:	3708      	adds	r7, #8
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}
 8005a46:	bf00      	nop
 8005a48:	20000c40 	.word	0x20000c40
 8005a4c:	200010a0 	.word	0x200010a0
 8005a50:	200010b4 	.word	0x200010b4
 8005a54:	200010d0 	.word	0x200010d0
 8005a58:	200010e4 	.word	0x200010e4
 8005a5c:	200010fc 	.word	0x200010fc
 8005a60:	200010c8 	.word	0x200010c8
 8005a64:	200010cc 	.word	0x200010cc

08005a68 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b082      	sub	sp, #8
 8005a6c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005a6e:	e019      	b.n	8005aa4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005a70:	f000 fdd8 	bl	8006624 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a74:	4b10      	ldr	r3, [pc, #64]	; (8005ab8 <prvCheckTasksWaitingTermination+0x50>)
 8005a76:	68db      	ldr	r3, [r3, #12]
 8005a78:	68db      	ldr	r3, [r3, #12]
 8005a7a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	3304      	adds	r3, #4
 8005a80:	4618      	mov	r0, r3
 8005a82:	f7fe fcab 	bl	80043dc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005a86:	4b0d      	ldr	r3, [pc, #52]	; (8005abc <prvCheckTasksWaitingTermination+0x54>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	3b01      	subs	r3, #1
 8005a8c:	4a0b      	ldr	r2, [pc, #44]	; (8005abc <prvCheckTasksWaitingTermination+0x54>)
 8005a8e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005a90:	4b0b      	ldr	r3, [pc, #44]	; (8005ac0 <prvCheckTasksWaitingTermination+0x58>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	3b01      	subs	r3, #1
 8005a96:	4a0a      	ldr	r2, [pc, #40]	; (8005ac0 <prvCheckTasksWaitingTermination+0x58>)
 8005a98:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005a9a:	f000 fdf3 	bl	8006684 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f000 f810 	bl	8005ac4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005aa4:	4b06      	ldr	r3, [pc, #24]	; (8005ac0 <prvCheckTasksWaitingTermination+0x58>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d1e1      	bne.n	8005a70 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005aac:	bf00      	nop
 8005aae:	bf00      	nop
 8005ab0:	3708      	adds	r7, #8
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}
 8005ab6:	bf00      	nop
 8005ab8:	200010e4 	.word	0x200010e4
 8005abc:	20001110 	.word	0x20001110
 8005ac0:	200010f8 	.word	0x200010f8

08005ac4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b084      	sub	sp, #16
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	3354      	adds	r3, #84	; 0x54
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f001 f8fd 	bl	8006cd0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d108      	bne.n	8005af2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f000 ff8b 	bl	8006a00 <vPortFree>
				vPortFree( pxTCB );
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f000 ff88 	bl	8006a00 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005af0:	e018      	b.n	8005b24 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	d103      	bne.n	8005b04 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f000 ff7f 	bl	8006a00 <vPortFree>
	}
 8005b02:	e00f      	b.n	8005b24 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005b0a:	2b02      	cmp	r3, #2
 8005b0c:	d00a      	beq.n	8005b24 <prvDeleteTCB+0x60>
	__asm volatile
 8005b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b12:	f383 8811 	msr	BASEPRI, r3
 8005b16:	f3bf 8f6f 	isb	sy
 8005b1a:	f3bf 8f4f 	dsb	sy
 8005b1e:	60fb      	str	r3, [r7, #12]
}
 8005b20:	bf00      	nop
 8005b22:	e7fe      	b.n	8005b22 <prvDeleteTCB+0x5e>
	}
 8005b24:	bf00      	nop
 8005b26:	3710      	adds	r7, #16
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd80      	pop	{r7, pc}

08005b2c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b083      	sub	sp, #12
 8005b30:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b32:	4b0c      	ldr	r3, [pc, #48]	; (8005b64 <prvResetNextTaskUnblockTime+0x38>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d104      	bne.n	8005b46 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005b3c:	4b0a      	ldr	r3, [pc, #40]	; (8005b68 <prvResetNextTaskUnblockTime+0x3c>)
 8005b3e:	f04f 32ff 	mov.w	r2, #4294967295
 8005b42:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005b44:	e008      	b.n	8005b58 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b46:	4b07      	ldr	r3, [pc, #28]	; (8005b64 <prvResetNextTaskUnblockTime+0x38>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	68db      	ldr	r3, [r3, #12]
 8005b4c:	68db      	ldr	r3, [r3, #12]
 8005b4e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	4a04      	ldr	r2, [pc, #16]	; (8005b68 <prvResetNextTaskUnblockTime+0x3c>)
 8005b56:	6013      	str	r3, [r2, #0]
}
 8005b58:	bf00      	nop
 8005b5a:	370c      	adds	r7, #12
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b62:	4770      	bx	lr
 8005b64:	200010c8 	.word	0x200010c8
 8005b68:	20001130 	.word	0x20001130

08005b6c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b083      	sub	sp, #12
 8005b70:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005b72:	4b0b      	ldr	r3, [pc, #44]	; (8005ba0 <xTaskGetSchedulerState+0x34>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d102      	bne.n	8005b80 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	607b      	str	r3, [r7, #4]
 8005b7e:	e008      	b.n	8005b92 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b80:	4b08      	ldr	r3, [pc, #32]	; (8005ba4 <xTaskGetSchedulerState+0x38>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d102      	bne.n	8005b8e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005b88:	2302      	movs	r3, #2
 8005b8a:	607b      	str	r3, [r7, #4]
 8005b8c:	e001      	b.n	8005b92 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005b92:	687b      	ldr	r3, [r7, #4]
	}
 8005b94:	4618      	mov	r0, r3
 8005b96:	370c      	adds	r7, #12
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9e:	4770      	bx	lr
 8005ba0:	2000111c 	.word	0x2000111c
 8005ba4:	20001138 	.word	0x20001138

08005ba8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b086      	sub	sp, #24
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d056      	beq.n	8005c6c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005bbe:	4b2e      	ldr	r3, [pc, #184]	; (8005c78 <xTaskPriorityDisinherit+0xd0>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	693a      	ldr	r2, [r7, #16]
 8005bc4:	429a      	cmp	r2, r3
 8005bc6:	d00a      	beq.n	8005bde <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bcc:	f383 8811 	msr	BASEPRI, r3
 8005bd0:	f3bf 8f6f 	isb	sy
 8005bd4:	f3bf 8f4f 	dsb	sy
 8005bd8:	60fb      	str	r3, [r7, #12]
}
 8005bda:	bf00      	nop
 8005bdc:	e7fe      	b.n	8005bdc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005bde:	693b      	ldr	r3, [r7, #16]
 8005be0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d10a      	bne.n	8005bfc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bea:	f383 8811 	msr	BASEPRI, r3
 8005bee:	f3bf 8f6f 	isb	sy
 8005bf2:	f3bf 8f4f 	dsb	sy
 8005bf6:	60bb      	str	r3, [r7, #8]
}
 8005bf8:	bf00      	nop
 8005bfa:	e7fe      	b.n	8005bfa <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c00:	1e5a      	subs	r2, r3, #1
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	d02c      	beq.n	8005c6c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d128      	bne.n	8005c6c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	3304      	adds	r3, #4
 8005c1e:	4618      	mov	r0, r3
 8005c20:	f7fe fbdc 	bl	80043dc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005c24:	693b      	ldr	r3, [r7, #16]
 8005c26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c30:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c3c:	4b0f      	ldr	r3, [pc, #60]	; (8005c7c <xTaskPriorityDisinherit+0xd4>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	429a      	cmp	r2, r3
 8005c42:	d903      	bls.n	8005c4c <xTaskPriorityDisinherit+0xa4>
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c48:	4a0c      	ldr	r2, [pc, #48]	; (8005c7c <xTaskPriorityDisinherit+0xd4>)
 8005c4a:	6013      	str	r3, [r2, #0]
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c50:	4613      	mov	r3, r2
 8005c52:	009b      	lsls	r3, r3, #2
 8005c54:	4413      	add	r3, r2
 8005c56:	009b      	lsls	r3, r3, #2
 8005c58:	4a09      	ldr	r2, [pc, #36]	; (8005c80 <xTaskPriorityDisinherit+0xd8>)
 8005c5a:	441a      	add	r2, r3
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	3304      	adds	r3, #4
 8005c60:	4619      	mov	r1, r3
 8005c62:	4610      	mov	r0, r2
 8005c64:	f7fe fb5d 	bl	8004322 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005c68:	2301      	movs	r3, #1
 8005c6a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005c6c:	697b      	ldr	r3, [r7, #20]
	}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3718      	adds	r7, #24
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}
 8005c76:	bf00      	nop
 8005c78:	20000c3c 	.word	0x20000c3c
 8005c7c:	20001118 	.word	0x20001118
 8005c80:	20000c40 	.word	0x20000c40

08005c84 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b084      	sub	sp, #16
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
 8005c8c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005c8e:	4b21      	ldr	r3, [pc, #132]	; (8005d14 <prvAddCurrentTaskToDelayedList+0x90>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005c94:	4b20      	ldr	r3, [pc, #128]	; (8005d18 <prvAddCurrentTaskToDelayedList+0x94>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	3304      	adds	r3, #4
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f7fe fb9e 	bl	80043dc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ca6:	d10a      	bne.n	8005cbe <prvAddCurrentTaskToDelayedList+0x3a>
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d007      	beq.n	8005cbe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005cae:	4b1a      	ldr	r3, [pc, #104]	; (8005d18 <prvAddCurrentTaskToDelayedList+0x94>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	3304      	adds	r3, #4
 8005cb4:	4619      	mov	r1, r3
 8005cb6:	4819      	ldr	r0, [pc, #100]	; (8005d1c <prvAddCurrentTaskToDelayedList+0x98>)
 8005cb8:	f7fe fb33 	bl	8004322 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005cbc:	e026      	b.n	8005d0c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005cbe:	68fa      	ldr	r2, [r7, #12]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	4413      	add	r3, r2
 8005cc4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005cc6:	4b14      	ldr	r3, [pc, #80]	; (8005d18 <prvAddCurrentTaskToDelayedList+0x94>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	68ba      	ldr	r2, [r7, #8]
 8005ccc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005cce:	68ba      	ldr	r2, [r7, #8]
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	d209      	bcs.n	8005cea <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005cd6:	4b12      	ldr	r3, [pc, #72]	; (8005d20 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005cd8:	681a      	ldr	r2, [r3, #0]
 8005cda:	4b0f      	ldr	r3, [pc, #60]	; (8005d18 <prvAddCurrentTaskToDelayedList+0x94>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	3304      	adds	r3, #4
 8005ce0:	4619      	mov	r1, r3
 8005ce2:	4610      	mov	r0, r2
 8005ce4:	f7fe fb41 	bl	800436a <vListInsert>
}
 8005ce8:	e010      	b.n	8005d0c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005cea:	4b0e      	ldr	r3, [pc, #56]	; (8005d24 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005cec:	681a      	ldr	r2, [r3, #0]
 8005cee:	4b0a      	ldr	r3, [pc, #40]	; (8005d18 <prvAddCurrentTaskToDelayedList+0x94>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	3304      	adds	r3, #4
 8005cf4:	4619      	mov	r1, r3
 8005cf6:	4610      	mov	r0, r2
 8005cf8:	f7fe fb37 	bl	800436a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005cfc:	4b0a      	ldr	r3, [pc, #40]	; (8005d28 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	68ba      	ldr	r2, [r7, #8]
 8005d02:	429a      	cmp	r2, r3
 8005d04:	d202      	bcs.n	8005d0c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005d06:	4a08      	ldr	r2, [pc, #32]	; (8005d28 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	6013      	str	r3, [r2, #0]
}
 8005d0c:	bf00      	nop
 8005d0e:	3710      	adds	r7, #16
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}
 8005d14:	20001114 	.word	0x20001114
 8005d18:	20000c3c 	.word	0x20000c3c
 8005d1c:	200010fc 	.word	0x200010fc
 8005d20:	200010cc 	.word	0x200010cc
 8005d24:	200010c8 	.word	0x200010c8
 8005d28:	20001130 	.word	0x20001130

08005d2c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b08a      	sub	sp, #40	; 0x28
 8005d30:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005d32:	2300      	movs	r3, #0
 8005d34:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005d36:	f000 fb07 	bl	8006348 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005d3a:	4b1c      	ldr	r3, [pc, #112]	; (8005dac <xTimerCreateTimerTask+0x80>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d021      	beq.n	8005d86 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005d42:	2300      	movs	r3, #0
 8005d44:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005d46:	2300      	movs	r3, #0
 8005d48:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005d4a:	1d3a      	adds	r2, r7, #4
 8005d4c:	f107 0108 	add.w	r1, r7, #8
 8005d50:	f107 030c 	add.w	r3, r7, #12
 8005d54:	4618      	mov	r0, r3
 8005d56:	f7fe fa9d 	bl	8004294 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005d5a:	6879      	ldr	r1, [r7, #4]
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	68fa      	ldr	r2, [r7, #12]
 8005d60:	9202      	str	r2, [sp, #8]
 8005d62:	9301      	str	r3, [sp, #4]
 8005d64:	2302      	movs	r3, #2
 8005d66:	9300      	str	r3, [sp, #0]
 8005d68:	2300      	movs	r3, #0
 8005d6a:	460a      	mov	r2, r1
 8005d6c:	4910      	ldr	r1, [pc, #64]	; (8005db0 <xTimerCreateTimerTask+0x84>)
 8005d6e:	4811      	ldr	r0, [pc, #68]	; (8005db4 <xTimerCreateTimerTask+0x88>)
 8005d70:	f7ff f84a 	bl	8004e08 <xTaskCreateStatic>
 8005d74:	4603      	mov	r3, r0
 8005d76:	4a10      	ldr	r2, [pc, #64]	; (8005db8 <xTimerCreateTimerTask+0x8c>)
 8005d78:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005d7a:	4b0f      	ldr	r3, [pc, #60]	; (8005db8 <xTimerCreateTimerTask+0x8c>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d001      	beq.n	8005d86 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005d82:	2301      	movs	r3, #1
 8005d84:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d10a      	bne.n	8005da2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d90:	f383 8811 	msr	BASEPRI, r3
 8005d94:	f3bf 8f6f 	isb	sy
 8005d98:	f3bf 8f4f 	dsb	sy
 8005d9c:	613b      	str	r3, [r7, #16]
}
 8005d9e:	bf00      	nop
 8005da0:	e7fe      	b.n	8005da0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005da2:	697b      	ldr	r3, [r7, #20]
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	3718      	adds	r7, #24
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}
 8005dac:	2000116c 	.word	0x2000116c
 8005db0:	08006ec0 	.word	0x08006ec0
 8005db4:	08005ef1 	.word	0x08005ef1
 8005db8:	20001170 	.word	0x20001170

08005dbc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b08a      	sub	sp, #40	; 0x28
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	60f8      	str	r0, [r7, #12]
 8005dc4:	60b9      	str	r1, [r7, #8]
 8005dc6:	607a      	str	r2, [r7, #4]
 8005dc8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d10a      	bne.n	8005dea <xTimerGenericCommand+0x2e>
	__asm volatile
 8005dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dd8:	f383 8811 	msr	BASEPRI, r3
 8005ddc:	f3bf 8f6f 	isb	sy
 8005de0:	f3bf 8f4f 	dsb	sy
 8005de4:	623b      	str	r3, [r7, #32]
}
 8005de6:	bf00      	nop
 8005de8:	e7fe      	b.n	8005de8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005dea:	4b1a      	ldr	r3, [pc, #104]	; (8005e54 <xTimerGenericCommand+0x98>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d02a      	beq.n	8005e48 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	2b05      	cmp	r3, #5
 8005e02:	dc18      	bgt.n	8005e36 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005e04:	f7ff feb2 	bl	8005b6c <xTaskGetSchedulerState>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	2b02      	cmp	r3, #2
 8005e0c:	d109      	bne.n	8005e22 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005e0e:	4b11      	ldr	r3, [pc, #68]	; (8005e54 <xTimerGenericCommand+0x98>)
 8005e10:	6818      	ldr	r0, [r3, #0]
 8005e12:	f107 0110 	add.w	r1, r7, #16
 8005e16:	2300      	movs	r3, #0
 8005e18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e1a:	f7fe fc0d 	bl	8004638 <xQueueGenericSend>
 8005e1e:	6278      	str	r0, [r7, #36]	; 0x24
 8005e20:	e012      	b.n	8005e48 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005e22:	4b0c      	ldr	r3, [pc, #48]	; (8005e54 <xTimerGenericCommand+0x98>)
 8005e24:	6818      	ldr	r0, [r3, #0]
 8005e26:	f107 0110 	add.w	r1, r7, #16
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	f7fe fc03 	bl	8004638 <xQueueGenericSend>
 8005e32:	6278      	str	r0, [r7, #36]	; 0x24
 8005e34:	e008      	b.n	8005e48 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005e36:	4b07      	ldr	r3, [pc, #28]	; (8005e54 <xTimerGenericCommand+0x98>)
 8005e38:	6818      	ldr	r0, [r3, #0]
 8005e3a:	f107 0110 	add.w	r1, r7, #16
 8005e3e:	2300      	movs	r3, #0
 8005e40:	683a      	ldr	r2, [r7, #0]
 8005e42:	f7fe fcf7 	bl	8004834 <xQueueGenericSendFromISR>
 8005e46:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3728      	adds	r7, #40	; 0x28
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}
 8005e52:	bf00      	nop
 8005e54:	2000116c 	.word	0x2000116c

08005e58 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b088      	sub	sp, #32
 8005e5c:	af02      	add	r7, sp, #8
 8005e5e:	6078      	str	r0, [r7, #4]
 8005e60:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e62:	4b22      	ldr	r3, [pc, #136]	; (8005eec <prvProcessExpiredTimer+0x94>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	68db      	ldr	r3, [r3, #12]
 8005e68:	68db      	ldr	r3, [r3, #12]
 8005e6a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	3304      	adds	r3, #4
 8005e70:	4618      	mov	r0, r3
 8005e72:	f7fe fab3 	bl	80043dc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e7c:	f003 0304 	and.w	r3, r3, #4
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d022      	beq.n	8005eca <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	699a      	ldr	r2, [r3, #24]
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	18d1      	adds	r1, r2, r3
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	683a      	ldr	r2, [r7, #0]
 8005e90:	6978      	ldr	r0, [r7, #20]
 8005e92:	f000 f8d1 	bl	8006038 <prvInsertTimerInActiveList>
 8005e96:	4603      	mov	r3, r0
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d01f      	beq.n	8005edc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	9300      	str	r3, [sp, #0]
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	687a      	ldr	r2, [r7, #4]
 8005ea4:	2100      	movs	r1, #0
 8005ea6:	6978      	ldr	r0, [r7, #20]
 8005ea8:	f7ff ff88 	bl	8005dbc <xTimerGenericCommand>
 8005eac:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d113      	bne.n	8005edc <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eb8:	f383 8811 	msr	BASEPRI, r3
 8005ebc:	f3bf 8f6f 	isb	sy
 8005ec0:	f3bf 8f4f 	dsb	sy
 8005ec4:	60fb      	str	r3, [r7, #12]
}
 8005ec6:	bf00      	nop
 8005ec8:	e7fe      	b.n	8005ec8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ed0:	f023 0301 	bic.w	r3, r3, #1
 8005ed4:	b2da      	uxtb	r2, r3
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	6a1b      	ldr	r3, [r3, #32]
 8005ee0:	6978      	ldr	r0, [r7, #20]
 8005ee2:	4798      	blx	r3
}
 8005ee4:	bf00      	nop
 8005ee6:	3718      	adds	r7, #24
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}
 8005eec:	20001164 	.word	0x20001164

08005ef0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b084      	sub	sp, #16
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005ef8:	f107 0308 	add.w	r3, r7, #8
 8005efc:	4618      	mov	r0, r3
 8005efe:	f000 f857 	bl	8005fb0 <prvGetNextExpireTime>
 8005f02:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	4619      	mov	r1, r3
 8005f08:	68f8      	ldr	r0, [r7, #12]
 8005f0a:	f000 f803 	bl	8005f14 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005f0e:	f000 f8d5 	bl	80060bc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005f12:	e7f1      	b.n	8005ef8 <prvTimerTask+0x8>

08005f14 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b084      	sub	sp, #16
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
 8005f1c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005f1e:	f7ff fa39 	bl	8005394 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005f22:	f107 0308 	add.w	r3, r7, #8
 8005f26:	4618      	mov	r0, r3
 8005f28:	f000 f866 	bl	8005ff8 <prvSampleTimeNow>
 8005f2c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d130      	bne.n	8005f96 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d10a      	bne.n	8005f50 <prvProcessTimerOrBlockTask+0x3c>
 8005f3a:	687a      	ldr	r2, [r7, #4]
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	429a      	cmp	r2, r3
 8005f40:	d806      	bhi.n	8005f50 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005f42:	f7ff fa35 	bl	80053b0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005f46:	68f9      	ldr	r1, [r7, #12]
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	f7ff ff85 	bl	8005e58 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005f4e:	e024      	b.n	8005f9a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d008      	beq.n	8005f68 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005f56:	4b13      	ldr	r3, [pc, #76]	; (8005fa4 <prvProcessTimerOrBlockTask+0x90>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d101      	bne.n	8005f64 <prvProcessTimerOrBlockTask+0x50>
 8005f60:	2301      	movs	r3, #1
 8005f62:	e000      	b.n	8005f66 <prvProcessTimerOrBlockTask+0x52>
 8005f64:	2300      	movs	r3, #0
 8005f66:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005f68:	4b0f      	ldr	r3, [pc, #60]	; (8005fa8 <prvProcessTimerOrBlockTask+0x94>)
 8005f6a:	6818      	ldr	r0, [r3, #0]
 8005f6c:	687a      	ldr	r2, [r7, #4]
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	1ad3      	subs	r3, r2, r3
 8005f72:	683a      	ldr	r2, [r7, #0]
 8005f74:	4619      	mov	r1, r3
 8005f76:	f7fe ff13 	bl	8004da0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005f7a:	f7ff fa19 	bl	80053b0 <xTaskResumeAll>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d10a      	bne.n	8005f9a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005f84:	4b09      	ldr	r3, [pc, #36]	; (8005fac <prvProcessTimerOrBlockTask+0x98>)
 8005f86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f8a:	601a      	str	r2, [r3, #0]
 8005f8c:	f3bf 8f4f 	dsb	sy
 8005f90:	f3bf 8f6f 	isb	sy
}
 8005f94:	e001      	b.n	8005f9a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005f96:	f7ff fa0b 	bl	80053b0 <xTaskResumeAll>
}
 8005f9a:	bf00      	nop
 8005f9c:	3710      	adds	r7, #16
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}
 8005fa2:	bf00      	nop
 8005fa4:	20001168 	.word	0x20001168
 8005fa8:	2000116c 	.word	0x2000116c
 8005fac:	e000ed04 	.word	0xe000ed04

08005fb0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b085      	sub	sp, #20
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005fb8:	4b0e      	ldr	r3, [pc, #56]	; (8005ff4 <prvGetNextExpireTime+0x44>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d101      	bne.n	8005fc6 <prvGetNextExpireTime+0x16>
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	e000      	b.n	8005fc8 <prvGetNextExpireTime+0x18>
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d105      	bne.n	8005fe0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005fd4:	4b07      	ldr	r3, [pc, #28]	; (8005ff4 <prvGetNextExpireTime+0x44>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	68db      	ldr	r3, [r3, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	60fb      	str	r3, [r7, #12]
 8005fde:	e001      	b.n	8005fe4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3714      	adds	r7, #20
 8005fea:	46bd      	mov	sp, r7
 8005fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff0:	4770      	bx	lr
 8005ff2:	bf00      	nop
 8005ff4:	20001164 	.word	0x20001164

08005ff8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b084      	sub	sp, #16
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006000:	f7ff fa74 	bl	80054ec <xTaskGetTickCount>
 8006004:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006006:	4b0b      	ldr	r3, [pc, #44]	; (8006034 <prvSampleTimeNow+0x3c>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	68fa      	ldr	r2, [r7, #12]
 800600c:	429a      	cmp	r2, r3
 800600e:	d205      	bcs.n	800601c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006010:	f000 f936 	bl	8006280 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2201      	movs	r2, #1
 8006018:	601a      	str	r2, [r3, #0]
 800601a:	e002      	b.n	8006022 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2200      	movs	r2, #0
 8006020:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006022:	4a04      	ldr	r2, [pc, #16]	; (8006034 <prvSampleTimeNow+0x3c>)
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006028:	68fb      	ldr	r3, [r7, #12]
}
 800602a:	4618      	mov	r0, r3
 800602c:	3710      	adds	r7, #16
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}
 8006032:	bf00      	nop
 8006034:	20001174 	.word	0x20001174

08006038 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b086      	sub	sp, #24
 800603c:	af00      	add	r7, sp, #0
 800603e:	60f8      	str	r0, [r7, #12]
 8006040:	60b9      	str	r1, [r7, #8]
 8006042:	607a      	str	r2, [r7, #4]
 8006044:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006046:	2300      	movs	r3, #0
 8006048:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	68ba      	ldr	r2, [r7, #8]
 800604e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	68fa      	ldr	r2, [r7, #12]
 8006054:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006056:	68ba      	ldr	r2, [r7, #8]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	429a      	cmp	r2, r3
 800605c:	d812      	bhi.n	8006084 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800605e:	687a      	ldr	r2, [r7, #4]
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	1ad2      	subs	r2, r2, r3
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	699b      	ldr	r3, [r3, #24]
 8006068:	429a      	cmp	r2, r3
 800606a:	d302      	bcc.n	8006072 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800606c:	2301      	movs	r3, #1
 800606e:	617b      	str	r3, [r7, #20]
 8006070:	e01b      	b.n	80060aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006072:	4b10      	ldr	r3, [pc, #64]	; (80060b4 <prvInsertTimerInActiveList+0x7c>)
 8006074:	681a      	ldr	r2, [r3, #0]
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	3304      	adds	r3, #4
 800607a:	4619      	mov	r1, r3
 800607c:	4610      	mov	r0, r2
 800607e:	f7fe f974 	bl	800436a <vListInsert>
 8006082:	e012      	b.n	80060aa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006084:	687a      	ldr	r2, [r7, #4]
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	429a      	cmp	r2, r3
 800608a:	d206      	bcs.n	800609a <prvInsertTimerInActiveList+0x62>
 800608c:	68ba      	ldr	r2, [r7, #8]
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	429a      	cmp	r2, r3
 8006092:	d302      	bcc.n	800609a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006094:	2301      	movs	r3, #1
 8006096:	617b      	str	r3, [r7, #20]
 8006098:	e007      	b.n	80060aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800609a:	4b07      	ldr	r3, [pc, #28]	; (80060b8 <prvInsertTimerInActiveList+0x80>)
 800609c:	681a      	ldr	r2, [r3, #0]
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	3304      	adds	r3, #4
 80060a2:	4619      	mov	r1, r3
 80060a4:	4610      	mov	r0, r2
 80060a6:	f7fe f960 	bl	800436a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80060aa:	697b      	ldr	r3, [r7, #20]
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	3718      	adds	r7, #24
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}
 80060b4:	20001168 	.word	0x20001168
 80060b8:	20001164 	.word	0x20001164

080060bc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b08e      	sub	sp, #56	; 0x38
 80060c0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80060c2:	e0ca      	b.n	800625a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	da18      	bge.n	80060fc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80060ca:	1d3b      	adds	r3, r7, #4
 80060cc:	3304      	adds	r3, #4
 80060ce:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80060d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d10a      	bne.n	80060ec <prvProcessReceivedCommands+0x30>
	__asm volatile
 80060d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060da:	f383 8811 	msr	BASEPRI, r3
 80060de:	f3bf 8f6f 	isb	sy
 80060e2:	f3bf 8f4f 	dsb	sy
 80060e6:	61fb      	str	r3, [r7, #28]
}
 80060e8:	bf00      	nop
 80060ea:	e7fe      	b.n	80060ea <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80060ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060f2:	6850      	ldr	r0, [r2, #4]
 80060f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060f6:	6892      	ldr	r2, [r2, #8]
 80060f8:	4611      	mov	r1, r2
 80060fa:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	f2c0 80aa 	blt.w	8006258 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800610a:	695b      	ldr	r3, [r3, #20]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d004      	beq.n	800611a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006112:	3304      	adds	r3, #4
 8006114:	4618      	mov	r0, r3
 8006116:	f7fe f961 	bl	80043dc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800611a:	463b      	mov	r3, r7
 800611c:	4618      	mov	r0, r3
 800611e:	f7ff ff6b 	bl	8005ff8 <prvSampleTimeNow>
 8006122:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2b09      	cmp	r3, #9
 8006128:	f200 8097 	bhi.w	800625a <prvProcessReceivedCommands+0x19e>
 800612c:	a201      	add	r2, pc, #4	; (adr r2, 8006134 <prvProcessReceivedCommands+0x78>)
 800612e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006132:	bf00      	nop
 8006134:	0800615d 	.word	0x0800615d
 8006138:	0800615d 	.word	0x0800615d
 800613c:	0800615d 	.word	0x0800615d
 8006140:	080061d1 	.word	0x080061d1
 8006144:	080061e5 	.word	0x080061e5
 8006148:	0800622f 	.word	0x0800622f
 800614c:	0800615d 	.word	0x0800615d
 8006150:	0800615d 	.word	0x0800615d
 8006154:	080061d1 	.word	0x080061d1
 8006158:	080061e5 	.word	0x080061e5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800615c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800615e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006162:	f043 0301 	orr.w	r3, r3, #1
 8006166:	b2da      	uxtb	r2, r3
 8006168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800616a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800616e:	68ba      	ldr	r2, [r7, #8]
 8006170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006172:	699b      	ldr	r3, [r3, #24]
 8006174:	18d1      	adds	r1, r2, r3
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800617a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800617c:	f7ff ff5c 	bl	8006038 <prvInsertTimerInActiveList>
 8006180:	4603      	mov	r3, r0
 8006182:	2b00      	cmp	r3, #0
 8006184:	d069      	beq.n	800625a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006188:	6a1b      	ldr	r3, [r3, #32]
 800618a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800618c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800618e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006190:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006194:	f003 0304 	and.w	r3, r3, #4
 8006198:	2b00      	cmp	r3, #0
 800619a:	d05e      	beq.n	800625a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800619c:	68ba      	ldr	r2, [r7, #8]
 800619e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061a0:	699b      	ldr	r3, [r3, #24]
 80061a2:	441a      	add	r2, r3
 80061a4:	2300      	movs	r3, #0
 80061a6:	9300      	str	r3, [sp, #0]
 80061a8:	2300      	movs	r3, #0
 80061aa:	2100      	movs	r1, #0
 80061ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061ae:	f7ff fe05 	bl	8005dbc <xTimerGenericCommand>
 80061b2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80061b4:	6a3b      	ldr	r3, [r7, #32]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d14f      	bne.n	800625a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80061ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061be:	f383 8811 	msr	BASEPRI, r3
 80061c2:	f3bf 8f6f 	isb	sy
 80061c6:	f3bf 8f4f 	dsb	sy
 80061ca:	61bb      	str	r3, [r7, #24]
}
 80061cc:	bf00      	nop
 80061ce:	e7fe      	b.n	80061ce <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80061d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80061d6:	f023 0301 	bic.w	r3, r3, #1
 80061da:	b2da      	uxtb	r2, r3
 80061dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80061e2:	e03a      	b.n	800625a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80061e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80061ea:	f043 0301 	orr.w	r3, r3, #1
 80061ee:	b2da      	uxtb	r2, r3
 80061f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80061f6:	68ba      	ldr	r2, [r7, #8]
 80061f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061fa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80061fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061fe:	699b      	ldr	r3, [r3, #24]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d10a      	bne.n	800621a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006208:	f383 8811 	msr	BASEPRI, r3
 800620c:	f3bf 8f6f 	isb	sy
 8006210:	f3bf 8f4f 	dsb	sy
 8006214:	617b      	str	r3, [r7, #20]
}
 8006216:	bf00      	nop
 8006218:	e7fe      	b.n	8006218 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800621a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800621c:	699a      	ldr	r2, [r3, #24]
 800621e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006220:	18d1      	adds	r1, r2, r3
 8006222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006224:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006226:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006228:	f7ff ff06 	bl	8006038 <prvInsertTimerInActiveList>
					break;
 800622c:	e015      	b.n	800625a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800622e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006230:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006234:	f003 0302 	and.w	r3, r3, #2
 8006238:	2b00      	cmp	r3, #0
 800623a:	d103      	bne.n	8006244 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800623c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800623e:	f000 fbdf 	bl	8006a00 <vPortFree>
 8006242:	e00a      	b.n	800625a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006246:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800624a:	f023 0301 	bic.w	r3, r3, #1
 800624e:	b2da      	uxtb	r2, r3
 8006250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006252:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006256:	e000      	b.n	800625a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006258:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800625a:	4b08      	ldr	r3, [pc, #32]	; (800627c <prvProcessReceivedCommands+0x1c0>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	1d39      	adds	r1, r7, #4
 8006260:	2200      	movs	r2, #0
 8006262:	4618      	mov	r0, r3
 8006264:	f7fe fb82 	bl	800496c <xQueueReceive>
 8006268:	4603      	mov	r3, r0
 800626a:	2b00      	cmp	r3, #0
 800626c:	f47f af2a 	bne.w	80060c4 <prvProcessReceivedCommands+0x8>
	}
}
 8006270:	bf00      	nop
 8006272:	bf00      	nop
 8006274:	3730      	adds	r7, #48	; 0x30
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}
 800627a:	bf00      	nop
 800627c:	2000116c 	.word	0x2000116c

08006280 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b088      	sub	sp, #32
 8006284:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006286:	e048      	b.n	800631a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006288:	4b2d      	ldr	r3, [pc, #180]	; (8006340 <prvSwitchTimerLists+0xc0>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	68db      	ldr	r3, [r3, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006292:	4b2b      	ldr	r3, [pc, #172]	; (8006340 <prvSwitchTimerLists+0xc0>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	68db      	ldr	r3, [r3, #12]
 8006298:	68db      	ldr	r3, [r3, #12]
 800629a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	3304      	adds	r3, #4
 80062a0:	4618      	mov	r0, r3
 80062a2:	f7fe f89b 	bl	80043dc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	6a1b      	ldr	r3, [r3, #32]
 80062aa:	68f8      	ldr	r0, [r7, #12]
 80062ac:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80062b4:	f003 0304 	and.w	r3, r3, #4
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d02e      	beq.n	800631a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	699b      	ldr	r3, [r3, #24]
 80062c0:	693a      	ldr	r2, [r7, #16]
 80062c2:	4413      	add	r3, r2
 80062c4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80062c6:	68ba      	ldr	r2, [r7, #8]
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	429a      	cmp	r2, r3
 80062cc:	d90e      	bls.n	80062ec <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	68ba      	ldr	r2, [r7, #8]
 80062d2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	68fa      	ldr	r2, [r7, #12]
 80062d8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80062da:	4b19      	ldr	r3, [pc, #100]	; (8006340 <prvSwitchTimerLists+0xc0>)
 80062dc:	681a      	ldr	r2, [r3, #0]
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	3304      	adds	r3, #4
 80062e2:	4619      	mov	r1, r3
 80062e4:	4610      	mov	r0, r2
 80062e6:	f7fe f840 	bl	800436a <vListInsert>
 80062ea:	e016      	b.n	800631a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80062ec:	2300      	movs	r3, #0
 80062ee:	9300      	str	r3, [sp, #0]
 80062f0:	2300      	movs	r3, #0
 80062f2:	693a      	ldr	r2, [r7, #16]
 80062f4:	2100      	movs	r1, #0
 80062f6:	68f8      	ldr	r0, [r7, #12]
 80062f8:	f7ff fd60 	bl	8005dbc <xTimerGenericCommand>
 80062fc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d10a      	bne.n	800631a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006308:	f383 8811 	msr	BASEPRI, r3
 800630c:	f3bf 8f6f 	isb	sy
 8006310:	f3bf 8f4f 	dsb	sy
 8006314:	603b      	str	r3, [r7, #0]
}
 8006316:	bf00      	nop
 8006318:	e7fe      	b.n	8006318 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800631a:	4b09      	ldr	r3, [pc, #36]	; (8006340 <prvSwitchTimerLists+0xc0>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d1b1      	bne.n	8006288 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006324:	4b06      	ldr	r3, [pc, #24]	; (8006340 <prvSwitchTimerLists+0xc0>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800632a:	4b06      	ldr	r3, [pc, #24]	; (8006344 <prvSwitchTimerLists+0xc4>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a04      	ldr	r2, [pc, #16]	; (8006340 <prvSwitchTimerLists+0xc0>)
 8006330:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006332:	4a04      	ldr	r2, [pc, #16]	; (8006344 <prvSwitchTimerLists+0xc4>)
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	6013      	str	r3, [r2, #0]
}
 8006338:	bf00      	nop
 800633a:	3718      	adds	r7, #24
 800633c:	46bd      	mov	sp, r7
 800633e:	bd80      	pop	{r7, pc}
 8006340:	20001164 	.word	0x20001164
 8006344:	20001168 	.word	0x20001168

08006348 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b082      	sub	sp, #8
 800634c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800634e:	f000 f969 	bl	8006624 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006352:	4b15      	ldr	r3, [pc, #84]	; (80063a8 <prvCheckForValidListAndQueue+0x60>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d120      	bne.n	800639c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800635a:	4814      	ldr	r0, [pc, #80]	; (80063ac <prvCheckForValidListAndQueue+0x64>)
 800635c:	f7fd ffb4 	bl	80042c8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006360:	4813      	ldr	r0, [pc, #76]	; (80063b0 <prvCheckForValidListAndQueue+0x68>)
 8006362:	f7fd ffb1 	bl	80042c8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006366:	4b13      	ldr	r3, [pc, #76]	; (80063b4 <prvCheckForValidListAndQueue+0x6c>)
 8006368:	4a10      	ldr	r2, [pc, #64]	; (80063ac <prvCheckForValidListAndQueue+0x64>)
 800636a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800636c:	4b12      	ldr	r3, [pc, #72]	; (80063b8 <prvCheckForValidListAndQueue+0x70>)
 800636e:	4a10      	ldr	r2, [pc, #64]	; (80063b0 <prvCheckForValidListAndQueue+0x68>)
 8006370:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006372:	2300      	movs	r3, #0
 8006374:	9300      	str	r3, [sp, #0]
 8006376:	4b11      	ldr	r3, [pc, #68]	; (80063bc <prvCheckForValidListAndQueue+0x74>)
 8006378:	4a11      	ldr	r2, [pc, #68]	; (80063c0 <prvCheckForValidListAndQueue+0x78>)
 800637a:	2110      	movs	r1, #16
 800637c:	200a      	movs	r0, #10
 800637e:	f7fe f8bf 	bl	8004500 <xQueueGenericCreateStatic>
 8006382:	4603      	mov	r3, r0
 8006384:	4a08      	ldr	r2, [pc, #32]	; (80063a8 <prvCheckForValidListAndQueue+0x60>)
 8006386:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006388:	4b07      	ldr	r3, [pc, #28]	; (80063a8 <prvCheckForValidListAndQueue+0x60>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d005      	beq.n	800639c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006390:	4b05      	ldr	r3, [pc, #20]	; (80063a8 <prvCheckForValidListAndQueue+0x60>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	490b      	ldr	r1, [pc, #44]	; (80063c4 <prvCheckForValidListAndQueue+0x7c>)
 8006396:	4618      	mov	r0, r3
 8006398:	f7fe fcd8 	bl	8004d4c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800639c:	f000 f972 	bl	8006684 <vPortExitCritical>
}
 80063a0:	bf00      	nop
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}
 80063a6:	bf00      	nop
 80063a8:	2000116c 	.word	0x2000116c
 80063ac:	2000113c 	.word	0x2000113c
 80063b0:	20001150 	.word	0x20001150
 80063b4:	20001164 	.word	0x20001164
 80063b8:	20001168 	.word	0x20001168
 80063bc:	20001218 	.word	0x20001218
 80063c0:	20001178 	.word	0x20001178
 80063c4:	08006ec8 	.word	0x08006ec8

080063c8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80063c8:	b480      	push	{r7}
 80063ca:	b085      	sub	sp, #20
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	60f8      	str	r0, [r7, #12]
 80063d0:	60b9      	str	r1, [r7, #8]
 80063d2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	3b04      	subs	r3, #4
 80063d8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80063e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	3b04      	subs	r3, #4
 80063e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	f023 0201 	bic.w	r2, r3, #1
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	3b04      	subs	r3, #4
 80063f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80063f8:	4a0c      	ldr	r2, [pc, #48]	; (800642c <pxPortInitialiseStack+0x64>)
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	3b14      	subs	r3, #20
 8006402:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006404:	687a      	ldr	r2, [r7, #4]
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	3b04      	subs	r3, #4
 800640e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	f06f 0202 	mvn.w	r2, #2
 8006416:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	3b20      	subs	r3, #32
 800641c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800641e:	68fb      	ldr	r3, [r7, #12]
}
 8006420:	4618      	mov	r0, r3
 8006422:	3714      	adds	r7, #20
 8006424:	46bd      	mov	sp, r7
 8006426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642a:	4770      	bx	lr
 800642c:	08006431 	.word	0x08006431

08006430 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006430:	b480      	push	{r7}
 8006432:	b085      	sub	sp, #20
 8006434:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006436:	2300      	movs	r3, #0
 8006438:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800643a:	4b12      	ldr	r3, [pc, #72]	; (8006484 <prvTaskExitError+0x54>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006442:	d00a      	beq.n	800645a <prvTaskExitError+0x2a>
	__asm volatile
 8006444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006448:	f383 8811 	msr	BASEPRI, r3
 800644c:	f3bf 8f6f 	isb	sy
 8006450:	f3bf 8f4f 	dsb	sy
 8006454:	60fb      	str	r3, [r7, #12]
}
 8006456:	bf00      	nop
 8006458:	e7fe      	b.n	8006458 <prvTaskExitError+0x28>
	__asm volatile
 800645a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800645e:	f383 8811 	msr	BASEPRI, r3
 8006462:	f3bf 8f6f 	isb	sy
 8006466:	f3bf 8f4f 	dsb	sy
 800646a:	60bb      	str	r3, [r7, #8]
}
 800646c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800646e:	bf00      	nop
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d0fc      	beq.n	8006470 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006476:	bf00      	nop
 8006478:	bf00      	nop
 800647a:	3714      	adds	r7, #20
 800647c:	46bd      	mov	sp, r7
 800647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006482:	4770      	bx	lr
 8006484:	20000010 	.word	0x20000010
	...

08006490 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006490:	4b07      	ldr	r3, [pc, #28]	; (80064b0 <pxCurrentTCBConst2>)
 8006492:	6819      	ldr	r1, [r3, #0]
 8006494:	6808      	ldr	r0, [r1, #0]
 8006496:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800649a:	f380 8809 	msr	PSP, r0
 800649e:	f3bf 8f6f 	isb	sy
 80064a2:	f04f 0000 	mov.w	r0, #0
 80064a6:	f380 8811 	msr	BASEPRI, r0
 80064aa:	4770      	bx	lr
 80064ac:	f3af 8000 	nop.w

080064b0 <pxCurrentTCBConst2>:
 80064b0:	20000c3c 	.word	0x20000c3c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80064b4:	bf00      	nop
 80064b6:	bf00      	nop

080064b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80064b8:	4808      	ldr	r0, [pc, #32]	; (80064dc <prvPortStartFirstTask+0x24>)
 80064ba:	6800      	ldr	r0, [r0, #0]
 80064bc:	6800      	ldr	r0, [r0, #0]
 80064be:	f380 8808 	msr	MSP, r0
 80064c2:	f04f 0000 	mov.w	r0, #0
 80064c6:	f380 8814 	msr	CONTROL, r0
 80064ca:	b662      	cpsie	i
 80064cc:	b661      	cpsie	f
 80064ce:	f3bf 8f4f 	dsb	sy
 80064d2:	f3bf 8f6f 	isb	sy
 80064d6:	df00      	svc	0
 80064d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80064da:	bf00      	nop
 80064dc:	e000ed08 	.word	0xe000ed08

080064e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b086      	sub	sp, #24
 80064e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80064e6:	4b46      	ldr	r3, [pc, #280]	; (8006600 <xPortStartScheduler+0x120>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a46      	ldr	r2, [pc, #280]	; (8006604 <xPortStartScheduler+0x124>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d10a      	bne.n	8006506 <xPortStartScheduler+0x26>
	__asm volatile
 80064f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064f4:	f383 8811 	msr	BASEPRI, r3
 80064f8:	f3bf 8f6f 	isb	sy
 80064fc:	f3bf 8f4f 	dsb	sy
 8006500:	613b      	str	r3, [r7, #16]
}
 8006502:	bf00      	nop
 8006504:	e7fe      	b.n	8006504 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006506:	4b3e      	ldr	r3, [pc, #248]	; (8006600 <xPortStartScheduler+0x120>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a3f      	ldr	r2, [pc, #252]	; (8006608 <xPortStartScheduler+0x128>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d10a      	bne.n	8006526 <xPortStartScheduler+0x46>
	__asm volatile
 8006510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006514:	f383 8811 	msr	BASEPRI, r3
 8006518:	f3bf 8f6f 	isb	sy
 800651c:	f3bf 8f4f 	dsb	sy
 8006520:	60fb      	str	r3, [r7, #12]
}
 8006522:	bf00      	nop
 8006524:	e7fe      	b.n	8006524 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006526:	4b39      	ldr	r3, [pc, #228]	; (800660c <xPortStartScheduler+0x12c>)
 8006528:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	781b      	ldrb	r3, [r3, #0]
 800652e:	b2db      	uxtb	r3, r3
 8006530:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	22ff      	movs	r2, #255	; 0xff
 8006536:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	781b      	ldrb	r3, [r3, #0]
 800653c:	b2db      	uxtb	r3, r3
 800653e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006540:	78fb      	ldrb	r3, [r7, #3]
 8006542:	b2db      	uxtb	r3, r3
 8006544:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006548:	b2da      	uxtb	r2, r3
 800654a:	4b31      	ldr	r3, [pc, #196]	; (8006610 <xPortStartScheduler+0x130>)
 800654c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800654e:	4b31      	ldr	r3, [pc, #196]	; (8006614 <xPortStartScheduler+0x134>)
 8006550:	2207      	movs	r2, #7
 8006552:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006554:	e009      	b.n	800656a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006556:	4b2f      	ldr	r3, [pc, #188]	; (8006614 <xPortStartScheduler+0x134>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	3b01      	subs	r3, #1
 800655c:	4a2d      	ldr	r2, [pc, #180]	; (8006614 <xPortStartScheduler+0x134>)
 800655e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006560:	78fb      	ldrb	r3, [r7, #3]
 8006562:	b2db      	uxtb	r3, r3
 8006564:	005b      	lsls	r3, r3, #1
 8006566:	b2db      	uxtb	r3, r3
 8006568:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800656a:	78fb      	ldrb	r3, [r7, #3]
 800656c:	b2db      	uxtb	r3, r3
 800656e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006572:	2b80      	cmp	r3, #128	; 0x80
 8006574:	d0ef      	beq.n	8006556 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006576:	4b27      	ldr	r3, [pc, #156]	; (8006614 <xPortStartScheduler+0x134>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f1c3 0307 	rsb	r3, r3, #7
 800657e:	2b04      	cmp	r3, #4
 8006580:	d00a      	beq.n	8006598 <xPortStartScheduler+0xb8>
	__asm volatile
 8006582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006586:	f383 8811 	msr	BASEPRI, r3
 800658a:	f3bf 8f6f 	isb	sy
 800658e:	f3bf 8f4f 	dsb	sy
 8006592:	60bb      	str	r3, [r7, #8]
}
 8006594:	bf00      	nop
 8006596:	e7fe      	b.n	8006596 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006598:	4b1e      	ldr	r3, [pc, #120]	; (8006614 <xPortStartScheduler+0x134>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	021b      	lsls	r3, r3, #8
 800659e:	4a1d      	ldr	r2, [pc, #116]	; (8006614 <xPortStartScheduler+0x134>)
 80065a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80065a2:	4b1c      	ldr	r3, [pc, #112]	; (8006614 <xPortStartScheduler+0x134>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80065aa:	4a1a      	ldr	r2, [pc, #104]	; (8006614 <xPortStartScheduler+0x134>)
 80065ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	b2da      	uxtb	r2, r3
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80065b6:	4b18      	ldr	r3, [pc, #96]	; (8006618 <xPortStartScheduler+0x138>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a17      	ldr	r2, [pc, #92]	; (8006618 <xPortStartScheduler+0x138>)
 80065bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80065c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80065c2:	4b15      	ldr	r3, [pc, #84]	; (8006618 <xPortStartScheduler+0x138>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4a14      	ldr	r2, [pc, #80]	; (8006618 <xPortStartScheduler+0x138>)
 80065c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80065cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80065ce:	f000 f8dd 	bl	800678c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80065d2:	4b12      	ldr	r3, [pc, #72]	; (800661c <xPortStartScheduler+0x13c>)
 80065d4:	2200      	movs	r2, #0
 80065d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80065d8:	f000 f8fc 	bl	80067d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80065dc:	4b10      	ldr	r3, [pc, #64]	; (8006620 <xPortStartScheduler+0x140>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a0f      	ldr	r2, [pc, #60]	; (8006620 <xPortStartScheduler+0x140>)
 80065e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80065e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80065e8:	f7ff ff66 	bl	80064b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80065ec:	f7ff f848 	bl	8005680 <vTaskSwitchContext>
	prvTaskExitError();
 80065f0:	f7ff ff1e 	bl	8006430 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80065f4:	2300      	movs	r3, #0
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	3718      	adds	r7, #24
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}
 80065fe:	bf00      	nop
 8006600:	e000ed00 	.word	0xe000ed00
 8006604:	410fc271 	.word	0x410fc271
 8006608:	410fc270 	.word	0x410fc270
 800660c:	e000e400 	.word	0xe000e400
 8006610:	20001268 	.word	0x20001268
 8006614:	2000126c 	.word	0x2000126c
 8006618:	e000ed20 	.word	0xe000ed20
 800661c:	20000010 	.word	0x20000010
 8006620:	e000ef34 	.word	0xe000ef34

08006624 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006624:	b480      	push	{r7}
 8006626:	b083      	sub	sp, #12
 8006628:	af00      	add	r7, sp, #0
	__asm volatile
 800662a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800662e:	f383 8811 	msr	BASEPRI, r3
 8006632:	f3bf 8f6f 	isb	sy
 8006636:	f3bf 8f4f 	dsb	sy
 800663a:	607b      	str	r3, [r7, #4]
}
 800663c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800663e:	4b0f      	ldr	r3, [pc, #60]	; (800667c <vPortEnterCritical+0x58>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	3301      	adds	r3, #1
 8006644:	4a0d      	ldr	r2, [pc, #52]	; (800667c <vPortEnterCritical+0x58>)
 8006646:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006648:	4b0c      	ldr	r3, [pc, #48]	; (800667c <vPortEnterCritical+0x58>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	2b01      	cmp	r3, #1
 800664e:	d10f      	bne.n	8006670 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006650:	4b0b      	ldr	r3, [pc, #44]	; (8006680 <vPortEnterCritical+0x5c>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	b2db      	uxtb	r3, r3
 8006656:	2b00      	cmp	r3, #0
 8006658:	d00a      	beq.n	8006670 <vPortEnterCritical+0x4c>
	__asm volatile
 800665a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800665e:	f383 8811 	msr	BASEPRI, r3
 8006662:	f3bf 8f6f 	isb	sy
 8006666:	f3bf 8f4f 	dsb	sy
 800666a:	603b      	str	r3, [r7, #0]
}
 800666c:	bf00      	nop
 800666e:	e7fe      	b.n	800666e <vPortEnterCritical+0x4a>
	}
}
 8006670:	bf00      	nop
 8006672:	370c      	adds	r7, #12
 8006674:	46bd      	mov	sp, r7
 8006676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667a:	4770      	bx	lr
 800667c:	20000010 	.word	0x20000010
 8006680:	e000ed04 	.word	0xe000ed04

08006684 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006684:	b480      	push	{r7}
 8006686:	b083      	sub	sp, #12
 8006688:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800668a:	4b12      	ldr	r3, [pc, #72]	; (80066d4 <vPortExitCritical+0x50>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d10a      	bne.n	80066a8 <vPortExitCritical+0x24>
	__asm volatile
 8006692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006696:	f383 8811 	msr	BASEPRI, r3
 800669a:	f3bf 8f6f 	isb	sy
 800669e:	f3bf 8f4f 	dsb	sy
 80066a2:	607b      	str	r3, [r7, #4]
}
 80066a4:	bf00      	nop
 80066a6:	e7fe      	b.n	80066a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80066a8:	4b0a      	ldr	r3, [pc, #40]	; (80066d4 <vPortExitCritical+0x50>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	3b01      	subs	r3, #1
 80066ae:	4a09      	ldr	r2, [pc, #36]	; (80066d4 <vPortExitCritical+0x50>)
 80066b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80066b2:	4b08      	ldr	r3, [pc, #32]	; (80066d4 <vPortExitCritical+0x50>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d105      	bne.n	80066c6 <vPortExitCritical+0x42>
 80066ba:	2300      	movs	r3, #0
 80066bc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	f383 8811 	msr	BASEPRI, r3
}
 80066c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80066c6:	bf00      	nop
 80066c8:	370c      	adds	r7, #12
 80066ca:	46bd      	mov	sp, r7
 80066cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d0:	4770      	bx	lr
 80066d2:	bf00      	nop
 80066d4:	20000010 	.word	0x20000010
	...

080066e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80066e0:	f3ef 8009 	mrs	r0, PSP
 80066e4:	f3bf 8f6f 	isb	sy
 80066e8:	4b15      	ldr	r3, [pc, #84]	; (8006740 <pxCurrentTCBConst>)
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	f01e 0f10 	tst.w	lr, #16
 80066f0:	bf08      	it	eq
 80066f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80066f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066fa:	6010      	str	r0, [r2, #0]
 80066fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006700:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006704:	f380 8811 	msr	BASEPRI, r0
 8006708:	f3bf 8f4f 	dsb	sy
 800670c:	f3bf 8f6f 	isb	sy
 8006710:	f7fe ffb6 	bl	8005680 <vTaskSwitchContext>
 8006714:	f04f 0000 	mov.w	r0, #0
 8006718:	f380 8811 	msr	BASEPRI, r0
 800671c:	bc09      	pop	{r0, r3}
 800671e:	6819      	ldr	r1, [r3, #0]
 8006720:	6808      	ldr	r0, [r1, #0]
 8006722:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006726:	f01e 0f10 	tst.w	lr, #16
 800672a:	bf08      	it	eq
 800672c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006730:	f380 8809 	msr	PSP, r0
 8006734:	f3bf 8f6f 	isb	sy
 8006738:	4770      	bx	lr
 800673a:	bf00      	nop
 800673c:	f3af 8000 	nop.w

08006740 <pxCurrentTCBConst>:
 8006740:	20000c3c 	.word	0x20000c3c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006744:	bf00      	nop
 8006746:	bf00      	nop

08006748 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b082      	sub	sp, #8
 800674c:	af00      	add	r7, sp, #0
	__asm volatile
 800674e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006752:	f383 8811 	msr	BASEPRI, r3
 8006756:	f3bf 8f6f 	isb	sy
 800675a:	f3bf 8f4f 	dsb	sy
 800675e:	607b      	str	r3, [r7, #4]
}
 8006760:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006762:	f7fe fed3 	bl	800550c <xTaskIncrementTick>
 8006766:	4603      	mov	r3, r0
 8006768:	2b00      	cmp	r3, #0
 800676a:	d003      	beq.n	8006774 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800676c:	4b06      	ldr	r3, [pc, #24]	; (8006788 <xPortSysTickHandler+0x40>)
 800676e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006772:	601a      	str	r2, [r3, #0]
 8006774:	2300      	movs	r3, #0
 8006776:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	f383 8811 	msr	BASEPRI, r3
}
 800677e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006780:	bf00      	nop
 8006782:	3708      	adds	r7, #8
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}
 8006788:	e000ed04 	.word	0xe000ed04

0800678c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800678c:	b480      	push	{r7}
 800678e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006790:	4b0b      	ldr	r3, [pc, #44]	; (80067c0 <vPortSetupTimerInterrupt+0x34>)
 8006792:	2200      	movs	r2, #0
 8006794:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006796:	4b0b      	ldr	r3, [pc, #44]	; (80067c4 <vPortSetupTimerInterrupt+0x38>)
 8006798:	2200      	movs	r2, #0
 800679a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800679c:	4b0a      	ldr	r3, [pc, #40]	; (80067c8 <vPortSetupTimerInterrupt+0x3c>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a0a      	ldr	r2, [pc, #40]	; (80067cc <vPortSetupTimerInterrupt+0x40>)
 80067a2:	fba2 2303 	umull	r2, r3, r2, r3
 80067a6:	099b      	lsrs	r3, r3, #6
 80067a8:	4a09      	ldr	r2, [pc, #36]	; (80067d0 <vPortSetupTimerInterrupt+0x44>)
 80067aa:	3b01      	subs	r3, #1
 80067ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80067ae:	4b04      	ldr	r3, [pc, #16]	; (80067c0 <vPortSetupTimerInterrupt+0x34>)
 80067b0:	2207      	movs	r2, #7
 80067b2:	601a      	str	r2, [r3, #0]
}
 80067b4:	bf00      	nop
 80067b6:	46bd      	mov	sp, r7
 80067b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067bc:	4770      	bx	lr
 80067be:	bf00      	nop
 80067c0:	e000e010 	.word	0xe000e010
 80067c4:	e000e018 	.word	0xe000e018
 80067c8:	20000004 	.word	0x20000004
 80067cc:	10624dd3 	.word	0x10624dd3
 80067d0:	e000e014 	.word	0xe000e014

080067d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80067d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80067e4 <vPortEnableVFP+0x10>
 80067d8:	6801      	ldr	r1, [r0, #0]
 80067da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80067de:	6001      	str	r1, [r0, #0]
 80067e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80067e2:	bf00      	nop
 80067e4:	e000ed88 	.word	0xe000ed88

080067e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80067e8:	b480      	push	{r7}
 80067ea:	b085      	sub	sp, #20
 80067ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80067ee:	f3ef 8305 	mrs	r3, IPSR
 80067f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	2b0f      	cmp	r3, #15
 80067f8:	d914      	bls.n	8006824 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80067fa:	4a17      	ldr	r2, [pc, #92]	; (8006858 <vPortValidateInterruptPriority+0x70>)
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	4413      	add	r3, r2
 8006800:	781b      	ldrb	r3, [r3, #0]
 8006802:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006804:	4b15      	ldr	r3, [pc, #84]	; (800685c <vPortValidateInterruptPriority+0x74>)
 8006806:	781b      	ldrb	r3, [r3, #0]
 8006808:	7afa      	ldrb	r2, [r7, #11]
 800680a:	429a      	cmp	r2, r3
 800680c:	d20a      	bcs.n	8006824 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800680e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006812:	f383 8811 	msr	BASEPRI, r3
 8006816:	f3bf 8f6f 	isb	sy
 800681a:	f3bf 8f4f 	dsb	sy
 800681e:	607b      	str	r3, [r7, #4]
}
 8006820:	bf00      	nop
 8006822:	e7fe      	b.n	8006822 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006824:	4b0e      	ldr	r3, [pc, #56]	; (8006860 <vPortValidateInterruptPriority+0x78>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800682c:	4b0d      	ldr	r3, [pc, #52]	; (8006864 <vPortValidateInterruptPriority+0x7c>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	429a      	cmp	r2, r3
 8006832:	d90a      	bls.n	800684a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006838:	f383 8811 	msr	BASEPRI, r3
 800683c:	f3bf 8f6f 	isb	sy
 8006840:	f3bf 8f4f 	dsb	sy
 8006844:	603b      	str	r3, [r7, #0]
}
 8006846:	bf00      	nop
 8006848:	e7fe      	b.n	8006848 <vPortValidateInterruptPriority+0x60>
	}
 800684a:	bf00      	nop
 800684c:	3714      	adds	r7, #20
 800684e:	46bd      	mov	sp, r7
 8006850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006854:	4770      	bx	lr
 8006856:	bf00      	nop
 8006858:	e000e3f0 	.word	0xe000e3f0
 800685c:	20001268 	.word	0x20001268
 8006860:	e000ed0c 	.word	0xe000ed0c
 8006864:	2000126c 	.word	0x2000126c

08006868 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b08a      	sub	sp, #40	; 0x28
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006870:	2300      	movs	r3, #0
 8006872:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006874:	f7fe fd8e 	bl	8005394 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006878:	4b5b      	ldr	r3, [pc, #364]	; (80069e8 <pvPortMalloc+0x180>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d101      	bne.n	8006884 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006880:	f000 f920 	bl	8006ac4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006884:	4b59      	ldr	r3, [pc, #356]	; (80069ec <pvPortMalloc+0x184>)
 8006886:	681a      	ldr	r2, [r3, #0]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	4013      	ands	r3, r2
 800688c:	2b00      	cmp	r3, #0
 800688e:	f040 8093 	bne.w	80069b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d01d      	beq.n	80068d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006898:	2208      	movs	r2, #8
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	4413      	add	r3, r2
 800689e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f003 0307 	and.w	r3, r3, #7
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d014      	beq.n	80068d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f023 0307 	bic.w	r3, r3, #7
 80068b0:	3308      	adds	r3, #8
 80068b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f003 0307 	and.w	r3, r3, #7
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d00a      	beq.n	80068d4 <pvPortMalloc+0x6c>
	__asm volatile
 80068be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068c2:	f383 8811 	msr	BASEPRI, r3
 80068c6:	f3bf 8f6f 	isb	sy
 80068ca:	f3bf 8f4f 	dsb	sy
 80068ce:	617b      	str	r3, [r7, #20]
}
 80068d0:	bf00      	nop
 80068d2:	e7fe      	b.n	80068d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d06e      	beq.n	80069b8 <pvPortMalloc+0x150>
 80068da:	4b45      	ldr	r3, [pc, #276]	; (80069f0 <pvPortMalloc+0x188>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	687a      	ldr	r2, [r7, #4]
 80068e0:	429a      	cmp	r2, r3
 80068e2:	d869      	bhi.n	80069b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80068e4:	4b43      	ldr	r3, [pc, #268]	; (80069f4 <pvPortMalloc+0x18c>)
 80068e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80068e8:	4b42      	ldr	r3, [pc, #264]	; (80069f4 <pvPortMalloc+0x18c>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80068ee:	e004      	b.n	80068fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80068f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80068f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80068fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068fc:	685b      	ldr	r3, [r3, #4]
 80068fe:	687a      	ldr	r2, [r7, #4]
 8006900:	429a      	cmp	r2, r3
 8006902:	d903      	bls.n	800690c <pvPortMalloc+0xa4>
 8006904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d1f1      	bne.n	80068f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800690c:	4b36      	ldr	r3, [pc, #216]	; (80069e8 <pvPortMalloc+0x180>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006912:	429a      	cmp	r2, r3
 8006914:	d050      	beq.n	80069b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006916:	6a3b      	ldr	r3, [r7, #32]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	2208      	movs	r2, #8
 800691c:	4413      	add	r3, r2
 800691e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006922:	681a      	ldr	r2, [r3, #0]
 8006924:	6a3b      	ldr	r3, [r7, #32]
 8006926:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800692a:	685a      	ldr	r2, [r3, #4]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	1ad2      	subs	r2, r2, r3
 8006930:	2308      	movs	r3, #8
 8006932:	005b      	lsls	r3, r3, #1
 8006934:	429a      	cmp	r2, r3
 8006936:	d91f      	bls.n	8006978 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006938:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	4413      	add	r3, r2
 800693e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006940:	69bb      	ldr	r3, [r7, #24]
 8006942:	f003 0307 	and.w	r3, r3, #7
 8006946:	2b00      	cmp	r3, #0
 8006948:	d00a      	beq.n	8006960 <pvPortMalloc+0xf8>
	__asm volatile
 800694a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800694e:	f383 8811 	msr	BASEPRI, r3
 8006952:	f3bf 8f6f 	isb	sy
 8006956:	f3bf 8f4f 	dsb	sy
 800695a:	613b      	str	r3, [r7, #16]
}
 800695c:	bf00      	nop
 800695e:	e7fe      	b.n	800695e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006962:	685a      	ldr	r2, [r3, #4]
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	1ad2      	subs	r2, r2, r3
 8006968:	69bb      	ldr	r3, [r7, #24]
 800696a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800696c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800696e:	687a      	ldr	r2, [r7, #4]
 8006970:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006972:	69b8      	ldr	r0, [r7, #24]
 8006974:	f000 f908 	bl	8006b88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006978:	4b1d      	ldr	r3, [pc, #116]	; (80069f0 <pvPortMalloc+0x188>)
 800697a:	681a      	ldr	r2, [r3, #0]
 800697c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800697e:	685b      	ldr	r3, [r3, #4]
 8006980:	1ad3      	subs	r3, r2, r3
 8006982:	4a1b      	ldr	r2, [pc, #108]	; (80069f0 <pvPortMalloc+0x188>)
 8006984:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006986:	4b1a      	ldr	r3, [pc, #104]	; (80069f0 <pvPortMalloc+0x188>)
 8006988:	681a      	ldr	r2, [r3, #0]
 800698a:	4b1b      	ldr	r3, [pc, #108]	; (80069f8 <pvPortMalloc+0x190>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	429a      	cmp	r2, r3
 8006990:	d203      	bcs.n	800699a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006992:	4b17      	ldr	r3, [pc, #92]	; (80069f0 <pvPortMalloc+0x188>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4a18      	ldr	r2, [pc, #96]	; (80069f8 <pvPortMalloc+0x190>)
 8006998:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800699a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800699c:	685a      	ldr	r2, [r3, #4]
 800699e:	4b13      	ldr	r3, [pc, #76]	; (80069ec <pvPortMalloc+0x184>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	431a      	orrs	r2, r3
 80069a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80069a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069aa:	2200      	movs	r2, #0
 80069ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80069ae:	4b13      	ldr	r3, [pc, #76]	; (80069fc <pvPortMalloc+0x194>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	3301      	adds	r3, #1
 80069b4:	4a11      	ldr	r2, [pc, #68]	; (80069fc <pvPortMalloc+0x194>)
 80069b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80069b8:	f7fe fcfa 	bl	80053b0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80069bc:	69fb      	ldr	r3, [r7, #28]
 80069be:	f003 0307 	and.w	r3, r3, #7
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d00a      	beq.n	80069dc <pvPortMalloc+0x174>
	__asm volatile
 80069c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ca:	f383 8811 	msr	BASEPRI, r3
 80069ce:	f3bf 8f6f 	isb	sy
 80069d2:	f3bf 8f4f 	dsb	sy
 80069d6:	60fb      	str	r3, [r7, #12]
}
 80069d8:	bf00      	nop
 80069da:	e7fe      	b.n	80069da <pvPortMalloc+0x172>
	return pvReturn;
 80069dc:	69fb      	ldr	r3, [r7, #28]
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3728      	adds	r7, #40	; 0x28
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}
 80069e6:	bf00      	nop
 80069e8:	20001e78 	.word	0x20001e78
 80069ec:	20001e8c 	.word	0x20001e8c
 80069f0:	20001e7c 	.word	0x20001e7c
 80069f4:	20001e70 	.word	0x20001e70
 80069f8:	20001e80 	.word	0x20001e80
 80069fc:	20001e84 	.word	0x20001e84

08006a00 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b086      	sub	sp, #24
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d04d      	beq.n	8006aae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006a12:	2308      	movs	r3, #8
 8006a14:	425b      	negs	r3, r3
 8006a16:	697a      	ldr	r2, [r7, #20]
 8006a18:	4413      	add	r3, r2
 8006a1a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006a20:	693b      	ldr	r3, [r7, #16]
 8006a22:	685a      	ldr	r2, [r3, #4]
 8006a24:	4b24      	ldr	r3, [pc, #144]	; (8006ab8 <vPortFree+0xb8>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4013      	ands	r3, r2
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d10a      	bne.n	8006a44 <vPortFree+0x44>
	__asm volatile
 8006a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a32:	f383 8811 	msr	BASEPRI, r3
 8006a36:	f3bf 8f6f 	isb	sy
 8006a3a:	f3bf 8f4f 	dsb	sy
 8006a3e:	60fb      	str	r3, [r7, #12]
}
 8006a40:	bf00      	nop
 8006a42:	e7fe      	b.n	8006a42 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006a44:	693b      	ldr	r3, [r7, #16]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d00a      	beq.n	8006a62 <vPortFree+0x62>
	__asm volatile
 8006a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a50:	f383 8811 	msr	BASEPRI, r3
 8006a54:	f3bf 8f6f 	isb	sy
 8006a58:	f3bf 8f4f 	dsb	sy
 8006a5c:	60bb      	str	r3, [r7, #8]
}
 8006a5e:	bf00      	nop
 8006a60:	e7fe      	b.n	8006a60 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	685a      	ldr	r2, [r3, #4]
 8006a66:	4b14      	ldr	r3, [pc, #80]	; (8006ab8 <vPortFree+0xb8>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4013      	ands	r3, r2
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d01e      	beq.n	8006aae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d11a      	bne.n	8006aae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	685a      	ldr	r2, [r3, #4]
 8006a7c:	4b0e      	ldr	r3, [pc, #56]	; (8006ab8 <vPortFree+0xb8>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	43db      	mvns	r3, r3
 8006a82:	401a      	ands	r2, r3
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006a88:	f7fe fc84 	bl	8005394 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006a8c:	693b      	ldr	r3, [r7, #16]
 8006a8e:	685a      	ldr	r2, [r3, #4]
 8006a90:	4b0a      	ldr	r3, [pc, #40]	; (8006abc <vPortFree+0xbc>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4413      	add	r3, r2
 8006a96:	4a09      	ldr	r2, [pc, #36]	; (8006abc <vPortFree+0xbc>)
 8006a98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006a9a:	6938      	ldr	r0, [r7, #16]
 8006a9c:	f000 f874 	bl	8006b88 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006aa0:	4b07      	ldr	r3, [pc, #28]	; (8006ac0 <vPortFree+0xc0>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	3301      	adds	r3, #1
 8006aa6:	4a06      	ldr	r2, [pc, #24]	; (8006ac0 <vPortFree+0xc0>)
 8006aa8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006aaa:	f7fe fc81 	bl	80053b0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006aae:	bf00      	nop
 8006ab0:	3718      	adds	r7, #24
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}
 8006ab6:	bf00      	nop
 8006ab8:	20001e8c 	.word	0x20001e8c
 8006abc:	20001e7c 	.word	0x20001e7c
 8006ac0:	20001e88 	.word	0x20001e88

08006ac4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b085      	sub	sp, #20
 8006ac8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006aca:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006ace:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006ad0:	4b27      	ldr	r3, [pc, #156]	; (8006b70 <prvHeapInit+0xac>)
 8006ad2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f003 0307 	and.w	r3, r3, #7
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d00c      	beq.n	8006af8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	3307      	adds	r3, #7
 8006ae2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	f023 0307 	bic.w	r3, r3, #7
 8006aea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006aec:	68ba      	ldr	r2, [r7, #8]
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	1ad3      	subs	r3, r2, r3
 8006af2:	4a1f      	ldr	r2, [pc, #124]	; (8006b70 <prvHeapInit+0xac>)
 8006af4:	4413      	add	r3, r2
 8006af6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006afc:	4a1d      	ldr	r2, [pc, #116]	; (8006b74 <prvHeapInit+0xb0>)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006b02:	4b1c      	ldr	r3, [pc, #112]	; (8006b74 <prvHeapInit+0xb0>)
 8006b04:	2200      	movs	r2, #0
 8006b06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	68ba      	ldr	r2, [r7, #8]
 8006b0c:	4413      	add	r3, r2
 8006b0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006b10:	2208      	movs	r2, #8
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	1a9b      	subs	r3, r3, r2
 8006b16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	f023 0307 	bic.w	r3, r3, #7
 8006b1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	4a15      	ldr	r2, [pc, #84]	; (8006b78 <prvHeapInit+0xb4>)
 8006b24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006b26:	4b14      	ldr	r3, [pc, #80]	; (8006b78 <prvHeapInit+0xb4>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006b2e:	4b12      	ldr	r3, [pc, #72]	; (8006b78 <prvHeapInit+0xb4>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	2200      	movs	r2, #0
 8006b34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	68fa      	ldr	r2, [r7, #12]
 8006b3e:	1ad2      	subs	r2, r2, r3
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006b44:	4b0c      	ldr	r3, [pc, #48]	; (8006b78 <prvHeapInit+0xb4>)
 8006b46:	681a      	ldr	r2, [r3, #0]
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	4a0a      	ldr	r2, [pc, #40]	; (8006b7c <prvHeapInit+0xb8>)
 8006b52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	685b      	ldr	r3, [r3, #4]
 8006b58:	4a09      	ldr	r2, [pc, #36]	; (8006b80 <prvHeapInit+0xbc>)
 8006b5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006b5c:	4b09      	ldr	r3, [pc, #36]	; (8006b84 <prvHeapInit+0xc0>)
 8006b5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006b62:	601a      	str	r2, [r3, #0]
}
 8006b64:	bf00      	nop
 8006b66:	3714      	adds	r7, #20
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6e:	4770      	bx	lr
 8006b70:	20001270 	.word	0x20001270
 8006b74:	20001e70 	.word	0x20001e70
 8006b78:	20001e78 	.word	0x20001e78
 8006b7c:	20001e80 	.word	0x20001e80
 8006b80:	20001e7c 	.word	0x20001e7c
 8006b84:	20001e8c 	.word	0x20001e8c

08006b88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b085      	sub	sp, #20
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006b90:	4b28      	ldr	r3, [pc, #160]	; (8006c34 <prvInsertBlockIntoFreeList+0xac>)
 8006b92:	60fb      	str	r3, [r7, #12]
 8006b94:	e002      	b.n	8006b9c <prvInsertBlockIntoFreeList+0x14>
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	60fb      	str	r3, [r7, #12]
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	687a      	ldr	r2, [r7, #4]
 8006ba2:	429a      	cmp	r2, r3
 8006ba4:	d8f7      	bhi.n	8006b96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	685b      	ldr	r3, [r3, #4]
 8006bae:	68ba      	ldr	r2, [r7, #8]
 8006bb0:	4413      	add	r3, r2
 8006bb2:	687a      	ldr	r2, [r7, #4]
 8006bb4:	429a      	cmp	r2, r3
 8006bb6:	d108      	bne.n	8006bca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	685a      	ldr	r2, [r3, #4]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	685b      	ldr	r3, [r3, #4]
 8006bc0:	441a      	add	r2, r3
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	685b      	ldr	r3, [r3, #4]
 8006bd2:	68ba      	ldr	r2, [r7, #8]
 8006bd4:	441a      	add	r2, r3
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	429a      	cmp	r2, r3
 8006bdc:	d118      	bne.n	8006c10 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681a      	ldr	r2, [r3, #0]
 8006be2:	4b15      	ldr	r3, [pc, #84]	; (8006c38 <prvInsertBlockIntoFreeList+0xb0>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	429a      	cmp	r2, r3
 8006be8:	d00d      	beq.n	8006c06 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	685a      	ldr	r2, [r3, #4]
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	685b      	ldr	r3, [r3, #4]
 8006bf4:	441a      	add	r2, r3
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	681a      	ldr	r2, [r3, #0]
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	601a      	str	r2, [r3, #0]
 8006c04:	e008      	b.n	8006c18 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006c06:	4b0c      	ldr	r3, [pc, #48]	; (8006c38 <prvInsertBlockIntoFreeList+0xb0>)
 8006c08:	681a      	ldr	r2, [r3, #0]
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	601a      	str	r2, [r3, #0]
 8006c0e:	e003      	b.n	8006c18 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681a      	ldr	r2, [r3, #0]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006c18:	68fa      	ldr	r2, [r7, #12]
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	429a      	cmp	r2, r3
 8006c1e:	d002      	beq.n	8006c26 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	687a      	ldr	r2, [r7, #4]
 8006c24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c26:	bf00      	nop
 8006c28:	3714      	adds	r7, #20
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c30:	4770      	bx	lr
 8006c32:	bf00      	nop
 8006c34:	20001e70 	.word	0x20001e70
 8006c38:	20001e78 	.word	0x20001e78

08006c3c <__libc_init_array>:
 8006c3c:	b570      	push	{r4, r5, r6, lr}
 8006c3e:	4d0d      	ldr	r5, [pc, #52]	; (8006c74 <__libc_init_array+0x38>)
 8006c40:	4c0d      	ldr	r4, [pc, #52]	; (8006c78 <__libc_init_array+0x3c>)
 8006c42:	1b64      	subs	r4, r4, r5
 8006c44:	10a4      	asrs	r4, r4, #2
 8006c46:	2600      	movs	r6, #0
 8006c48:	42a6      	cmp	r6, r4
 8006c4a:	d109      	bne.n	8006c60 <__libc_init_array+0x24>
 8006c4c:	4d0b      	ldr	r5, [pc, #44]	; (8006c7c <__libc_init_array+0x40>)
 8006c4e:	4c0c      	ldr	r4, [pc, #48]	; (8006c80 <__libc_init_array+0x44>)
 8006c50:	f000 f8f2 	bl	8006e38 <_init>
 8006c54:	1b64      	subs	r4, r4, r5
 8006c56:	10a4      	asrs	r4, r4, #2
 8006c58:	2600      	movs	r6, #0
 8006c5a:	42a6      	cmp	r6, r4
 8006c5c:	d105      	bne.n	8006c6a <__libc_init_array+0x2e>
 8006c5e:	bd70      	pop	{r4, r5, r6, pc}
 8006c60:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c64:	4798      	blx	r3
 8006c66:	3601      	adds	r6, #1
 8006c68:	e7ee      	b.n	8006c48 <__libc_init_array+0xc>
 8006c6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c6e:	4798      	blx	r3
 8006c70:	3601      	adds	r6, #1
 8006c72:	e7f2      	b.n	8006c5a <__libc_init_array+0x1e>
 8006c74:	08007000 	.word	0x08007000
 8006c78:	08007000 	.word	0x08007000
 8006c7c:	08007000 	.word	0x08007000
 8006c80:	08007004 	.word	0x08007004

08006c84 <__retarget_lock_acquire_recursive>:
 8006c84:	4770      	bx	lr

08006c86 <__retarget_lock_release_recursive>:
 8006c86:	4770      	bx	lr

08006c88 <memcpy>:
 8006c88:	440a      	add	r2, r1
 8006c8a:	4291      	cmp	r1, r2
 8006c8c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006c90:	d100      	bne.n	8006c94 <memcpy+0xc>
 8006c92:	4770      	bx	lr
 8006c94:	b510      	push	{r4, lr}
 8006c96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c9a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c9e:	4291      	cmp	r1, r2
 8006ca0:	d1f9      	bne.n	8006c96 <memcpy+0xe>
 8006ca2:	bd10      	pop	{r4, pc}

08006ca4 <memset>:
 8006ca4:	4402      	add	r2, r0
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d100      	bne.n	8006cae <memset+0xa>
 8006cac:	4770      	bx	lr
 8006cae:	f803 1b01 	strb.w	r1, [r3], #1
 8006cb2:	e7f9      	b.n	8006ca8 <memset+0x4>

08006cb4 <cleanup_glue>:
 8006cb4:	b538      	push	{r3, r4, r5, lr}
 8006cb6:	460c      	mov	r4, r1
 8006cb8:	6809      	ldr	r1, [r1, #0]
 8006cba:	4605      	mov	r5, r0
 8006cbc:	b109      	cbz	r1, 8006cc2 <cleanup_glue+0xe>
 8006cbe:	f7ff fff9 	bl	8006cb4 <cleanup_glue>
 8006cc2:	4621      	mov	r1, r4
 8006cc4:	4628      	mov	r0, r5
 8006cc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006cca:	f000 b869 	b.w	8006da0 <_free_r>
	...

08006cd0 <_reclaim_reent>:
 8006cd0:	4b2c      	ldr	r3, [pc, #176]	; (8006d84 <_reclaim_reent+0xb4>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4283      	cmp	r3, r0
 8006cd6:	b570      	push	{r4, r5, r6, lr}
 8006cd8:	4604      	mov	r4, r0
 8006cda:	d051      	beq.n	8006d80 <_reclaim_reent+0xb0>
 8006cdc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006cde:	b143      	cbz	r3, 8006cf2 <_reclaim_reent+0x22>
 8006ce0:	68db      	ldr	r3, [r3, #12]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d14a      	bne.n	8006d7c <_reclaim_reent+0xac>
 8006ce6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ce8:	6819      	ldr	r1, [r3, #0]
 8006cea:	b111      	cbz	r1, 8006cf2 <_reclaim_reent+0x22>
 8006cec:	4620      	mov	r0, r4
 8006cee:	f000 f857 	bl	8006da0 <_free_r>
 8006cf2:	6961      	ldr	r1, [r4, #20]
 8006cf4:	b111      	cbz	r1, 8006cfc <_reclaim_reent+0x2c>
 8006cf6:	4620      	mov	r0, r4
 8006cf8:	f000 f852 	bl	8006da0 <_free_r>
 8006cfc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006cfe:	b111      	cbz	r1, 8006d06 <_reclaim_reent+0x36>
 8006d00:	4620      	mov	r0, r4
 8006d02:	f000 f84d 	bl	8006da0 <_free_r>
 8006d06:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006d08:	b111      	cbz	r1, 8006d10 <_reclaim_reent+0x40>
 8006d0a:	4620      	mov	r0, r4
 8006d0c:	f000 f848 	bl	8006da0 <_free_r>
 8006d10:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006d12:	b111      	cbz	r1, 8006d1a <_reclaim_reent+0x4a>
 8006d14:	4620      	mov	r0, r4
 8006d16:	f000 f843 	bl	8006da0 <_free_r>
 8006d1a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006d1c:	b111      	cbz	r1, 8006d24 <_reclaim_reent+0x54>
 8006d1e:	4620      	mov	r0, r4
 8006d20:	f000 f83e 	bl	8006da0 <_free_r>
 8006d24:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006d26:	b111      	cbz	r1, 8006d2e <_reclaim_reent+0x5e>
 8006d28:	4620      	mov	r0, r4
 8006d2a:	f000 f839 	bl	8006da0 <_free_r>
 8006d2e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006d30:	b111      	cbz	r1, 8006d38 <_reclaim_reent+0x68>
 8006d32:	4620      	mov	r0, r4
 8006d34:	f000 f834 	bl	8006da0 <_free_r>
 8006d38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d3a:	b111      	cbz	r1, 8006d42 <_reclaim_reent+0x72>
 8006d3c:	4620      	mov	r0, r4
 8006d3e:	f000 f82f 	bl	8006da0 <_free_r>
 8006d42:	69a3      	ldr	r3, [r4, #24]
 8006d44:	b1e3      	cbz	r3, 8006d80 <_reclaim_reent+0xb0>
 8006d46:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006d48:	4620      	mov	r0, r4
 8006d4a:	4798      	blx	r3
 8006d4c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006d4e:	b1b9      	cbz	r1, 8006d80 <_reclaim_reent+0xb0>
 8006d50:	4620      	mov	r0, r4
 8006d52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006d56:	f7ff bfad 	b.w	8006cb4 <cleanup_glue>
 8006d5a:	5949      	ldr	r1, [r1, r5]
 8006d5c:	b941      	cbnz	r1, 8006d70 <_reclaim_reent+0xa0>
 8006d5e:	3504      	adds	r5, #4
 8006d60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d62:	2d80      	cmp	r5, #128	; 0x80
 8006d64:	68d9      	ldr	r1, [r3, #12]
 8006d66:	d1f8      	bne.n	8006d5a <_reclaim_reent+0x8a>
 8006d68:	4620      	mov	r0, r4
 8006d6a:	f000 f819 	bl	8006da0 <_free_r>
 8006d6e:	e7ba      	b.n	8006ce6 <_reclaim_reent+0x16>
 8006d70:	680e      	ldr	r6, [r1, #0]
 8006d72:	4620      	mov	r0, r4
 8006d74:	f000 f814 	bl	8006da0 <_free_r>
 8006d78:	4631      	mov	r1, r6
 8006d7a:	e7ef      	b.n	8006d5c <_reclaim_reent+0x8c>
 8006d7c:	2500      	movs	r5, #0
 8006d7e:	e7ef      	b.n	8006d60 <_reclaim_reent+0x90>
 8006d80:	bd70      	pop	{r4, r5, r6, pc}
 8006d82:	bf00      	nop
 8006d84:	20000014 	.word	0x20000014

08006d88 <__malloc_lock>:
 8006d88:	4801      	ldr	r0, [pc, #4]	; (8006d90 <__malloc_lock+0x8>)
 8006d8a:	f7ff bf7b 	b.w	8006c84 <__retarget_lock_acquire_recursive>
 8006d8e:	bf00      	nop
 8006d90:	20001e90 	.word	0x20001e90

08006d94 <__malloc_unlock>:
 8006d94:	4801      	ldr	r0, [pc, #4]	; (8006d9c <__malloc_unlock+0x8>)
 8006d96:	f7ff bf76 	b.w	8006c86 <__retarget_lock_release_recursive>
 8006d9a:	bf00      	nop
 8006d9c:	20001e90 	.word	0x20001e90

08006da0 <_free_r>:
 8006da0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006da2:	2900      	cmp	r1, #0
 8006da4:	d044      	beq.n	8006e30 <_free_r+0x90>
 8006da6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006daa:	9001      	str	r0, [sp, #4]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	f1a1 0404 	sub.w	r4, r1, #4
 8006db2:	bfb8      	it	lt
 8006db4:	18e4      	addlt	r4, r4, r3
 8006db6:	f7ff ffe7 	bl	8006d88 <__malloc_lock>
 8006dba:	4a1e      	ldr	r2, [pc, #120]	; (8006e34 <_free_r+0x94>)
 8006dbc:	9801      	ldr	r0, [sp, #4]
 8006dbe:	6813      	ldr	r3, [r2, #0]
 8006dc0:	b933      	cbnz	r3, 8006dd0 <_free_r+0x30>
 8006dc2:	6063      	str	r3, [r4, #4]
 8006dc4:	6014      	str	r4, [r2, #0]
 8006dc6:	b003      	add	sp, #12
 8006dc8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006dcc:	f7ff bfe2 	b.w	8006d94 <__malloc_unlock>
 8006dd0:	42a3      	cmp	r3, r4
 8006dd2:	d908      	bls.n	8006de6 <_free_r+0x46>
 8006dd4:	6825      	ldr	r5, [r4, #0]
 8006dd6:	1961      	adds	r1, r4, r5
 8006dd8:	428b      	cmp	r3, r1
 8006dda:	bf01      	itttt	eq
 8006ddc:	6819      	ldreq	r1, [r3, #0]
 8006dde:	685b      	ldreq	r3, [r3, #4]
 8006de0:	1949      	addeq	r1, r1, r5
 8006de2:	6021      	streq	r1, [r4, #0]
 8006de4:	e7ed      	b.n	8006dc2 <_free_r+0x22>
 8006de6:	461a      	mov	r2, r3
 8006de8:	685b      	ldr	r3, [r3, #4]
 8006dea:	b10b      	cbz	r3, 8006df0 <_free_r+0x50>
 8006dec:	42a3      	cmp	r3, r4
 8006dee:	d9fa      	bls.n	8006de6 <_free_r+0x46>
 8006df0:	6811      	ldr	r1, [r2, #0]
 8006df2:	1855      	adds	r5, r2, r1
 8006df4:	42a5      	cmp	r5, r4
 8006df6:	d10b      	bne.n	8006e10 <_free_r+0x70>
 8006df8:	6824      	ldr	r4, [r4, #0]
 8006dfa:	4421      	add	r1, r4
 8006dfc:	1854      	adds	r4, r2, r1
 8006dfe:	42a3      	cmp	r3, r4
 8006e00:	6011      	str	r1, [r2, #0]
 8006e02:	d1e0      	bne.n	8006dc6 <_free_r+0x26>
 8006e04:	681c      	ldr	r4, [r3, #0]
 8006e06:	685b      	ldr	r3, [r3, #4]
 8006e08:	6053      	str	r3, [r2, #4]
 8006e0a:	4421      	add	r1, r4
 8006e0c:	6011      	str	r1, [r2, #0]
 8006e0e:	e7da      	b.n	8006dc6 <_free_r+0x26>
 8006e10:	d902      	bls.n	8006e18 <_free_r+0x78>
 8006e12:	230c      	movs	r3, #12
 8006e14:	6003      	str	r3, [r0, #0]
 8006e16:	e7d6      	b.n	8006dc6 <_free_r+0x26>
 8006e18:	6825      	ldr	r5, [r4, #0]
 8006e1a:	1961      	adds	r1, r4, r5
 8006e1c:	428b      	cmp	r3, r1
 8006e1e:	bf04      	itt	eq
 8006e20:	6819      	ldreq	r1, [r3, #0]
 8006e22:	685b      	ldreq	r3, [r3, #4]
 8006e24:	6063      	str	r3, [r4, #4]
 8006e26:	bf04      	itt	eq
 8006e28:	1949      	addeq	r1, r1, r5
 8006e2a:	6021      	streq	r1, [r4, #0]
 8006e2c:	6054      	str	r4, [r2, #4]
 8006e2e:	e7ca      	b.n	8006dc6 <_free_r+0x26>
 8006e30:	b003      	add	sp, #12
 8006e32:	bd30      	pop	{r4, r5, pc}
 8006e34:	20001e94 	.word	0x20001e94

08006e38 <_init>:
 8006e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e3a:	bf00      	nop
 8006e3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e3e:	bc08      	pop	{r3}
 8006e40:	469e      	mov	lr, r3
 8006e42:	4770      	bx	lr

08006e44 <_fini>:
 8006e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e46:	bf00      	nop
 8006e48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e4a:	bc08      	pop	{r3}
 8006e4c:	469e      	mov	lr, r3
 8006e4e:	4770      	bx	lr
