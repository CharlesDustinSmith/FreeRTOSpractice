
42_Cmsis-RTOS_osSemaphore.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008888  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000224  080089c8  080089c8  000189c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008bec  08008bec  00018bec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008bf4  08008bf4  00018bf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08008bf8  08008bf8  00018bf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  20000004  08008bfc  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001e4c  20000078  08008c70  00020078  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20001ec4  08008c70  00021ec4  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 10 .debug_info   000263f1  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000047be  00000000  00000000  00046499  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000022c8  00000000  00000000  0004ac58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002130  00000000  00000000  0004cf20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00005c38  00000000  00000000  0004f050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000207a2  00000000  00000000  00054c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000ef9a0  00000000  00000000  0007542a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00164dca  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009a94  00000000  00000000  00164e1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000078 	.word	0x20000078
 800015c:	00000000 	.word	0x00000000
 8000160:	080089b0 	.word	0x080089b0

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000007c 	.word	0x2000007c
 800017c:	080089b0 	.word	0x080089b0

08000180 <__aeabi_uldivmod>:
 8000180:	b953      	cbnz	r3, 8000198 <__aeabi_uldivmod+0x18>
 8000182:	b94a      	cbnz	r2, 8000198 <__aeabi_uldivmod+0x18>
 8000184:	2900      	cmp	r1, #0
 8000186:	bf08      	it	eq
 8000188:	2800      	cmpeq	r0, #0
 800018a:	bf1c      	itt	ne
 800018c:	f04f 31ff 	movne.w	r1, #4294967295
 8000190:	f04f 30ff 	movne.w	r0, #4294967295
 8000194:	f000 b974 	b.w	8000480 <__aeabi_idiv0>
 8000198:	f1ad 0c08 	sub.w	ip, sp, #8
 800019c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001a0:	f000 f806 	bl	80001b0 <__udivmoddi4>
 80001a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001ac:	b004      	add	sp, #16
 80001ae:	4770      	bx	lr

080001b0 <__udivmoddi4>:
 80001b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b4:	9d08      	ldr	r5, [sp, #32]
 80001b6:	4604      	mov	r4, r0
 80001b8:	468e      	mov	lr, r1
 80001ba:	2b00      	cmp	r3, #0
 80001bc:	d14d      	bne.n	800025a <__udivmoddi4+0xaa>
 80001be:	428a      	cmp	r2, r1
 80001c0:	4694      	mov	ip, r2
 80001c2:	d969      	bls.n	8000298 <__udivmoddi4+0xe8>
 80001c4:	fab2 f282 	clz	r2, r2
 80001c8:	b152      	cbz	r2, 80001e0 <__udivmoddi4+0x30>
 80001ca:	fa01 f302 	lsl.w	r3, r1, r2
 80001ce:	f1c2 0120 	rsb	r1, r2, #32
 80001d2:	fa20 f101 	lsr.w	r1, r0, r1
 80001d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80001da:	ea41 0e03 	orr.w	lr, r1, r3
 80001de:	4094      	lsls	r4, r2
 80001e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80001e4:	0c21      	lsrs	r1, r4, #16
 80001e6:	fbbe f6f8 	udiv	r6, lr, r8
 80001ea:	fa1f f78c 	uxth.w	r7, ip
 80001ee:	fb08 e316 	mls	r3, r8, r6, lr
 80001f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80001f6:	fb06 f107 	mul.w	r1, r6, r7
 80001fa:	4299      	cmp	r1, r3
 80001fc:	d90a      	bls.n	8000214 <__udivmoddi4+0x64>
 80001fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000202:	f106 30ff 	add.w	r0, r6, #4294967295
 8000206:	f080 811f 	bcs.w	8000448 <__udivmoddi4+0x298>
 800020a:	4299      	cmp	r1, r3
 800020c:	f240 811c 	bls.w	8000448 <__udivmoddi4+0x298>
 8000210:	3e02      	subs	r6, #2
 8000212:	4463      	add	r3, ip
 8000214:	1a5b      	subs	r3, r3, r1
 8000216:	b2a4      	uxth	r4, r4
 8000218:	fbb3 f0f8 	udiv	r0, r3, r8
 800021c:	fb08 3310 	mls	r3, r8, r0, r3
 8000220:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000224:	fb00 f707 	mul.w	r7, r0, r7
 8000228:	42a7      	cmp	r7, r4
 800022a:	d90a      	bls.n	8000242 <__udivmoddi4+0x92>
 800022c:	eb1c 0404 	adds.w	r4, ip, r4
 8000230:	f100 33ff 	add.w	r3, r0, #4294967295
 8000234:	f080 810a 	bcs.w	800044c <__udivmoddi4+0x29c>
 8000238:	42a7      	cmp	r7, r4
 800023a:	f240 8107 	bls.w	800044c <__udivmoddi4+0x29c>
 800023e:	4464      	add	r4, ip
 8000240:	3802      	subs	r0, #2
 8000242:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000246:	1be4      	subs	r4, r4, r7
 8000248:	2600      	movs	r6, #0
 800024a:	b11d      	cbz	r5, 8000254 <__udivmoddi4+0xa4>
 800024c:	40d4      	lsrs	r4, r2
 800024e:	2300      	movs	r3, #0
 8000250:	e9c5 4300 	strd	r4, r3, [r5]
 8000254:	4631      	mov	r1, r6
 8000256:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800025a:	428b      	cmp	r3, r1
 800025c:	d909      	bls.n	8000272 <__udivmoddi4+0xc2>
 800025e:	2d00      	cmp	r5, #0
 8000260:	f000 80ef 	beq.w	8000442 <__udivmoddi4+0x292>
 8000264:	2600      	movs	r6, #0
 8000266:	e9c5 0100 	strd	r0, r1, [r5]
 800026a:	4630      	mov	r0, r6
 800026c:	4631      	mov	r1, r6
 800026e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000272:	fab3 f683 	clz	r6, r3
 8000276:	2e00      	cmp	r6, #0
 8000278:	d14a      	bne.n	8000310 <__udivmoddi4+0x160>
 800027a:	428b      	cmp	r3, r1
 800027c:	d302      	bcc.n	8000284 <__udivmoddi4+0xd4>
 800027e:	4282      	cmp	r2, r0
 8000280:	f200 80f9 	bhi.w	8000476 <__udivmoddi4+0x2c6>
 8000284:	1a84      	subs	r4, r0, r2
 8000286:	eb61 0303 	sbc.w	r3, r1, r3
 800028a:	2001      	movs	r0, #1
 800028c:	469e      	mov	lr, r3
 800028e:	2d00      	cmp	r5, #0
 8000290:	d0e0      	beq.n	8000254 <__udivmoddi4+0xa4>
 8000292:	e9c5 4e00 	strd	r4, lr, [r5]
 8000296:	e7dd      	b.n	8000254 <__udivmoddi4+0xa4>
 8000298:	b902      	cbnz	r2, 800029c <__udivmoddi4+0xec>
 800029a:	deff      	udf	#255	; 0xff
 800029c:	fab2 f282 	clz	r2, r2
 80002a0:	2a00      	cmp	r2, #0
 80002a2:	f040 8092 	bne.w	80003ca <__udivmoddi4+0x21a>
 80002a6:	eba1 010c 	sub.w	r1, r1, ip
 80002aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ae:	fa1f fe8c 	uxth.w	lr, ip
 80002b2:	2601      	movs	r6, #1
 80002b4:	0c20      	lsrs	r0, r4, #16
 80002b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80002ba:	fb07 1113 	mls	r1, r7, r3, r1
 80002be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80002c2:	fb0e f003 	mul.w	r0, lr, r3
 80002c6:	4288      	cmp	r0, r1
 80002c8:	d908      	bls.n	80002dc <__udivmoddi4+0x12c>
 80002ca:	eb1c 0101 	adds.w	r1, ip, r1
 80002ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0x12a>
 80002d4:	4288      	cmp	r0, r1
 80002d6:	f200 80cb 	bhi.w	8000470 <__udivmoddi4+0x2c0>
 80002da:	4643      	mov	r3, r8
 80002dc:	1a09      	subs	r1, r1, r0
 80002de:	b2a4      	uxth	r4, r4
 80002e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80002e4:	fb07 1110 	mls	r1, r7, r0, r1
 80002e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80002ec:	fb0e fe00 	mul.w	lr, lr, r0
 80002f0:	45a6      	cmp	lr, r4
 80002f2:	d908      	bls.n	8000306 <__udivmoddi4+0x156>
 80002f4:	eb1c 0404 	adds.w	r4, ip, r4
 80002f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80002fc:	d202      	bcs.n	8000304 <__udivmoddi4+0x154>
 80002fe:	45a6      	cmp	lr, r4
 8000300:	f200 80bb 	bhi.w	800047a <__udivmoddi4+0x2ca>
 8000304:	4608      	mov	r0, r1
 8000306:	eba4 040e 	sub.w	r4, r4, lr
 800030a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800030e:	e79c      	b.n	800024a <__udivmoddi4+0x9a>
 8000310:	f1c6 0720 	rsb	r7, r6, #32
 8000314:	40b3      	lsls	r3, r6
 8000316:	fa22 fc07 	lsr.w	ip, r2, r7
 800031a:	ea4c 0c03 	orr.w	ip, ip, r3
 800031e:	fa20 f407 	lsr.w	r4, r0, r7
 8000322:	fa01 f306 	lsl.w	r3, r1, r6
 8000326:	431c      	orrs	r4, r3
 8000328:	40f9      	lsrs	r1, r7
 800032a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800032e:	fa00 f306 	lsl.w	r3, r0, r6
 8000332:	fbb1 f8f9 	udiv	r8, r1, r9
 8000336:	0c20      	lsrs	r0, r4, #16
 8000338:	fa1f fe8c 	uxth.w	lr, ip
 800033c:	fb09 1118 	mls	r1, r9, r8, r1
 8000340:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000344:	fb08 f00e 	mul.w	r0, r8, lr
 8000348:	4288      	cmp	r0, r1
 800034a:	fa02 f206 	lsl.w	r2, r2, r6
 800034e:	d90b      	bls.n	8000368 <__udivmoddi4+0x1b8>
 8000350:	eb1c 0101 	adds.w	r1, ip, r1
 8000354:	f108 3aff 	add.w	sl, r8, #4294967295
 8000358:	f080 8088 	bcs.w	800046c <__udivmoddi4+0x2bc>
 800035c:	4288      	cmp	r0, r1
 800035e:	f240 8085 	bls.w	800046c <__udivmoddi4+0x2bc>
 8000362:	f1a8 0802 	sub.w	r8, r8, #2
 8000366:	4461      	add	r1, ip
 8000368:	1a09      	subs	r1, r1, r0
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000370:	fb09 1110 	mls	r1, r9, r0, r1
 8000374:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	458e      	cmp	lr, r1
 800037e:	d908      	bls.n	8000392 <__udivmoddi4+0x1e2>
 8000380:	eb1c 0101 	adds.w	r1, ip, r1
 8000384:	f100 34ff 	add.w	r4, r0, #4294967295
 8000388:	d26c      	bcs.n	8000464 <__udivmoddi4+0x2b4>
 800038a:	458e      	cmp	lr, r1
 800038c:	d96a      	bls.n	8000464 <__udivmoddi4+0x2b4>
 800038e:	3802      	subs	r0, #2
 8000390:	4461      	add	r1, ip
 8000392:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000396:	fba0 9402 	umull	r9, r4, r0, r2
 800039a:	eba1 010e 	sub.w	r1, r1, lr
 800039e:	42a1      	cmp	r1, r4
 80003a0:	46c8      	mov	r8, r9
 80003a2:	46a6      	mov	lr, r4
 80003a4:	d356      	bcc.n	8000454 <__udivmoddi4+0x2a4>
 80003a6:	d053      	beq.n	8000450 <__udivmoddi4+0x2a0>
 80003a8:	b15d      	cbz	r5, 80003c2 <__udivmoddi4+0x212>
 80003aa:	ebb3 0208 	subs.w	r2, r3, r8
 80003ae:	eb61 010e 	sbc.w	r1, r1, lr
 80003b2:	fa01 f707 	lsl.w	r7, r1, r7
 80003b6:	fa22 f306 	lsr.w	r3, r2, r6
 80003ba:	40f1      	lsrs	r1, r6
 80003bc:	431f      	orrs	r7, r3
 80003be:	e9c5 7100 	strd	r7, r1, [r5]
 80003c2:	2600      	movs	r6, #0
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	f1c2 0320 	rsb	r3, r2, #32
 80003ce:	40d8      	lsrs	r0, r3
 80003d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80003d4:	fa21 f303 	lsr.w	r3, r1, r3
 80003d8:	4091      	lsls	r1, r2
 80003da:	4301      	orrs	r1, r0
 80003dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e0:	fa1f fe8c 	uxth.w	lr, ip
 80003e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80003e8:	fb07 3610 	mls	r6, r7, r0, r3
 80003ec:	0c0b      	lsrs	r3, r1, #16
 80003ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80003f2:	fb00 f60e 	mul.w	r6, r0, lr
 80003f6:	429e      	cmp	r6, r3
 80003f8:	fa04 f402 	lsl.w	r4, r4, r2
 80003fc:	d908      	bls.n	8000410 <__udivmoddi4+0x260>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f100 38ff 	add.w	r8, r0, #4294967295
 8000406:	d22f      	bcs.n	8000468 <__udivmoddi4+0x2b8>
 8000408:	429e      	cmp	r6, r3
 800040a:	d92d      	bls.n	8000468 <__udivmoddi4+0x2b8>
 800040c:	3802      	subs	r0, #2
 800040e:	4463      	add	r3, ip
 8000410:	1b9b      	subs	r3, r3, r6
 8000412:	b289      	uxth	r1, r1
 8000414:	fbb3 f6f7 	udiv	r6, r3, r7
 8000418:	fb07 3316 	mls	r3, r7, r6, r3
 800041c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000420:	fb06 f30e 	mul.w	r3, r6, lr
 8000424:	428b      	cmp	r3, r1
 8000426:	d908      	bls.n	800043a <__udivmoddi4+0x28a>
 8000428:	eb1c 0101 	adds.w	r1, ip, r1
 800042c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000430:	d216      	bcs.n	8000460 <__udivmoddi4+0x2b0>
 8000432:	428b      	cmp	r3, r1
 8000434:	d914      	bls.n	8000460 <__udivmoddi4+0x2b0>
 8000436:	3e02      	subs	r6, #2
 8000438:	4461      	add	r1, ip
 800043a:	1ac9      	subs	r1, r1, r3
 800043c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000440:	e738      	b.n	80002b4 <__udivmoddi4+0x104>
 8000442:	462e      	mov	r6, r5
 8000444:	4628      	mov	r0, r5
 8000446:	e705      	b.n	8000254 <__udivmoddi4+0xa4>
 8000448:	4606      	mov	r6, r0
 800044a:	e6e3      	b.n	8000214 <__udivmoddi4+0x64>
 800044c:	4618      	mov	r0, r3
 800044e:	e6f8      	b.n	8000242 <__udivmoddi4+0x92>
 8000450:	454b      	cmp	r3, r9
 8000452:	d2a9      	bcs.n	80003a8 <__udivmoddi4+0x1f8>
 8000454:	ebb9 0802 	subs.w	r8, r9, r2
 8000458:	eb64 0e0c 	sbc.w	lr, r4, ip
 800045c:	3801      	subs	r0, #1
 800045e:	e7a3      	b.n	80003a8 <__udivmoddi4+0x1f8>
 8000460:	4646      	mov	r6, r8
 8000462:	e7ea      	b.n	800043a <__udivmoddi4+0x28a>
 8000464:	4620      	mov	r0, r4
 8000466:	e794      	b.n	8000392 <__udivmoddi4+0x1e2>
 8000468:	4640      	mov	r0, r8
 800046a:	e7d1      	b.n	8000410 <__udivmoddi4+0x260>
 800046c:	46d0      	mov	r8, sl
 800046e:	e77b      	b.n	8000368 <__udivmoddi4+0x1b8>
 8000470:	3b02      	subs	r3, #2
 8000472:	4461      	add	r1, ip
 8000474:	e732      	b.n	80002dc <__udivmoddi4+0x12c>
 8000476:	4630      	mov	r0, r6
 8000478:	e709      	b.n	800028e <__udivmoddi4+0xde>
 800047a:	4464      	add	r4, ip
 800047c:	3802      	subs	r0, #2
 800047e:	e742      	b.n	8000306 <__udivmoddi4+0x156>

08000480 <__aeabi_idiv0>:
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop

08000484 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000484:	b480      	push	{r7}
 8000486:	b083      	sub	sp, #12
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800048c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000490:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000494:	f023 0218 	bic.w	r2, r3, #24
 8000498:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	4313      	orrs	r3, r2
 80004a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80004a4:	bf00      	nop
 80004a6:	370c      	adds	r7, #12
 80004a8:	46bd      	mov	sp, r7
 80004aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ae:	4770      	bx	lr

080004b0 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004b0:	b480      	push	{r7}
 80004b2:	b085      	sub	sp, #20
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80004b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004bc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	4313      	orrs	r3, r2
 80004c6:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80004c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	4013      	ands	r3, r2
 80004d2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004d4:	68fb      	ldr	r3, [r7, #12]
}
 80004d6:	bf00      	nop
 80004d8:	3714      	adds	r7, #20
 80004da:	46bd      	mov	sp, r7
 80004dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e0:	4770      	bx	lr
	...

080004e4 <main>:
};

osSemaphoreId_t uart_semaphore_id;

int main(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b0a4      	sub	sp, #144	; 0x90
 80004e8:	af00      	add	r7, sp, #0

  HAL_Init();
 80004ea:	f000 fd75 	bl	8000fd8 <HAL_Init>
  SystemClock_Config();
 80004ee:	f000 f965 	bl	80007bc <SystemClock_Config>
  MX_GPIO_Init();
 80004f2:	f000 fa4d 	bl	8000990 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80004f6:	f000 f9d7 	bl	80008a8 <MX_LPUART1_UART_Init>
  MX_USB_PCD_Init();
 80004fa:	f000 fa21 	bl	8000940 <MX_USB_PCD_Init>

  // Initialize the kernel
  osKernelInitialize();
 80004fe:	f004 f879 	bl	80045f4 <osKernelInitialize>

  // Creating Timers
  timer_1_id = osTimerNew(Timer1_Callback, osTimerOnce, NULL, NULL);
 8000502:	2300      	movs	r3, #0
 8000504:	2200      	movs	r2, #0
 8000506:	2100      	movs	r1, #0
 8000508:	483c      	ldr	r0, [pc, #240]	; (80005fc <main+0x118>)
 800050a:	f004 f97f 	bl	800480c <osTimerNew>
 800050e:	4603      	mov	r3, r0
 8000510:	4a3b      	ldr	r2, [pc, #236]	; (8000600 <main+0x11c>)
 8000512:	6013      	str	r3, [r2, #0]
  timer_2_id = osTimerNew(Timer2_Callback, osTimerPeriodic, NULL, NULL);
 8000514:	2300      	movs	r3, #0
 8000516:	2200      	movs	r2, #0
 8000518:	2101      	movs	r1, #1
 800051a:	483a      	ldr	r0, [pc, #232]	; (8000604 <main+0x120>)
 800051c:	f004 f976 	bl	800480c <osTimerNew>
 8000520:	4603      	mov	r3, r0
 8000522:	4a39      	ldr	r2, [pc, #228]	; (8000608 <main+0x124>)
 8000524:	6013      	str	r3, [r2, #0]

  // Create Threads
  osThreadAttr_t greenThreadAttribs = {
 8000526:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800052a:	2224      	movs	r2, #36	; 0x24
 800052c:	2100      	movs	r1, #0
 800052e:	4618      	mov	r0, r3
 8000530:	f007 fdc5 	bl	80080be <memset>
 8000534:	4b35      	ldr	r3, [pc, #212]	; (800060c <main+0x128>)
 8000536:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000538:	f44f 7300 	mov.w	r3, #512	; 0x200
 800053c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000540:	2318      	movs	r3, #24
 8000542:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		  .name = "Green Task",
		  .stack_size = STACK_SIZE,
		  .priority	= osPriorityNormal
  };

  osThreadAttr_t redThreadAttribs = {
 8000546:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800054a:	2224      	movs	r2, #36	; 0x24
 800054c:	2100      	movs	r1, #0
 800054e:	4618      	mov	r0, r3
 8000550:	f007 fdb5 	bl	80080be <memset>
 8000554:	4b2e      	ldr	r3, [pc, #184]	; (8000610 <main+0x12c>)
 8000556:	64bb      	str	r3, [r7, #72]	; 0x48
 8000558:	f44f 7300 	mov.w	r3, #512	; 0x200
 800055c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800055e:	2318      	movs	r3, #24
 8000560:	663b      	str	r3, [r7, #96]	; 0x60
		  .name = "Red Task",
		  .stack_size = STACK_SIZE,
		  .priority	= osPriorityNormal
  };

  osThreadAttr_t orangeThreadAttribs = {
 8000562:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000566:	2224      	movs	r2, #36	; 0x24
 8000568:	2100      	movs	r1, #0
 800056a:	4618      	mov	r0, r3
 800056c:	f007 fda7 	bl	80080be <memset>
 8000570:	4b28      	ldr	r3, [pc, #160]	; (8000614 <main+0x130>)
 8000572:	627b      	str	r3, [r7, #36]	; 0x24
 8000574:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000578:	63bb      	str	r3, [r7, #56]	; 0x38
 800057a:	2318      	movs	r3, #24
 800057c:	63fb      	str	r3, [r7, #60]	; 0x3c
		  .name = "Orange Task",
		  .stack_size = STACK_SIZE,
		  .priority	= osPriorityNormal
  };

  osThreadAttr_t blueThreadAttribs = {
 800057e:	463b      	mov	r3, r7
 8000580:	2224      	movs	r2, #36	; 0x24
 8000582:	2100      	movs	r1, #0
 8000584:	4618      	mov	r0, r3
 8000586:	f007 fd9a 	bl	80080be <memset>
 800058a:	4b23      	ldr	r3, [pc, #140]	; (8000618 <main+0x134>)
 800058c:	603b      	str	r3, [r7, #0]
 800058e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000592:	617b      	str	r3, [r7, #20]
 8000594:	2318      	movs	r3, #24
 8000596:	61bb      	str	r3, [r7, #24]
		  .stack_size = STACK_SIZE,
		  .priority	= osPriorityNormal
  };

  // Created Threads
  green_id = osThreadNew(vGreenLedControllerTask, NULL, &greenThreadAttribs);
 8000598:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800059c:	461a      	mov	r2, r3
 800059e:	2100      	movs	r1, #0
 80005a0:	481e      	ldr	r0, [pc, #120]	; (800061c <main+0x138>)
 80005a2:	f004 f871 	bl	8004688 <osThreadNew>
 80005a6:	4603      	mov	r3, r0
 80005a8:	4a1d      	ldr	r2, [pc, #116]	; (8000620 <main+0x13c>)
 80005aa:	6013      	str	r3, [r2, #0]
  red_id = osThreadNew(vRedLedControllerTask, NULL, &redThreadAttribs);
 80005ac:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80005b0:	461a      	mov	r2, r3
 80005b2:	2100      	movs	r1, #0
 80005b4:	481b      	ldr	r0, [pc, #108]	; (8000624 <main+0x140>)
 80005b6:	f004 f867 	bl	8004688 <osThreadNew>
 80005ba:	4603      	mov	r3, r0
 80005bc:	4a1a      	ldr	r2, [pc, #104]	; (8000628 <main+0x144>)
 80005be:	6013      	str	r3, [r2, #0]
  orange_id = osThreadNew(vOrangeLedControllerTask, NULL, &orangeThreadAttribs);
 80005c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005c4:	461a      	mov	r2, r3
 80005c6:	2100      	movs	r1, #0
 80005c8:	4818      	ldr	r0, [pc, #96]	; (800062c <main+0x148>)
 80005ca:	f004 f85d 	bl	8004688 <osThreadNew>
 80005ce:	4603      	mov	r3, r0
 80005d0:	4a17      	ldr	r2, [pc, #92]	; (8000630 <main+0x14c>)
 80005d2:	6013      	str	r3, [r2, #0]
  blue_id = osThreadNew(vBlueLedControllerTask, NULL, &blueThreadAttribs);
 80005d4:	463b      	mov	r3, r7
 80005d6:	461a      	mov	r2, r3
 80005d8:	2100      	movs	r1, #0
 80005da:	4816      	ldr	r0, [pc, #88]	; (8000634 <main+0x150>)
 80005dc:	f004 f854 	bl	8004688 <osThreadNew>
 80005e0:	4603      	mov	r3, r0
 80005e2:	4a15      	ldr	r2, [pc, #84]	; (8000638 <main+0x154>)
 80005e4:	6013      	str	r3, [r2, #0]

  uart_semaphore_id = osSemaphoreNew( 1, 1, &uartSemaphoreAttribs);
 80005e6:	4a15      	ldr	r2, [pc, #84]	; (800063c <main+0x158>)
 80005e8:	2101      	movs	r1, #1
 80005ea:	2001      	movs	r0, #1
 80005ec:	f004 f9b8 	bl	8004960 <osSemaphoreNew>
 80005f0:	4603      	mov	r3, r0
 80005f2:	4a13      	ldr	r2, [pc, #76]	; (8000640 <main+0x15c>)
 80005f4:	6013      	str	r3, [r2, #0]

  osKernelStart();
 80005f6:	f004 f821 	bl	800463c <osKernelStart>

  while (1)
 80005fa:	e7fe      	b.n	80005fa <main+0x116>
 80005fc:	08000775 	.word	0x08000775
 8000600:	20000444 	.word	0x20000444
 8000604:	08000799 	.word	0x08000799
 8000608:	20000448 	.word	0x20000448
 800060c:	080089d8 	.word	0x080089d8
 8000610:	080089e4 	.word	0x080089e4
 8000614:	080089f0 	.word	0x080089f0
 8000618:	080089fc 	.word	0x080089fc
 800061c:	08000645 	.word	0x08000645
 8000620:	20000438 	.word	0x20000438
 8000624:	08000689 	.word	0x08000689
 8000628:	20000434 	.word	0x20000434
 800062c:	080006cd 	.word	0x080006cd
 8000630:	20000440 	.word	0x20000440
 8000634:	08000711 	.word	0x08000711
 8000638:	2000043c 	.word	0x2000043c
 800063c:	08008ab0 	.word	0x08008ab0
 8000640:	2000044c 	.word	0x2000044c

08000644 <vGreenLedControllerTask>:
  }
  /* USER CODE END 3 */
}

void vGreenLedControllerTask(void *pvParameters)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
	while(1)
	{
		++Green_TaskProfiler;
 800064c:	4b0b      	ldr	r3, [pc, #44]	; (800067c <vGreenLedControllerTask+0x38>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	3301      	adds	r3, #1
 8000652:	4a0a      	ldr	r2, [pc, #40]	; (800067c <vGreenLedControllerTask+0x38>)
 8000654:	6013      	str	r3, [r2, #0]
		osSemaphoreAcquire(uart_semaphore_id, osWaitForever);
 8000656:	4b0a      	ldr	r3, [pc, #40]	; (8000680 <vGreenLedControllerTask+0x3c>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	f04f 31ff 	mov.w	r1, #4294967295
 800065e:	4618      	mov	r0, r3
 8000660:	f004 fa08 	bl	8004a74 <osSemaphoreAcquire>
		printf("This is the Green Task\r\n");
 8000664:	4807      	ldr	r0, [pc, #28]	; (8000684 <vGreenLedControllerTask+0x40>)
 8000666:	f007 fe35 	bl	80082d4 <puts>
		osSemaphoreRelease(uart_semaphore_id);
 800066a:	4b05      	ldr	r3, [pc, #20]	; (8000680 <vGreenLedControllerTask+0x3c>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	4618      	mov	r0, r3
 8000670:	f004 fa52 	bl	8004b18 <osSemaphoreRelease>
		osDelay(100);
 8000674:	2064      	movs	r0, #100	; 0x64
 8000676:	f004 f899 	bl	80047ac <osDelay>
		++Green_TaskProfiler;
 800067a:	e7e7      	b.n	800064c <vGreenLedControllerTask+0x8>
 800067c:	20000424 	.word	0x20000424
 8000680:	2000044c 	.word	0x2000044c
 8000684:	08008a08 	.word	0x08008a08

08000688 <vRedLedControllerTask>:
	}
}

void vRedLedControllerTask(void *pvParameters)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
	while(1)
	{
		++Red_TaskProfiler;
 8000690:	4b0b      	ldr	r3, [pc, #44]	; (80006c0 <vRedLedControllerTask+0x38>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	3301      	adds	r3, #1
 8000696:	4a0a      	ldr	r2, [pc, #40]	; (80006c0 <vRedLedControllerTask+0x38>)
 8000698:	6013      	str	r3, [r2, #0]
		osSemaphoreAcquire(uart_semaphore_id, osWaitForever);
 800069a:	4b0a      	ldr	r3, [pc, #40]	; (80006c4 <vRedLedControllerTask+0x3c>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	f04f 31ff 	mov.w	r1, #4294967295
 80006a2:	4618      	mov	r0, r3
 80006a4:	f004 f9e6 	bl	8004a74 <osSemaphoreAcquire>
		printf("This is the Red Task\r\n");
 80006a8:	4807      	ldr	r0, [pc, #28]	; (80006c8 <vRedLedControllerTask+0x40>)
 80006aa:	f007 fe13 	bl	80082d4 <puts>
		osSemaphoreRelease(uart_semaphore_id);
 80006ae:	4b05      	ldr	r3, [pc, #20]	; (80006c4 <vRedLedControllerTask+0x3c>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	4618      	mov	r0, r3
 80006b4:	f004 fa30 	bl	8004b18 <osSemaphoreRelease>
		osDelay(100);
 80006b8:	2064      	movs	r0, #100	; 0x64
 80006ba:	f004 f877 	bl	80047ac <osDelay>
		++Red_TaskProfiler;
 80006be:	e7e7      	b.n	8000690 <vRedLedControllerTask+0x8>
 80006c0:	20000420 	.word	0x20000420
 80006c4:	2000044c 	.word	0x2000044c
 80006c8:	08008a20 	.word	0x08008a20

080006cc <vOrangeLedControllerTask>:
	}
}


void vOrangeLedControllerTask(void *pvParameters)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
	while(1)
	{
		++Orange_TaskProfiler;
 80006d4:	4b0b      	ldr	r3, [pc, #44]	; (8000704 <vOrangeLedControllerTask+0x38>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	3301      	adds	r3, #1
 80006da:	4a0a      	ldr	r2, [pc, #40]	; (8000704 <vOrangeLedControllerTask+0x38>)
 80006dc:	6013      	str	r3, [r2, #0]
		osSemaphoreAcquire(uart_semaphore_id, osWaitForever);
 80006de:	4b0a      	ldr	r3, [pc, #40]	; (8000708 <vOrangeLedControllerTask+0x3c>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	f04f 31ff 	mov.w	r1, #4294967295
 80006e6:	4618      	mov	r0, r3
 80006e8:	f004 f9c4 	bl	8004a74 <osSemaphoreAcquire>
		printf("This is the Orange Task\r\n");
 80006ec:	4807      	ldr	r0, [pc, #28]	; (800070c <vOrangeLedControllerTask+0x40>)
 80006ee:	f007 fdf1 	bl	80082d4 <puts>
		osSemaphoreRelease(uart_semaphore_id);
 80006f2:	4b05      	ldr	r3, [pc, #20]	; (8000708 <vOrangeLedControllerTask+0x3c>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	4618      	mov	r0, r3
 80006f8:	f004 fa0e 	bl	8004b18 <osSemaphoreRelease>
		osDelay(100);
 80006fc:	2064      	movs	r0, #100	; 0x64
 80006fe:	f004 f855 	bl	80047ac <osDelay>
		++Orange_TaskProfiler;
 8000702:	e7e7      	b.n	80006d4 <vOrangeLedControllerTask+0x8>
 8000704:	2000041c 	.word	0x2000041c
 8000708:	2000044c 	.word	0x2000044c
 800070c:	08008a38 	.word	0x08008a38

08000710 <vBlueLedControllerTask>:
	}
}

void vBlueLedControllerTask(void *pvParameters)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]

	osTimerStart(timer_1_id, 5000);			// Set timer 1 period to 5000 ticks
 8000718:	4b11      	ldr	r3, [pc, #68]	; (8000760 <vBlueLedControllerTask+0x50>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	f241 3188 	movw	r1, #5000	; 0x1388
 8000720:	4618      	mov	r0, r3
 8000722:	f004 f8ef 	bl	8004904 <osTimerStart>
	osTimerStart(timer_2_id, 1000);			// Set timer 2 period to 1000 ticks
 8000726:	4b0f      	ldr	r3, [pc, #60]	; (8000764 <vBlueLedControllerTask+0x54>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800072e:	4618      	mov	r0, r3
 8000730:	f004 f8e8 	bl	8004904 <osTimerStart>

	while(1)
	{
		++Blue_TaskProfiler;
 8000734:	4b0c      	ldr	r3, [pc, #48]	; (8000768 <vBlueLedControllerTask+0x58>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	3301      	adds	r3, #1
 800073a:	4a0b      	ldr	r2, [pc, #44]	; (8000768 <vBlueLedControllerTask+0x58>)
 800073c:	6013      	str	r3, [r2, #0]
		osSemaphoreAcquire(uart_semaphore_id, osWaitForever);
 800073e:	4b0b      	ldr	r3, [pc, #44]	; (800076c <vBlueLedControllerTask+0x5c>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	f04f 31ff 	mov.w	r1, #4294967295
 8000746:	4618      	mov	r0, r3
 8000748:	f004 f994 	bl	8004a74 <osSemaphoreAcquire>
		printf("This is the Blue Task\r\n");
 800074c:	4808      	ldr	r0, [pc, #32]	; (8000770 <vBlueLedControllerTask+0x60>)
 800074e:	f007 fdc1 	bl	80082d4 <puts>
		osSemaphoreRelease(uart_semaphore_id);
 8000752:	4b06      	ldr	r3, [pc, #24]	; (800076c <vBlueLedControllerTask+0x5c>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	4618      	mov	r0, r3
 8000758:	f004 f9de 	bl	8004b18 <osSemaphoreRelease>
		++Blue_TaskProfiler;
 800075c:	e7ea      	b.n	8000734 <vBlueLedControllerTask+0x24>
 800075e:	bf00      	nop
 8000760:	20000444 	.word	0x20000444
 8000764:	20000448 	.word	0x20000448
 8000768:	20000428 	.word	0x20000428
 800076c:	2000044c 	.word	0x2000044c
 8000770:	08008a54 	.word	0x08008a54

08000774 <Timer1_Callback>:
	}
}

void Timer1_Callback(void *arg)
{
 8000774:	b480      	push	{r7}
 8000776:	b083      	sub	sp, #12
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
	timer_1_TaskProfiler++;
 800077c:	4b05      	ldr	r3, [pc, #20]	; (8000794 <Timer1_Callback+0x20>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	3301      	adds	r3, #1
 8000782:	4a04      	ldr	r2, [pc, #16]	; (8000794 <Timer1_Callback+0x20>)
 8000784:	6013      	str	r3, [r2, #0]
}
 8000786:	bf00      	nop
 8000788:	370c      	adds	r7, #12
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	2000042c 	.word	0x2000042c

08000798 <Timer2_Callback>:

void Timer2_Callback(void *arg)
{
 8000798:	b480      	push	{r7}
 800079a:	b083      	sub	sp, #12
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
	timer_2_TaskProfiler++;
 80007a0:	4b05      	ldr	r3, [pc, #20]	; (80007b8 <Timer2_Callback+0x20>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	3301      	adds	r3, #1
 80007a6:	4a04      	ldr	r2, [pc, #16]	; (80007b8 <Timer2_Callback+0x20>)
 80007a8:	6013      	str	r3, [r2, #0]
}
 80007aa:	bf00      	nop
 80007ac:	370c      	adds	r7, #12
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop
 80007b8:	20000430 	.word	0x20000430

080007bc <SystemClock_Config>:

void SystemClock_Config(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b09a      	sub	sp, #104	; 0x68
 80007c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007c2:	f107 0320 	add.w	r3, r7, #32
 80007c6:	2248      	movs	r2, #72	; 0x48
 80007c8:	2100      	movs	r1, #0
 80007ca:	4618      	mov	r0, r3
 80007cc:	f007 fc77 	bl	80080be <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007d0:	1d3b      	adds	r3, r7, #4
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
 80007d6:	605a      	str	r2, [r3, #4]
 80007d8:	609a      	str	r2, [r3, #8]
 80007da:	60da      	str	r2, [r3, #12]
 80007dc:	611a      	str	r2, [r3, #16]
 80007de:	615a      	str	r2, [r3, #20]
 80007e0:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 80007e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007e6:	68db      	ldr	r3, [r3, #12]
 80007e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80007ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80007f0:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 80007f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007f6:	68db      	ldr	r3, [r3, #12]
 80007f8:	f023 0303 	bic.w	r3, r3, #3
 80007fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000800:	f043 0301 	orr.w	r3, r3, #1
 8000804:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000806:	f001 f83d 	bl	8001884 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800080a:	2000      	movs	r0, #0
 800080c:	f7ff fe3a 	bl	8000484 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000810:	4b24      	ldr	r3, [pc, #144]	; (80008a4 <SystemClock_Config+0xe8>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000818:	4a22      	ldr	r2, [pc, #136]	; (80008a4 <SystemClock_Config+0xe8>)
 800081a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800081e:	6013      	str	r3, [r2, #0]
 8000820:	4b20      	ldr	r3, [pc, #128]	; (80008a4 <SystemClock_Config+0xe8>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000828:	603b      	str	r3, [r7, #0]
 800082a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 800082c:	2327      	movs	r3, #39	; 0x27
 800082e:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000830:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000834:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000836:	2301      	movs	r3, #1
 8000838:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800083a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800083e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000840:	2301      	movs	r3, #1
 8000842:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000844:	2340      	movs	r3, #64	; 0x40
 8000846:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000848:	2300      	movs	r3, #0
 800084a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800084c:	2360      	movs	r3, #96	; 0x60
 800084e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000850:	2300      	movs	r3, #0
 8000852:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000854:	f107 0320 	add.w	r3, r7, #32
 8000858:	4618      	mov	r0, r3
 800085a:	f001 fc05 	bl	8002068 <HAL_RCC_OscConfig>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000864:	f000 f8fe 	bl	8000a64 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000868:	236f      	movs	r3, #111	; 0x6f
 800086a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800086c:	2302      	movs	r3, #2
 800086e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000870:	2300      	movs	r3, #0
 8000872:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000874:	2300      	movs	r3, #0
 8000876:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000878:	2300      	movs	r3, #0
 800087a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 800087c:	2300      	movs	r3, #0
 800087e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000880:	2300      	movs	r3, #0
 8000882:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000884:	1d3b      	adds	r3, r7, #4
 8000886:	2101      	movs	r1, #1
 8000888:	4618      	mov	r0, r3
 800088a:	f001 ff61 	bl	8002750 <HAL_RCC_ClockConfig>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8000894:	f000 f8e6 	bl	8000a64 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000898:	f002 fd4e 	bl	8003338 <HAL_RCCEx_EnableMSIPLLMode>
}
 800089c:	bf00      	nop
 800089e:	3768      	adds	r7, #104	; 0x68
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	58000400 	.word	0x58000400

080008a8 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80008ac:	4b22      	ldr	r3, [pc, #136]	; (8000938 <MX_LPUART1_UART_Init+0x90>)
 80008ae:	4a23      	ldr	r2, [pc, #140]	; (800093c <MX_LPUART1_UART_Init+0x94>)
 80008b0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80008b2:	4b21      	ldr	r3, [pc, #132]	; (8000938 <MX_LPUART1_UART_Init+0x90>)
 80008b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008b8:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008ba:	4b1f      	ldr	r3, [pc, #124]	; (8000938 <MX_LPUART1_UART_Init+0x90>)
 80008bc:	2200      	movs	r2, #0
 80008be:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80008c0:	4b1d      	ldr	r3, [pc, #116]	; (8000938 <MX_LPUART1_UART_Init+0x90>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80008c6:	4b1c      	ldr	r3, [pc, #112]	; (8000938 <MX_LPUART1_UART_Init+0x90>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80008cc:	4b1a      	ldr	r3, [pc, #104]	; (8000938 <MX_LPUART1_UART_Init+0x90>)
 80008ce:	220c      	movs	r2, #12
 80008d0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008d2:	4b19      	ldr	r3, [pc, #100]	; (8000938 <MX_LPUART1_UART_Init+0x90>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008d8:	4b17      	ldr	r3, [pc, #92]	; (8000938 <MX_LPUART1_UART_Init+0x90>)
 80008da:	2200      	movs	r2, #0
 80008dc:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008de:	4b16      	ldr	r3, [pc, #88]	; (8000938 <MX_LPUART1_UART_Init+0x90>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008e4:	4b14      	ldr	r3, [pc, #80]	; (8000938 <MX_LPUART1_UART_Init+0x90>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80008ea:	4b13      	ldr	r3, [pc, #76]	; (8000938 <MX_LPUART1_UART_Init+0x90>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80008f0:	4811      	ldr	r0, [pc, #68]	; (8000938 <MX_LPUART1_UART_Init+0x90>)
 80008f2:	f003 f8d1 	bl	8003a98 <HAL_UART_Init>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 80008fc:	f000 f8b2 	bl	8000a64 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000900:	2100      	movs	r1, #0
 8000902:	480d      	ldr	r0, [pc, #52]	; (8000938 <MX_LPUART1_UART_Init+0x90>)
 8000904:	f003 fd2c 	bl	8004360 <HAL_UARTEx_SetTxFifoThreshold>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 800090e:	f000 f8a9 	bl	8000a64 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000912:	2100      	movs	r1, #0
 8000914:	4808      	ldr	r0, [pc, #32]	; (8000938 <MX_LPUART1_UART_Init+0x90>)
 8000916:	f003 fd61 	bl	80043dc <HAL_UARTEx_SetRxFifoThreshold>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000920:	f000 f8a0 	bl	8000a64 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000924:	4804      	ldr	r0, [pc, #16]	; (8000938 <MX_LPUART1_UART_Init+0x90>)
 8000926:	f003 fce2 	bl	80042ee <HAL_UARTEx_DisableFifoMode>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000930:	f000 f898 	bl	8000a64 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000934:	bf00      	nop
 8000936:	bd80      	pop	{r7, pc}
 8000938:	20000094 	.word	0x20000094
 800093c:	40008000 	.word	0x40008000

08000940 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000944:	4b10      	ldr	r3, [pc, #64]	; (8000988 <MX_USB_PCD_Init+0x48>)
 8000946:	4a11      	ldr	r2, [pc, #68]	; (800098c <MX_USB_PCD_Init+0x4c>)
 8000948:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800094a:	4b0f      	ldr	r3, [pc, #60]	; (8000988 <MX_USB_PCD_Init+0x48>)
 800094c:	2208      	movs	r2, #8
 800094e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000950:	4b0d      	ldr	r3, [pc, #52]	; (8000988 <MX_USB_PCD_Init+0x48>)
 8000952:	2202      	movs	r2, #2
 8000954:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000956:	4b0c      	ldr	r3, [pc, #48]	; (8000988 <MX_USB_PCD_Init+0x48>)
 8000958:	2202      	movs	r2, #2
 800095a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800095c:	4b0a      	ldr	r3, [pc, #40]	; (8000988 <MX_USB_PCD_Init+0x48>)
 800095e:	2200      	movs	r2, #0
 8000960:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000962:	4b09      	ldr	r3, [pc, #36]	; (8000988 <MX_USB_PCD_Init+0x48>)
 8000964:	2200      	movs	r2, #0
 8000966:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000968:	4b07      	ldr	r3, [pc, #28]	; (8000988 <MX_USB_PCD_Init+0x48>)
 800096a:	2200      	movs	r2, #0
 800096c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800096e:	4b06      	ldr	r3, [pc, #24]	; (8000988 <MX_USB_PCD_Init+0x48>)
 8000970:	2200      	movs	r2, #0
 8000972:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000974:	4804      	ldr	r0, [pc, #16]	; (8000988 <MX_USB_PCD_Init+0x48>)
 8000976:	f000 fde3 	bl	8001540 <HAL_PCD_Init>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000980:	f000 f870 	bl	8000a64 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000984:	bf00      	nop
 8000986:	bd80      	pop	{r7, pc}
 8000988:	20000124 	.word	0x20000124
 800098c:	40006800 	.word	0x40006800

08000990 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b086      	sub	sp, #24
 8000994:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000996:	1d3b      	adds	r3, r7, #4
 8000998:	2200      	movs	r2, #0
 800099a:	601a      	str	r2, [r3, #0]
 800099c:	605a      	str	r2, [r3, #4]
 800099e:	609a      	str	r2, [r3, #8]
 80009a0:	60da      	str	r2, [r3, #12]
 80009a2:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009a4:	2004      	movs	r0, #4
 80009a6:	f7ff fd83 	bl	80004b0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009aa:	2001      	movs	r0, #1
 80009ac:	f7ff fd80 	bl	80004b0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009b0:	2002      	movs	r0, #2
 80009b2:	f7ff fd7d 	bl	80004b0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009b6:	2008      	movs	r0, #8
 80009b8:	f7ff fd7a 	bl	80004b0 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 80009bc:	2200      	movs	r2, #0
 80009be:	2123      	movs	r1, #35	; 0x23
 80009c0:	481c      	ldr	r0, [pc, #112]	; (8000a34 <MX_GPIO_Init+0xa4>)
 80009c2:	f000 fda5 	bl	8001510 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009c6:	2310      	movs	r3, #16
 80009c8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ca:	2300      	movs	r3, #0
 80009cc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009d2:	1d3b      	adds	r3, r7, #4
 80009d4:	4619      	mov	r1, r3
 80009d6:	4818      	ldr	r0, [pc, #96]	; (8000a38 <MX_GPIO_Init+0xa8>)
 80009d8:	f000 fc2a 	bl	8001230 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 80009dc:	2323      	movs	r3, #35	; 0x23
 80009de:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e0:	2301      	movs	r3, #1
 80009e2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e4:	2300      	movs	r3, #0
 80009e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e8:	2300      	movs	r3, #0
 80009ea:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ec:	1d3b      	adds	r3, r7, #4
 80009ee:	4619      	mov	r1, r3
 80009f0:	4810      	ldr	r0, [pc, #64]	; (8000a34 <MX_GPIO_Init+0xa4>)
 80009f2:	f000 fc1d 	bl	8001230 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 80009f6:	2303      	movs	r3, #3
 80009f8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009fa:	2300      	movs	r3, #0
 80009fc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a02:	1d3b      	adds	r3, r7, #4
 8000a04:	4619      	mov	r1, r3
 8000a06:	480d      	ldr	r0, [pc, #52]	; (8000a3c <MX_GPIO_Init+0xac>)
 8000a08:	f000 fc12 	bl	8001230 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000a0c:	23c0      	movs	r3, #192	; 0xc0
 8000a0e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a10:	2302      	movs	r3, #2
 8000a12:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a14:	2301      	movs	r3, #1
 8000a16:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a1c:	2307      	movs	r3, #7
 8000a1e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a20:	1d3b      	adds	r3, r7, #4
 8000a22:	4619      	mov	r1, r3
 8000a24:	4803      	ldr	r0, [pc, #12]	; (8000a34 <MX_GPIO_Init+0xa4>)
 8000a26:	f000 fc03 	bl	8001230 <HAL_GPIO_Init>

}
 8000a2a:	bf00      	nop
 8000a2c:	3718      	adds	r7, #24
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	48000400 	.word	0x48000400
 8000a38:	48000800 	.word	0x48000800
 8000a3c:	48000c00 	.word	0x48000c00

08000a40 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a04      	ldr	r2, [pc, #16]	; (8000a60 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d101      	bne.n	8000a56 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a52:	f000 fae1 	bl	8001018 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a56:	bf00      	nop
 8000a58:	3708      	adds	r7, #8
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	40012c00 	.word	0x40012c00

08000a64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a68:	b672      	cpsid	i
}
 8000a6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a6c:	e7fe      	b.n	8000a6c <Error_Handler+0x8>

08000a6e <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000a6e:	b480      	push	{r7}
 8000a70:	b085      	sub	sp, #20
 8000a72:	af00      	add	r7, sp, #0
 8000a74:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000a76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000a7c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	4313      	orrs	r3, r2
 8000a84:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000a86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	4013      	ands	r3, r2
 8000a90:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a92:	68fb      	ldr	r3, [r7, #12]
}
 8000a94:	bf00      	nop
 8000a96:	3714      	adds	r7, #20
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr

08000aa0 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b085      	sub	sp, #20
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000aa8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000aac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000aae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	4313      	orrs	r3, r2
 8000ab6:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000ab8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000abc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	4013      	ands	r3, r2
 8000ac2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ac4:	68fb      	ldr	r3, [r7, #12]
}
 8000ac6:	bf00      	nop
 8000ac8:	3714      	adds	r7, #20
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr

08000ad2 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM2
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	b085      	sub	sp, #20
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8000ada:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ade:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000ae0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	4313      	orrs	r3, r2
 8000ae8:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8000aea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000aee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	4013      	ands	r3, r2
 8000af4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000af6:	68fb      	ldr	r3, [r7, #12]
}
 8000af8:	bf00      	nop
 8000afa:	3714      	adds	r7, #20
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr

08000b04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */
  PWR_PVDTypeDef sConfigPVD = {0};
 8000b0a:	463b      	mov	r3, r7
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	605a      	str	r2, [r3, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b12:	2200      	movs	r2, #0
 8000b14:	210f      	movs	r1, #15
 8000b16:	f06f 0001 	mvn.w	r0, #1
 8000b1a:	f000 fb61 	bl	80011e0 <HAL_NVIC_SetPriority>

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_0;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	603b      	str	r3, [r7, #0]
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
 8000b22:	2300      	movs	r3, #0
 8000b24:	607b      	str	r3, [r7, #4]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 8000b26:	463b      	mov	r3, r7
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f000 febb 	bl	80018a4 <HAL_PWR_ConfigPVD>

  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 8000b2e:	f000 fefb 	bl	8001928 <HAL_PWR_EnablePVD>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b32:	bf00      	nop
 8000b34:	3708      	adds	r7, #8
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
	...

08000b3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b09c      	sub	sp, #112	; 0x70
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b44:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	605a      	str	r2, [r3, #4]
 8000b4e:	609a      	str	r2, [r3, #8]
 8000b50:	60da      	str	r2, [r3, #12]
 8000b52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b54:	f107 030c 	add.w	r3, r7, #12
 8000b58:	2250      	movs	r2, #80	; 0x50
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f007 faae 	bl	80080be <memset>
  if(huart->Instance==LPUART1)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	4a16      	ldr	r2, [pc, #88]	; (8000bc0 <HAL_UART_MspInit+0x84>)
 8000b68:	4293      	cmp	r3, r2
 8000b6a:	d124      	bne.n	8000bb6 <HAL_UART_MspInit+0x7a>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000b70:	2300      	movs	r3, #0
 8000b72:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b74:	f107 030c 	add.w	r3, r7, #12
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f002 fa67 	bl	800304c <HAL_RCCEx_PeriphCLKConfig>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b84:	f7ff ff6e 	bl	8000a64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000b88:	2001      	movs	r0, #1
 8000b8a:	f7ff ffa2 	bl	8000ad2 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8e:	2001      	movs	r0, #1
 8000b90:	f7ff ff6d 	bl	8000a6e <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b94:	230c      	movs	r3, #12
 8000b96:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b98:	2302      	movs	r3, #2
 8000b9a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000ba4:	2308      	movs	r3, #8
 8000ba6:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000bac:	4619      	mov	r1, r3
 8000bae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bb2:	f000 fb3d 	bl	8001230 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000bb6:	bf00      	nop
 8000bb8:	3770      	adds	r7, #112	; 0x70
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	40008000 	.word	0x40008000

08000bc4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b09c      	sub	sp, #112	; 0x70
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bcc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
 8000bd4:	605a      	str	r2, [r3, #4]
 8000bd6:	609a      	str	r2, [r3, #8]
 8000bd8:	60da      	str	r2, [r3, #12]
 8000bda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bdc:	f107 030c 	add.w	r3, r7, #12
 8000be0:	2250      	movs	r2, #80	; 0x50
 8000be2:	2100      	movs	r1, #0
 8000be4:	4618      	mov	r0, r3
 8000be6:	f007 fa6a 	bl	80080be <memset>
  if(hpcd->Instance==USB)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	4a1f      	ldr	r2, [pc, #124]	; (8000c6c <HAL_PCD_MspInit+0xa8>)
 8000bf0:	4293      	cmp	r3, r2
 8000bf2:	d136      	bne.n	8000c62 <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000bf4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bf8:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8000bfa:	2318      	movs	r3, #24
 8000bfc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8000bfe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c02:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8000c04:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000c08:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8000c0a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000c0e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8000c10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000c14:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000c16:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000c1a:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c1c:	f107 030c 	add.w	r3, r7, #12
 8000c20:	4618      	mov	r0, r3
 8000c22:	f002 fa13 	bl	800304c <HAL_RCCEx_PeriphCLKConfig>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8000c2c:	f7ff ff1a 	bl	8000a64 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c30:	2001      	movs	r0, #1
 8000c32:	f7ff ff1c 	bl	8000a6e <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000c36:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000c3a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c40:	2300      	movs	r3, #0
 8000c42:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c44:	2300      	movs	r3, #0
 8000c46:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000c48:	230a      	movs	r3, #10
 8000c4a:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000c50:	4619      	mov	r1, r3
 8000c52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c56:	f000 faeb 	bl	8001230 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000c5a:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000c5e:	f7ff ff1f 	bl	8000aa0 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000c62:	bf00      	nop
 8000c64:	3770      	adds	r7, #112	; 0x70
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	40006800 	.word	0x40006800

08000c70 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b085      	sub	sp, #20
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000c78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c7c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000c7e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	4313      	orrs	r3, r2
 8000c86:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000c88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c8c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	4013      	ands	r3, r2
 8000c92:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c94:	68fb      	ldr	r3, [r7, #12]
}
 8000c96:	bf00      	nop
 8000c98:	3714      	adds	r7, #20
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
	...

08000ca4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b08c      	sub	sp, #48	; 0x30
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000cac:	2300      	movs	r3, #0
 8000cae:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	6879      	ldr	r1, [r7, #4]
 8000cb8:	2019      	movs	r0, #25
 8000cba:	f000 fa91 	bl	80011e0 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000cbe:	2019      	movs	r0, #25
 8000cc0:	f000 faa8 	bl	8001214 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000cc4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000cc8:	f7ff ffd2 	bl	8000c70 <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ccc:	f107 0208 	add.w	r2, r7, #8
 8000cd0:	f107 030c 	add.w	r3, r7, #12
 8000cd4:	4611      	mov	r1, r2
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f001 ff26 	bl	8002b28 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000cdc:	f001 ff0e 	bl	8002afc <HAL_RCC_GetPCLK2Freq>
 8000ce0:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ce4:	4a12      	ldr	r2, [pc, #72]	; (8000d30 <HAL_InitTick+0x8c>)
 8000ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8000cea:	0c9b      	lsrs	r3, r3, #18
 8000cec:	3b01      	subs	r3, #1
 8000cee:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000cf0:	4b10      	ldr	r3, [pc, #64]	; (8000d34 <HAL_InitTick+0x90>)
 8000cf2:	4a11      	ldr	r2, [pc, #68]	; (8000d38 <HAL_InitTick+0x94>)
 8000cf4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000cf6:	4b0f      	ldr	r3, [pc, #60]	; (8000d34 <HAL_InitTick+0x90>)
 8000cf8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000cfc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000cfe:	4a0d      	ldr	r2, [pc, #52]	; (8000d34 <HAL_InitTick+0x90>)
 8000d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d02:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000d04:	4b0b      	ldr	r3, [pc, #44]	; (8000d34 <HAL_InitTick+0x90>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d0a:	4b0a      	ldr	r3, [pc, #40]	; (8000d34 <HAL_InitTick+0x90>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000d10:	4808      	ldr	r0, [pc, #32]	; (8000d34 <HAL_InitTick+0x90>)
 8000d12:	f002 fc28 	bl	8003566 <HAL_TIM_Base_Init>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d104      	bne.n	8000d26 <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000d1c:	4805      	ldr	r0, [pc, #20]	; (8000d34 <HAL_InitTick+0x90>)
 8000d1e:	f002 fc83 	bl	8003628 <HAL_TIM_Base_Start_IT>
 8000d22:	4603      	mov	r3, r0
 8000d24:	e000      	b.n	8000d28 <HAL_InitTick+0x84>
  }

  /* Return function status */
  return HAL_ERROR;
 8000d26:	2301      	movs	r3, #1
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	3730      	adds	r7, #48	; 0x30
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	431bde83 	.word	0x431bde83
 8000d34:	20000450 	.word	0x20000450
 8000d38:	40012c00 	.word	0x40012c00

08000d3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d40:	e7fe      	b.n	8000d40 <NMI_Handler+0x4>

08000d42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d42:	b480      	push	{r7}
 8000d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d46:	e7fe      	b.n	8000d46 <HardFault_Handler+0x4>

08000d48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d4c:	e7fe      	b.n	8000d4c <MemManage_Handler+0x4>

08000d4e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d52:	e7fe      	b.n	8000d52 <BusFault_Handler+0x4>

08000d54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d58:	e7fe      	b.n	8000d58 <UsageFault_Handler+0x4>

08000d5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d5a:	b480      	push	{r7}
 8000d5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d5e:	bf00      	nop
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr

08000d68 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d6c:	4802      	ldr	r0, [pc, #8]	; (8000d78 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000d6e:	f002 fca9 	bl	80036c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000d72:	bf00      	nop
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	20000450 	.word	0x20000450

08000d7c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b086      	sub	sp, #24
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	60f8      	str	r0, [r7, #12]
 8000d84:	60b9      	str	r1, [r7, #8]
 8000d86:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d88:	2300      	movs	r3, #0
 8000d8a:	617b      	str	r3, [r7, #20]
 8000d8c:	e00a      	b.n	8000da4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d8e:	f3af 8000 	nop.w
 8000d92:	4601      	mov	r1, r0
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	1c5a      	adds	r2, r3, #1
 8000d98:	60ba      	str	r2, [r7, #8]
 8000d9a:	b2ca      	uxtb	r2, r1
 8000d9c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	3301      	adds	r3, #1
 8000da2:	617b      	str	r3, [r7, #20]
 8000da4:	697a      	ldr	r2, [r7, #20]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	429a      	cmp	r2, r3
 8000daa:	dbf0      	blt.n	8000d8e <_read+0x12>
	}

return len;
 8000dac:	687b      	ldr	r3, [r7, #4]
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3718      	adds	r7, #24
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}

08000db6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000db6:	b580      	push	{r7, lr}
 8000db8:	b086      	sub	sp, #24
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	60f8      	str	r0, [r7, #12]
 8000dbe:	60b9      	str	r1, [r7, #8]
 8000dc0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	617b      	str	r3, [r7, #20]
 8000dc6:	e009      	b.n	8000ddc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	1c5a      	adds	r2, r3, #1
 8000dcc:	60ba      	str	r2, [r7, #8]
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	3301      	adds	r3, #1
 8000dda:	617b      	str	r3, [r7, #20]
 8000ddc:	697a      	ldr	r2, [r7, #20]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	429a      	cmp	r2, r3
 8000de2:	dbf1      	blt.n	8000dc8 <_write+0x12>
	}
	return len;
 8000de4:	687b      	ldr	r3, [r7, #4]
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3718      	adds	r7, #24
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}

08000dee <_close>:

int _close(int file)
{
 8000dee:	b480      	push	{r7}
 8000df0:	b083      	sub	sp, #12
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	6078      	str	r0, [r7, #4]
	return -1;
 8000df6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	370c      	adds	r7, #12
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr

08000e06 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e06:	b480      	push	{r7}
 8000e08:	b083      	sub	sp, #12
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	6078      	str	r0, [r7, #4]
 8000e0e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e16:	605a      	str	r2, [r3, #4]
	return 0;
 8000e18:	2300      	movs	r3, #0
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	370c      	adds	r7, #12
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr

08000e26 <_isatty>:

int _isatty(int file)
{
 8000e26:	b480      	push	{r7}
 8000e28:	b083      	sub	sp, #12
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	6078      	str	r0, [r7, #4]
	return 1;
 8000e2e:	2301      	movs	r3, #1
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	370c      	adds	r7, #12
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr

08000e3c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b085      	sub	sp, #20
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	60f8      	str	r0, [r7, #12]
 8000e44:	60b9      	str	r1, [r7, #8]
 8000e46:	607a      	str	r2, [r7, #4]
	return 0;
 8000e48:	2300      	movs	r3, #0
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3714      	adds	r7, #20
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
	...

08000e58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b086      	sub	sp, #24
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e60:	4a14      	ldr	r2, [pc, #80]	; (8000eb4 <_sbrk+0x5c>)
 8000e62:	4b15      	ldr	r3, [pc, #84]	; (8000eb8 <_sbrk+0x60>)
 8000e64:	1ad3      	subs	r3, r2, r3
 8000e66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e6c:	4b13      	ldr	r3, [pc, #76]	; (8000ebc <_sbrk+0x64>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d102      	bne.n	8000e7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e74:	4b11      	ldr	r3, [pc, #68]	; (8000ebc <_sbrk+0x64>)
 8000e76:	4a12      	ldr	r2, [pc, #72]	; (8000ec0 <_sbrk+0x68>)
 8000e78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e7a:	4b10      	ldr	r3, [pc, #64]	; (8000ebc <_sbrk+0x64>)
 8000e7c:	681a      	ldr	r2, [r3, #0]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4413      	add	r3, r2
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	429a      	cmp	r2, r3
 8000e86:	d207      	bcs.n	8000e98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e88:	f006 ffe8 	bl	8007e5c <__errno>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	220c      	movs	r2, #12
 8000e90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e92:	f04f 33ff 	mov.w	r3, #4294967295
 8000e96:	e009      	b.n	8000eac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e98:	4b08      	ldr	r3, [pc, #32]	; (8000ebc <_sbrk+0x64>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e9e:	4b07      	ldr	r3, [pc, #28]	; (8000ebc <_sbrk+0x64>)
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4413      	add	r3, r2
 8000ea6:	4a05      	ldr	r2, [pc, #20]	; (8000ebc <_sbrk+0x64>)
 8000ea8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eaa:	68fb      	ldr	r3, [r7, #12]
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	3718      	adds	r7, #24
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	20030000 	.word	0x20030000
 8000eb8:	00000400 	.word	0x00000400
 8000ebc:	2000049c 	.word	0x2000049c
 8000ec0:	20001ec8 	.word	0x20001ec8

08000ec4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8000ec8:	4b24      	ldr	r3, [pc, #144]	; (8000f5c <SystemInit+0x98>)
 8000eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ece:	4a23      	ldr	r2, [pc, #140]	; (8000f5c <SystemInit+0x98>)
 8000ed0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ed4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000ed8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ee2:	f043 0301 	orr.w	r3, r3, #1
 8000ee6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000ee8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000eec:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000ef0:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000ef2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000efc:	4b18      	ldr	r3, [pc, #96]	; (8000f60 <SystemInit+0x9c>)
 8000efe:	4013      	ands	r3, r2
 8000f00:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000f02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f0a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f0e:	f023 0305 	bic.w	r3, r3, #5
 8000f12:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000f16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000f1e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f22:	f023 0301 	bic.w	r3, r3, #1
 8000f26:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000f2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f2e:	4a0d      	ldr	r2, [pc, #52]	; (8000f64 <SystemInit+0xa0>)
 8000f30:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000f32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f36:	4a0b      	ldr	r2, [pc, #44]	; (8000f64 <SystemInit+0xa0>)
 8000f38:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f44:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f48:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000f4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f4e:	2200      	movs	r2, #0
 8000f50:	619a      	str	r2, [r3, #24]
}
 8000f52:	bf00      	nop
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr
 8000f5c:	e000ed00 	.word	0xe000ed00
 8000f60:	faf6fefb 	.word	0xfaf6fefb
 8000f64:	22041000 	.word	0x22041000

08000f68 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000f68:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f6a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f6c:	3304      	adds	r3, #4

08000f6e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f6e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f70:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000f72:	d3f9      	bcc.n	8000f68 <CopyDataInit>
  bx lr
 8000f74:	4770      	bx	lr

08000f76 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000f76:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000f78:	3004      	adds	r0, #4

08000f7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000f7a:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000f7c:	d3fb      	bcc.n	8000f76 <FillZerobss>
  bx lr
 8000f7e:	4770      	bx	lr

08000f80 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f80:	480c      	ldr	r0, [pc, #48]	; (8000fb4 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8000f82:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f84:	f7ff ff9e 	bl	8000ec4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000f88:	480b      	ldr	r0, [pc, #44]	; (8000fb8 <LoopForever+0x8>)
 8000f8a:	490c      	ldr	r1, [pc, #48]	; (8000fbc <LoopForever+0xc>)
 8000f8c:	4a0c      	ldr	r2, [pc, #48]	; (8000fc0 <LoopForever+0x10>)
 8000f8e:	2300      	movs	r3, #0
 8000f90:	f7ff ffed 	bl	8000f6e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000f94:	480b      	ldr	r0, [pc, #44]	; (8000fc4 <LoopForever+0x14>)
 8000f96:	490c      	ldr	r1, [pc, #48]	; (8000fc8 <LoopForever+0x18>)
 8000f98:	2300      	movs	r3, #0
 8000f9a:	f7ff ffee 	bl	8000f7a <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000f9e:	480b      	ldr	r0, [pc, #44]	; (8000fcc <LoopForever+0x1c>)
 8000fa0:	490b      	ldr	r1, [pc, #44]	; (8000fd0 <LoopForever+0x20>)
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	f7ff ffe9 	bl	8000f7a <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000fa8:	f007 f854 	bl	8008054 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8000fac:	f7ff fa9a 	bl	80004e4 <main>

08000fb0 <LoopForever>:

LoopForever:
  b LoopForever
 8000fb0:	e7fe      	b.n	8000fb0 <LoopForever>
 8000fb2:	0000      	.short	0x0000
  ldr   r0, =_estack
 8000fb4:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000fb8:	20000004 	.word	0x20000004
 8000fbc:	20000078 	.word	0x20000078
 8000fc0:	08008bfc 	.word	0x08008bfc
  INIT_BSS _sbss, _ebss
 8000fc4:	20000078 	.word	0x20000078
 8000fc8:	20001ec4 	.word	0x20001ec4
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000fcc:	20030000 	.word	0x20030000
 8000fd0:	20030000 	.word	0x20030000

08000fd4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fd4:	e7fe      	b.n	8000fd4 <ADC1_IRQHandler>
	...

08000fd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fe2:	4b0c      	ldr	r3, [pc, #48]	; (8001014 <HAL_Init+0x3c>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a0b      	ldr	r2, [pc, #44]	; (8001014 <HAL_Init+0x3c>)
 8000fe8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fec:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fee:	2003      	movs	r0, #3
 8000ff0:	f000 f8eb 	bl	80011ca <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ff4:	200f      	movs	r0, #15
 8000ff6:	f7ff fe55 	bl	8000ca4 <HAL_InitTick>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d002      	beq.n	8001006 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001000:	2301      	movs	r3, #1
 8001002:	71fb      	strb	r3, [r7, #7]
 8001004:	e001      	b.n	800100a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001006:	f7ff fd7d 	bl	8000b04 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800100a:	79fb      	ldrb	r3, [r7, #7]
}
 800100c:	4618      	mov	r0, r3
 800100e:	3708      	adds	r7, #8
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	58004000 	.word	0x58004000

08001018 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800101c:	4b06      	ldr	r3, [pc, #24]	; (8001038 <HAL_IncTick+0x20>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	461a      	mov	r2, r3
 8001022:	4b06      	ldr	r3, [pc, #24]	; (800103c <HAL_IncTick+0x24>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4413      	add	r3, r2
 8001028:	4a04      	ldr	r2, [pc, #16]	; (800103c <HAL_IncTick+0x24>)
 800102a:	6013      	str	r3, [r2, #0]
}
 800102c:	bf00      	nop
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	2000000c 	.word	0x2000000c
 800103c:	200004a0 	.word	0x200004a0

08001040 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  return uwTick;
 8001044:	4b03      	ldr	r3, [pc, #12]	; (8001054 <HAL_GetTick+0x14>)
 8001046:	681b      	ldr	r3, [r3, #0]
}
 8001048:	4618      	mov	r0, r3
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	200004a0 	.word	0x200004a0

08001058 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 800105c:	4b03      	ldr	r3, [pc, #12]	; (800106c <HAL_GetTickPrio+0x14>)
 800105e:	681b      	ldr	r3, [r3, #0]
}
 8001060:	4618      	mov	r0, r3
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	20000008 	.word	0x20000008

08001070 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001070:	b480      	push	{r7}
 8001072:	b085      	sub	sp, #20
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	f003 0307 	and.w	r3, r3, #7
 800107e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001080:	4b0c      	ldr	r3, [pc, #48]	; (80010b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001086:	68ba      	ldr	r2, [r7, #8]
 8001088:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800108c:	4013      	ands	r3, r2
 800108e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001098:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800109c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010a2:	4a04      	ldr	r2, [pc, #16]	; (80010b4 <__NVIC_SetPriorityGrouping+0x44>)
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	60d3      	str	r3, [r2, #12]
}
 80010a8:	bf00      	nop
 80010aa:	3714      	adds	r7, #20
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr
 80010b4:	e000ed00 	.word	0xe000ed00

080010b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010bc:	4b04      	ldr	r3, [pc, #16]	; (80010d0 <__NVIC_GetPriorityGrouping+0x18>)
 80010be:	68db      	ldr	r3, [r3, #12]
 80010c0:	0a1b      	lsrs	r3, r3, #8
 80010c2:	f003 0307 	and.w	r3, r3, #7
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr
 80010d0:	e000ed00 	.word	0xe000ed00

080010d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	4603      	mov	r3, r0
 80010dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	db0b      	blt.n	80010fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010e6:	79fb      	ldrb	r3, [r7, #7]
 80010e8:	f003 021f 	and.w	r2, r3, #31
 80010ec:	4907      	ldr	r1, [pc, #28]	; (800110c <__NVIC_EnableIRQ+0x38>)
 80010ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f2:	095b      	lsrs	r3, r3, #5
 80010f4:	2001      	movs	r0, #1
 80010f6:	fa00 f202 	lsl.w	r2, r0, r2
 80010fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010fe:	bf00      	nop
 8001100:	370c      	adds	r7, #12
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	e000e100 	.word	0xe000e100

08001110 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	6039      	str	r1, [r7, #0]
 800111a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800111c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001120:	2b00      	cmp	r3, #0
 8001122:	db0a      	blt.n	800113a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	b2da      	uxtb	r2, r3
 8001128:	490c      	ldr	r1, [pc, #48]	; (800115c <__NVIC_SetPriority+0x4c>)
 800112a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112e:	0112      	lsls	r2, r2, #4
 8001130:	b2d2      	uxtb	r2, r2
 8001132:	440b      	add	r3, r1
 8001134:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001138:	e00a      	b.n	8001150 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	b2da      	uxtb	r2, r3
 800113e:	4908      	ldr	r1, [pc, #32]	; (8001160 <__NVIC_SetPriority+0x50>)
 8001140:	79fb      	ldrb	r3, [r7, #7]
 8001142:	f003 030f 	and.w	r3, r3, #15
 8001146:	3b04      	subs	r3, #4
 8001148:	0112      	lsls	r2, r2, #4
 800114a:	b2d2      	uxtb	r2, r2
 800114c:	440b      	add	r3, r1
 800114e:	761a      	strb	r2, [r3, #24]
}
 8001150:	bf00      	nop
 8001152:	370c      	adds	r7, #12
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr
 800115c:	e000e100 	.word	0xe000e100
 8001160:	e000ed00 	.word	0xe000ed00

08001164 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001164:	b480      	push	{r7}
 8001166:	b089      	sub	sp, #36	; 0x24
 8001168:	af00      	add	r7, sp, #0
 800116a:	60f8      	str	r0, [r7, #12]
 800116c:	60b9      	str	r1, [r7, #8]
 800116e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	f003 0307 	and.w	r3, r3, #7
 8001176:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	f1c3 0307 	rsb	r3, r3, #7
 800117e:	2b04      	cmp	r3, #4
 8001180:	bf28      	it	cs
 8001182:	2304      	movcs	r3, #4
 8001184:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	3304      	adds	r3, #4
 800118a:	2b06      	cmp	r3, #6
 800118c:	d902      	bls.n	8001194 <NVIC_EncodePriority+0x30>
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	3b03      	subs	r3, #3
 8001192:	e000      	b.n	8001196 <NVIC_EncodePriority+0x32>
 8001194:	2300      	movs	r3, #0
 8001196:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001198:	f04f 32ff 	mov.w	r2, #4294967295
 800119c:	69bb      	ldr	r3, [r7, #24]
 800119e:	fa02 f303 	lsl.w	r3, r2, r3
 80011a2:	43da      	mvns	r2, r3
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	401a      	ands	r2, r3
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011ac:	f04f 31ff 	mov.w	r1, #4294967295
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	fa01 f303 	lsl.w	r3, r1, r3
 80011b6:	43d9      	mvns	r1, r3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011bc:	4313      	orrs	r3, r2
         );
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3724      	adds	r7, #36	; 0x24
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr

080011ca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b082      	sub	sp, #8
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011d2:	6878      	ldr	r0, [r7, #4]
 80011d4:	f7ff ff4c 	bl	8001070 <__NVIC_SetPriorityGrouping>
}
 80011d8:	bf00      	nop
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}

080011e0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b086      	sub	sp, #24
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	4603      	mov	r3, r0
 80011e8:	60b9      	str	r1, [r7, #8]
 80011ea:	607a      	str	r2, [r7, #4]
 80011ec:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011ee:	f7ff ff63 	bl	80010b8 <__NVIC_GetPriorityGrouping>
 80011f2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011f4:	687a      	ldr	r2, [r7, #4]
 80011f6:	68b9      	ldr	r1, [r7, #8]
 80011f8:	6978      	ldr	r0, [r7, #20]
 80011fa:	f7ff ffb3 	bl	8001164 <NVIC_EncodePriority>
 80011fe:	4602      	mov	r2, r0
 8001200:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001204:	4611      	mov	r1, r2
 8001206:	4618      	mov	r0, r3
 8001208:	f7ff ff82 	bl	8001110 <__NVIC_SetPriority>
}
 800120c:	bf00      	nop
 800120e:	3718      	adds	r7, #24
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}

08001214 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	4603      	mov	r3, r0
 800121c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800121e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff ff56 	bl	80010d4 <__NVIC_EnableIRQ>
}
 8001228:	bf00      	nop
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}

08001230 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001230:	b480      	push	{r7}
 8001232:	b087      	sub	sp, #28
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800123a:	2300      	movs	r3, #0
 800123c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800123e:	e14c      	b.n	80014da <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	2101      	movs	r1, #1
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	fa01 f303 	lsl.w	r3, r1, r3
 800124c:	4013      	ands	r3, r2
 800124e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	2b00      	cmp	r3, #0
 8001254:	f000 813e 	beq.w	80014d4 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f003 0303 	and.w	r3, r3, #3
 8001260:	2b01      	cmp	r3, #1
 8001262:	d005      	beq.n	8001270 <HAL_GPIO_Init+0x40>
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f003 0303 	and.w	r3, r3, #3
 800126c:	2b02      	cmp	r3, #2
 800126e:	d130      	bne.n	80012d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	689b      	ldr	r3, [r3, #8]
 8001274:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	005b      	lsls	r3, r3, #1
 800127a:	2203      	movs	r2, #3
 800127c:	fa02 f303 	lsl.w	r3, r2, r3
 8001280:	43db      	mvns	r3, r3
 8001282:	693a      	ldr	r2, [r7, #16]
 8001284:	4013      	ands	r3, r2
 8001286:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	68da      	ldr	r2, [r3, #12]
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	005b      	lsls	r3, r3, #1
 8001290:	fa02 f303 	lsl.w	r3, r2, r3
 8001294:	693a      	ldr	r2, [r7, #16]
 8001296:	4313      	orrs	r3, r2
 8001298:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	693a      	ldr	r2, [r7, #16]
 800129e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012a6:	2201      	movs	r2, #1
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	fa02 f303 	lsl.w	r3, r2, r3
 80012ae:	43db      	mvns	r3, r3
 80012b0:	693a      	ldr	r2, [r7, #16]
 80012b2:	4013      	ands	r3, r2
 80012b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	091b      	lsrs	r3, r3, #4
 80012bc:	f003 0201 	and.w	r2, r3, #1
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	fa02 f303 	lsl.w	r3, r2, r3
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	4313      	orrs	r3, r2
 80012ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	693a      	ldr	r2, [r7, #16]
 80012d0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	f003 0303 	and.w	r3, r3, #3
 80012da:	2b03      	cmp	r3, #3
 80012dc:	d017      	beq.n	800130e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	68db      	ldr	r3, [r3, #12]
 80012e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	005b      	lsls	r3, r3, #1
 80012e8:	2203      	movs	r2, #3
 80012ea:	fa02 f303 	lsl.w	r3, r2, r3
 80012ee:	43db      	mvns	r3, r3
 80012f0:	693a      	ldr	r2, [r7, #16]
 80012f2:	4013      	ands	r3, r2
 80012f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	689a      	ldr	r2, [r3, #8]
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	005b      	lsls	r3, r3, #1
 80012fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001302:	693a      	ldr	r2, [r7, #16]
 8001304:	4313      	orrs	r3, r2
 8001306:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	693a      	ldr	r2, [r7, #16]
 800130c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	f003 0303 	and.w	r3, r3, #3
 8001316:	2b02      	cmp	r3, #2
 8001318:	d123      	bne.n	8001362 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	08da      	lsrs	r2, r3, #3
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	3208      	adds	r2, #8
 8001322:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001326:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	f003 0307 	and.w	r3, r3, #7
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	220f      	movs	r2, #15
 8001332:	fa02 f303 	lsl.w	r3, r2, r3
 8001336:	43db      	mvns	r3, r3
 8001338:	693a      	ldr	r2, [r7, #16]
 800133a:	4013      	ands	r3, r2
 800133c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	691a      	ldr	r2, [r3, #16]
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	f003 0307 	and.w	r3, r3, #7
 8001348:	009b      	lsls	r3, r3, #2
 800134a:	fa02 f303 	lsl.w	r3, r2, r3
 800134e:	693a      	ldr	r2, [r7, #16]
 8001350:	4313      	orrs	r3, r2
 8001352:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	08da      	lsrs	r2, r3, #3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	3208      	adds	r2, #8
 800135c:	6939      	ldr	r1, [r7, #16]
 800135e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	005b      	lsls	r3, r3, #1
 800136c:	2203      	movs	r2, #3
 800136e:	fa02 f303 	lsl.w	r3, r2, r3
 8001372:	43db      	mvns	r3, r3
 8001374:	693a      	ldr	r2, [r7, #16]
 8001376:	4013      	ands	r3, r2
 8001378:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	f003 0203 	and.w	r2, r3, #3
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	005b      	lsls	r3, r3, #1
 8001386:	fa02 f303 	lsl.w	r3, r2, r3
 800138a:	693a      	ldr	r2, [r7, #16]
 800138c:	4313      	orrs	r3, r2
 800138e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	693a      	ldr	r2, [r7, #16]
 8001394:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800139e:	2b00      	cmp	r3, #0
 80013a0:	f000 8098 	beq.w	80014d4 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80013a4:	4a54      	ldr	r2, [pc, #336]	; (80014f8 <HAL_GPIO_Init+0x2c8>)
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	089b      	lsrs	r3, r3, #2
 80013aa:	3302      	adds	r3, #2
 80013ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	f003 0303 	and.w	r3, r3, #3
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	220f      	movs	r2, #15
 80013bc:	fa02 f303 	lsl.w	r3, r2, r3
 80013c0:	43db      	mvns	r3, r3
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	4013      	ands	r3, r2
 80013c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80013ce:	d019      	beq.n	8001404 <HAL_GPIO_Init+0x1d4>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	4a4a      	ldr	r2, [pc, #296]	; (80014fc <HAL_GPIO_Init+0x2cc>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d013      	beq.n	8001400 <HAL_GPIO_Init+0x1d0>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	4a49      	ldr	r2, [pc, #292]	; (8001500 <HAL_GPIO_Init+0x2d0>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d00d      	beq.n	80013fc <HAL_GPIO_Init+0x1cc>
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	4a48      	ldr	r2, [pc, #288]	; (8001504 <HAL_GPIO_Init+0x2d4>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d007      	beq.n	80013f8 <HAL_GPIO_Init+0x1c8>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	4a47      	ldr	r2, [pc, #284]	; (8001508 <HAL_GPIO_Init+0x2d8>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d101      	bne.n	80013f4 <HAL_GPIO_Init+0x1c4>
 80013f0:	2304      	movs	r3, #4
 80013f2:	e008      	b.n	8001406 <HAL_GPIO_Init+0x1d6>
 80013f4:	2307      	movs	r3, #7
 80013f6:	e006      	b.n	8001406 <HAL_GPIO_Init+0x1d6>
 80013f8:	2303      	movs	r3, #3
 80013fa:	e004      	b.n	8001406 <HAL_GPIO_Init+0x1d6>
 80013fc:	2302      	movs	r3, #2
 80013fe:	e002      	b.n	8001406 <HAL_GPIO_Init+0x1d6>
 8001400:	2301      	movs	r3, #1
 8001402:	e000      	b.n	8001406 <HAL_GPIO_Init+0x1d6>
 8001404:	2300      	movs	r3, #0
 8001406:	697a      	ldr	r2, [r7, #20]
 8001408:	f002 0203 	and.w	r2, r2, #3
 800140c:	0092      	lsls	r2, r2, #2
 800140e:	4093      	lsls	r3, r2
 8001410:	693a      	ldr	r2, [r7, #16]
 8001412:	4313      	orrs	r3, r2
 8001414:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001416:	4938      	ldr	r1, [pc, #224]	; (80014f8 <HAL_GPIO_Init+0x2c8>)
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	089b      	lsrs	r3, r3, #2
 800141c:	3302      	adds	r3, #2
 800141e:	693a      	ldr	r2, [r7, #16]
 8001420:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001424:	4b39      	ldr	r3, [pc, #228]	; (800150c <HAL_GPIO_Init+0x2dc>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	43db      	mvns	r3, r3
 800142e:	693a      	ldr	r2, [r7, #16]
 8001430:	4013      	ands	r3, r2
 8001432:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800143c:	2b00      	cmp	r3, #0
 800143e:	d003      	beq.n	8001448 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001440:	693a      	ldr	r2, [r7, #16]
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	4313      	orrs	r3, r2
 8001446:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001448:	4a30      	ldr	r2, [pc, #192]	; (800150c <HAL_GPIO_Init+0x2dc>)
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800144e:	4b2f      	ldr	r3, [pc, #188]	; (800150c <HAL_GPIO_Init+0x2dc>)
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	43db      	mvns	r3, r3
 8001458:	693a      	ldr	r2, [r7, #16]
 800145a:	4013      	ands	r3, r2
 800145c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001466:	2b00      	cmp	r3, #0
 8001468:	d003      	beq.n	8001472 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800146a:	693a      	ldr	r2, [r7, #16]
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	4313      	orrs	r3, r2
 8001470:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001472:	4a26      	ldr	r2, [pc, #152]	; (800150c <HAL_GPIO_Init+0x2dc>)
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001478:	4b24      	ldr	r3, [pc, #144]	; (800150c <HAL_GPIO_Init+0x2dc>)
 800147a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800147e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	43db      	mvns	r3, r3
 8001484:	693a      	ldr	r2, [r7, #16]
 8001486:	4013      	ands	r3, r2
 8001488:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001492:	2b00      	cmp	r3, #0
 8001494:	d003      	beq.n	800149e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8001496:	693a      	ldr	r2, [r7, #16]
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	4313      	orrs	r3, r2
 800149c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800149e:	4a1b      	ldr	r2, [pc, #108]	; (800150c <HAL_GPIO_Init+0x2dc>)
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80014a6:	4b19      	ldr	r3, [pc, #100]	; (800150c <HAL_GPIO_Init+0x2dc>)
 80014a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80014ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	43db      	mvns	r3, r3
 80014b2:	693a      	ldr	r2, [r7, #16]
 80014b4:	4013      	ands	r3, r2
 80014b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d003      	beq.n	80014cc <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80014c4:	693a      	ldr	r2, [r7, #16]
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	4313      	orrs	r3, r2
 80014ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80014cc:	4a0f      	ldr	r2, [pc, #60]	; (800150c <HAL_GPIO_Init+0x2dc>)
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	3301      	adds	r3, #1
 80014d8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	fa22 f303 	lsr.w	r3, r2, r3
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	f47f aeab 	bne.w	8001240 <HAL_GPIO_Init+0x10>
  }
}
 80014ea:	bf00      	nop
 80014ec:	bf00      	nop
 80014ee:	371c      	adds	r7, #28
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr
 80014f8:	40010000 	.word	0x40010000
 80014fc:	48000400 	.word	0x48000400
 8001500:	48000800 	.word	0x48000800
 8001504:	48000c00 	.word	0x48000c00
 8001508:	48001000 	.word	0x48001000
 800150c:	58000800 	.word	0x58000800

08001510 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	460b      	mov	r3, r1
 800151a:	807b      	strh	r3, [r7, #2]
 800151c:	4613      	mov	r3, r2
 800151e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001520:	787b      	ldrb	r3, [r7, #1]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d003      	beq.n	800152e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001526:	887a      	ldrh	r2, [r7, #2]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800152c:	e002      	b.n	8001534 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800152e:	887a      	ldrh	r2, [r7, #2]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001534:	bf00      	nop
 8001536:	370c      	adds	r7, #12
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr

08001540 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001540:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001542:	b08b      	sub	sp, #44	; 0x2c
 8001544:	af06      	add	r7, sp, #24
 8001546:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d101      	bne.n	8001552 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e0dd      	b.n	800170e <HAL_PCD_Init+0x1ce>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	f893 32ad 	ldrb.w	r3, [r3, #685]	; 0x2ad
 8001558:	b2db      	uxtb	r3, r3
 800155a:	2b00      	cmp	r3, #0
 800155c:	d106      	bne.n	800156c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2200      	movs	r2, #0
 8001562:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f7ff fb2c 	bl	8000bc4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2203      	movs	r2, #3
 8001570:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad

  /* DMA Not supported for FS instance, Force to Zero */
  hpcd->Init.dma_enable = 0U;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2200      	movs	r2, #0
 8001578:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4618      	mov	r0, r3
 8001580:	f002 ffb8 	bl	80044f4 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001584:	2300      	movs	r3, #0
 8001586:	73fb      	strb	r3, [r7, #15]
 8001588:	e04d      	b.n	8001626 <HAL_PCD_Init+0xe6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800158a:	7bfb      	ldrb	r3, [r7, #15]
 800158c:	6879      	ldr	r1, [r7, #4]
 800158e:	1c5a      	adds	r2, r3, #1
 8001590:	4613      	mov	r3, r2
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	4413      	add	r3, r2
 8001596:	00db      	lsls	r3, r3, #3
 8001598:	440b      	add	r3, r1
 800159a:	3305      	adds	r3, #5
 800159c:	2201      	movs	r2, #1
 800159e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80015a0:	7bfb      	ldrb	r3, [r7, #15]
 80015a2:	6879      	ldr	r1, [r7, #4]
 80015a4:	1c5a      	adds	r2, r3, #1
 80015a6:	4613      	mov	r3, r2
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	4413      	add	r3, r2
 80015ac:	00db      	lsls	r3, r3, #3
 80015ae:	440b      	add	r3, r1
 80015b0:	3304      	adds	r3, #4
 80015b2:	7bfa      	ldrb	r2, [r7, #15]
 80015b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80015b6:	7bfa      	ldrb	r2, [r7, #15]
 80015b8:	7bfb      	ldrb	r3, [r7, #15]
 80015ba:	b298      	uxth	r0, r3
 80015bc:	6879      	ldr	r1, [r7, #4]
 80015be:	4613      	mov	r3, r2
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	4413      	add	r3, r2
 80015c4:	00db      	lsls	r3, r3, #3
 80015c6:	440b      	add	r3, r1
 80015c8:	333a      	adds	r3, #58	; 0x3a
 80015ca:	4602      	mov	r2, r0
 80015cc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80015ce:	7bfb      	ldrb	r3, [r7, #15]
 80015d0:	6879      	ldr	r1, [r7, #4]
 80015d2:	1c5a      	adds	r2, r3, #1
 80015d4:	4613      	mov	r3, r2
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	4413      	add	r3, r2
 80015da:	00db      	lsls	r3, r3, #3
 80015dc:	440b      	add	r3, r1
 80015de:	3307      	adds	r3, #7
 80015e0:	2200      	movs	r2, #0
 80015e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80015e4:	7bfa      	ldrb	r2, [r7, #15]
 80015e6:	6879      	ldr	r1, [r7, #4]
 80015e8:	4613      	mov	r3, r2
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	4413      	add	r3, r2
 80015ee:	00db      	lsls	r3, r3, #3
 80015f0:	440b      	add	r3, r1
 80015f2:	333c      	adds	r3, #60	; 0x3c
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80015f8:	7bfa      	ldrb	r2, [r7, #15]
 80015fa:	6879      	ldr	r1, [r7, #4]
 80015fc:	4613      	mov	r3, r2
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	4413      	add	r3, r2
 8001602:	00db      	lsls	r3, r3, #3
 8001604:	440b      	add	r3, r1
 8001606:	3340      	adds	r3, #64	; 0x40
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800160c:	7bfa      	ldrb	r2, [r7, #15]
 800160e:	6879      	ldr	r1, [r7, #4]
 8001610:	4613      	mov	r3, r2
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	4413      	add	r3, r2
 8001616:	00db      	lsls	r3, r3, #3
 8001618:	440b      	add	r3, r1
 800161a:	3344      	adds	r3, #68	; 0x44
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001620:	7bfb      	ldrb	r3, [r7, #15]
 8001622:	3301      	adds	r3, #1
 8001624:	73fb      	strb	r3, [r7, #15]
 8001626:	7bfa      	ldrb	r2, [r7, #15]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	429a      	cmp	r2, r3
 800162e:	d3ac      	bcc.n	800158a <HAL_PCD_Init+0x4a>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001630:	2300      	movs	r3, #0
 8001632:	73fb      	strb	r3, [r7, #15]
 8001634:	e044      	b.n	80016c0 <HAL_PCD_Init+0x180>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001636:	7bfa      	ldrb	r2, [r7, #15]
 8001638:	6879      	ldr	r1, [r7, #4]
 800163a:	4613      	mov	r3, r2
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	4413      	add	r3, r2
 8001640:	00db      	lsls	r3, r3, #3
 8001642:	440b      	add	r3, r1
 8001644:	f203 136d 	addw	r3, r3, #365	; 0x16d
 8001648:	2200      	movs	r2, #0
 800164a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800164c:	7bfa      	ldrb	r2, [r7, #15]
 800164e:	6879      	ldr	r1, [r7, #4]
 8001650:	4613      	mov	r3, r2
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	4413      	add	r3, r2
 8001656:	00db      	lsls	r3, r3, #3
 8001658:	440b      	add	r3, r1
 800165a:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 800165e:	7bfa      	ldrb	r2, [r7, #15]
 8001660:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001662:	7bfa      	ldrb	r2, [r7, #15]
 8001664:	6879      	ldr	r1, [r7, #4]
 8001666:	4613      	mov	r3, r2
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	4413      	add	r3, r2
 800166c:	00db      	lsls	r3, r3, #3
 800166e:	440b      	add	r3, r1
 8001670:	f203 136f 	addw	r3, r3, #367	; 0x16f
 8001674:	2200      	movs	r2, #0
 8001676:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001678:	7bfa      	ldrb	r2, [r7, #15]
 800167a:	6879      	ldr	r1, [r7, #4]
 800167c:	4613      	mov	r3, r2
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	4413      	add	r3, r2
 8001682:	00db      	lsls	r3, r3, #3
 8001684:	440b      	add	r3, r1
 8001686:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800168a:	2200      	movs	r2, #0
 800168c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800168e:	7bfa      	ldrb	r2, [r7, #15]
 8001690:	6879      	ldr	r1, [r7, #4]
 8001692:	4613      	mov	r3, r2
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	4413      	add	r3, r2
 8001698:	00db      	lsls	r3, r3, #3
 800169a:	440b      	add	r3, r1
 800169c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80016a4:	7bfa      	ldrb	r2, [r7, #15]
 80016a6:	6879      	ldr	r1, [r7, #4]
 80016a8:	4613      	mov	r3, r2
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	4413      	add	r3, r2
 80016ae:	00db      	lsls	r3, r3, #3
 80016b0:	440b      	add	r3, r1
 80016b2:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80016b6:	2200      	movs	r2, #0
 80016b8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016ba:	7bfb      	ldrb	r3, [r7, #15]
 80016bc:	3301      	adds	r3, #1
 80016be:	73fb      	strb	r3, [r7, #15]
 80016c0:	7bfa      	ldrb	r2, [r7, #15]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	429a      	cmp	r2, r3
 80016c8:	d3b5      	bcc.n	8001636 <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	603b      	str	r3, [r7, #0]
 80016d0:	687e      	ldr	r6, [r7, #4]
 80016d2:	466d      	mov	r5, sp
 80016d4:	f106 0410 	add.w	r4, r6, #16
 80016d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016dc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80016e0:	e885 0003 	stmia.w	r5, {r0, r1}
 80016e4:	1d33      	adds	r3, r6, #4
 80016e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016e8:	6838      	ldr	r0, [r7, #0]
 80016ea:	f002 ff1e 	bl	800452a <USB_DevInit>

  hpcd->USB_Address = 0U;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2200      	movs	r2, #0
 80016f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  hpcd->State = HAL_PCD_STATE_READY;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2201      	movs	r2, #1
 80016fa:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	69db      	ldr	r3, [r3, #28]
 8001702:	2b01      	cmp	r3, #1
 8001704:	d102      	bne.n	800170c <HAL_PCD_Init+0x1cc>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	f000 f805 	bl	8001716 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800170c:	2300      	movs	r3, #0
}
 800170e:	4618      	mov	r0, r3
 8001710:	3714      	adds	r7, #20
 8001712:	46bd      	mov	sp, r7
 8001714:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001716 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001716:	b480      	push	{r7}
 8001718:	b085      	sub	sp, #20
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2201      	movs	r2, #1
 8001728:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
  hpcd->LPM_State = LPM_L0;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2200      	movs	r2, #0
 8001730:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800173a:	b29b      	uxth	r3, r3
 800173c:	f043 0301 	orr.w	r3, r3, #1
 8001740:	b29a      	uxth	r2, r3
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800174e:	b29b      	uxth	r3, r3
 8001750:	f043 0302 	orr.w	r3, r3, #2
 8001754:	b29a      	uxth	r2, r3
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800175c:	2300      	movs	r3, #0
}
 800175e:	4618      	mov	r0, r3
 8001760:	3714      	adds	r7, #20
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
	...

0800176c <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001774:	4b06      	ldr	r3, [pc, #24]	; (8001790 <LL_EXTI_EnableIT_0_31+0x24>)
 8001776:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800177a:	4905      	ldr	r1, [pc, #20]	; (8001790 <LL_EXTI_EnableIT_0_31+0x24>)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	4313      	orrs	r3, r2
 8001780:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8001784:	bf00      	nop
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr
 8001790:	58000800 	.word	0x58000800

08001794 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800179c:	4b07      	ldr	r3, [pc, #28]	; (80017bc <LL_EXTI_DisableIT_0_31+0x28>)
 800179e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	43db      	mvns	r3, r3
 80017a6:	4905      	ldr	r1, [pc, #20]	; (80017bc <LL_EXTI_DisableIT_0_31+0x28>)
 80017a8:	4013      	ands	r3, r2
 80017aa:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80017ae:	bf00      	nop
 80017b0:	370c      	adds	r7, #12
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	58000800 	.word	0x58000800

080017c0 <LL_C2_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->C2IMR1, ExtiLine);
 80017c8:	4b07      	ldr	r3, [pc, #28]	; (80017e8 <LL_C2_EXTI_DisableIT_0_31+0x28>)
 80017ca:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	43db      	mvns	r3, r3
 80017d2:	4905      	ldr	r1, [pc, #20]	; (80017e8 <LL_C2_EXTI_DisableIT_0_31+0x28>)
 80017d4:	4013      	ands	r3, r2
 80017d6:	f8c1 30c0 	str.w	r3, [r1, #192]	; 0xc0
}
 80017da:	bf00      	nop
 80017dc:	370c      	adds	r7, #12
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	58000800 	.word	0x58000800

080017ec <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80017f4:	4b05      	ldr	r3, [pc, #20]	; (800180c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	4904      	ldr	r1, [pc, #16]	; (800180c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	600b      	str	r3, [r1, #0]

}
 8001800:	bf00      	nop
 8001802:	370c      	adds	r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr
 800180c:	58000800 	.word	0x58000800

08001810 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8001818:	4b06      	ldr	r3, [pc, #24]	; (8001834 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	43db      	mvns	r3, r3
 8001820:	4904      	ldr	r1, [pc, #16]	; (8001834 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8001822:	4013      	ands	r3, r2
 8001824:	600b      	str	r3, [r1, #0]

}
 8001826:	bf00      	nop
 8001828:	370c      	adds	r7, #12
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	58000800 	.word	0x58000800

08001838 <LL_EXTI_EnableFallingTrig_0_31>:
  *         (*) value not defined in all devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8001840:	4b05      	ldr	r3, [pc, #20]	; (8001858 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8001842:	685a      	ldr	r2, [r3, #4]
 8001844:	4904      	ldr	r1, [pc, #16]	; (8001858 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4313      	orrs	r3, r2
 800184a:	604b      	str	r3, [r1, #4]
}
 800184c:	bf00      	nop
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr
 8001858:	58000800 	.word	0x58000800

0800185c <LL_EXTI_DisableFallingTrig_0_31>:
  *         (*) value not defined in all devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8001864:	4b06      	ldr	r3, [pc, #24]	; (8001880 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8001866:	685a      	ldr	r2, [r3, #4]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	43db      	mvns	r3, r3
 800186c:	4904      	ldr	r1, [pc, #16]	; (8001880 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800186e:	4013      	ands	r3, r2
 8001870:	604b      	str	r3, [r1, #4]
}
 8001872:	bf00      	nop
 8001874:	370c      	adds	r7, #12
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	58000800 	.word	0x58000800

08001884 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001888:	4b05      	ldr	r3, [pc, #20]	; (80018a0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a04      	ldr	r2, [pc, #16]	; (80018a0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800188e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001892:	6013      	str	r3, [r2, #0]
}
 8001894:	bf00      	nop
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	58000400 	.word	0x58000400

080018a4 <HAL_PWR_ConfigPVD>:
  *         (and optionally, to select CPU2 only (not both CPU1 and CPU2):
  *         "__HAL_PWR_PVD_EXTI_DISABLE_IT()").
  * @retval None
  */
HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS bits according to PVDLevel value */
  MODIFY_REG(PWR->CR2, PWR_CR2_PLS, sConfigPVD->PVDLevel);
 80018ac:	4b1d      	ldr	r3, [pc, #116]	; (8001924 <HAL_PWR_ConfigPVD+0x80>)
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f023 020e 	bic.w	r2, r3, #14
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	491a      	ldr	r1, [pc, #104]	; (8001924 <HAL_PWR_ConfigPVD+0x80>)
 80018ba:	4313      	orrs	r3, r2
 80018bc:	604b      	str	r3, [r1, #4]
  
  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  
  /* Note: On STM32WB series, power PVD event is not available on AIEC lines   */
  /*       (only interruption is available through AIEC line 16).             */
  __HAL_PWR_PVD_EXTI_DISABLE_IT();      /*CPU1*/
 80018be:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80018c2:	f7ff ff67 	bl	8001794 <LL_EXTI_DisableIT_0_31>
  __HAL_PWR_PVD_EXTIC2_DISABLE_IT();    /*CPU2*/
 80018c6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80018ca:	f7ff ff79 	bl	80017c0 <LL_C2_EXTI_DisableIT_0_31>
    
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 80018ce:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80018d2:	f7ff ffc3 	bl	800185c <LL_EXTI_DisableFallingTrig_0_31>
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE(); 
 80018d6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80018da:	f7ff ff99 	bl	8001810 <LL_EXTI_DisableRisingTrig_0_31>

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d003      	beq.n	80018f2 <HAL_PWR_ConfigPVD+0x4e>
  {
    /* Set CPU1 as wakeup target */
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 80018ea:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80018ee:	f7ff ff3d 	bl	800176c <LL_EXTI_EnableIT_0_31>
  }
  
  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f003 0301 	and.w	r3, r3, #1
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d003      	beq.n	8001906 <HAL_PWR_ConfigPVD+0x62>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 80018fe:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001902:	f7ff ff73 	bl	80017ec <LL_EXTI_EnableRisingTrig_0_31>
  }
  
  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f003 0302 	and.w	r3, r3, #2
 800190e:	2b00      	cmp	r3, #0
 8001910:	d003      	beq.n	800191a <HAL_PWR_ConfigPVD+0x76>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 8001912:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001916:	f7ff ff8f 	bl	8001838 <LL_EXTI_EnableFallingTrig_0_31>
  }

  return HAL_OK;
 800191a:	2300      	movs	r3, #0
}
 800191c:	4618      	mov	r0, r3
 800191e:	3708      	adds	r7, #8
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	58000400 	.word	0x58000400

08001928 <HAL_PWR_EnablePVD>:
/**
  * @brief Enables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  /* Enable the power voltage detector */
  SET_BIT(PWR->CR2, PWR_CR2_PVDE);
 800192c:	4b05      	ldr	r3, [pc, #20]	; (8001944 <HAL_PWR_EnablePVD+0x1c>)
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	4a04      	ldr	r2, [pc, #16]	; (8001944 <HAL_PWR_EnablePVD+0x1c>)
 8001932:	f043 0301 	orr.w	r3, r3, #1
 8001936:	6053      	str	r3, [r2, #4]
}
 8001938:	bf00      	nop
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	58000400 	.word	0x58000400

08001948 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 800194c:	4b04      	ldr	r3, [pc, #16]	; (8001960 <HAL_PWREx_GetVoltageRange+0x18>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001954:	4618      	mov	r0, r3
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	58000400 	.word	0x58000400

08001964 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001968:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001972:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001976:	d101      	bne.n	800197c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001978:	2301      	movs	r3, #1
 800197a:	e000      	b.n	800197e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800197c:	2300      	movs	r3, #0
}
 800197e:	4618      	mov	r0, r3
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr

08001988 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800198c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001996:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800199a:	6013      	str	r3, [r2, #0]
}
 800199c:	bf00      	nop
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr

080019a6 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 80019a6:	b480      	push	{r7}
 80019a8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80019aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019b8:	6013      	str	r3, [r2, #0]
}
 80019ba:	bf00      	nop
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr

080019c4 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80019c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80019d6:	d101      	bne.n	80019dc <LL_RCC_HSE_IsReady+0x18>
 80019d8:	2301      	movs	r3, #1
 80019da:	e000      	b.n	80019de <LL_RCC_HSE_IsReady+0x1a>
 80019dc:	2300      	movs	r3, #0
}
 80019de:	4618      	mov	r0, r3
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr

080019e8 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80019ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019fa:	6013      	str	r3, [r2, #0]
}
 80019fc:	bf00      	nop
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr

08001a06 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8001a06:	b480      	push	{r7}
 8001a08:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001a0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a18:	6013      	str	r3, [r2, #0]
}
 8001a1a:	bf00      	nop
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr

08001a24 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001a28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a36:	d101      	bne.n	8001a3c <LL_RCC_HSI_IsReady+0x18>
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e000      	b.n	8001a3e <LL_RCC_HSI_IsReady+0x1a>
 8001a3c:	2300      	movs	r3, #0
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr

08001a48 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001a50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	061b      	lsls	r3, r3, #24
 8001a5e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a62:	4313      	orrs	r3, r2
 8001a64:	604b      	str	r3, [r1, #4]
}
 8001a66:	bf00      	nop
 8001a68:	370c      	adds	r7, #12
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr

08001a72 <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8001a72:	b480      	push	{r7}
 8001a74:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001a76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a7a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a7e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a82:	f043 0301 	orr.w	r3, r3, #1
 8001a86:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001a8a:	bf00      	nop
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr

08001a94 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001a98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001aa0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001aa4:	f023 0301 	bic.w	r3, r3, #1
 8001aa8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001aac:	bf00      	nop
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr

08001ab6 <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8001aba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001abe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ac2:	f003 0302 	and.w	r3, r3, #2
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d101      	bne.n	8001ace <LL_RCC_HSI48_IsReady+0x18>
 8001aca:	2301      	movs	r3, #1
 8001acc:	e000      	b.n	8001ad0 <LL_RCC_HSI48_IsReady+0x1a>
 8001ace:	2300      	movs	r3, #0
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr

08001ada <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8001ada:	b480      	push	{r7}
 8001adc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001ade:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ae6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001aea:	f043 0301 	orr.w	r3, r3, #1
 8001aee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001af2:	bf00      	nop
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr

08001afc <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001b00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b08:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b0c:	f023 0301 	bic.w	r3, r3, #1
 8001b10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001b14:	bf00      	nop
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr

08001b1e <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001b22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b2e:	f043 0304 	orr.w	r3, r3, #4
 8001b32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001b36:	bf00      	nop
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr

08001b40 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001b44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b4c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b50:	f023 0304 	bic.w	r3, r3, #4
 8001b54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001b58:	bf00      	nop
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr

08001b62 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001b62:	b480      	push	{r7}
 8001b64:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001b66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b6e:	f003 0302 	and.w	r3, r3, #2
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d101      	bne.n	8001b7a <LL_RCC_LSE_IsReady+0x18>
 8001b76:	2301      	movs	r3, #1
 8001b78:	e000      	b.n	8001b7c <LL_RCC_LSE_IsReady+0x1a>
 8001b7a:	2300      	movs	r3, #0
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr

08001b86 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8001b86:	b480      	push	{r7}
 8001b88:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001b8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b92:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b96:	f043 0301 	orr.w	r3, r3, #1
 8001b9a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001b9e:	bf00      	nop
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr

08001ba8 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001bac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bb4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bb8:	f023 0301 	bic.w	r3, r3, #1
 8001bbc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001bc0:	bf00      	nop
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr

08001bca <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8001bca:	b480      	push	{r7}
 8001bcc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8001bce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bd6:	f003 0302 	and.w	r3, r3, #2
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d101      	bne.n	8001be2 <LL_RCC_LSI1_IsReady+0x18>
 8001bde:	2301      	movs	r3, #1
 8001be0:	e000      	b.n	8001be4 <LL_RCC_LSI1_IsReady+0x1a>
 8001be2:	2300      	movs	r3, #0
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr

08001bee <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8001bee:	b480      	push	{r7}
 8001bf0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001bf2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bfa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bfe:	f043 0304 	orr.w	r3, r3, #4
 8001c02:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001c06:	bf00      	nop
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr

08001c10 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001c14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c1c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c20:	f023 0304 	bic.w	r3, r3, #4
 8001c24:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001c28:	bf00      	nop
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr

08001c32 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8001c32:	b480      	push	{r7}
 8001c34:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8001c36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c3e:	f003 0308 	and.w	r3, r3, #8
 8001c42:	2b08      	cmp	r3, #8
 8001c44:	d101      	bne.n	8001c4a <LL_RCC_LSI2_IsReady+0x18>
 8001c46:	2301      	movs	r3, #1
 8001c48:	e000      	b.n	8001c4c <LL_RCC_LSI2_IsReady+0x1a>
 8001c4a:	2300      	movs	r3, #0
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr

08001c56 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8001c56:	b480      	push	{r7}
 8001c58:	b083      	sub	sp, #12
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8001c5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c66:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	021b      	lsls	r3, r3, #8
 8001c6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c72:	4313      	orrs	r3, r2
 8001c74:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8001c78:	bf00      	nop
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr

08001c84 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001c88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c92:	f043 0301 	orr.w	r3, r3, #1
 8001c96:	6013      	str	r3, [r2, #0]
}
 8001c98:	bf00      	nop
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr

08001ca2 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001ca6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001cb0:	f023 0301 	bic.w	r3, r3, #1
 8001cb4:	6013      	str	r3, [r2, #0]
}
 8001cb6:	bf00      	nop
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr

08001cc0 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001cc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0302 	and.w	r3, r3, #2
 8001cce:	2b02      	cmp	r3, #2
 8001cd0:	d101      	bne.n	8001cd6 <LL_RCC_MSI_IsReady+0x16>
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e000      	b.n	8001cd8 <LL_RCC_MSI_IsReady+0x18>
 8001cd6:	2300      	movs	r3, #0
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr

08001ce2 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8001ce2:	b480      	push	{r7}
 8001ce4:	b083      	sub	sp, #12
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8001cea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cf4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	600b      	str	r3, [r1, #0]
}
 8001cfe:	bf00      	nop
 8001d00:	370c      	adds	r7, #12
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr

08001d0a <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8001d0a:	b480      	push	{r7}
 8001d0c:	b083      	sub	sp, #12
 8001d0e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8001d10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d1a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2bb0      	cmp	r3, #176	; 0xb0
 8001d20:	d901      	bls.n	8001d26 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8001d22:	23b0      	movs	r3, #176	; 0xb0
 8001d24:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8001d26:	687b      	ldr	r3, [r7, #4]
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001d3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	021b      	lsls	r3, r3, #8
 8001d4a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	604b      	str	r3, [r1, #4]
}
 8001d52:	bf00      	nop
 8001d54:	370c      	adds	r7, #12
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr

08001d5e <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001d5e:	b480      	push	{r7}
 8001d60:	b083      	sub	sp, #12
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001d66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	f023 0203 	bic.w	r2, r3, #3
 8001d70:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	608b      	str	r3, [r1, #8]
}
 8001d7a:	bf00      	nop
 8001d7c:	370c      	adds	r7, #12
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr

08001d86 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001d86:	b480      	push	{r7}
 8001d88:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001d8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	f003 030c 	and.w	r3, r3, #12
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr

08001d9e <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001d9e:	b480      	push	{r7}
 8001da0:	b083      	sub	sp, #12
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001da6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001db0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	608b      	str	r3, [r1, #8]
}
 8001dba:	bf00      	nop
 8001dbc:	370c      	adds	r7, #12
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr

08001dc6 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001dc6:	b480      	push	{r7}
 8001dc8:	b083      	sub	sp, #12
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001dce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dd2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001dd6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dda:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001de6:	bf00      	nop
 8001de8:	370c      	adds	r7, #12
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr

08001df2 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8001df2:	b480      	push	{r7}
 8001df4:	b083      	sub	sp, #12
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001dfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dfe:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001e02:	f023 020f 	bic.w	r2, r3, #15
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	091b      	lsrs	r3, r3, #4
 8001e0a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001e14:	bf00      	nop
 8001e16:	370c      	adds	r7, #12
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr

08001e20 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001e28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e32:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	608b      	str	r3, [r1, #8]
}
 8001e3c:	bf00      	nop
 8001e3e:	370c      	adds	r7, #12
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr

08001e48 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001e50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e5a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	608b      	str	r3, [r1, #8]
}
 8001e64:	bf00      	nop
 8001e66:	370c      	adds	r7, #12
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr

08001e70 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001e74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr

08001e88 <LL_C2_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_C2_RCC_GetAHBPrescaler(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 8001e8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e90:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001e94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr

08001ea2 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001ea6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eaa:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001eae:	011b      	lsls	r3, r3, #4
 8001eb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr

08001ebe <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001ebe:	b480      	push	{r7}
 8001ec0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001ec2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr

08001ed6 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001ed6:	b480      	push	{r7}
 8001ed8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001eda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr

08001eee <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001eee:	b480      	push	{r7}
 8001ef0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001ef2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001efc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f00:	6013      	str	r3, [r2, #0]
}
 8001f02:	bf00      	nop
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001f10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f1e:	6013      	str	r3, [r2, #0]
}
 8001f20:	bf00      	nop
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr

08001f2a <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001f2a:	b480      	push	{r7}
 8001f2c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001f2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f38:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001f3c:	d101      	bne.n	8001f42 <LL_RCC_PLL_IsReady+0x18>
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e000      	b.n	8001f44 <LL_RCC_PLL_IsReady+0x1a>
 8001f42:	2300      	movs	r3, #0
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr

08001f4e <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001f4e:	b480      	push	{r7}
 8001f50:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001f52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	0a1b      	lsrs	r3, r3, #8
 8001f5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr

08001f68 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001f6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr

08001f80 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001f84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr

08001f98 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001f9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fa0:	68db      	ldr	r3, [r3, #12]
 8001fa2:	f003 0303 	and.w	r3, r3, #3
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001fb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fc2:	d101      	bne.n	8001fc8 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e000      	b.n	8001fca <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr

08001fd4 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001fd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fdc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001fe0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001fe8:	d101      	bne.n	8001fee <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001fea:	2301      	movs	r3, #1
 8001fec:	e000      	b.n	8001ff0 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8001fee:	2300      	movs	r3, #0
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr

08001ffa <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001ffa:	b480      	push	{r7}
 8001ffc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001ffe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002002:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002006:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800200a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800200e:	d101      	bne.n	8002014 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002010:	2301      	movs	r3, #1
 8002012:	e000      	b.n	8002016 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002014:	2300      	movs	r3, #0
}
 8002016:	4618      	mov	r0, r3
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr

08002020 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002024:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800202e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002032:	d101      	bne.n	8002038 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002034:	2301      	movs	r3, #1
 8002036:	e000      	b.n	800203a <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002038:	2300      	movs	r3, #0
}
 800203a:	4618      	mov	r0, r3
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr

08002044 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002048:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002052:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002056:	d101      	bne.n	800205c <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002058:	2301      	movs	r3, #1
 800205a:	e000      	b.n	800205e <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800205c:	2300      	movs	r3, #0
}
 800205e:	4618      	mov	r0, r3
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002068:	b590      	push	{r4, r7, lr}
 800206a:	b08d      	sub	sp, #52	; 0x34
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d101      	bne.n	800207a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e363      	b.n	8002742 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0320 	and.w	r3, r3, #32
 8002082:	2b00      	cmp	r3, #0
 8002084:	f000 808d 	beq.w	80021a2 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002088:	f7ff fe7d 	bl	8001d86 <LL_RCC_GetSysClkSource>
 800208c:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800208e:	f7ff ff83 	bl	8001f98 <LL_RCC_PLL_GetMainSource>
 8002092:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002096:	2b00      	cmp	r3, #0
 8002098:	d005      	beq.n	80020a6 <HAL_RCC_OscConfig+0x3e>
 800209a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800209c:	2b0c      	cmp	r3, #12
 800209e:	d147      	bne.n	8002130 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80020a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d144      	bne.n	8002130 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	69db      	ldr	r3, [r3, #28]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d101      	bne.n	80020b2 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e347      	b.n	8002742 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80020b6:	f7ff fe28 	bl	8001d0a <LL_RCC_MSI_GetRange>
 80020ba:	4603      	mov	r3, r0
 80020bc:	429c      	cmp	r4, r3
 80020be:	d914      	bls.n	80020ea <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c4:	4618      	mov	r0, r3
 80020c6:	f000 fd61 	bl	8002b8c <RCC_SetFlashLatencyFromMSIRange>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d001      	beq.n	80020d4 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e336      	b.n	8002742 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d8:	4618      	mov	r0, r3
 80020da:	f7ff fe02 	bl	8001ce2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6a1b      	ldr	r3, [r3, #32]
 80020e2:	4618      	mov	r0, r3
 80020e4:	f7ff fe26 	bl	8001d34 <LL_RCC_MSI_SetCalibTrimming>
 80020e8:	e013      	b.n	8002112 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ee:	4618      	mov	r0, r3
 80020f0:	f7ff fdf7 	bl	8001ce2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6a1b      	ldr	r3, [r3, #32]
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7ff fe1b 	bl	8001d34 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002102:	4618      	mov	r0, r3
 8002104:	f000 fd42 	bl	8002b8c <RCC_SetFlashLatencyFromMSIRange>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d001      	beq.n	8002112 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e317      	b.n	8002742 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002112:	f000 fcc9 	bl	8002aa8 <HAL_RCC_GetHCLKFreq>
 8002116:	4603      	mov	r3, r0
 8002118:	4aa4      	ldr	r2, [pc, #656]	; (80023ac <HAL_RCC_OscConfig+0x344>)
 800211a:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800211c:	4ba4      	ldr	r3, [pc, #656]	; (80023b0 <HAL_RCC_OscConfig+0x348>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4618      	mov	r0, r3
 8002122:	f7fe fdbf 	bl	8000ca4 <HAL_InitTick>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d039      	beq.n	80021a0 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e308      	b.n	8002742 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	69db      	ldr	r3, [r3, #28]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d01e      	beq.n	8002176 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002138:	f7ff fda4 	bl	8001c84 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800213c:	f7fe ff80 	bl	8001040 <HAL_GetTick>
 8002140:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002142:	e008      	b.n	8002156 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002144:	f7fe ff7c 	bl	8001040 <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	2b02      	cmp	r3, #2
 8002150:	d901      	bls.n	8002156 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e2f5      	b.n	8002742 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002156:	f7ff fdb3 	bl	8001cc0 <LL_RCC_MSI_IsReady>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d0f1      	beq.n	8002144 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002164:	4618      	mov	r0, r3
 8002166:	f7ff fdbc 	bl	8001ce2 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6a1b      	ldr	r3, [r3, #32]
 800216e:	4618      	mov	r0, r3
 8002170:	f7ff fde0 	bl	8001d34 <LL_RCC_MSI_SetCalibTrimming>
 8002174:	e015      	b.n	80021a2 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002176:	f7ff fd94 	bl	8001ca2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800217a:	f7fe ff61 	bl	8001040 <HAL_GetTick>
 800217e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002180:	e008      	b.n	8002194 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002182:	f7fe ff5d 	bl	8001040 <HAL_GetTick>
 8002186:	4602      	mov	r2, r0
 8002188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218a:	1ad3      	subs	r3, r2, r3
 800218c:	2b02      	cmp	r3, #2
 800218e:	d901      	bls.n	8002194 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002190:	2303      	movs	r3, #3
 8002192:	e2d6      	b.n	8002742 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002194:	f7ff fd94 	bl	8001cc0 <LL_RCC_MSI_IsReady>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d1f1      	bne.n	8002182 <HAL_RCC_OscConfig+0x11a>
 800219e:	e000      	b.n	80021a2 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80021a0:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0301 	and.w	r3, r3, #1
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d047      	beq.n	800223e <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021ae:	f7ff fdea 	bl	8001d86 <LL_RCC_GetSysClkSource>
 80021b2:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021b4:	f7ff fef0 	bl	8001f98 <LL_RCC_PLL_GetMainSource>
 80021b8:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80021ba:	6a3b      	ldr	r3, [r7, #32]
 80021bc:	2b08      	cmp	r3, #8
 80021be:	d005      	beq.n	80021cc <HAL_RCC_OscConfig+0x164>
 80021c0:	6a3b      	ldr	r3, [r7, #32]
 80021c2:	2b0c      	cmp	r3, #12
 80021c4:	d108      	bne.n	80021d8 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	2b03      	cmp	r3, #3
 80021ca:	d105      	bne.n	80021d8 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d134      	bne.n	800223e <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	e2b4      	b.n	8002742 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021e0:	d102      	bne.n	80021e8 <HAL_RCC_OscConfig+0x180>
 80021e2:	f7ff fbd1 	bl	8001988 <LL_RCC_HSE_Enable>
 80021e6:	e001      	b.n	80021ec <HAL_RCC_OscConfig+0x184>
 80021e8:	f7ff fbdd 	bl	80019a6 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d012      	beq.n	800221a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021f4:	f7fe ff24 	bl	8001040 <HAL_GetTick>
 80021f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80021fa:	e008      	b.n	800220e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021fc:	f7fe ff20 	bl	8001040 <HAL_GetTick>
 8002200:	4602      	mov	r2, r0
 8002202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	2b64      	cmp	r3, #100	; 0x64
 8002208:	d901      	bls.n	800220e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e299      	b.n	8002742 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800220e:	f7ff fbd9 	bl	80019c4 <LL_RCC_HSE_IsReady>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d0f1      	beq.n	80021fc <HAL_RCC_OscConfig+0x194>
 8002218:	e011      	b.n	800223e <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800221a:	f7fe ff11 	bl	8001040 <HAL_GetTick>
 800221e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002220:	e008      	b.n	8002234 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002222:	f7fe ff0d 	bl	8001040 <HAL_GetTick>
 8002226:	4602      	mov	r2, r0
 8002228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	2b64      	cmp	r3, #100	; 0x64
 800222e:	d901      	bls.n	8002234 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002230:	2303      	movs	r3, #3
 8002232:	e286      	b.n	8002742 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002234:	f7ff fbc6 	bl	80019c4 <LL_RCC_HSE_IsReady>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d1f1      	bne.n	8002222 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0302 	and.w	r3, r3, #2
 8002246:	2b00      	cmp	r3, #0
 8002248:	d04c      	beq.n	80022e4 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800224a:	f7ff fd9c 	bl	8001d86 <LL_RCC_GetSysClkSource>
 800224e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002250:	f7ff fea2 	bl	8001f98 <LL_RCC_PLL_GetMainSource>
 8002254:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002256:	69bb      	ldr	r3, [r7, #24]
 8002258:	2b04      	cmp	r3, #4
 800225a:	d005      	beq.n	8002268 <HAL_RCC_OscConfig+0x200>
 800225c:	69bb      	ldr	r3, [r7, #24]
 800225e:	2b0c      	cmp	r3, #12
 8002260:	d10e      	bne.n	8002280 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	2b02      	cmp	r3, #2
 8002266:	d10b      	bne.n	8002280 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d101      	bne.n	8002274 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e266      	b.n	8002742 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	691b      	ldr	r3, [r3, #16]
 8002278:	4618      	mov	r0, r3
 800227a:	f7ff fbe5 	bl	8001a48 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800227e:	e031      	b.n	80022e4 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d019      	beq.n	80022bc <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002288:	f7ff fbae 	bl	80019e8 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800228c:	f7fe fed8 	bl	8001040 <HAL_GetTick>
 8002290:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002292:	e008      	b.n	80022a6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002294:	f7fe fed4 	bl	8001040 <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d901      	bls.n	80022a6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e24d      	b.n	8002742 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 80022a6:	f7ff fbbd 	bl	8001a24 <LL_RCC_HSI_IsReady>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d0f1      	beq.n	8002294 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	691b      	ldr	r3, [r3, #16]
 80022b4:	4618      	mov	r0, r3
 80022b6:	f7ff fbc7 	bl	8001a48 <LL_RCC_HSI_SetCalibTrimming>
 80022ba:	e013      	b.n	80022e4 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022bc:	f7ff fba3 	bl	8001a06 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c0:	f7fe febe 	bl	8001040 <HAL_GetTick>
 80022c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80022c6:	e008      	b.n	80022da <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022c8:	f7fe feba 	bl	8001040 <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	d901      	bls.n	80022da <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e233      	b.n	8002742 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80022da:	f7ff fba3 	bl	8001a24 <LL_RCC_HSI_IsReady>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d1f1      	bne.n	80022c8 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 0308 	and.w	r3, r3, #8
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d106      	bne.n	80022fe <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	f000 80a3 	beq.w	8002444 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	695b      	ldr	r3, [r3, #20]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d076      	beq.n	80023f4 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 0310 	and.w	r3, r3, #16
 800230e:	2b00      	cmp	r3, #0
 8002310:	d046      	beq.n	80023a0 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8002312:	f7ff fc5a 	bl	8001bca <LL_RCC_LSI1_IsReady>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d113      	bne.n	8002344 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800231c:	f7ff fc33 	bl	8001b86 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002320:	f7fe fe8e 	bl	8001040 <HAL_GetTick>
 8002324:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002326:	e008      	b.n	800233a <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002328:	f7fe fe8a 	bl	8001040 <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	2b02      	cmp	r3, #2
 8002334:	d901      	bls.n	800233a <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e203      	b.n	8002742 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800233a:	f7ff fc46 	bl	8001bca <LL_RCC_LSI1_IsReady>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d0f1      	beq.n	8002328 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8002344:	f7ff fc53 	bl	8001bee <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002348:	f7fe fe7a 	bl	8001040 <HAL_GetTick>
 800234c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800234e:	e008      	b.n	8002362 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002350:	f7fe fe76 	bl	8001040 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b03      	cmp	r3, #3
 800235c:	d901      	bls.n	8002362 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e1ef      	b.n	8002742 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002362:	f7ff fc66 	bl	8001c32 <LL_RCC_LSI2_IsReady>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d0f1      	beq.n	8002350 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	699b      	ldr	r3, [r3, #24]
 8002370:	4618      	mov	r0, r3
 8002372:	f7ff fc70 	bl	8001c56 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8002376:	f7ff fc17 	bl	8001ba8 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800237a:	f7fe fe61 	bl	8001040 <HAL_GetTick>
 800237e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002380:	e008      	b.n	8002394 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002382:	f7fe fe5d 	bl	8001040 <HAL_GetTick>
 8002386:	4602      	mov	r2, r0
 8002388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	2b02      	cmp	r3, #2
 800238e:	d901      	bls.n	8002394 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8002390:	2303      	movs	r3, #3
 8002392:	e1d6      	b.n	8002742 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002394:	f7ff fc19 	bl	8001bca <LL_RCC_LSI1_IsReady>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d1f1      	bne.n	8002382 <HAL_RCC_OscConfig+0x31a>
 800239e:	e051      	b.n	8002444 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80023a0:	f7ff fbf1 	bl	8001b86 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a4:	f7fe fe4c 	bl	8001040 <HAL_GetTick>
 80023a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80023aa:	e00c      	b.n	80023c6 <HAL_RCC_OscConfig+0x35e>
 80023ac:	20000004 	.word	0x20000004
 80023b0:	20000008 	.word	0x20000008
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80023b4:	f7fe fe44 	bl	8001040 <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d901      	bls.n	80023c6 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e1bd      	b.n	8002742 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80023c6:	f7ff fc00 	bl	8001bca <LL_RCC_LSI1_IsReady>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d0f1      	beq.n	80023b4 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80023d0:	f7ff fc1e 	bl	8001c10 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80023d4:	e008      	b.n	80023e8 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80023d6:	f7fe fe33 	bl	8001040 <HAL_GetTick>
 80023da:	4602      	mov	r2, r0
 80023dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	2b03      	cmp	r3, #3
 80023e2:	d901      	bls.n	80023e8 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80023e4:	2303      	movs	r3, #3
 80023e6:	e1ac      	b.n	8002742 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80023e8:	f7ff fc23 	bl	8001c32 <LL_RCC_LSI2_IsReady>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d1f1      	bne.n	80023d6 <HAL_RCC_OscConfig+0x36e>
 80023f2:	e027      	b.n	8002444 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80023f4:	f7ff fc0c 	bl	8001c10 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023f8:	f7fe fe22 	bl	8001040 <HAL_GetTick>
 80023fc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80023fe:	e008      	b.n	8002412 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002400:	f7fe fe1e 	bl	8001040 <HAL_GetTick>
 8002404:	4602      	mov	r2, r0
 8002406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	2b03      	cmp	r3, #3
 800240c:	d901      	bls.n	8002412 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e197      	b.n	8002742 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002412:	f7ff fc0e 	bl	8001c32 <LL_RCC_LSI2_IsReady>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d1f1      	bne.n	8002400 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800241c:	f7ff fbc4 	bl	8001ba8 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002420:	f7fe fe0e 	bl	8001040 <HAL_GetTick>
 8002424:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002426:	e008      	b.n	800243a <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002428:	f7fe fe0a 	bl	8001040 <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	2b02      	cmp	r3, #2
 8002434:	d901      	bls.n	800243a <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e183      	b.n	8002742 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800243a:	f7ff fbc6 	bl	8001bca <LL_RCC_LSI1_IsReady>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d1f1      	bne.n	8002428 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0304 	and.w	r3, r3, #4
 800244c:	2b00      	cmp	r3, #0
 800244e:	d05b      	beq.n	8002508 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002450:	4ba7      	ldr	r3, [pc, #668]	; (80026f0 <HAL_RCC_OscConfig+0x688>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002458:	2b00      	cmp	r3, #0
 800245a:	d114      	bne.n	8002486 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800245c:	f7ff fa12 	bl	8001884 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002460:	f7fe fdee 	bl	8001040 <HAL_GetTick>
 8002464:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002466:	e008      	b.n	800247a <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002468:	f7fe fdea 	bl	8001040 <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	2b02      	cmp	r3, #2
 8002474:	d901      	bls.n	800247a <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e163      	b.n	8002742 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800247a:	4b9d      	ldr	r3, [pc, #628]	; (80026f0 <HAL_RCC_OscConfig+0x688>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002482:	2b00      	cmp	r3, #0
 8002484:	d0f0      	beq.n	8002468 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	2b01      	cmp	r3, #1
 800248c:	d102      	bne.n	8002494 <HAL_RCC_OscConfig+0x42c>
 800248e:	f7ff fb24 	bl	8001ada <LL_RCC_LSE_Enable>
 8002492:	e00c      	b.n	80024ae <HAL_RCC_OscConfig+0x446>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	2b05      	cmp	r3, #5
 800249a:	d104      	bne.n	80024a6 <HAL_RCC_OscConfig+0x43e>
 800249c:	f7ff fb3f 	bl	8001b1e <LL_RCC_LSE_EnableBypass>
 80024a0:	f7ff fb1b 	bl	8001ada <LL_RCC_LSE_Enable>
 80024a4:	e003      	b.n	80024ae <HAL_RCC_OscConfig+0x446>
 80024a6:	f7ff fb29 	bl	8001afc <LL_RCC_LSE_Disable>
 80024aa:	f7ff fb49 	bl	8001b40 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d014      	beq.n	80024e0 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024b6:	f7fe fdc3 	bl	8001040 <HAL_GetTick>
 80024ba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80024bc:	e00a      	b.n	80024d4 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024be:	f7fe fdbf 	bl	8001040 <HAL_GetTick>
 80024c2:	4602      	mov	r2, r0
 80024c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d901      	bls.n	80024d4 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80024d0:	2303      	movs	r3, #3
 80024d2:	e136      	b.n	8002742 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80024d4:	f7ff fb45 	bl	8001b62 <LL_RCC_LSE_IsReady>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d0ef      	beq.n	80024be <HAL_RCC_OscConfig+0x456>
 80024de:	e013      	b.n	8002508 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024e0:	f7fe fdae 	bl	8001040 <HAL_GetTick>
 80024e4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80024e6:	e00a      	b.n	80024fe <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024e8:	f7fe fdaa 	bl	8001040 <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d901      	bls.n	80024fe <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	e121      	b.n	8002742 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 80024fe:	f7ff fb30 	bl	8001b62 <LL_RCC_LSE_IsReady>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d1ef      	bne.n	80024e8 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002510:	2b00      	cmp	r3, #0
 8002512:	d02c      	beq.n	800256e <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002518:	2b00      	cmp	r3, #0
 800251a:	d014      	beq.n	8002546 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800251c:	f7ff faa9 	bl	8001a72 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002520:	f7fe fd8e 	bl	8001040 <HAL_GetTick>
 8002524:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002526:	e008      	b.n	800253a <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002528:	f7fe fd8a 	bl	8001040 <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	2b02      	cmp	r3, #2
 8002534:	d901      	bls.n	800253a <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e103      	b.n	8002742 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800253a:	f7ff fabc 	bl	8001ab6 <LL_RCC_HSI48_IsReady>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d0f1      	beq.n	8002528 <HAL_RCC_OscConfig+0x4c0>
 8002544:	e013      	b.n	800256e <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002546:	f7ff faa5 	bl	8001a94 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800254a:	f7fe fd79 	bl	8001040 <HAL_GetTick>
 800254e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002550:	e008      	b.n	8002564 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002552:	f7fe fd75 	bl	8001040 <HAL_GetTick>
 8002556:	4602      	mov	r2, r0
 8002558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	2b02      	cmp	r3, #2
 800255e:	d901      	bls.n	8002564 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8002560:	2303      	movs	r3, #3
 8002562:	e0ee      	b.n	8002742 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002564:	f7ff faa7 	bl	8001ab6 <LL_RCC_HSI48_IsReady>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d1f1      	bne.n	8002552 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002572:	2b00      	cmp	r3, #0
 8002574:	f000 80e4 	beq.w	8002740 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002578:	f7ff fc05 	bl	8001d86 <LL_RCC_GetSysClkSource>
 800257c:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800257e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800258a:	2b02      	cmp	r3, #2
 800258c:	f040 80b4 	bne.w	80026f8 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	f003 0203 	and.w	r2, r3, #3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259a:	429a      	cmp	r2, r3
 800259c:	d123      	bne.n	80025e6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d11c      	bne.n	80025e6 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	0a1b      	lsrs	r3, r3, #8
 80025b0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d114      	bne.n	80025e6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d10d      	bne.n	80025e6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d106      	bne.n	80025e6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d05d      	beq.n	80026a2 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	2b0c      	cmp	r3, #12
 80025ea:	d058      	beq.n	800269e <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80025ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d001      	beq.n	80025fe <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e0a1      	b.n	8002742 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80025fe:	f7ff fc85 	bl	8001f0c <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002602:	f7fe fd1d 	bl	8001040 <HAL_GetTick>
 8002606:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002608:	e008      	b.n	800261c <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800260a:	f7fe fd19 	bl	8001040 <HAL_GetTick>
 800260e:	4602      	mov	r2, r0
 8002610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	2b02      	cmp	r3, #2
 8002616:	d901      	bls.n	800261c <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8002618:	2303      	movs	r3, #3
 800261a:	e092      	b.n	8002742 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800261c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d1ef      	bne.n	800260a <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800262a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800262e:	68da      	ldr	r2, [r3, #12]
 8002630:	4b30      	ldr	r3, [pc, #192]	; (80026f4 <HAL_RCC_OscConfig+0x68c>)
 8002632:	4013      	ands	r3, r2
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800263c:	4311      	orrs	r1, r2
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002642:	0212      	lsls	r2, r2, #8
 8002644:	4311      	orrs	r1, r2
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800264a:	4311      	orrs	r1, r2
 800264c:	687a      	ldr	r2, [r7, #4]
 800264e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002650:	4311      	orrs	r1, r2
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002656:	430a      	orrs	r2, r1
 8002658:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800265c:	4313      	orrs	r3, r2
 800265e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002660:	f7ff fc45 	bl	8001eee <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002664:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800266e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002672:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002674:	f7fe fce4 	bl	8001040 <HAL_GetTick>
 8002678:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800267a:	e008      	b.n	800268e <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800267c:	f7fe fce0 	bl	8001040 <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	2b02      	cmp	r3, #2
 8002688:	d901      	bls.n	800268e <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	e059      	b.n	8002742 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800268e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002698:	2b00      	cmp	r3, #0
 800269a:	d0ef      	beq.n	800267c <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800269c:	e050      	b.n	8002740 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e04f      	b.n	8002742 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d147      	bne.n	8002740 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80026b0:	f7ff fc1d 	bl	8001eee <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80026b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026c2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80026c4:	f7fe fcbc 	bl	8001040 <HAL_GetTick>
 80026c8:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026ca:	e008      	b.n	80026de <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026cc:	f7fe fcb8 	bl	8001040 <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d901      	bls.n	80026de <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e031      	b.n	8002742 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d0ef      	beq.n	80026cc <HAL_RCC_OscConfig+0x664>
 80026ec:	e028      	b.n	8002740 <HAL_RCC_OscConfig+0x6d8>
 80026ee:	bf00      	nop
 80026f0:	58000400 	.word	0x58000400
 80026f4:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	2b0c      	cmp	r3, #12
 80026fc:	d01e      	beq.n	800273c <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026fe:	f7ff fc05 	bl	8001f0c <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002702:	f7fe fc9d 	bl	8001040 <HAL_GetTick>
 8002706:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002708:	e008      	b.n	800271c <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800270a:	f7fe fc99 	bl	8001040 <HAL_GetTick>
 800270e:	4602      	mov	r2, r0
 8002710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	2b02      	cmp	r3, #2
 8002716:	d901      	bls.n	800271c <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8002718:	2303      	movs	r3, #3
 800271a:	e012      	b.n	8002742 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800271c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d1ef      	bne.n	800270a <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800272a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800272e:	68da      	ldr	r2, [r3, #12]
 8002730:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002734:	4b05      	ldr	r3, [pc, #20]	; (800274c <HAL_RCC_OscConfig+0x6e4>)
 8002736:	4013      	ands	r3, r2
 8002738:	60cb      	str	r3, [r1, #12]
 800273a:	e001      	b.n	8002740 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e000      	b.n	8002742 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8002740:	2300      	movs	r3, #0
}
 8002742:	4618      	mov	r0, r3
 8002744:	3734      	adds	r7, #52	; 0x34
 8002746:	46bd      	mov	sp, r7
 8002748:	bd90      	pop	{r4, r7, pc}
 800274a:	bf00      	nop
 800274c:	eefefffc 	.word	0xeefefffc

08002750 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b084      	sub	sp, #16
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d101      	bne.n	8002764 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e12d      	b.n	80029c0 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002764:	4b98      	ldr	r3, [pc, #608]	; (80029c8 <HAL_RCC_ClockConfig+0x278>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0307 	and.w	r3, r3, #7
 800276c:	683a      	ldr	r2, [r7, #0]
 800276e:	429a      	cmp	r2, r3
 8002770:	d91b      	bls.n	80027aa <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002772:	4b95      	ldr	r3, [pc, #596]	; (80029c8 <HAL_RCC_ClockConfig+0x278>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f023 0207 	bic.w	r2, r3, #7
 800277a:	4993      	ldr	r1, [pc, #588]	; (80029c8 <HAL_RCC_ClockConfig+0x278>)
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	4313      	orrs	r3, r2
 8002780:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002782:	f7fe fc5d 	bl	8001040 <HAL_GetTick>
 8002786:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002788:	e008      	b.n	800279c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800278a:	f7fe fc59 	bl	8001040 <HAL_GetTick>
 800278e:	4602      	mov	r2, r0
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	2b02      	cmp	r3, #2
 8002796:	d901      	bls.n	800279c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002798:	2303      	movs	r3, #3
 800279a:	e111      	b.n	80029c0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800279c:	4b8a      	ldr	r3, [pc, #552]	; (80029c8 <HAL_RCC_ClockConfig+0x278>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0307 	and.w	r3, r3, #7
 80027a4:	683a      	ldr	r2, [r7, #0]
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d1ef      	bne.n	800278a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0302 	and.w	r3, r3, #2
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d016      	beq.n	80027e4 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	4618      	mov	r0, r3
 80027bc:	f7ff faef 	bl	8001d9e <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80027c0:	f7fe fc3e 	bl	8001040 <HAL_GetTick>
 80027c4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80027c6:	e008      	b.n	80027da <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80027c8:	f7fe fc3a 	bl	8001040 <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d901      	bls.n	80027da <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	e0f2      	b.n	80029c0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80027da:	f7ff fbe9 	bl	8001fb0 <LL_RCC_IsActiveFlag_HPRE>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d0f1      	beq.n	80027c8 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0320 	and.w	r3, r3, #32
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d016      	beq.n	800281e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	695b      	ldr	r3, [r3, #20]
 80027f4:	4618      	mov	r0, r3
 80027f6:	f7ff fae6 	bl	8001dc6 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80027fa:	f7fe fc21 	bl	8001040 <HAL_GetTick>
 80027fe:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002800:	e008      	b.n	8002814 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002802:	f7fe fc1d 	bl	8001040 <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	2b02      	cmp	r3, #2
 800280e:	d901      	bls.n	8002814 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002810:	2303      	movs	r3, #3
 8002812:	e0d5      	b.n	80029c0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002814:	f7ff fbde 	bl	8001fd4 <LL_RCC_IsActiveFlag_C2HPRE>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d0f1      	beq.n	8002802 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002826:	2b00      	cmp	r3, #0
 8002828:	d016      	beq.n	8002858 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	699b      	ldr	r3, [r3, #24]
 800282e:	4618      	mov	r0, r3
 8002830:	f7ff fadf 	bl	8001df2 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002834:	f7fe fc04 	bl	8001040 <HAL_GetTick>
 8002838:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800283a:	e008      	b.n	800284e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800283c:	f7fe fc00 	bl	8001040 <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	2b02      	cmp	r3, #2
 8002848:	d901      	bls.n	800284e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e0b8      	b.n	80029c0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800284e:	f7ff fbd4 	bl	8001ffa <LL_RCC_IsActiveFlag_SHDHPRE>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d0f1      	beq.n	800283c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0304 	and.w	r3, r3, #4
 8002860:	2b00      	cmp	r3, #0
 8002862:	d016      	beq.n	8002892 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	4618      	mov	r0, r3
 800286a:	f7ff fad9 	bl	8001e20 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800286e:	f7fe fbe7 	bl	8001040 <HAL_GetTick>
 8002872:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002874:	e008      	b.n	8002888 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002876:	f7fe fbe3 	bl	8001040 <HAL_GetTick>
 800287a:	4602      	mov	r2, r0
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	2b02      	cmp	r3, #2
 8002882:	d901      	bls.n	8002888 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002884:	2303      	movs	r3, #3
 8002886:	e09b      	b.n	80029c0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002888:	f7ff fbca 	bl	8002020 <LL_RCC_IsActiveFlag_PPRE1>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d0f1      	beq.n	8002876 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0308 	and.w	r3, r3, #8
 800289a:	2b00      	cmp	r3, #0
 800289c:	d017      	beq.n	80028ce <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	691b      	ldr	r3, [r3, #16]
 80028a2:	00db      	lsls	r3, r3, #3
 80028a4:	4618      	mov	r0, r3
 80028a6:	f7ff facf 	bl	8001e48 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80028aa:	f7fe fbc9 	bl	8001040 <HAL_GetTick>
 80028ae:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80028b0:	e008      	b.n	80028c4 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80028b2:	f7fe fbc5 	bl	8001040 <HAL_GetTick>
 80028b6:	4602      	mov	r2, r0
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d901      	bls.n	80028c4 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80028c0:	2303      	movs	r3, #3
 80028c2:	e07d      	b.n	80029c0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80028c4:	f7ff fbbe 	bl	8002044 <LL_RCC_IsActiveFlag_PPRE2>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d0f1      	beq.n	80028b2 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0301 	and.w	r3, r3, #1
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d043      	beq.n	8002962 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d106      	bne.n	80028f0 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80028e2:	f7ff f86f 	bl	80019c4 <LL_RCC_HSE_IsReady>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d11e      	bne.n	800292a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e067      	b.n	80029c0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	2b03      	cmp	r3, #3
 80028f6:	d106      	bne.n	8002906 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80028f8:	f7ff fb17 	bl	8001f2a <LL_RCC_PLL_IsReady>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d113      	bne.n	800292a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e05c      	b.n	80029c0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d106      	bne.n	800291c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800290e:	f7ff f9d7 	bl	8001cc0 <LL_RCC_MSI_IsReady>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d108      	bne.n	800292a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e051      	b.n	80029c0 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800291c:	f7ff f882 	bl	8001a24 <LL_RCC_HSI_IsReady>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d101      	bne.n	800292a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e04a      	b.n	80029c0 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	4618      	mov	r0, r3
 8002930:	f7ff fa15 	bl	8001d5e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002934:	f7fe fb84 	bl	8001040 <HAL_GetTick>
 8002938:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800293a:	e00a      	b.n	8002952 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800293c:	f7fe fb80 	bl	8001040 <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	f241 3288 	movw	r2, #5000	; 0x1388
 800294a:	4293      	cmp	r3, r2
 800294c:	d901      	bls.n	8002952 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e036      	b.n	80029c0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002952:	f7ff fa18 	bl	8001d86 <LL_RCC_GetSysClkSource>
 8002956:	4602      	mov	r2, r0
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	429a      	cmp	r2, r3
 8002960:	d1ec      	bne.n	800293c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002962:	4b19      	ldr	r3, [pc, #100]	; (80029c8 <HAL_RCC_ClockConfig+0x278>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0307 	and.w	r3, r3, #7
 800296a:	683a      	ldr	r2, [r7, #0]
 800296c:	429a      	cmp	r2, r3
 800296e:	d21b      	bcs.n	80029a8 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002970:	4b15      	ldr	r3, [pc, #84]	; (80029c8 <HAL_RCC_ClockConfig+0x278>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f023 0207 	bic.w	r2, r3, #7
 8002978:	4913      	ldr	r1, [pc, #76]	; (80029c8 <HAL_RCC_ClockConfig+0x278>)
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	4313      	orrs	r3, r2
 800297e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002980:	f7fe fb5e 	bl	8001040 <HAL_GetTick>
 8002984:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002986:	e008      	b.n	800299a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002988:	f7fe fb5a 	bl	8001040 <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	2b02      	cmp	r3, #2
 8002994:	d901      	bls.n	800299a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e012      	b.n	80029c0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800299a:	4b0b      	ldr	r3, [pc, #44]	; (80029c8 <HAL_RCC_ClockConfig+0x278>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0307 	and.w	r3, r3, #7
 80029a2:	683a      	ldr	r2, [r7, #0]
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d1ef      	bne.n	8002988 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80029a8:	f000 f87e 	bl	8002aa8 <HAL_RCC_GetHCLKFreq>
 80029ac:	4603      	mov	r3, r0
 80029ae:	4a07      	ldr	r2, [pc, #28]	; (80029cc <HAL_RCC_ClockConfig+0x27c>)
 80029b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80029b2:	f7fe fb51 	bl	8001058 <HAL_GetTickPrio>
 80029b6:	4603      	mov	r3, r0
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7fe f973 	bl	8000ca4 <HAL_InitTick>
 80029be:	4603      	mov	r3, r0
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3710      	adds	r7, #16
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	58004000 	.word	0x58004000
 80029cc:	20000004 	.word	0x20000004

080029d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029d0:	b590      	push	{r4, r7, lr}
 80029d2:	b085      	sub	sp, #20
 80029d4:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029d6:	f7ff f9d6 	bl	8001d86 <LL_RCC_GetSysClkSource>
 80029da:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d10a      	bne.n	80029f8 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80029e2:	f7ff f992 	bl	8001d0a <LL_RCC_MSI_GetRange>
 80029e6:	4603      	mov	r3, r0
 80029e8:	091b      	lsrs	r3, r3, #4
 80029ea:	f003 030f 	and.w	r3, r3, #15
 80029ee:	4a2b      	ldr	r2, [pc, #172]	; (8002a9c <HAL_RCC_GetSysClockFreq+0xcc>)
 80029f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029f4:	60fb      	str	r3, [r7, #12]
 80029f6:	e04b      	b.n	8002a90 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2b04      	cmp	r3, #4
 80029fc:	d102      	bne.n	8002a04 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80029fe:	4b28      	ldr	r3, [pc, #160]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002a00:	60fb      	str	r3, [r7, #12]
 8002a02:	e045      	b.n	8002a90 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2b08      	cmp	r3, #8
 8002a08:	d10a      	bne.n	8002a20 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002a0a:	f7fe ffab 	bl	8001964 <LL_RCC_HSE_IsEnabledDiv2>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d102      	bne.n	8002a1a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002a14:	4b22      	ldr	r3, [pc, #136]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002a16:	60fb      	str	r3, [r7, #12]
 8002a18:	e03a      	b.n	8002a90 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002a1a:	4b22      	ldr	r3, [pc, #136]	; (8002aa4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002a1c:	60fb      	str	r3, [r7, #12]
 8002a1e:	e037      	b.n	8002a90 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002a20:	f7ff faba 	bl	8001f98 <LL_RCC_PLL_GetMainSource>
 8002a24:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	d003      	beq.n	8002a34 <HAL_RCC_GetSysClockFreq+0x64>
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	2b03      	cmp	r3, #3
 8002a30:	d003      	beq.n	8002a3a <HAL_RCC_GetSysClockFreq+0x6a>
 8002a32:	e00d      	b.n	8002a50 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002a34:	4b1a      	ldr	r3, [pc, #104]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002a36:	60bb      	str	r3, [r7, #8]
        break;
 8002a38:	e015      	b.n	8002a66 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002a3a:	f7fe ff93 	bl	8001964 <LL_RCC_HSE_IsEnabledDiv2>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d102      	bne.n	8002a4a <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002a44:	4b16      	ldr	r3, [pc, #88]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002a46:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002a48:	e00d      	b.n	8002a66 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8002a4a:	4b16      	ldr	r3, [pc, #88]	; (8002aa4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002a4c:	60bb      	str	r3, [r7, #8]
        break;
 8002a4e:	e00a      	b.n	8002a66 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002a50:	f7ff f95b 	bl	8001d0a <LL_RCC_MSI_GetRange>
 8002a54:	4603      	mov	r3, r0
 8002a56:	091b      	lsrs	r3, r3, #4
 8002a58:	f003 030f 	and.w	r3, r3, #15
 8002a5c:	4a0f      	ldr	r2, [pc, #60]	; (8002a9c <HAL_RCC_GetSysClockFreq+0xcc>)
 8002a5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a62:	60bb      	str	r3, [r7, #8]
        break;
 8002a64:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8002a66:	f7ff fa72 	bl	8001f4e <LL_RCC_PLL_GetN>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	fb03 f402 	mul.w	r4, r3, r2
 8002a72:	f7ff fa85 	bl	8001f80 <LL_RCC_PLL_GetDivider>
 8002a76:	4603      	mov	r3, r0
 8002a78:	091b      	lsrs	r3, r3, #4
 8002a7a:	3301      	adds	r3, #1
 8002a7c:	fbb4 f4f3 	udiv	r4, r4, r3
 8002a80:	f7ff fa72 	bl	8001f68 <LL_RCC_PLL_GetR>
 8002a84:	4603      	mov	r3, r0
 8002a86:	0f5b      	lsrs	r3, r3, #29
 8002a88:	3301      	adds	r3, #1
 8002a8a:	fbb4 f3f3 	udiv	r3, r4, r3
 8002a8e:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002a90:	68fb      	ldr	r3, [r7, #12]
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3714      	adds	r7, #20
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd90      	pop	{r4, r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	08008b20 	.word	0x08008b20
 8002aa0:	00f42400 	.word	0x00f42400
 8002aa4:	01e84800 	.word	0x01e84800

08002aa8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002aa8:	b598      	push	{r3, r4, r7, lr}
 8002aaa:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002aac:	f7ff ff90 	bl	80029d0 <HAL_RCC_GetSysClockFreq>
 8002ab0:	4604      	mov	r4, r0
 8002ab2:	f7ff f9dd 	bl	8001e70 <LL_RCC_GetAHBPrescaler>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	091b      	lsrs	r3, r3, #4
 8002aba:	f003 030f 	and.w	r3, r3, #15
 8002abe:	4a03      	ldr	r2, [pc, #12]	; (8002acc <HAL_RCC_GetHCLKFreq+0x24>)
 8002ac0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ac4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	bd98      	pop	{r3, r4, r7, pc}
 8002acc:	08008ac0 	.word	0x08008ac0

08002ad0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ad0:	b598      	push	{r3, r4, r7, lr}
 8002ad2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002ad4:	f7ff ffe8 	bl	8002aa8 <HAL_RCC_GetHCLKFreq>
 8002ad8:	4604      	mov	r4, r0
 8002ada:	f7ff f9f0 	bl	8001ebe <LL_RCC_GetAPB1Prescaler>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	0a1b      	lsrs	r3, r3, #8
 8002ae2:	f003 0307 	and.w	r3, r3, #7
 8002ae6:	4a04      	ldr	r2, [pc, #16]	; (8002af8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002ae8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aec:	f003 031f 	and.w	r3, r3, #31
 8002af0:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	bd98      	pop	{r3, r4, r7, pc}
 8002af8:	08008b00 	.word	0x08008b00

08002afc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002afc:	b598      	push	{r3, r4, r7, lr}
 8002afe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002b00:	f7ff ffd2 	bl	8002aa8 <HAL_RCC_GetHCLKFreq>
 8002b04:	4604      	mov	r4, r0
 8002b06:	f7ff f9e6 	bl	8001ed6 <LL_RCC_GetAPB2Prescaler>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	0adb      	lsrs	r3, r3, #11
 8002b0e:	f003 0307 	and.w	r3, r3, #7
 8002b12:	4a04      	ldr	r2, [pc, #16]	; (8002b24 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002b14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b18:	f003 031f 	and.w	r3, r3, #31
 8002b1c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	bd98      	pop	{r3, r4, r7, pc}
 8002b24:	08008b00 	.word	0x08008b00

08002b28 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 |
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	226f      	movs	r2, #111	; 0x6f
 8002b36:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 8002b38:	f7ff f925 	bl	8001d86 <LL_RCC_GetSysClkSource>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 8002b42:	f7ff f995 	bl	8001e70 <LL_RCC_GetAHBPrescaler>
 8002b46:	4602      	mov	r2, r0
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 8002b4c:	f7ff f9b7 	bl	8001ebe <LL_RCC_GetAPB1Prescaler>
 8002b50:	4602      	mov	r2, r0
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 8002b56:	f7ff f9be 	bl	8001ed6 <LL_RCC_GetAPB2Prescaler>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 8002b60:	f7ff f992 	bl	8001e88 <LL_C2_RCC_GetAHBPrescaler>
 8002b64:	4602      	mov	r2, r0
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 8002b6a:	f7ff f99a 	bl	8001ea2 <LL_RCC_GetAHB4Prescaler>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002b74:	4b04      	ldr	r3, [pc, #16]	; (8002b88 <HAL_RCC_GetClockConfig+0x60>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0207 	and.w	r2, r3, #7
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	601a      	str	r2, [r3, #0]
}
 8002b80:	bf00      	nop
 8002b82:	3708      	adds	r7, #8
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	58004000 	.word	0x58004000

08002b8c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002b8c:	b590      	push	{r4, r7, lr}
 8002b8e:	b085      	sub	sp, #20
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2bb0      	cmp	r3, #176	; 0xb0
 8002b98:	d903      	bls.n	8002ba2 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8002b9a:	4b15      	ldr	r3, [pc, #84]	; (8002bf0 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b9e:	60fb      	str	r3, [r7, #12]
 8002ba0:	e007      	b.n	8002bb2 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	091b      	lsrs	r3, r3, #4
 8002ba6:	f003 030f 	and.w	r3, r3, #15
 8002baa:	4a11      	ldr	r2, [pc, #68]	; (8002bf0 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002bac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bb0:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8002bb2:	f7ff f976 	bl	8001ea2 <LL_RCC_GetAHB4Prescaler>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	091b      	lsrs	r3, r3, #4
 8002bba:	f003 030f 	and.w	r3, r3, #15
 8002bbe:	4a0d      	ldr	r2, [pc, #52]	; (8002bf4 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8002bc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bc4:	68fa      	ldr	r2, [r7, #12]
 8002bc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bca:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	4a0a      	ldr	r2, [pc, #40]	; (8002bf8 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8002bd0:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd4:	0c9c      	lsrs	r4, r3, #18
 8002bd6:	f7fe feb7 	bl	8001948 <HAL_PWREx_GetVoltageRange>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	4619      	mov	r1, r3
 8002bde:	4620      	mov	r0, r4
 8002be0:	f000 f80c 	bl	8002bfc <RCC_SetFlashLatency>
 8002be4:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3714      	adds	r7, #20
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd90      	pop	{r4, r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	08008b20 	.word	0x08008b20
 8002bf4:	08008ac0 	.word	0x08008ac0
 8002bf8:	431bde83 	.word	0x431bde83

08002bfc <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002bfc:	b590      	push	{r4, r7, lr}
 8002bfe:	b093      	sub	sp, #76	; 0x4c
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
 8002c04:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8002c06:	4b37      	ldr	r3, [pc, #220]	; (8002ce4 <RCC_SetFlashLatency+0xe8>)
 8002c08:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002c0c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c0e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8002c12:	4a35      	ldr	r2, [pc, #212]	; (8002ce8 <RCC_SetFlashLatency+0xec>)
 8002c14:	f107 031c 	add.w	r3, r7, #28
 8002c18:	ca07      	ldmia	r2, {r0, r1, r2}
 8002c1a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8002c1e:	4b33      	ldr	r3, [pc, #204]	; (8002cec <RCC_SetFlashLatency+0xf0>)
 8002c20:	f107 040c 	add.w	r4, r7, #12
 8002c24:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c26:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c34:	d11a      	bne.n	8002c6c <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002c36:	2300      	movs	r3, #0
 8002c38:	643b      	str	r3, [r7, #64]	; 0x40
 8002c3a:	e013      	b.n	8002c64 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002c3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	3348      	adds	r3, #72	; 0x48
 8002c42:	443b      	add	r3, r7
 8002c44:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d807      	bhi.n	8002c5e <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002c4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	3348      	adds	r3, #72	; 0x48
 8002c54:	443b      	add	r3, r7
 8002c56:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002c5a:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002c5c:	e020      	b.n	8002ca0 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002c5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c60:	3301      	adds	r3, #1
 8002c62:	643b      	str	r3, [r7, #64]	; 0x40
 8002c64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c66:	2b03      	cmp	r3, #3
 8002c68:	d9e8      	bls.n	8002c3c <RCC_SetFlashLatency+0x40>
 8002c6a:	e019      	b.n	8002ca0 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c70:	e013      	b.n	8002c9a <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002c72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	3348      	adds	r3, #72	; 0x48
 8002c78:	443b      	add	r3, r7
 8002c7a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d807      	bhi.n	8002c94 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002c84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	3348      	adds	r3, #72	; 0x48
 8002c8a:	443b      	add	r3, r7
 8002c8c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002c90:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002c92:	e005      	b.n	8002ca0 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002c94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c96:	3301      	adds	r3, #1
 8002c98:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d9e8      	bls.n	8002c72 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8002ca0:	4b13      	ldr	r3, [pc, #76]	; (8002cf0 <RCC_SetFlashLatency+0xf4>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f023 0207 	bic.w	r2, r3, #7
 8002ca8:	4911      	ldr	r1, [pc, #68]	; (8002cf0 <RCC_SetFlashLatency+0xf4>)
 8002caa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cac:	4313      	orrs	r3, r2
 8002cae:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002cb0:	f7fe f9c6 	bl	8001040 <HAL_GetTick>
 8002cb4:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002cb6:	e008      	b.n	8002cca <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002cb8:	f7fe f9c2 	bl	8001040 <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d901      	bls.n	8002cca <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e007      	b.n	8002cda <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002cca:	4b09      	ldr	r3, [pc, #36]	; (8002cf0 <RCC_SetFlashLatency+0xf4>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0307 	and.w	r3, r3, #7
 8002cd2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d1ef      	bne.n	8002cb8 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8002cd8:	2300      	movs	r3, #0
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	374c      	adds	r7, #76	; 0x4c
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd90      	pop	{r4, r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	08008a6c 	.word	0x08008a6c
 8002ce8:	08008a7c 	.word	0x08008a7c
 8002cec:	08008a88 	.word	0x08008a88
 8002cf0:	58004000 	.word	0x58004000

08002cf4 <LL_RCC_LSE_IsEnabled>:
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8002cf8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d00:	f003 0301 	and.w	r3, r3, #1
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d101      	bne.n	8002d0c <LL_RCC_LSE_IsEnabled+0x18>
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e000      	b.n	8002d0e <LL_RCC_LSE_IsEnabled+0x1a>
 8002d0c:	2300      	movs	r3, #0
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr

08002d18 <LL_RCC_LSE_IsReady>:
{
 8002d18:	b480      	push	{r7}
 8002d1a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002d1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d24:	f003 0302 	and.w	r3, r3, #2
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	d101      	bne.n	8002d30 <LL_RCC_LSE_IsReady+0x18>
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e000      	b.n	8002d32 <LL_RCC_LSE_IsReady+0x1a>
 8002d30:	2300      	movs	r3, #0
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr

08002d3c <LL_RCC_MSI_EnablePLLMode>:
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8002d40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d4a:	f043 0304 	orr.w	r3, r3, #4
 8002d4e:	6013      	str	r3, [r2, #0]
}
 8002d50:	bf00      	nop
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr

08002d5a <LL_RCC_SetRFWKPClockSource>:
{
 8002d5a:	b480      	push	{r7}
 8002d5c:	b083      	sub	sp, #12
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8002d62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d6a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002d6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002d7a:	bf00      	nop
 8002d7c:	370c      	adds	r7, #12
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr

08002d86 <LL_RCC_SetSMPSClockSource>:
{
 8002d86:	b480      	push	{r7}
 8002d88:	b083      	sub	sp, #12
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8002d8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d94:	f023 0203 	bic.w	r2, r3, #3
 8002d98:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002da2:	bf00      	nop
 8002da4:	370c      	adds	r7, #12
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr

08002dae <LL_RCC_SetSMPSPrescaler>:
{
 8002dae:	b480      	push	{r7}
 8002db0:	b083      	sub	sp, #12
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8002db6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dbc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002dc0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002dca:	bf00      	nop
 8002dcc:	370c      	adds	r7, #12
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr

08002dd6 <LL_RCC_SetUSARTClockSource>:
{
 8002dd6:	b480      	push	{r7}
 8002dd8:	b083      	sub	sp, #12
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8002dde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002de6:	f023 0203 	bic.w	r2, r3, #3
 8002dea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002df6:	bf00      	nop
 8002df8:	370c      	adds	r7, #12
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr

08002e02 <LL_RCC_SetLPUARTClockSource>:
{
 8002e02:	b480      	push	{r7}
 8002e04:	b083      	sub	sp, #12
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002e0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e12:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002e16:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002e22:	bf00      	nop
 8002e24:	370c      	adds	r7, #12
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr

08002e2e <LL_RCC_SetI2CClockSource>:
{
 8002e2e:	b480      	push	{r7}
 8002e30:	b083      	sub	sp, #12
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002e36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e3a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	091b      	lsrs	r3, r3, #4
 8002e42:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002e46:	43db      	mvns	r3, r3
 8002e48:	401a      	ands	r2, r3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	011b      	lsls	r3, r3, #4
 8002e4e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002e52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e56:	4313      	orrs	r3, r2
 8002e58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002e5c:	bf00      	nop
 8002e5e:	370c      	adds	r7, #12
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr

08002e68 <LL_RCC_SetLPTIMClockSource>:
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002e70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e74:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	0c1b      	lsrs	r3, r3, #16
 8002e7c:	041b      	lsls	r3, r3, #16
 8002e7e:	43db      	mvns	r3, r3
 8002e80:	401a      	ands	r2, r3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	041b      	lsls	r3, r3, #16
 8002e86:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002e90:	bf00      	nop
 8002e92:	370c      	adds	r7, #12
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr

08002e9c <LL_RCC_SetSAIClockSource>:
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b083      	sub	sp, #12
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8002ea4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eac:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002eb0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002ebc:	bf00      	nop
 8002ebe:	370c      	adds	r7, #12
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr

08002ec8 <LL_RCC_SetRNGClockSource>:
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002ed0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ed4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ed8:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002edc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002ee8:	bf00      	nop
 8002eea:	370c      	adds	r7, #12
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr

08002ef4 <LL_RCC_SetCLK48ClockSource>:
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8002efc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f04:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f08:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002f14:	bf00      	nop
 8002f16:	370c      	adds	r7, #12
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr

08002f20 <LL_RCC_SetUSBClockSource>:
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b082      	sub	sp, #8
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	f7ff ffe3 	bl	8002ef4 <LL_RCC_SetCLK48ClockSource>
}
 8002f2e:	bf00      	nop
 8002f30:	3708      	adds	r7, #8
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}

08002f36 <LL_RCC_SetADCClockSource>:
{
 8002f36:	b480      	push	{r7}
 8002f38:	b083      	sub	sp, #12
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002f3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f46:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002f4a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002f56:	bf00      	nop
 8002f58:	370c      	adds	r7, #12
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr

08002f62 <LL_RCC_SetRTCClockSource>:
{
 8002f62:	b480      	push	{r7}
 8002f64:	b083      	sub	sp, #12
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002f6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f72:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002f82:	bf00      	nop
 8002f84:	370c      	adds	r7, #12
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr

08002f8e <LL_RCC_GetRTCClockSource>:
{
 8002f8e:	b480      	push	{r7}
 8002f90:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002f92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr

08002fa8 <LL_RCC_ForceBackupDomainReset>:
{
 8002fa8:	b480      	push	{r7}
 8002faa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002fac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fb4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002fc0:	bf00      	nop
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr

08002fca <LL_RCC_ReleaseBackupDomainReset>:
{
 8002fca:	b480      	push	{r7}
 8002fcc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002fce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fd6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fde:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002fe2:	bf00      	nop
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr

08002fec <LL_RCC_PLLSAI1_Enable>:
{
 8002fec:	b480      	push	{r7}
 8002fee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002ff0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ffa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002ffe:	6013      	str	r3, [r2, #0]
}
 8003000:	bf00      	nop
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr

0800300a <LL_RCC_PLLSAI1_Disable>:
{
 800300a:	b480      	push	{r7}
 800300c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800300e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003018:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800301c:	6013      	str	r3, [r2, #0]
}
 800301e:	bf00      	nop
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr

08003028 <LL_RCC_PLLSAI1_IsReady>:
{
 8003028:	b480      	push	{r7}
 800302a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800302c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003036:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800303a:	d101      	bne.n	8003040 <LL_RCC_PLLSAI1_IsReady+0x18>
 800303c:	2301      	movs	r3, #1
 800303e:	e000      	b.n	8003042 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8003040:	2300      	movs	r3, #0
}
 8003042:	4618      	mov	r0, r3
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr

0800304c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b088      	sub	sp, #32
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8003054:	2300      	movs	r3, #0
 8003056:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003058:	2300      	movs	r3, #0
 800305a:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003064:	2b00      	cmp	r3, #0
 8003066:	d034      	beq.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003070:	d021      	beq.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8003072:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003076:	d81b      	bhi.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003078:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800307c:	d01d      	beq.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800307e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003082:	d815      	bhi.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003084:	2b00      	cmp	r3, #0
 8003086:	d00b      	beq.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8003088:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800308c:	d110      	bne.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800308e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003098:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800309c:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800309e:	e00d      	b.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	3304      	adds	r3, #4
 80030a4:	4618      	mov	r0, r3
 80030a6:	f000 f94d 	bl	8003344 <RCCEx_PLLSAI1_ConfigNP>
 80030aa:	4603      	mov	r3, r0
 80030ac:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80030ae:	e005      	b.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	77fb      	strb	r3, [r7, #31]
        break;
 80030b4:	e002      	b.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80030b6:	bf00      	nop
 80030b8:	e000      	b.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80030ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030bc:	7ffb      	ldrb	r3, [r7, #31]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d105      	bne.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c6:	4618      	mov	r0, r3
 80030c8:	f7ff fee8 	bl	8002e9c <LL_RCC_SetSAIClockSource>
 80030cc:	e001      	b.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030ce:	7ffb      	ldrb	r3, [r7, #31]
 80030d0:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d046      	beq.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80030de:	f7ff ff56 	bl	8002f8e <LL_RCC_GetRTCClockSource>
 80030e2:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e8:	69ba      	ldr	r2, [r7, #24]
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d03c      	beq.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80030ee:	f7fe fbc9 	bl	8001884 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80030f2:	69bb      	ldr	r3, [r7, #24]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d105      	bne.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fc:	4618      	mov	r0, r3
 80030fe:	f7ff ff30 	bl	8002f62 <LL_RCC_SetRTCClockSource>
 8003102:	e02e      	b.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8003104:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003108:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800310c:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800310e:	f7ff ff4b 	bl	8002fa8 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8003112:	f7ff ff5a 	bl	8002fca <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003120:	4313      	orrs	r3, r2
 8003122:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8003124:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800312e:	f7ff fde1 	bl	8002cf4 <LL_RCC_LSE_IsEnabled>
 8003132:	4603      	mov	r3, r0
 8003134:	2b01      	cmp	r3, #1
 8003136:	d114      	bne.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003138:	f7fd ff82 	bl	8001040 <HAL_GetTick>
 800313c:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800313e:	e00b      	b.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003140:	f7fd ff7e 	bl	8001040 <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	f241 3288 	movw	r2, #5000	; 0x1388
 800314e:	4293      	cmp	r3, r2
 8003150:	d902      	bls.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	77fb      	strb	r3, [r7, #31]
              break;
 8003156:	e004      	b.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8003158:	f7ff fdde 	bl	8002d18 <LL_RCC_LSE_IsReady>
 800315c:	4603      	mov	r3, r0
 800315e:	2b01      	cmp	r3, #1
 8003160:	d1ee      	bne.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8003162:	7ffb      	ldrb	r3, [r7, #31]
 8003164:	77bb      	strb	r3, [r7, #30]
 8003166:	e001      	b.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003168:	7ffb      	ldrb	r3, [r7, #31]
 800316a:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0301 	and.w	r3, r3, #1
 8003174:	2b00      	cmp	r3, #0
 8003176:	d004      	beq.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	699b      	ldr	r3, [r3, #24]
 800317c:	4618      	mov	r0, r3
 800317e:	f7ff fe2a 	bl	8002dd6 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0302 	and.w	r3, r3, #2
 800318a:	2b00      	cmp	r3, #0
 800318c:	d004      	beq.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	69db      	ldr	r3, [r3, #28]
 8003192:	4618      	mov	r0, r3
 8003194:	f7ff fe35 	bl	8002e02 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0310 	and.w	r3, r3, #16
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d004      	beq.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031a8:	4618      	mov	r0, r3
 80031aa:	f7ff fe5d 	bl	8002e68 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0320 	and.w	r3, r3, #32
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d004      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031be:	4618      	mov	r0, r3
 80031c0:	f7ff fe52 	bl	8002e68 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0304 	and.w	r3, r3, #4
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d004      	beq.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6a1b      	ldr	r3, [r3, #32]
 80031d4:	4618      	mov	r0, r3
 80031d6:	f7ff fe2a 	bl	8002e2e <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0308 	and.w	r3, r3, #8
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d004      	beq.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ea:	4618      	mov	r0, r3
 80031ec:	f7ff fe1f 	bl	8002e2e <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d022      	beq.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003200:	4618      	mov	r0, r3
 8003202:	f7ff fe8d 	bl	8002f20 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800320a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800320e:	d107      	bne.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8003210:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800321a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800321e:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003224:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003228:	d10b      	bne.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	3304      	adds	r3, #4
 800322e:	4618      	mov	r0, r3
 8003230:	f000 f8e3 	bl	80033fa <RCCEx_PLLSAI1_ConfigNQ>
 8003234:	4603      	mov	r3, r0
 8003236:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003238:	7ffb      	ldrb	r3, [r7, #31]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d001      	beq.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800323e:	7ffb      	ldrb	r3, [r7, #31]
 8003240:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800324a:	2b00      	cmp	r3, #0
 800324c:	d02b      	beq.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003252:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003256:	d008      	beq.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800325c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003260:	d003      	beq.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003266:	2b00      	cmp	r3, #0
 8003268:	d105      	bne.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800326e:	4618      	mov	r0, r3
 8003270:	f7ff fe2a 	bl	8002ec8 <LL_RCC_SetRNGClockSource>
 8003274:	e00a      	b.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x240>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800327a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800327e:	60fb      	str	r3, [r7, #12]
 8003280:	2000      	movs	r0, #0
 8003282:	f7ff fe21 	bl	8002ec8 <LL_RCC_SetRNGClockSource>
 8003286:	68f8      	ldr	r0, [r7, #12]
 8003288:	f7ff fe34 	bl	8002ef4 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003290:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8003294:	d107      	bne.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003296:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032a4:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d022      	beq.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032b6:	4618      	mov	r0, r3
 80032b8:	f7ff fe3d 	bl	8002f36 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032c4:	d107      	bne.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80032c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032d4:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80032de:	d10b      	bne.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	3304      	adds	r3, #4
 80032e4:	4618      	mov	r0, r3
 80032e6:	f000 f8e3 	bl	80034b0 <RCCEx_PLLSAI1_ConfigNR>
 80032ea:	4603      	mov	r3, r0
 80032ec:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80032ee:	7ffb      	ldrb	r3, [r7, #31]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d001      	beq.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 80032f4:	7ffb      	ldrb	r3, [r7, #31]
 80032f6:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003300:	2b00      	cmp	r3, #0
 8003302:	d004      	beq.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003308:	4618      	mov	r0, r3
 800330a:	f7ff fd26 	bl	8002d5a <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d009      	beq.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800331e:	4618      	mov	r0, r3
 8003320:	f7ff fd45 	bl	8002dae <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003328:	4618      	mov	r0, r3
 800332a:	f7ff fd2c 	bl	8002d86 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800332e:	7fbb      	ldrb	r3, [r7, #30]
}
 8003330:	4618      	mov	r0, r3
 8003332:	3720      	adds	r7, #32
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}

08003338 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 800333c:	f7ff fcfe 	bl	8002d3c <LL_RCC_MSI_EnablePLLMode>
}
 8003340:	bf00      	nop
 8003342:	bd80      	pop	{r7, pc}

08003344 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800334c:	2300      	movs	r3, #0
 800334e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003350:	f7ff fe5b 	bl	800300a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003354:	f7fd fe74 	bl	8001040 <HAL_GetTick>
 8003358:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800335a:	e009      	b.n	8003370 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800335c:	f7fd fe70 	bl	8001040 <HAL_GetTick>
 8003360:	4602      	mov	r2, r0
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	2b02      	cmp	r3, #2
 8003368:	d902      	bls.n	8003370 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	73fb      	strb	r3, [r7, #15]
      break;
 800336e:	e004      	b.n	800337a <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003370:	f7ff fe5a 	bl	8003028 <LL_RCC_PLLSAI1_IsReady>
 8003374:	4603      	mov	r3, r0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d1f0      	bne.n	800335c <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800337a:	7bfb      	ldrb	r3, [r7, #15]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d137      	bne.n	80033f0 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003380:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003384:	691b      	ldr	r3, [r3, #16]
 8003386:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	021b      	lsls	r3, r3, #8
 8003390:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003394:	4313      	orrs	r3, r2
 8003396:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8003398:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800339c:	691b      	ldr	r3, [r3, #16]
 800339e:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033aa:	4313      	orrs	r3, r2
 80033ac:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80033ae:	f7ff fe1d 	bl	8002fec <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033b2:	f7fd fe45 	bl	8001040 <HAL_GetTick>
 80033b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80033b8:	e009      	b.n	80033ce <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80033ba:	f7fd fe41 	bl	8001040 <HAL_GetTick>
 80033be:	4602      	mov	r2, r0
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	1ad3      	subs	r3, r2, r3
 80033c4:	2b02      	cmp	r3, #2
 80033c6:	d902      	bls.n	80033ce <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80033c8:	2303      	movs	r3, #3
 80033ca:	73fb      	strb	r3, [r7, #15]
        break;
 80033cc:	e004      	b.n	80033d8 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80033ce:	f7ff fe2b 	bl	8003028 <LL_RCC_PLLSAI1_IsReady>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d1f0      	bne.n	80033ba <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80033d8:	7bfb      	ldrb	r3, [r7, #15]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d108      	bne.n	80033f0 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80033de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033e2:	691a      	ldr	r2, [r3, #16]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	691b      	ldr	r3, [r3, #16]
 80033e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033ec:	4313      	orrs	r3, r2
 80033ee:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80033f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3710      	adds	r7, #16
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}

080033fa <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80033fa:	b580      	push	{r7, lr}
 80033fc:	b084      	sub	sp, #16
 80033fe:	af00      	add	r7, sp, #0
 8003400:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003402:	2300      	movs	r3, #0
 8003404:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003406:	f7ff fe00 	bl	800300a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800340a:	f7fd fe19 	bl	8001040 <HAL_GetTick>
 800340e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003410:	e009      	b.n	8003426 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003412:	f7fd fe15 	bl	8001040 <HAL_GetTick>
 8003416:	4602      	mov	r2, r0
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	2b02      	cmp	r3, #2
 800341e:	d902      	bls.n	8003426 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	73fb      	strb	r3, [r7, #15]
      break;
 8003424:	e004      	b.n	8003430 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003426:	f7ff fdff 	bl	8003028 <LL_RCC_PLLSAI1_IsReady>
 800342a:	4603      	mov	r3, r0
 800342c:	2b00      	cmp	r3, #0
 800342e:	d1f0      	bne.n	8003412 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8003430:	7bfb      	ldrb	r3, [r7, #15]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d137      	bne.n	80034a6 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003436:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800343a:	691b      	ldr	r3, [r3, #16]
 800343c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	021b      	lsls	r3, r3, #8
 8003446:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800344a:	4313      	orrs	r3, r2
 800344c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800344e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003452:	691b      	ldr	r3, [r3, #16]
 8003454:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003460:	4313      	orrs	r3, r2
 8003462:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003464:	f7ff fdc2 	bl	8002fec <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003468:	f7fd fdea 	bl	8001040 <HAL_GetTick>
 800346c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800346e:	e009      	b.n	8003484 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003470:	f7fd fde6 	bl	8001040 <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	2b02      	cmp	r3, #2
 800347c:	d902      	bls.n	8003484 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	73fb      	strb	r3, [r7, #15]
        break;
 8003482:	e004      	b.n	800348e <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003484:	f7ff fdd0 	bl	8003028 <LL_RCC_PLLSAI1_IsReady>
 8003488:	4603      	mov	r3, r0
 800348a:	2b01      	cmp	r3, #1
 800348c:	d1f0      	bne.n	8003470 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800348e:	7bfb      	ldrb	r3, [r7, #15]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d108      	bne.n	80034a6 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003494:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003498:	691a      	ldr	r2, [r3, #16]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	691b      	ldr	r3, [r3, #16]
 800349e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80034a2:	4313      	orrs	r3, r2
 80034a4:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80034a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3710      	adds	r7, #16
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}

080034b0 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b084      	sub	sp, #16
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80034b8:	2300      	movs	r3, #0
 80034ba:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80034bc:	f7ff fda5 	bl	800300a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80034c0:	f7fd fdbe 	bl	8001040 <HAL_GetTick>
 80034c4:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80034c6:	e009      	b.n	80034dc <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80034c8:	f7fd fdba 	bl	8001040 <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d902      	bls.n	80034dc <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	73fb      	strb	r3, [r7, #15]
      break;
 80034da:	e004      	b.n	80034e6 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80034dc:	f7ff fda4 	bl	8003028 <LL_RCC_PLLSAI1_IsReady>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d1f0      	bne.n	80034c8 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80034e6:	7bfb      	ldrb	r3, [r7, #15]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d137      	bne.n	800355c <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80034ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034f0:	691b      	ldr	r3, [r3, #16]
 80034f2:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	021b      	lsls	r3, r3, #8
 80034fc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003500:	4313      	orrs	r3, r2
 8003502:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8003504:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003508:	691b      	ldr	r3, [r3, #16]
 800350a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	68db      	ldr	r3, [r3, #12]
 8003512:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003516:	4313      	orrs	r3, r2
 8003518:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800351a:	f7ff fd67 	bl	8002fec <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800351e:	f7fd fd8f 	bl	8001040 <HAL_GetTick>
 8003522:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003524:	e009      	b.n	800353a <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003526:	f7fd fd8b 	bl	8001040 <HAL_GetTick>
 800352a:	4602      	mov	r2, r0
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	2b02      	cmp	r3, #2
 8003532:	d902      	bls.n	800353a <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8003534:	2303      	movs	r3, #3
 8003536:	73fb      	strb	r3, [r7, #15]
        break;
 8003538:	e004      	b.n	8003544 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800353a:	f7ff fd75 	bl	8003028 <LL_RCC_PLLSAI1_IsReady>
 800353e:	4603      	mov	r3, r0
 8003540:	2b01      	cmp	r3, #1
 8003542:	d1f0      	bne.n	8003526 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8003544:	7bfb      	ldrb	r3, [r7, #15]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d108      	bne.n	800355c <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800354a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800354e:	691a      	ldr	r2, [r3, #16]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	691b      	ldr	r3, [r3, #16]
 8003554:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003558:	4313      	orrs	r3, r2
 800355a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800355c:	7bfb      	ldrb	r3, [r7, #15]
}
 800355e:	4618      	mov	r0, r3
 8003560:	3710      	adds	r7, #16
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}

08003566 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003566:	b580      	push	{r7, lr}
 8003568:	b082      	sub	sp, #8
 800356a:	af00      	add	r7, sp, #0
 800356c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d101      	bne.n	8003578 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e049      	b.n	800360c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800357e:	b2db      	uxtb	r3, r3
 8003580:	2b00      	cmp	r3, #0
 8003582:	d106      	bne.n	8003592 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2200      	movs	r2, #0
 8003588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f000 f841 	bl	8003614 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2202      	movs	r2, #2
 8003596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	3304      	adds	r3, #4
 80035a2:	4619      	mov	r1, r3
 80035a4:	4610      	mov	r0, r2
 80035a6:	f000 f9d5 	bl	8003954 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2201      	movs	r2, #1
 80035ae:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2201      	movs	r2, #1
 80035b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2201      	movs	r2, #1
 80035be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2201      	movs	r2, #1
 80035c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2201      	movs	r2, #1
 80035ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2201      	movs	r2, #1
 80035d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2201      	movs	r2, #1
 80035de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2201      	movs	r2, #1
 80035e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2201      	movs	r2, #1
 80035ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2201      	movs	r2, #1
 80035f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2201      	movs	r2, #1
 80035fe:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2201      	movs	r2, #1
 8003606:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800360a:	2300      	movs	r3, #0
}
 800360c:	4618      	mov	r0, r3
 800360e:	3708      	adds	r7, #8
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}

08003614 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003614:	b480      	push	{r7}
 8003616:	b083      	sub	sp, #12
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800361c:	bf00      	nop
 800361e:	370c      	adds	r7, #12
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr

08003628 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003628:	b480      	push	{r7}
 800362a:	b085      	sub	sp, #20
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003636:	b2db      	uxtb	r3, r3
 8003638:	2b01      	cmp	r3, #1
 800363a:	d001      	beq.n	8003640 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e036      	b.n	80036ae <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2202      	movs	r2, #2
 8003644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	68da      	ldr	r2, [r3, #12]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f042 0201 	orr.w	r2, r2, #1
 8003656:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a17      	ldr	r2, [pc, #92]	; (80036bc <HAL_TIM_Base_Start_IT+0x94>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d004      	beq.n	800366c <HAL_TIM_Base_Start_IT+0x44>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800366a:	d115      	bne.n	8003698 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	689a      	ldr	r2, [r3, #8]
 8003672:	4b13      	ldr	r3, [pc, #76]	; (80036c0 <HAL_TIM_Base_Start_IT+0x98>)
 8003674:	4013      	ands	r3, r2
 8003676:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2b06      	cmp	r3, #6
 800367c:	d015      	beq.n	80036aa <HAL_TIM_Base_Start_IT+0x82>
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003684:	d011      	beq.n	80036aa <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f042 0201 	orr.w	r2, r2, #1
 8003694:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003696:	e008      	b.n	80036aa <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f042 0201 	orr.w	r2, r2, #1
 80036a6:	601a      	str	r2, [r3, #0]
 80036a8:	e000      	b.n	80036ac <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036aa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80036ac:	2300      	movs	r3, #0
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3714      	adds	r7, #20
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr
 80036ba:	bf00      	nop
 80036bc:	40012c00 	.word	0x40012c00
 80036c0:	00010007 	.word	0x00010007

080036c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b082      	sub	sp, #8
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	691b      	ldr	r3, [r3, #16]
 80036d2:	f003 0302 	and.w	r3, r3, #2
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d122      	bne.n	8003720 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	f003 0302 	and.w	r3, r3, #2
 80036e4:	2b02      	cmp	r3, #2
 80036e6:	d11b      	bne.n	8003720 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f06f 0202 	mvn.w	r2, #2
 80036f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2201      	movs	r2, #1
 80036f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	699b      	ldr	r3, [r3, #24]
 80036fe:	f003 0303 	and.w	r3, r3, #3
 8003702:	2b00      	cmp	r3, #0
 8003704:	d003      	beq.n	800370e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f000 f905 	bl	8003916 <HAL_TIM_IC_CaptureCallback>
 800370c:	e005      	b.n	800371a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f000 f8f7 	bl	8003902 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f000 f908 	bl	800392a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2200      	movs	r2, #0
 800371e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	691b      	ldr	r3, [r3, #16]
 8003726:	f003 0304 	and.w	r3, r3, #4
 800372a:	2b04      	cmp	r3, #4
 800372c:	d122      	bne.n	8003774 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	f003 0304 	and.w	r3, r3, #4
 8003738:	2b04      	cmp	r3, #4
 800373a:	d11b      	bne.n	8003774 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f06f 0204 	mvn.w	r2, #4
 8003744:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2202      	movs	r2, #2
 800374a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	699b      	ldr	r3, [r3, #24]
 8003752:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003756:	2b00      	cmp	r3, #0
 8003758:	d003      	beq.n	8003762 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f000 f8db 	bl	8003916 <HAL_TIM_IC_CaptureCallback>
 8003760:	e005      	b.n	800376e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f000 f8cd 	bl	8003902 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f000 f8de 	bl	800392a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	691b      	ldr	r3, [r3, #16]
 800377a:	f003 0308 	and.w	r3, r3, #8
 800377e:	2b08      	cmp	r3, #8
 8003780:	d122      	bne.n	80037c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	f003 0308 	and.w	r3, r3, #8
 800378c:	2b08      	cmp	r3, #8
 800378e:	d11b      	bne.n	80037c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f06f 0208 	mvn.w	r2, #8
 8003798:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2204      	movs	r2, #4
 800379e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	69db      	ldr	r3, [r3, #28]
 80037a6:	f003 0303 	and.w	r3, r3, #3
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d003      	beq.n	80037b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f000 f8b1 	bl	8003916 <HAL_TIM_IC_CaptureCallback>
 80037b4:	e005      	b.n	80037c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f000 f8a3 	bl	8003902 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f000 f8b4 	bl	800392a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	691b      	ldr	r3, [r3, #16]
 80037ce:	f003 0310 	and.w	r3, r3, #16
 80037d2:	2b10      	cmp	r3, #16
 80037d4:	d122      	bne.n	800381c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	f003 0310 	and.w	r3, r3, #16
 80037e0:	2b10      	cmp	r3, #16
 80037e2:	d11b      	bne.n	800381c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f06f 0210 	mvn.w	r2, #16
 80037ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2208      	movs	r2, #8
 80037f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	69db      	ldr	r3, [r3, #28]
 80037fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d003      	beq.n	800380a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f000 f887 	bl	8003916 <HAL_TIM_IC_CaptureCallback>
 8003808:	e005      	b.n	8003816 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f000 f879 	bl	8003902 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f000 f88a 	bl	800392a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	691b      	ldr	r3, [r3, #16]
 8003822:	f003 0301 	and.w	r3, r3, #1
 8003826:	2b01      	cmp	r3, #1
 8003828:	d10e      	bne.n	8003848 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	f003 0301 	and.w	r3, r3, #1
 8003834:	2b01      	cmp	r3, #1
 8003836:	d107      	bne.n	8003848 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f06f 0201 	mvn.w	r2, #1
 8003840:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f7fd f8fc 	bl	8000a40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	691b      	ldr	r3, [r3, #16]
 800384e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003852:	2b80      	cmp	r3, #128	; 0x80
 8003854:	d10e      	bne.n	8003874 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003860:	2b80      	cmp	r3, #128	; 0x80
 8003862:	d107      	bne.n	8003874 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800386c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f000 f8de 	bl	8003a30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	691b      	ldr	r3, [r3, #16]
 800387a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800387e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003882:	d10e      	bne.n	80038a2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	68db      	ldr	r3, [r3, #12]
 800388a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800388e:	2b80      	cmp	r3, #128	; 0x80
 8003890:	d107      	bne.n	80038a2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800389a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f000 f8d1 	bl	8003a44 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	691b      	ldr	r3, [r3, #16]
 80038a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ac:	2b40      	cmp	r3, #64	; 0x40
 80038ae:	d10e      	bne.n	80038ce <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	68db      	ldr	r3, [r3, #12]
 80038b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ba:	2b40      	cmp	r3, #64	; 0x40
 80038bc:	d107      	bne.n	80038ce <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80038c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f000 f838 	bl	800393e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	691b      	ldr	r3, [r3, #16]
 80038d4:	f003 0320 	and.w	r3, r3, #32
 80038d8:	2b20      	cmp	r3, #32
 80038da:	d10e      	bne.n	80038fa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	68db      	ldr	r3, [r3, #12]
 80038e2:	f003 0320 	and.w	r3, r3, #32
 80038e6:	2b20      	cmp	r3, #32
 80038e8:	d107      	bne.n	80038fa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f06f 0220 	mvn.w	r2, #32
 80038f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f000 f891 	bl	8003a1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80038fa:	bf00      	nop
 80038fc:	3708      	adds	r7, #8
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}

08003902 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003902:	b480      	push	{r7}
 8003904:	b083      	sub	sp, #12
 8003906:	af00      	add	r7, sp, #0
 8003908:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800390a:	bf00      	nop
 800390c:	370c      	adds	r7, #12
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr

08003916 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003916:	b480      	push	{r7}
 8003918:	b083      	sub	sp, #12
 800391a:	af00      	add	r7, sp, #0
 800391c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800391e:	bf00      	nop
 8003920:	370c      	adds	r7, #12
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr

0800392a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800392a:	b480      	push	{r7}
 800392c:	b083      	sub	sp, #12
 800392e:	af00      	add	r7, sp, #0
 8003930:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003932:	bf00      	nop
 8003934:	370c      	adds	r7, #12
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr

0800393e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800393e:	b480      	push	{r7}
 8003940:	b083      	sub	sp, #12
 8003942:	af00      	add	r7, sp, #0
 8003944:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003946:	bf00      	nop
 8003948:	370c      	adds	r7, #12
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr
	...

08003954 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003954:	b480      	push	{r7}
 8003956:	b085      	sub	sp, #20
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	4a2a      	ldr	r2, [pc, #168]	; (8003a10 <TIM_Base_SetConfig+0xbc>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d003      	beq.n	8003974 <TIM_Base_SetConfig+0x20>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003972:	d108      	bne.n	8003986 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800397a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	68fa      	ldr	r2, [r7, #12]
 8003982:	4313      	orrs	r3, r2
 8003984:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4a21      	ldr	r2, [pc, #132]	; (8003a10 <TIM_Base_SetConfig+0xbc>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d00b      	beq.n	80039a6 <TIM_Base_SetConfig+0x52>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003994:	d007      	beq.n	80039a6 <TIM_Base_SetConfig+0x52>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	4a1e      	ldr	r2, [pc, #120]	; (8003a14 <TIM_Base_SetConfig+0xc0>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d003      	beq.n	80039a6 <TIM_Base_SetConfig+0x52>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4a1d      	ldr	r2, [pc, #116]	; (8003a18 <TIM_Base_SetConfig+0xc4>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d108      	bne.n	80039b8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	68fa      	ldr	r2, [r7, #12]
 80039b4:	4313      	orrs	r3, r2
 80039b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	695b      	ldr	r3, [r3, #20]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	68fa      	ldr	r2, [r7, #12]
 80039ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	689a      	ldr	r2, [r3, #8]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	4a0c      	ldr	r2, [pc, #48]	; (8003a10 <TIM_Base_SetConfig+0xbc>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d007      	beq.n	80039f4 <TIM_Base_SetConfig+0xa0>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	4a0b      	ldr	r2, [pc, #44]	; (8003a14 <TIM_Base_SetConfig+0xc0>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d003      	beq.n	80039f4 <TIM_Base_SetConfig+0xa0>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	4a0a      	ldr	r2, [pc, #40]	; (8003a18 <TIM_Base_SetConfig+0xc4>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d103      	bne.n	80039fc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	691a      	ldr	r2, [r3, #16]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2201      	movs	r2, #1
 8003a00:	615a      	str	r2, [r3, #20]
}
 8003a02:	bf00      	nop
 8003a04:	3714      	adds	r7, #20
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr
 8003a0e:	bf00      	nop
 8003a10:	40012c00 	.word	0x40012c00
 8003a14:	40014400 	.word	0x40014400
 8003a18:	40014800 	.word	0x40014800

08003a1c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a24:	bf00      	nop
 8003a26:	370c      	adds	r7, #12
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr

08003a30 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a38:	bf00      	nop
 8003a3a:	370c      	adds	r7, #12
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr

08003a44 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b083      	sub	sp, #12
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003a4c:	bf00      	nop
 8003a4e:	370c      	adds	r7, #12
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr

08003a58 <LL_RCC_GetUSARTClockSource>:
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8003a60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a64:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	4013      	ands	r3, r2
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	370c      	adds	r7, #12
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr

08003a78 <LL_RCC_GetLPUARTClockSource>:
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b083      	sub	sp, #12
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8003a80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a84:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	4013      	ands	r3, r2
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	370c      	adds	r7, #12
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr

08003a98 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b082      	sub	sp, #8
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d101      	bne.n	8003aaa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e042      	b.n	8003b30 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d106      	bne.n	8003ac2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	f7fd f83d 	bl	8000b3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2224      	movs	r2, #36	; 0x24
 8003ac6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f022 0201 	bic.w	r2, r2, #1
 8003ad8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f000 f82c 	bl	8003b38 <UART_SetConfig>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d101      	bne.n	8003aea <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e022      	b.n	8003b30 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d002      	beq.n	8003af8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f000 fa46 	bl	8003f84 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	685a      	ldr	r2, [r3, #4]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b06:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	689a      	ldr	r2, [r3, #8]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b16:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f042 0201 	orr.w	r2, r2, #1
 8003b26:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f000 facd 	bl	80040c8 <UART_CheckIdleState>
 8003b2e:	4603      	mov	r3, r0
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3708      	adds	r7, #8
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b3c:	b08c      	sub	sp, #48	; 0x30
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b42:	2300      	movs	r3, #0
 8003b44:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	689a      	ldr	r2, [r3, #8]
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	691b      	ldr	r3, [r3, #16]
 8003b50:	431a      	orrs	r2, r3
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	695b      	ldr	r3, [r3, #20]
 8003b56:	431a      	orrs	r2, r3
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	69db      	ldr	r3, [r3, #28]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	4baf      	ldr	r3, [pc, #700]	; (8003e24 <UART_SetConfig+0x2ec>)
 8003b68:	4013      	ands	r3, r2
 8003b6a:	697a      	ldr	r2, [r7, #20]
 8003b6c:	6812      	ldr	r2, [r2, #0]
 8003b6e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b70:	430b      	orrs	r3, r1
 8003b72:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	68da      	ldr	r2, [r3, #12]
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	430a      	orrs	r2, r1
 8003b88:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	699b      	ldr	r3, [r3, #24]
 8003b8e:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4aa4      	ldr	r2, [pc, #656]	; (8003e28 <UART_SetConfig+0x2f0>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d004      	beq.n	8003ba4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	6a1b      	ldr	r3, [r3, #32]
 8003b9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003bae:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003bb2:	697a      	ldr	r2, [r7, #20]
 8003bb4:	6812      	ldr	r2, [r2, #0]
 8003bb6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003bb8:	430b      	orrs	r3, r1
 8003bba:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc2:	f023 010f 	bic.w	r1, r3, #15
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	430a      	orrs	r2, r1
 8003bd0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a95      	ldr	r2, [pc, #596]	; (8003e2c <UART_SetConfig+0x2f4>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d125      	bne.n	8003c28 <UART_SetConfig+0xf0>
 8003bdc:	2003      	movs	r0, #3
 8003bde:	f7ff ff3b 	bl	8003a58 <LL_RCC_GetUSARTClockSource>
 8003be2:	4603      	mov	r3, r0
 8003be4:	2b03      	cmp	r3, #3
 8003be6:	d81b      	bhi.n	8003c20 <UART_SetConfig+0xe8>
 8003be8:	a201      	add	r2, pc, #4	; (adr r2, 8003bf0 <UART_SetConfig+0xb8>)
 8003bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bee:	bf00      	nop
 8003bf0:	08003c01 	.word	0x08003c01
 8003bf4:	08003c11 	.word	0x08003c11
 8003bf8:	08003c09 	.word	0x08003c09
 8003bfc:	08003c19 	.word	0x08003c19
 8003c00:	2301      	movs	r3, #1
 8003c02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c06:	e042      	b.n	8003c8e <UART_SetConfig+0x156>
 8003c08:	2302      	movs	r3, #2
 8003c0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c0e:	e03e      	b.n	8003c8e <UART_SetConfig+0x156>
 8003c10:	2304      	movs	r3, #4
 8003c12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c16:	e03a      	b.n	8003c8e <UART_SetConfig+0x156>
 8003c18:	2308      	movs	r3, #8
 8003c1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c1e:	e036      	b.n	8003c8e <UART_SetConfig+0x156>
 8003c20:	2310      	movs	r3, #16
 8003c22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c26:	e032      	b.n	8003c8e <UART_SetConfig+0x156>
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a7e      	ldr	r2, [pc, #504]	; (8003e28 <UART_SetConfig+0x2f0>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d12a      	bne.n	8003c88 <UART_SetConfig+0x150>
 8003c32:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8003c36:	f7ff ff1f 	bl	8003a78 <LL_RCC_GetLPUARTClockSource>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c40:	d01a      	beq.n	8003c78 <UART_SetConfig+0x140>
 8003c42:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c46:	d81b      	bhi.n	8003c80 <UART_SetConfig+0x148>
 8003c48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c4c:	d00c      	beq.n	8003c68 <UART_SetConfig+0x130>
 8003c4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c52:	d815      	bhi.n	8003c80 <UART_SetConfig+0x148>
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d003      	beq.n	8003c60 <UART_SetConfig+0x128>
 8003c58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c5c:	d008      	beq.n	8003c70 <UART_SetConfig+0x138>
 8003c5e:	e00f      	b.n	8003c80 <UART_SetConfig+0x148>
 8003c60:	2300      	movs	r3, #0
 8003c62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c66:	e012      	b.n	8003c8e <UART_SetConfig+0x156>
 8003c68:	2302      	movs	r3, #2
 8003c6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c6e:	e00e      	b.n	8003c8e <UART_SetConfig+0x156>
 8003c70:	2304      	movs	r3, #4
 8003c72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c76:	e00a      	b.n	8003c8e <UART_SetConfig+0x156>
 8003c78:	2308      	movs	r3, #8
 8003c7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c7e:	e006      	b.n	8003c8e <UART_SetConfig+0x156>
 8003c80:	2310      	movs	r3, #16
 8003c82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c86:	e002      	b.n	8003c8e <UART_SetConfig+0x156>
 8003c88:	2310      	movs	r3, #16
 8003c8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a65      	ldr	r2, [pc, #404]	; (8003e28 <UART_SetConfig+0x2f0>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	f040 8097 	bne.w	8003dc8 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003c9a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003c9e:	2b08      	cmp	r3, #8
 8003ca0:	d823      	bhi.n	8003cea <UART_SetConfig+0x1b2>
 8003ca2:	a201      	add	r2, pc, #4	; (adr r2, 8003ca8 <UART_SetConfig+0x170>)
 8003ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ca8:	08003ccd 	.word	0x08003ccd
 8003cac:	08003ceb 	.word	0x08003ceb
 8003cb0:	08003cd5 	.word	0x08003cd5
 8003cb4:	08003ceb 	.word	0x08003ceb
 8003cb8:	08003cdb 	.word	0x08003cdb
 8003cbc:	08003ceb 	.word	0x08003ceb
 8003cc0:	08003ceb 	.word	0x08003ceb
 8003cc4:	08003ceb 	.word	0x08003ceb
 8003cc8:	08003ce3 	.word	0x08003ce3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ccc:	f7fe ff00 	bl	8002ad0 <HAL_RCC_GetPCLK1Freq>
 8003cd0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003cd2:	e010      	b.n	8003cf6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003cd4:	4b56      	ldr	r3, [pc, #344]	; (8003e30 <UART_SetConfig+0x2f8>)
 8003cd6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003cd8:	e00d      	b.n	8003cf6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cda:	f7fe fe79 	bl	80029d0 <HAL_RCC_GetSysClockFreq>
 8003cde:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003ce0:	e009      	b.n	8003cf6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ce2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ce6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003ce8:	e005      	b.n	8003cf6 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8003cea:	2300      	movs	r3, #0
 8003cec:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003cf4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	f000 812a 	beq.w	8003f52 <UART_SetConfig+0x41a>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d02:	4a4c      	ldr	r2, [pc, #304]	; (8003e34 <UART_SetConfig+0x2fc>)
 8003d04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003d08:	461a      	mov	r2, r3
 8003d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003d10:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	685a      	ldr	r2, [r3, #4]
 8003d16:	4613      	mov	r3, r2
 8003d18:	005b      	lsls	r3, r3, #1
 8003d1a:	4413      	add	r3, r2
 8003d1c:	69ba      	ldr	r2, [r7, #24]
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	d305      	bcc.n	8003d2e <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003d28:	69ba      	ldr	r2, [r7, #24]
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d903      	bls.n	8003d36 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003d34:	e10d      	b.n	8003f52 <UART_SetConfig+0x41a>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d38:	2200      	movs	r2, #0
 8003d3a:	60bb      	str	r3, [r7, #8]
 8003d3c:	60fa      	str	r2, [r7, #12]
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d42:	4a3c      	ldr	r2, [pc, #240]	; (8003e34 <UART_SetConfig+0x2fc>)
 8003d44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003d48:	b29b      	uxth	r3, r3
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	603b      	str	r3, [r7, #0]
 8003d4e:	607a      	str	r2, [r7, #4]
 8003d50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d54:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003d58:	f7fc fa12 	bl	8000180 <__aeabi_uldivmod>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	460b      	mov	r3, r1
 8003d60:	4610      	mov	r0, r2
 8003d62:	4619      	mov	r1, r3
 8003d64:	f04f 0200 	mov.w	r2, #0
 8003d68:	f04f 0300 	mov.w	r3, #0
 8003d6c:	020b      	lsls	r3, r1, #8
 8003d6e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003d72:	0202      	lsls	r2, r0, #8
 8003d74:	6979      	ldr	r1, [r7, #20]
 8003d76:	6849      	ldr	r1, [r1, #4]
 8003d78:	0849      	lsrs	r1, r1, #1
 8003d7a:	2000      	movs	r0, #0
 8003d7c:	460c      	mov	r4, r1
 8003d7e:	4605      	mov	r5, r0
 8003d80:	eb12 0804 	adds.w	r8, r2, r4
 8003d84:	eb43 0905 	adc.w	r9, r3, r5
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	469a      	mov	sl, r3
 8003d90:	4693      	mov	fp, r2
 8003d92:	4652      	mov	r2, sl
 8003d94:	465b      	mov	r3, fp
 8003d96:	4640      	mov	r0, r8
 8003d98:	4649      	mov	r1, r9
 8003d9a:	f7fc f9f1 	bl	8000180 <__aeabi_uldivmod>
 8003d9e:	4602      	mov	r2, r0
 8003da0:	460b      	mov	r3, r1
 8003da2:	4613      	mov	r3, r2
 8003da4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003da6:	6a3b      	ldr	r3, [r7, #32]
 8003da8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003dac:	d308      	bcc.n	8003dc0 <UART_SetConfig+0x288>
 8003dae:	6a3b      	ldr	r3, [r7, #32]
 8003db0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003db4:	d204      	bcs.n	8003dc0 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	6a3a      	ldr	r2, [r7, #32]
 8003dbc:	60da      	str	r2, [r3, #12]
 8003dbe:	e0c8      	b.n	8003f52 <UART_SetConfig+0x41a>
        }
        else
        {
          ret = HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003dc6:	e0c4      	b.n	8003f52 <UART_SetConfig+0x41a>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	69db      	ldr	r3, [r3, #28]
 8003dcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dd0:	d16d      	bne.n	8003eae <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8003dd2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003dd6:	3b01      	subs	r3, #1
 8003dd8:	2b07      	cmp	r3, #7
 8003dda:	d82d      	bhi.n	8003e38 <UART_SetConfig+0x300>
 8003ddc:	a201      	add	r2, pc, #4	; (adr r2, 8003de4 <UART_SetConfig+0x2ac>)
 8003dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003de2:	bf00      	nop
 8003de4:	08003e05 	.word	0x08003e05
 8003de8:	08003e0d 	.word	0x08003e0d
 8003dec:	08003e39 	.word	0x08003e39
 8003df0:	08003e13 	.word	0x08003e13
 8003df4:	08003e39 	.word	0x08003e39
 8003df8:	08003e39 	.word	0x08003e39
 8003dfc:	08003e39 	.word	0x08003e39
 8003e00:	08003e1b 	.word	0x08003e1b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e04:	f7fe fe7a 	bl	8002afc <HAL_RCC_GetPCLK2Freq>
 8003e08:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003e0a:	e01b      	b.n	8003e44 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e0c:	4b08      	ldr	r3, [pc, #32]	; (8003e30 <UART_SetConfig+0x2f8>)
 8003e0e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003e10:	e018      	b.n	8003e44 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e12:	f7fe fddd 	bl	80029d0 <HAL_RCC_GetSysClockFreq>
 8003e16:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003e18:	e014      	b.n	8003e44 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e1e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003e20:	e010      	b.n	8003e44 <UART_SetConfig+0x30c>
 8003e22:	bf00      	nop
 8003e24:	cfff69f3 	.word	0xcfff69f3
 8003e28:	40008000 	.word	0x40008000
 8003e2c:	40013800 	.word	0x40013800
 8003e30:	00f42400 	.word	0x00f42400
 8003e34:	08008b60 	.word	0x08008b60
      default:
        pclk = 0U;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003e42:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	f000 8083 	beq.w	8003f52 <UART_SetConfig+0x41a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e50:	4a4a      	ldr	r2, [pc, #296]	; (8003f7c <UART_SetConfig+0x444>)
 8003e52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003e56:	461a      	mov	r2, r3
 8003e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5a:	fbb3 f3f2 	udiv	r3, r3, r2
 8003e5e:	005a      	lsls	r2, r3, #1
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	085b      	lsrs	r3, r3, #1
 8003e66:	441a      	add	r2, r3
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e70:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e72:	6a3b      	ldr	r3, [r7, #32]
 8003e74:	2b0f      	cmp	r3, #15
 8003e76:	d916      	bls.n	8003ea6 <UART_SetConfig+0x36e>
 8003e78:	6a3b      	ldr	r3, [r7, #32]
 8003e7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e7e:	d212      	bcs.n	8003ea6 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e80:	6a3b      	ldr	r3, [r7, #32]
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	f023 030f 	bic.w	r3, r3, #15
 8003e88:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e8a:	6a3b      	ldr	r3, [r7, #32]
 8003e8c:	085b      	lsrs	r3, r3, #1
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	f003 0307 	and.w	r3, r3, #7
 8003e94:	b29a      	uxth	r2, r3
 8003e96:	8bfb      	ldrh	r3, [r7, #30]
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	8bfa      	ldrh	r2, [r7, #30]
 8003ea2:	60da      	str	r2, [r3, #12]
 8003ea4:	e055      	b.n	8003f52 <UART_SetConfig+0x41a>
      }
      else
      {
        ret = HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003eac:	e051      	b.n	8003f52 <UART_SetConfig+0x41a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003eae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003eb2:	3b01      	subs	r3, #1
 8003eb4:	2b07      	cmp	r3, #7
 8003eb6:	d822      	bhi.n	8003efe <UART_SetConfig+0x3c6>
 8003eb8:	a201      	add	r2, pc, #4	; (adr r2, 8003ec0 <UART_SetConfig+0x388>)
 8003eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ebe:	bf00      	nop
 8003ec0:	08003ee1 	.word	0x08003ee1
 8003ec4:	08003ee9 	.word	0x08003ee9
 8003ec8:	08003eff 	.word	0x08003eff
 8003ecc:	08003eef 	.word	0x08003eef
 8003ed0:	08003eff 	.word	0x08003eff
 8003ed4:	08003eff 	.word	0x08003eff
 8003ed8:	08003eff 	.word	0x08003eff
 8003edc:	08003ef7 	.word	0x08003ef7
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ee0:	f7fe fe0c 	bl	8002afc <HAL_RCC_GetPCLK2Freq>
 8003ee4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003ee6:	e010      	b.n	8003f0a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ee8:	4b25      	ldr	r3, [pc, #148]	; (8003f80 <UART_SetConfig+0x448>)
 8003eea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003eec:	e00d      	b.n	8003f0a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003eee:	f7fe fd6f 	bl	80029d0 <HAL_RCC_GetSysClockFreq>
 8003ef2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003ef4:	e009      	b.n	8003f0a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ef6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003efa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003efc:	e005      	b.n	8003f0a <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8003efe:	2300      	movs	r3, #0
 8003f00:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003f08:	bf00      	nop
    }

    if (pclk != 0U)
 8003f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d020      	beq.n	8003f52 <UART_SetConfig+0x41a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f14:	4a19      	ldr	r2, [pc, #100]	; (8003f7c <UART_SetConfig+0x444>)
 8003f16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003f1a:	461a      	mov	r2, r3
 8003f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1e:	fbb3 f2f2 	udiv	r2, r3, r2
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	085b      	lsrs	r3, r3, #1
 8003f28:	441a      	add	r2, r3
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f32:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f34:	6a3b      	ldr	r3, [r7, #32]
 8003f36:	2b0f      	cmp	r3, #15
 8003f38:	d908      	bls.n	8003f4c <UART_SetConfig+0x414>
 8003f3a:	6a3b      	ldr	r3, [r7, #32]
 8003f3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f40:	d204      	bcs.n	8003f4c <UART_SetConfig+0x414>
      {
        huart->Instance->BRR = usartdiv;
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	6a3a      	ldr	r2, [r7, #32]
 8003f48:	60da      	str	r2, [r3, #12]
 8003f4a:	e002      	b.n	8003f52 <UART_SetConfig+0x41a>
      }
      else
      {
        ret = HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	2201      	movs	r2, #1
 8003f56:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	2200      	movs	r2, #0
 8003f66:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003f6e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3730      	adds	r7, #48	; 0x30
 8003f76:	46bd      	mov	sp, r7
 8003f78:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f7c:	08008b60 	.word	0x08008b60
 8003f80:	00f42400 	.word	0x00f42400

08003f84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b083      	sub	sp, #12
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f90:	f003 0301 	and.w	r3, r3, #1
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d00a      	beq.n	8003fae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	430a      	orrs	r2, r1
 8003fac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fb2:	f003 0302 	and.w	r3, r3, #2
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d00a      	beq.n	8003fd0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	430a      	orrs	r2, r1
 8003fce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd4:	f003 0304 	and.w	r3, r3, #4
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d00a      	beq.n	8003ff2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	430a      	orrs	r2, r1
 8003ff0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff6:	f003 0308 	and.w	r3, r3, #8
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d00a      	beq.n	8004014 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	430a      	orrs	r2, r1
 8004012:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004018:	f003 0310 	and.w	r3, r3, #16
 800401c:	2b00      	cmp	r3, #0
 800401e:	d00a      	beq.n	8004036 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	430a      	orrs	r2, r1
 8004034:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800403a:	f003 0320 	and.w	r3, r3, #32
 800403e:	2b00      	cmp	r3, #0
 8004040:	d00a      	beq.n	8004058 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	430a      	orrs	r2, r1
 8004056:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800405c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004060:	2b00      	cmp	r3, #0
 8004062:	d01a      	beq.n	800409a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	430a      	orrs	r2, r1
 8004078:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800407e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004082:	d10a      	bne.n	800409a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	430a      	orrs	r2, r1
 8004098:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800409e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d00a      	beq.n	80040bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	430a      	orrs	r2, r1
 80040ba:	605a      	str	r2, [r3, #4]
  }
}
 80040bc:	bf00      	nop
 80040be:	370c      	adds	r7, #12
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr

080040c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b086      	sub	sp, #24
 80040cc:	af02      	add	r7, sp, #8
 80040ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80040d8:	f7fc ffb2 	bl	8001040 <HAL_GetTick>
 80040dc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 0308 	and.w	r3, r3, #8
 80040e8:	2b08      	cmp	r3, #8
 80040ea:	d10e      	bne.n	800410a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80040f0:	9300      	str	r3, [sp, #0]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2200      	movs	r2, #0
 80040f6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f000 f82f 	bl	800415e <UART_WaitOnFlagUntilTimeout>
 8004100:	4603      	mov	r3, r0
 8004102:	2b00      	cmp	r3, #0
 8004104:	d001      	beq.n	800410a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004106:	2303      	movs	r3, #3
 8004108:	e025      	b.n	8004156 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 0304 	and.w	r3, r3, #4
 8004114:	2b04      	cmp	r3, #4
 8004116:	d10e      	bne.n	8004136 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004118:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800411c:	9300      	str	r3, [sp, #0]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2200      	movs	r2, #0
 8004122:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f000 f819 	bl	800415e <UART_WaitOnFlagUntilTimeout>
 800412c:	4603      	mov	r3, r0
 800412e:	2b00      	cmp	r3, #0
 8004130:	d001      	beq.n	8004136 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004132:	2303      	movs	r3, #3
 8004134:	e00f      	b.n	8004156 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2220      	movs	r2, #32
 800413a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2220      	movs	r2, #32
 8004142:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2200      	movs	r2, #0
 800414a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2200      	movs	r2, #0
 8004150:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004154:	2300      	movs	r3, #0
}
 8004156:	4618      	mov	r0, r3
 8004158:	3710      	adds	r7, #16
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}

0800415e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800415e:	b580      	push	{r7, lr}
 8004160:	b09c      	sub	sp, #112	; 0x70
 8004162:	af00      	add	r7, sp, #0
 8004164:	60f8      	str	r0, [r7, #12]
 8004166:	60b9      	str	r1, [r7, #8]
 8004168:	603b      	str	r3, [r7, #0]
 800416a:	4613      	mov	r3, r2
 800416c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800416e:	e0a9      	b.n	80042c4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004170:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004172:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004176:	f000 80a5 	beq.w	80042c4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800417a:	f7fc ff61 	bl	8001040 <HAL_GetTick>
 800417e:	4602      	mov	r2, r0
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	1ad3      	subs	r3, r2, r3
 8004184:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004186:	429a      	cmp	r2, r3
 8004188:	d302      	bcc.n	8004190 <UART_WaitOnFlagUntilTimeout+0x32>
 800418a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800418c:	2b00      	cmp	r3, #0
 800418e:	d140      	bne.n	8004212 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004196:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004198:	e853 3f00 	ldrex	r3, [r3]
 800419c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800419e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041a0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80041a4:	667b      	str	r3, [r7, #100]	; 0x64
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	461a      	mov	r2, r3
 80041ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80041ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 80041b0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80041b4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80041b6:	e841 2300 	strex	r3, r2, [r1]
 80041ba:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80041bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d1e6      	bne.n	8004190 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	3308      	adds	r3, #8
 80041c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041cc:	e853 3f00 	ldrex	r3, [r3]
 80041d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80041d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041d4:	f023 0301 	bic.w	r3, r3, #1
 80041d8:	663b      	str	r3, [r7, #96]	; 0x60
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	3308      	adds	r3, #8
 80041e0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80041e2:	64ba      	str	r2, [r7, #72]	; 0x48
 80041e4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041e6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80041e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80041ea:	e841 2300 	strex	r3, r2, [r1]
 80041ee:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80041f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d1e5      	bne.n	80041c2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2220      	movs	r2, #32
 80041fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2220      	movs	r2, #32
 8004202:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2200      	movs	r2, #0
 800420a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800420e:	2303      	movs	r3, #3
 8004210:	e069      	b.n	80042e6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0304 	and.w	r3, r3, #4
 800421c:	2b00      	cmp	r3, #0
 800421e:	d051      	beq.n	80042c4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	69db      	ldr	r3, [r3, #28]
 8004226:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800422a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800422e:	d149      	bne.n	80042c4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004238:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004242:	e853 3f00 	ldrex	r3, [r3]
 8004246:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800424a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800424e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	461a      	mov	r2, r3
 8004256:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004258:	637b      	str	r3, [r7, #52]	; 0x34
 800425a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800425c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800425e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004260:	e841 2300 	strex	r3, r2, [r1]
 8004264:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004268:	2b00      	cmp	r3, #0
 800426a:	d1e6      	bne.n	800423a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	3308      	adds	r3, #8
 8004272:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	e853 3f00 	ldrex	r3, [r3]
 800427a:	613b      	str	r3, [r7, #16]
   return(result);
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	f023 0301 	bic.w	r3, r3, #1
 8004282:	66bb      	str	r3, [r7, #104]	; 0x68
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	3308      	adds	r3, #8
 800428a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800428c:	623a      	str	r2, [r7, #32]
 800428e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004290:	69f9      	ldr	r1, [r7, #28]
 8004292:	6a3a      	ldr	r2, [r7, #32]
 8004294:	e841 2300 	strex	r3, r2, [r1]
 8004298:	61bb      	str	r3, [r7, #24]
   return(result);
 800429a:	69bb      	ldr	r3, [r7, #24]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d1e5      	bne.n	800426c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2220      	movs	r2, #32
 80042a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2220      	movs	r2, #32
 80042ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2220      	movs	r2, #32
 80042b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2200      	movs	r2, #0
 80042bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80042c0:	2303      	movs	r3, #3
 80042c2:	e010      	b.n	80042e6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	69da      	ldr	r2, [r3, #28]
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	4013      	ands	r3, r2
 80042ce:	68ba      	ldr	r2, [r7, #8]
 80042d0:	429a      	cmp	r2, r3
 80042d2:	bf0c      	ite	eq
 80042d4:	2301      	moveq	r3, #1
 80042d6:	2300      	movne	r3, #0
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	461a      	mov	r2, r3
 80042dc:	79fb      	ldrb	r3, [r7, #7]
 80042de:	429a      	cmp	r2, r3
 80042e0:	f43f af46 	beq.w	8004170 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042e4:	2300      	movs	r3, #0
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3770      	adds	r7, #112	; 0x70
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}

080042ee <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80042ee:	b480      	push	{r7}
 80042f0:	b085      	sub	sp, #20
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d101      	bne.n	8004304 <HAL_UARTEx_DisableFifoMode+0x16>
 8004300:	2302      	movs	r3, #2
 8004302:	e027      	b.n	8004354 <HAL_UARTEx_DisableFifoMode+0x66>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2224      	movs	r2, #36	; 0x24
 8004310:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f022 0201 	bic.w	r2, r2, #1
 800432a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004332:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2200      	movs	r2, #0
 8004338:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	68fa      	ldr	r2, [r7, #12]
 8004340:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2220      	movs	r2, #32
 8004346:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2200      	movs	r2, #0
 800434e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004352:	2300      	movs	r3, #0
}
 8004354:	4618      	mov	r0, r3
 8004356:	3714      	adds	r7, #20
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr

08004360 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b084      	sub	sp, #16
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
 8004368:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004370:	2b01      	cmp	r3, #1
 8004372:	d101      	bne.n	8004378 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004374:	2302      	movs	r3, #2
 8004376:	e02d      	b.n	80043d4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2201      	movs	r2, #1
 800437c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2224      	movs	r2, #36	; 0x24
 8004384:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f022 0201 	bic.w	r2, r2, #1
 800439e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	683a      	ldr	r2, [r7, #0]
 80043b0:	430a      	orrs	r2, r1
 80043b2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f000 f84f 	bl	8004458 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	68fa      	ldr	r2, [r7, #12]
 80043c0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2220      	movs	r2, #32
 80043c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80043d2:	2300      	movs	r3, #0
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3710      	adds	r7, #16
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}

080043dc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b084      	sub	sp, #16
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
 80043e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d101      	bne.n	80043f4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80043f0:	2302      	movs	r3, #2
 80043f2:	e02d      	b.n	8004450 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2201      	movs	r2, #1
 80043f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2224      	movs	r2, #36	; 0x24
 8004400:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f022 0201 	bic.w	r2, r2, #1
 800441a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	683a      	ldr	r2, [r7, #0]
 800442c:	430a      	orrs	r2, r1
 800442e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f000 f811 	bl	8004458 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	68fa      	ldr	r2, [r7, #12]
 800443c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2220      	movs	r2, #32
 8004442:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2200      	movs	r2, #0
 800444a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800444e:	2300      	movs	r3, #0
}
 8004450:	4618      	mov	r0, r3
 8004452:	3710      	adds	r7, #16
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}

08004458 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004458:	b480      	push	{r7}
 800445a:	b085      	sub	sp, #20
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004464:	2b00      	cmp	r3, #0
 8004466:	d108      	bne.n	800447a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2201      	movs	r2, #1
 800446c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2201      	movs	r2, #1
 8004474:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004478:	e031      	b.n	80044de <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800447a:	2308      	movs	r3, #8
 800447c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800447e:	2308      	movs	r3, #8
 8004480:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	0e5b      	lsrs	r3, r3, #25
 800448a:	b2db      	uxtb	r3, r3
 800448c:	f003 0307 	and.w	r3, r3, #7
 8004490:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	0f5b      	lsrs	r3, r3, #29
 800449a:	b2db      	uxtb	r3, r3
 800449c:	f003 0307 	and.w	r3, r3, #7
 80044a0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80044a2:	7bbb      	ldrb	r3, [r7, #14]
 80044a4:	7b3a      	ldrb	r2, [r7, #12]
 80044a6:	4911      	ldr	r1, [pc, #68]	; (80044ec <UARTEx_SetNbDataToProcess+0x94>)
 80044a8:	5c8a      	ldrb	r2, [r1, r2]
 80044aa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80044ae:	7b3a      	ldrb	r2, [r7, #12]
 80044b0:	490f      	ldr	r1, [pc, #60]	; (80044f0 <UARTEx_SetNbDataToProcess+0x98>)
 80044b2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80044b4:	fb93 f3f2 	sdiv	r3, r3, r2
 80044b8:	b29a      	uxth	r2, r3
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80044c0:	7bfb      	ldrb	r3, [r7, #15]
 80044c2:	7b7a      	ldrb	r2, [r7, #13]
 80044c4:	4909      	ldr	r1, [pc, #36]	; (80044ec <UARTEx_SetNbDataToProcess+0x94>)
 80044c6:	5c8a      	ldrb	r2, [r1, r2]
 80044c8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80044cc:	7b7a      	ldrb	r2, [r7, #13]
 80044ce:	4908      	ldr	r1, [pc, #32]	; (80044f0 <UARTEx_SetNbDataToProcess+0x98>)
 80044d0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80044d2:	fb93 f3f2 	sdiv	r3, r3, r2
 80044d6:	b29a      	uxth	r2, r3
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80044de:	bf00      	nop
 80044e0:	3714      	adds	r7, #20
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr
 80044ea:	bf00      	nop
 80044ec:	08008b78 	.word	0x08008b78
 80044f0:	08008b80 	.word	0x08008b80

080044f4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b085      	sub	sp, #20
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80044fc:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004500:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004508:	b29a      	uxth	r2, r3
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	b29b      	uxth	r3, r3
 800450e:	43db      	mvns	r3, r3
 8004510:	b29b      	uxth	r3, r3
 8004512:	4013      	ands	r3, r2
 8004514:	b29a      	uxth	r2, r3
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800451c:	2300      	movs	r3, #0
}
 800451e:	4618      	mov	r0, r3
 8004520:	3714      	adds	r7, #20
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr

0800452a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800452a:	b084      	sub	sp, #16
 800452c:	b480      	push	{r7}
 800452e:	b083      	sub	sp, #12
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	f107 0014 	add.w	r0, r7, #20
 8004538:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2201      	movs	r2, #1
 8004540:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2200      	movs	r2, #0
 8004548:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2200      	movs	r2, #0
 8004550:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2200      	movs	r2, #0
 8004558:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800455c:	2300      	movs	r3, #0
}
 800455e:	4618      	mov	r0, r3
 8004560:	370c      	adds	r7, #12
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	b004      	add	sp, #16
 800456a:	4770      	bx	lr

0800456c <__NVIC_SetPriority>:
{
 800456c:	b480      	push	{r7}
 800456e:	b083      	sub	sp, #12
 8004570:	af00      	add	r7, sp, #0
 8004572:	4603      	mov	r3, r0
 8004574:	6039      	str	r1, [r7, #0]
 8004576:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004578:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800457c:	2b00      	cmp	r3, #0
 800457e:	db0a      	blt.n	8004596 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	b2da      	uxtb	r2, r3
 8004584:	490c      	ldr	r1, [pc, #48]	; (80045b8 <__NVIC_SetPriority+0x4c>)
 8004586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800458a:	0112      	lsls	r2, r2, #4
 800458c:	b2d2      	uxtb	r2, r2
 800458e:	440b      	add	r3, r1
 8004590:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004594:	e00a      	b.n	80045ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	b2da      	uxtb	r2, r3
 800459a:	4908      	ldr	r1, [pc, #32]	; (80045bc <__NVIC_SetPriority+0x50>)
 800459c:	79fb      	ldrb	r3, [r7, #7]
 800459e:	f003 030f 	and.w	r3, r3, #15
 80045a2:	3b04      	subs	r3, #4
 80045a4:	0112      	lsls	r2, r2, #4
 80045a6:	b2d2      	uxtb	r2, r2
 80045a8:	440b      	add	r3, r1
 80045aa:	761a      	strb	r2, [r3, #24]
}
 80045ac:	bf00      	nop
 80045ae:	370c      	adds	r7, #12
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr
 80045b8:	e000e100 	.word	0xe000e100
 80045bc:	e000ed00 	.word	0xe000ed00

080045c0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80045c0:	b580      	push	{r7, lr}
 80045c2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80045c4:	4b05      	ldr	r3, [pc, #20]	; (80045dc <SysTick_Handler+0x1c>)
 80045c6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80045c8:	f002 fa28 	bl	8006a1c <xTaskGetSchedulerState>
 80045cc:	4603      	mov	r3, r0
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d001      	beq.n	80045d6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80045d2:	f003 f9c9 	bl	8007968 <xPortSysTickHandler>
  }
}
 80045d6:	bf00      	nop
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	bf00      	nop
 80045dc:	e000e010 	.word	0xe000e010

080045e0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80045e0:	b580      	push	{r7, lr}
 80045e2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80045e4:	2100      	movs	r1, #0
 80045e6:	f06f 0004 	mvn.w	r0, #4
 80045ea:	f7ff ffbf 	bl	800456c <__NVIC_SetPriority>
#endif
}
 80045ee:	bf00      	nop
 80045f0:	bd80      	pop	{r7, pc}
	...

080045f4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80045f4:	b480      	push	{r7}
 80045f6:	b083      	sub	sp, #12
 80045f8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80045fa:	f3ef 8305 	mrs	r3, IPSR
 80045fe:	603b      	str	r3, [r7, #0]
  return(result);
 8004600:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004602:	2b00      	cmp	r3, #0
 8004604:	d003      	beq.n	800460e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004606:	f06f 0305 	mvn.w	r3, #5
 800460a:	607b      	str	r3, [r7, #4]
 800460c:	e00c      	b.n	8004628 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800460e:	4b0a      	ldr	r3, [pc, #40]	; (8004638 <osKernelInitialize+0x44>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d105      	bne.n	8004622 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004616:	4b08      	ldr	r3, [pc, #32]	; (8004638 <osKernelInitialize+0x44>)
 8004618:	2201      	movs	r2, #1
 800461a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800461c:	2300      	movs	r3, #0
 800461e:	607b      	str	r3, [r7, #4]
 8004620:	e002      	b.n	8004628 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004622:	f04f 33ff 	mov.w	r3, #4294967295
 8004626:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004628:	687b      	ldr	r3, [r7, #4]
}
 800462a:	4618      	mov	r0, r3
 800462c:	370c      	adds	r7, #12
 800462e:	46bd      	mov	sp, r7
 8004630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004634:	4770      	bx	lr
 8004636:	bf00      	nop
 8004638:	200004a4 	.word	0x200004a4

0800463c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800463c:	b580      	push	{r7, lr}
 800463e:	b082      	sub	sp, #8
 8004640:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004642:	f3ef 8305 	mrs	r3, IPSR
 8004646:	603b      	str	r3, [r7, #0]
  return(result);
 8004648:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800464a:	2b00      	cmp	r3, #0
 800464c:	d003      	beq.n	8004656 <osKernelStart+0x1a>
    stat = osErrorISR;
 800464e:	f06f 0305 	mvn.w	r3, #5
 8004652:	607b      	str	r3, [r7, #4]
 8004654:	e010      	b.n	8004678 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004656:	4b0b      	ldr	r3, [pc, #44]	; (8004684 <osKernelStart+0x48>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	2b01      	cmp	r3, #1
 800465c:	d109      	bne.n	8004672 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800465e:	f7ff ffbf 	bl	80045e0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004662:	4b08      	ldr	r3, [pc, #32]	; (8004684 <osKernelStart+0x48>)
 8004664:	2202      	movs	r2, #2
 8004666:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004668:	f001 fd7c 	bl	8006164 <vTaskStartScheduler>
      stat = osOK;
 800466c:	2300      	movs	r3, #0
 800466e:	607b      	str	r3, [r7, #4]
 8004670:	e002      	b.n	8004678 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004672:	f04f 33ff 	mov.w	r3, #4294967295
 8004676:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004678:	687b      	ldr	r3, [r7, #4]
}
 800467a:	4618      	mov	r0, r3
 800467c:	3708      	adds	r7, #8
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
 8004682:	bf00      	nop
 8004684:	200004a4 	.word	0x200004a4

08004688 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004688:	b580      	push	{r7, lr}
 800468a:	b08e      	sub	sp, #56	; 0x38
 800468c:	af04      	add	r7, sp, #16
 800468e:	60f8      	str	r0, [r7, #12]
 8004690:	60b9      	str	r1, [r7, #8]
 8004692:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004694:	2300      	movs	r3, #0
 8004696:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004698:	f3ef 8305 	mrs	r3, IPSR
 800469c:	617b      	str	r3, [r7, #20]
  return(result);
 800469e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d17e      	bne.n	80047a2 <osThreadNew+0x11a>
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d07b      	beq.n	80047a2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80046aa:	2380      	movs	r3, #128	; 0x80
 80046ac:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80046ae:	2318      	movs	r3, #24
 80046b0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80046b2:	2300      	movs	r3, #0
 80046b4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80046b6:	f04f 33ff 	mov.w	r3, #4294967295
 80046ba:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d045      	beq.n	800474e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d002      	beq.n	80046d0 <osThreadNew+0x48>
        name = attr->name;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	699b      	ldr	r3, [r3, #24]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d002      	beq.n	80046de <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	699b      	ldr	r3, [r3, #24]
 80046dc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80046de:	69fb      	ldr	r3, [r7, #28]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d008      	beq.n	80046f6 <osThreadNew+0x6e>
 80046e4:	69fb      	ldr	r3, [r7, #28]
 80046e6:	2b38      	cmp	r3, #56	; 0x38
 80046e8:	d805      	bhi.n	80046f6 <osThreadNew+0x6e>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	f003 0301 	and.w	r3, r3, #1
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d001      	beq.n	80046fa <osThreadNew+0x72>
        return (NULL);
 80046f6:	2300      	movs	r3, #0
 80046f8:	e054      	b.n	80047a4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	695b      	ldr	r3, [r3, #20]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d003      	beq.n	800470a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	695b      	ldr	r3, [r3, #20]
 8004706:	089b      	lsrs	r3, r3, #2
 8004708:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d00e      	beq.n	8004730 <osThreadNew+0xa8>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	68db      	ldr	r3, [r3, #12]
 8004716:	2bbb      	cmp	r3, #187	; 0xbb
 8004718:	d90a      	bls.n	8004730 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800471e:	2b00      	cmp	r3, #0
 8004720:	d006      	beq.n	8004730 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	695b      	ldr	r3, [r3, #20]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d002      	beq.n	8004730 <osThreadNew+0xa8>
        mem = 1;
 800472a:	2301      	movs	r3, #1
 800472c:	61bb      	str	r3, [r7, #24]
 800472e:	e010      	b.n	8004752 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d10c      	bne.n	8004752 <osThreadNew+0xca>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d108      	bne.n	8004752 <osThreadNew+0xca>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	691b      	ldr	r3, [r3, #16]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d104      	bne.n	8004752 <osThreadNew+0xca>
          mem = 0;
 8004748:	2300      	movs	r3, #0
 800474a:	61bb      	str	r3, [r7, #24]
 800474c:	e001      	b.n	8004752 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800474e:	2300      	movs	r3, #0
 8004750:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004752:	69bb      	ldr	r3, [r7, #24]
 8004754:	2b01      	cmp	r3, #1
 8004756:	d110      	bne.n	800477a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800475c:	687a      	ldr	r2, [r7, #4]
 800475e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004760:	9202      	str	r2, [sp, #8]
 8004762:	9301      	str	r3, [sp, #4]
 8004764:	69fb      	ldr	r3, [r7, #28]
 8004766:	9300      	str	r3, [sp, #0]
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	6a3a      	ldr	r2, [r7, #32]
 800476c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800476e:	68f8      	ldr	r0, [r7, #12]
 8004770:	f001 fb0c 	bl	8005d8c <xTaskCreateStatic>
 8004774:	4603      	mov	r3, r0
 8004776:	613b      	str	r3, [r7, #16]
 8004778:	e013      	b.n	80047a2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800477a:	69bb      	ldr	r3, [r7, #24]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d110      	bne.n	80047a2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004780:	6a3b      	ldr	r3, [r7, #32]
 8004782:	b29a      	uxth	r2, r3
 8004784:	f107 0310 	add.w	r3, r7, #16
 8004788:	9301      	str	r3, [sp, #4]
 800478a:	69fb      	ldr	r3, [r7, #28]
 800478c:	9300      	str	r3, [sp, #0]
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004792:	68f8      	ldr	r0, [r7, #12]
 8004794:	f001 fb57 	bl	8005e46 <xTaskCreate>
 8004798:	4603      	mov	r3, r0
 800479a:	2b01      	cmp	r3, #1
 800479c:	d001      	beq.n	80047a2 <osThreadNew+0x11a>
            hTask = NULL;
 800479e:	2300      	movs	r3, #0
 80047a0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80047a2:	693b      	ldr	r3, [r7, #16]
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3728      	adds	r7, #40	; 0x28
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}

080047ac <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b084      	sub	sp, #16
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80047b4:	f3ef 8305 	mrs	r3, IPSR
 80047b8:	60bb      	str	r3, [r7, #8]
  return(result);
 80047ba:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d003      	beq.n	80047c8 <osDelay+0x1c>
    stat = osErrorISR;
 80047c0:	f06f 0305 	mvn.w	r3, #5
 80047c4:	60fb      	str	r3, [r7, #12]
 80047c6:	e007      	b.n	80047d8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80047c8:	2300      	movs	r3, #0
 80047ca:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d002      	beq.n	80047d8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f001 fc92 	bl	80060fc <vTaskDelay>
    }
  }

  return (stat);
 80047d8:	68fb      	ldr	r3, [r7, #12]
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3710      	adds	r7, #16
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}

080047e2 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 80047e2:	b580      	push	{r7, lr}
 80047e4:	b084      	sub	sp, #16
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f002 fedc 	bl	80075a8 <pvTimerGetTimerID>
 80047f0:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d005      	beq.n	8004804 <TimerCallback+0x22>
    callb->func (callb->arg);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	68fa      	ldr	r2, [r7, #12]
 80047fe:	6852      	ldr	r2, [r2, #4]
 8004800:	4610      	mov	r0, r2
 8004802:	4798      	blx	r3
  }
}
 8004804:	bf00      	nop
 8004806:	3710      	adds	r7, #16
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}

0800480c <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800480c:	b580      	push	{r7, lr}
 800480e:	b08c      	sub	sp, #48	; 0x30
 8004810:	af02      	add	r7, sp, #8
 8004812:	60f8      	str	r0, [r7, #12]
 8004814:	607a      	str	r2, [r7, #4]
 8004816:	603b      	str	r3, [r7, #0]
 8004818:	460b      	mov	r3, r1
 800481a:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800481c:	2300      	movs	r3, #0
 800481e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004820:	f3ef 8305 	mrs	r3, IPSR
 8004824:	613b      	str	r3, [r7, #16]
  return(result);
 8004826:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 8004828:	2b00      	cmp	r3, #0
 800482a:	d163      	bne.n	80048f4 <osTimerNew+0xe8>
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d060      	beq.n	80048f4 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8004832:	2008      	movs	r0, #8
 8004834:	f003 f928 	bl	8007a88 <pvPortMalloc>
 8004838:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d059      	beq.n	80048f4 <osTimerNew+0xe8>
      callb->func = func;
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	68fa      	ldr	r2, [r7, #12]
 8004844:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	687a      	ldr	r2, [r7, #4]
 800484a:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800484c:	7afb      	ldrb	r3, [r7, #11]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d102      	bne.n	8004858 <osTimerNew+0x4c>
        reload = pdFALSE;
 8004852:	2300      	movs	r3, #0
 8004854:	61fb      	str	r3, [r7, #28]
 8004856:	e001      	b.n	800485c <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 8004858:	2301      	movs	r3, #1
 800485a:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 800485c:	f04f 33ff 	mov.w	r3, #4294967295
 8004860:	61bb      	str	r3, [r7, #24]
      name = NULL;
 8004862:	2300      	movs	r3, #0
 8004864:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d01c      	beq.n	80048a6 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d002      	beq.n	800487a <osTimerNew+0x6e>
          name = attr->name;
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d006      	beq.n	8004890 <osTimerNew+0x84>
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	68db      	ldr	r3, [r3, #12]
 8004886:	2b2b      	cmp	r3, #43	; 0x2b
 8004888:	d902      	bls.n	8004890 <osTimerNew+0x84>
          mem = 1;
 800488a:	2301      	movs	r3, #1
 800488c:	61bb      	str	r3, [r7, #24]
 800488e:	e00c      	b.n	80048aa <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d108      	bne.n	80048aa <osTimerNew+0x9e>
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d104      	bne.n	80048aa <osTimerNew+0x9e>
            mem = 0;
 80048a0:	2300      	movs	r3, #0
 80048a2:	61bb      	str	r3, [r7, #24]
 80048a4:	e001      	b.n	80048aa <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 80048a6:	2300      	movs	r3, #0
 80048a8:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 80048aa:	69bb      	ldr	r3, [r7, #24]
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d10c      	bne.n	80048ca <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	9301      	str	r3, [sp, #4]
 80048b6:	4b12      	ldr	r3, [pc, #72]	; (8004900 <osTimerNew+0xf4>)
 80048b8:	9300      	str	r3, [sp, #0]
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	69fa      	ldr	r2, [r7, #28]
 80048be:	2101      	movs	r1, #1
 80048c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80048c2:	f002 faf2 	bl	8006eaa <xTimerCreateStatic>
 80048c6:	6238      	str	r0, [r7, #32]
 80048c8:	e00b      	b.n	80048e2 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 80048ca:	69bb      	ldr	r3, [r7, #24]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d108      	bne.n	80048e2 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 80048d0:	4b0b      	ldr	r3, [pc, #44]	; (8004900 <osTimerNew+0xf4>)
 80048d2:	9300      	str	r3, [sp, #0]
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	69fa      	ldr	r2, [r7, #28]
 80048d8:	2101      	movs	r1, #1
 80048da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80048dc:	f002 fac4 	bl	8006e68 <xTimerCreate>
 80048e0:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 80048e2:	6a3b      	ldr	r3, [r7, #32]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d105      	bne.n	80048f4 <osTimerNew+0xe8>
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d002      	beq.n	80048f4 <osTimerNew+0xe8>
        vPortFree (callb);
 80048ee:	6978      	ldr	r0, [r7, #20]
 80048f0:	f003 f996 	bl	8007c20 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 80048f4:	6a3b      	ldr	r3, [r7, #32]
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3728      	adds	r7, #40	; 0x28
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}
 80048fe:	bf00      	nop
 8004900:	080047e3 	.word	0x080047e3

08004904 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8004904:	b580      	push	{r7, lr}
 8004906:	b088      	sub	sp, #32
 8004908:	af02      	add	r7, sp, #8
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004912:	f3ef 8305 	mrs	r3, IPSR
 8004916:	60fb      	str	r3, [r7, #12]
  return(result);
 8004918:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800491a:	2b00      	cmp	r3, #0
 800491c:	d003      	beq.n	8004926 <osTimerStart+0x22>
    stat = osErrorISR;
 800491e:	f06f 0305 	mvn.w	r3, #5
 8004922:	617b      	str	r3, [r7, #20]
 8004924:	e017      	b.n	8004956 <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d103      	bne.n	8004934 <osTimerStart+0x30>
    stat = osErrorParameter;
 800492c:	f06f 0303 	mvn.w	r3, #3
 8004930:	617b      	str	r3, [r7, #20]
 8004932:	e010      	b.n	8004956 <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8004934:	2300      	movs	r3, #0
 8004936:	9300      	str	r3, [sp, #0]
 8004938:	2300      	movs	r3, #0
 800493a:	683a      	ldr	r2, [r7, #0]
 800493c:	2104      	movs	r1, #4
 800493e:	6938      	ldr	r0, [r7, #16]
 8004940:	f002 fb2c 	bl	8006f9c <xTimerGenericCommand>
 8004944:	4603      	mov	r3, r0
 8004946:	2b01      	cmp	r3, #1
 8004948:	d102      	bne.n	8004950 <osTimerStart+0x4c>
      stat = osOK;
 800494a:	2300      	movs	r3, #0
 800494c:	617b      	str	r3, [r7, #20]
 800494e:	e002      	b.n	8004956 <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 8004950:	f06f 0302 	mvn.w	r3, #2
 8004954:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8004956:	697b      	ldr	r3, [r7, #20]
}
 8004958:	4618      	mov	r0, r3
 800495a:	3718      	adds	r7, #24
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}

08004960 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8004960:	b580      	push	{r7, lr}
 8004962:	b08a      	sub	sp, #40	; 0x28
 8004964:	af02      	add	r7, sp, #8
 8004966:	60f8      	str	r0, [r7, #12]
 8004968:	60b9      	str	r1, [r7, #8]
 800496a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800496c:	2300      	movs	r3, #0
 800496e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004970:	f3ef 8305 	mrs	r3, IPSR
 8004974:	613b      	str	r3, [r7, #16]
  return(result);
 8004976:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8004978:	2b00      	cmp	r3, #0
 800497a:	d175      	bne.n	8004a68 <osSemaphoreNew+0x108>
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d072      	beq.n	8004a68 <osSemaphoreNew+0x108>
 8004982:	68ba      	ldr	r2, [r7, #8]
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	429a      	cmp	r2, r3
 8004988:	d86e      	bhi.n	8004a68 <osSemaphoreNew+0x108>
    mem = -1;
 800498a:	f04f 33ff 	mov.w	r3, #4294967295
 800498e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d015      	beq.n	80049c2 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d006      	beq.n	80049ac <osSemaphoreNew+0x4c>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	68db      	ldr	r3, [r3, #12]
 80049a2:	2b4f      	cmp	r3, #79	; 0x4f
 80049a4:	d902      	bls.n	80049ac <osSemaphoreNew+0x4c>
        mem = 1;
 80049a6:	2301      	movs	r3, #1
 80049a8:	61bb      	str	r3, [r7, #24]
 80049aa:	e00c      	b.n	80049c6 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d108      	bne.n	80049c6 <osSemaphoreNew+0x66>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d104      	bne.n	80049c6 <osSemaphoreNew+0x66>
          mem = 0;
 80049bc:	2300      	movs	r3, #0
 80049be:	61bb      	str	r3, [r7, #24]
 80049c0:	e001      	b.n	80049c6 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80049c2:	2300      	movs	r3, #0
 80049c4:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80049c6:	69bb      	ldr	r3, [r7, #24]
 80049c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049cc:	d04c      	beq.n	8004a68 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d128      	bne.n	8004a26 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80049d4:	69bb      	ldr	r3, [r7, #24]
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	d10a      	bne.n	80049f0 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	2203      	movs	r2, #3
 80049e0:	9200      	str	r2, [sp, #0]
 80049e2:	2200      	movs	r2, #0
 80049e4:	2100      	movs	r1, #0
 80049e6:	2001      	movs	r0, #1
 80049e8:	f000 fa2a 	bl	8004e40 <xQueueGenericCreateStatic>
 80049ec:	61f8      	str	r0, [r7, #28]
 80049ee:	e005      	b.n	80049fc <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80049f0:	2203      	movs	r2, #3
 80049f2:	2100      	movs	r1, #0
 80049f4:	2001      	movs	r0, #1
 80049f6:	f000 fa9b 	bl	8004f30 <xQueueGenericCreate>
 80049fa:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80049fc:	69fb      	ldr	r3, [r7, #28]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d022      	beq.n	8004a48 <osSemaphoreNew+0xe8>
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d01f      	beq.n	8004a48 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004a08:	2300      	movs	r3, #0
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	2100      	movs	r1, #0
 8004a0e:	69f8      	ldr	r0, [r7, #28]
 8004a10:	f000 fb56 	bl	80050c0 <xQueueGenericSend>
 8004a14:	4603      	mov	r3, r0
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d016      	beq.n	8004a48 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8004a1a:	69f8      	ldr	r0, [r7, #28]
 8004a1c:	f000 ffe2 	bl	80059e4 <vQueueDelete>
            hSemaphore = NULL;
 8004a20:	2300      	movs	r3, #0
 8004a22:	61fb      	str	r3, [r7, #28]
 8004a24:	e010      	b.n	8004a48 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8004a26:	69bb      	ldr	r3, [r7, #24]
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d108      	bne.n	8004a3e <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	461a      	mov	r2, r3
 8004a32:	68b9      	ldr	r1, [r7, #8]
 8004a34:	68f8      	ldr	r0, [r7, #12]
 8004a36:	f000 fad8 	bl	8004fea <xQueueCreateCountingSemaphoreStatic>
 8004a3a:	61f8      	str	r0, [r7, #28]
 8004a3c:	e004      	b.n	8004a48 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8004a3e:	68b9      	ldr	r1, [r7, #8]
 8004a40:	68f8      	ldr	r0, [r7, #12]
 8004a42:	f000 fb09 	bl	8005058 <xQueueCreateCountingSemaphore>
 8004a46:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8004a48:	69fb      	ldr	r3, [r7, #28]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d00c      	beq.n	8004a68 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d003      	beq.n	8004a5c <osSemaphoreNew+0xfc>
          name = attr->name;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	617b      	str	r3, [r7, #20]
 8004a5a:	e001      	b.n	8004a60 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8004a60:	6979      	ldr	r1, [r7, #20]
 8004a62:	69f8      	ldr	r0, [r7, #28]
 8004a64:	f001 f90a 	bl	8005c7c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8004a68:	69fb      	ldr	r3, [r7, #28]
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3720      	adds	r7, #32
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}
	...

08004a74 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b086      	sub	sp, #24
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
 8004a7c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8004a82:	2300      	movs	r3, #0
 8004a84:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d103      	bne.n	8004a94 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8004a8c:	f06f 0303 	mvn.w	r3, #3
 8004a90:	617b      	str	r3, [r7, #20]
 8004a92:	e039      	b.n	8004b08 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a94:	f3ef 8305 	mrs	r3, IPSR
 8004a98:	60fb      	str	r3, [r7, #12]
  return(result);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d022      	beq.n	8004ae6 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d003      	beq.n	8004aae <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8004aa6:	f06f 0303 	mvn.w	r3, #3
 8004aaa:	617b      	str	r3, [r7, #20]
 8004aac:	e02c      	b.n	8004b08 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8004ab2:	f107 0308 	add.w	r3, r7, #8
 8004ab6:	461a      	mov	r2, r3
 8004ab8:	2100      	movs	r1, #0
 8004aba:	6938      	ldr	r0, [r7, #16]
 8004abc:	f000 ff12 	bl	80058e4 <xQueueReceiveFromISR>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d003      	beq.n	8004ace <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8004ac6:	f06f 0302 	mvn.w	r3, #2
 8004aca:	617b      	str	r3, [r7, #20]
 8004acc:	e01c      	b.n	8004b08 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d019      	beq.n	8004b08 <osSemaphoreAcquire+0x94>
 8004ad4:	4b0f      	ldr	r3, [pc, #60]	; (8004b14 <osSemaphoreAcquire+0xa0>)
 8004ad6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ada:	601a      	str	r2, [r3, #0]
 8004adc:	f3bf 8f4f 	dsb	sy
 8004ae0:	f3bf 8f6f 	isb	sy
 8004ae4:	e010      	b.n	8004b08 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8004ae6:	6839      	ldr	r1, [r7, #0]
 8004ae8:	6938      	ldr	r0, [r7, #16]
 8004aea:	f000 fdef 	bl	80056cc <xQueueSemaphoreTake>
 8004aee:	4603      	mov	r3, r0
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d009      	beq.n	8004b08 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d003      	beq.n	8004b02 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8004afa:	f06f 0301 	mvn.w	r3, #1
 8004afe:	617b      	str	r3, [r7, #20]
 8004b00:	e002      	b.n	8004b08 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8004b02:	f06f 0302 	mvn.w	r3, #2
 8004b06:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8004b08:	697b      	ldr	r3, [r7, #20]
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3718      	adds	r7, #24
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}
 8004b12:	bf00      	nop
 8004b14:	e000ed04 	.word	0xe000ed04

08004b18 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b086      	sub	sp, #24
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8004b24:	2300      	movs	r3, #0
 8004b26:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d103      	bne.n	8004b36 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8004b2e:	f06f 0303 	mvn.w	r3, #3
 8004b32:	617b      	str	r3, [r7, #20]
 8004b34:	e02c      	b.n	8004b90 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b36:	f3ef 8305 	mrs	r3, IPSR
 8004b3a:	60fb      	str	r3, [r7, #12]
  return(result);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d01a      	beq.n	8004b78 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8004b42:	2300      	movs	r3, #0
 8004b44:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8004b46:	f107 0308 	add.w	r3, r7, #8
 8004b4a:	4619      	mov	r1, r3
 8004b4c:	6938      	ldr	r0, [r7, #16]
 8004b4e:	f000 fc50 	bl	80053f2 <xQueueGiveFromISR>
 8004b52:	4603      	mov	r3, r0
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d003      	beq.n	8004b60 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8004b58:	f06f 0302 	mvn.w	r3, #2
 8004b5c:	617b      	str	r3, [r7, #20]
 8004b5e:	e017      	b.n	8004b90 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d014      	beq.n	8004b90 <osSemaphoreRelease+0x78>
 8004b66:	4b0d      	ldr	r3, [pc, #52]	; (8004b9c <osSemaphoreRelease+0x84>)
 8004b68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b6c:	601a      	str	r2, [r3, #0]
 8004b6e:	f3bf 8f4f 	dsb	sy
 8004b72:	f3bf 8f6f 	isb	sy
 8004b76:	e00b      	b.n	8004b90 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004b78:	2300      	movs	r3, #0
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	2100      	movs	r1, #0
 8004b7e:	6938      	ldr	r0, [r7, #16]
 8004b80:	f000 fa9e 	bl	80050c0 <xQueueGenericSend>
 8004b84:	4603      	mov	r3, r0
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d002      	beq.n	8004b90 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8004b8a:	f06f 0302 	mvn.w	r3, #2
 8004b8e:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8004b90:	697b      	ldr	r3, [r7, #20]
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3718      	adds	r7, #24
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}
 8004b9a:	bf00      	nop
 8004b9c:	e000ed04 	.word	0xe000ed04

08004ba0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004ba0:	b480      	push	{r7}
 8004ba2:	b085      	sub	sp, #20
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	60f8      	str	r0, [r7, #12]
 8004ba8:	60b9      	str	r1, [r7, #8]
 8004baa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	4a07      	ldr	r2, [pc, #28]	; (8004bcc <vApplicationGetIdleTaskMemory+0x2c>)
 8004bb0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	4a06      	ldr	r2, [pc, #24]	; (8004bd0 <vApplicationGetIdleTaskMemory+0x30>)
 8004bb6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2280      	movs	r2, #128	; 0x80
 8004bbc:	601a      	str	r2, [r3, #0]
}
 8004bbe:	bf00      	nop
 8004bc0:	3714      	adds	r7, #20
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc8:	4770      	bx	lr
 8004bca:	bf00      	nop
 8004bcc:	200004a8 	.word	0x200004a8
 8004bd0:	20000564 	.word	0x20000564

08004bd4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004bd4:	b480      	push	{r7}
 8004bd6:	b085      	sub	sp, #20
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	60f8      	str	r0, [r7, #12]
 8004bdc:	60b9      	str	r1, [r7, #8]
 8004bde:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	4a07      	ldr	r2, [pc, #28]	; (8004c00 <vApplicationGetTimerTaskMemory+0x2c>)
 8004be4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	4a06      	ldr	r2, [pc, #24]	; (8004c04 <vApplicationGetTimerTaskMemory+0x30>)
 8004bea:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004bf2:	601a      	str	r2, [r3, #0]
}
 8004bf4:	bf00      	nop
 8004bf6:	3714      	adds	r7, #20
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr
 8004c00:	20000764 	.word	0x20000764
 8004c04:	20000820 	.word	0x20000820

08004c08 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b083      	sub	sp, #12
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	f103 0208 	add.w	r2, r3, #8
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f04f 32ff 	mov.w	r2, #4294967295
 8004c20:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f103 0208 	add.w	r2, r3, #8
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	f103 0208 	add.w	r2, r3, #8
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004c3c:	bf00      	nop
 8004c3e:	370c      	adds	r7, #12
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr

08004c48 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b083      	sub	sp, #12
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004c56:	bf00      	nop
 8004c58:	370c      	adds	r7, #12
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr

08004c62 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004c62:	b480      	push	{r7}
 8004c64:	b085      	sub	sp, #20
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	6078      	str	r0, [r7, #4]
 8004c6a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	68fa      	ldr	r2, [r7, #12]
 8004c76:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	689a      	ldr	r2, [r3, #8]
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	683a      	ldr	r2, [r7, #0]
 8004c86:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	683a      	ldr	r2, [r7, #0]
 8004c8c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	687a      	ldr	r2, [r7, #4]
 8004c92:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	1c5a      	adds	r2, r3, #1
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	601a      	str	r2, [r3, #0]
}
 8004c9e:	bf00      	nop
 8004ca0:	3714      	adds	r7, #20
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr

08004caa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004caa:	b480      	push	{r7}
 8004cac:	b085      	sub	sp, #20
 8004cae:	af00      	add	r7, sp, #0
 8004cb0:	6078      	str	r0, [r7, #4]
 8004cb2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cc0:	d103      	bne.n	8004cca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	691b      	ldr	r3, [r3, #16]
 8004cc6:	60fb      	str	r3, [r7, #12]
 8004cc8:	e00c      	b.n	8004ce4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	3308      	adds	r3, #8
 8004cce:	60fb      	str	r3, [r7, #12]
 8004cd0:	e002      	b.n	8004cd8 <vListInsert+0x2e>
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	60fb      	str	r3, [r7, #12]
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	68ba      	ldr	r2, [r7, #8]
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d2f6      	bcs.n	8004cd2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	685a      	ldr	r2, [r3, #4]
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	683a      	ldr	r2, [r7, #0]
 8004cf2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	68fa      	ldr	r2, [r7, #12]
 8004cf8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	683a      	ldr	r2, [r7, #0]
 8004cfe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	1c5a      	adds	r2, r3, #1
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	601a      	str	r2, [r3, #0]
}
 8004d10:	bf00      	nop
 8004d12:	3714      	adds	r7, #20
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr

08004d1c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b085      	sub	sp, #20
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	691b      	ldr	r3, [r3, #16]
 8004d28:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	6892      	ldr	r2, [r2, #8]
 8004d32:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	687a      	ldr	r2, [r7, #4]
 8004d3a:	6852      	ldr	r2, [r2, #4]
 8004d3c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	687a      	ldr	r2, [r7, #4]
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d103      	bne.n	8004d50 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	689a      	ldr	r2, [r3, #8]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2200      	movs	r2, #0
 8004d54:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	1e5a      	subs	r2, r3, #1
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	3714      	adds	r7, #20
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr

08004d70 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b084      	sub	sp, #16
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
 8004d78:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d10a      	bne.n	8004d9a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d88:	f383 8811 	msr	BASEPRI, r3
 8004d8c:	f3bf 8f6f 	isb	sy
 8004d90:	f3bf 8f4f 	dsb	sy
 8004d94:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004d96:	bf00      	nop
 8004d98:	e7fe      	b.n	8004d98 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004d9a:	f002 fd53 	bl	8007844 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004da6:	68f9      	ldr	r1, [r7, #12]
 8004da8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004daa:	fb01 f303 	mul.w	r3, r1, r3
 8004dae:	441a      	add	r2, r3
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2200      	movs	r2, #0
 8004db8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681a      	ldr	r2, [r3, #0]
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dca:	3b01      	subs	r3, #1
 8004dcc:	68f9      	ldr	r1, [r7, #12]
 8004dce:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004dd0:	fb01 f303 	mul.w	r3, r1, r3
 8004dd4:	441a      	add	r2, r3
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	22ff      	movs	r2, #255	; 0xff
 8004dde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	22ff      	movs	r2, #255	; 0xff
 8004de6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d114      	bne.n	8004e1a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	691b      	ldr	r3, [r3, #16]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d01a      	beq.n	8004e2e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	3310      	adds	r3, #16
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f001 fc4b 	bl	8006698 <xTaskRemoveFromEventList>
 8004e02:	4603      	mov	r3, r0
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d012      	beq.n	8004e2e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004e08:	4b0c      	ldr	r3, [pc, #48]	; (8004e3c <xQueueGenericReset+0xcc>)
 8004e0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e0e:	601a      	str	r2, [r3, #0]
 8004e10:	f3bf 8f4f 	dsb	sy
 8004e14:	f3bf 8f6f 	isb	sy
 8004e18:	e009      	b.n	8004e2e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	3310      	adds	r3, #16
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f7ff fef2 	bl	8004c08 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	3324      	adds	r3, #36	; 0x24
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f7ff feed 	bl	8004c08 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004e2e:	f002 fd39 	bl	80078a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004e32:	2301      	movs	r3, #1
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	3710      	adds	r7, #16
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}
 8004e3c:	e000ed04 	.word	0xe000ed04

08004e40 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b08e      	sub	sp, #56	; 0x38
 8004e44:	af02      	add	r7, sp, #8
 8004e46:	60f8      	str	r0, [r7, #12]
 8004e48:	60b9      	str	r1, [r7, #8]
 8004e4a:	607a      	str	r2, [r7, #4]
 8004e4c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d10a      	bne.n	8004e6a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e58:	f383 8811 	msr	BASEPRI, r3
 8004e5c:	f3bf 8f6f 	isb	sy
 8004e60:	f3bf 8f4f 	dsb	sy
 8004e64:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004e66:	bf00      	nop
 8004e68:	e7fe      	b.n	8004e68 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d10a      	bne.n	8004e86 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e74:	f383 8811 	msr	BASEPRI, r3
 8004e78:	f3bf 8f6f 	isb	sy
 8004e7c:	f3bf 8f4f 	dsb	sy
 8004e80:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004e82:	bf00      	nop
 8004e84:	e7fe      	b.n	8004e84 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d002      	beq.n	8004e92 <xQueueGenericCreateStatic+0x52>
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d001      	beq.n	8004e96 <xQueueGenericCreateStatic+0x56>
 8004e92:	2301      	movs	r3, #1
 8004e94:	e000      	b.n	8004e98 <xQueueGenericCreateStatic+0x58>
 8004e96:	2300      	movs	r3, #0
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d10a      	bne.n	8004eb2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea0:	f383 8811 	msr	BASEPRI, r3
 8004ea4:	f3bf 8f6f 	isb	sy
 8004ea8:	f3bf 8f4f 	dsb	sy
 8004eac:	623b      	str	r3, [r7, #32]
}
 8004eae:	bf00      	nop
 8004eb0:	e7fe      	b.n	8004eb0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d102      	bne.n	8004ebe <xQueueGenericCreateStatic+0x7e>
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d101      	bne.n	8004ec2 <xQueueGenericCreateStatic+0x82>
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e000      	b.n	8004ec4 <xQueueGenericCreateStatic+0x84>
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d10a      	bne.n	8004ede <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ecc:	f383 8811 	msr	BASEPRI, r3
 8004ed0:	f3bf 8f6f 	isb	sy
 8004ed4:	f3bf 8f4f 	dsb	sy
 8004ed8:	61fb      	str	r3, [r7, #28]
}
 8004eda:	bf00      	nop
 8004edc:	e7fe      	b.n	8004edc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004ede:	2350      	movs	r3, #80	; 0x50
 8004ee0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	2b50      	cmp	r3, #80	; 0x50
 8004ee6:	d00a      	beq.n	8004efe <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eec:	f383 8811 	msr	BASEPRI, r3
 8004ef0:	f3bf 8f6f 	isb	sy
 8004ef4:	f3bf 8f4f 	dsb	sy
 8004ef8:	61bb      	str	r3, [r7, #24]
}
 8004efa:	bf00      	nop
 8004efc:	e7fe      	b.n	8004efc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004efe:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d00d      	beq.n	8004f26 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004f12:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f18:	9300      	str	r3, [sp, #0]
 8004f1a:	4613      	mov	r3, r2
 8004f1c:	687a      	ldr	r2, [r7, #4]
 8004f1e:	68b9      	ldr	r1, [r7, #8]
 8004f20:	68f8      	ldr	r0, [r7, #12]
 8004f22:	f000 f83f 	bl	8004fa4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	3730      	adds	r7, #48	; 0x30
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}

08004f30 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b08a      	sub	sp, #40	; 0x28
 8004f34:	af02      	add	r7, sp, #8
 8004f36:	60f8      	str	r0, [r7, #12]
 8004f38:	60b9      	str	r1, [r7, #8]
 8004f3a:	4613      	mov	r3, r2
 8004f3c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d10a      	bne.n	8004f5a <xQueueGenericCreate+0x2a>
	__asm volatile
 8004f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f48:	f383 8811 	msr	BASEPRI, r3
 8004f4c:	f3bf 8f6f 	isb	sy
 8004f50:	f3bf 8f4f 	dsb	sy
 8004f54:	613b      	str	r3, [r7, #16]
}
 8004f56:	bf00      	nop
 8004f58:	e7fe      	b.n	8004f58 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	68ba      	ldr	r2, [r7, #8]
 8004f5e:	fb02 f303 	mul.w	r3, r2, r3
 8004f62:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004f64:	69fb      	ldr	r3, [r7, #28]
 8004f66:	3350      	adds	r3, #80	; 0x50
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f002 fd8d 	bl	8007a88 <pvPortMalloc>
 8004f6e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004f70:	69bb      	ldr	r3, [r7, #24]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d011      	beq.n	8004f9a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004f76:	69bb      	ldr	r3, [r7, #24]
 8004f78:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	3350      	adds	r3, #80	; 0x50
 8004f7e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004f80:	69bb      	ldr	r3, [r7, #24]
 8004f82:	2200      	movs	r2, #0
 8004f84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004f88:	79fa      	ldrb	r2, [r7, #7]
 8004f8a:	69bb      	ldr	r3, [r7, #24]
 8004f8c:	9300      	str	r3, [sp, #0]
 8004f8e:	4613      	mov	r3, r2
 8004f90:	697a      	ldr	r2, [r7, #20]
 8004f92:	68b9      	ldr	r1, [r7, #8]
 8004f94:	68f8      	ldr	r0, [r7, #12]
 8004f96:	f000 f805 	bl	8004fa4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004f9a:	69bb      	ldr	r3, [r7, #24]
	}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3720      	adds	r7, #32
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}

08004fa4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b084      	sub	sp, #16
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	60f8      	str	r0, [r7, #12]
 8004fac:	60b9      	str	r1, [r7, #8]
 8004fae:	607a      	str	r2, [r7, #4]
 8004fb0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d103      	bne.n	8004fc0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004fb8:	69bb      	ldr	r3, [r7, #24]
 8004fba:	69ba      	ldr	r2, [r7, #24]
 8004fbc:	601a      	str	r2, [r3, #0]
 8004fbe:	e002      	b.n	8004fc6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004fc0:	69bb      	ldr	r3, [r7, #24]
 8004fc2:	687a      	ldr	r2, [r7, #4]
 8004fc4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004fc6:	69bb      	ldr	r3, [r7, #24]
 8004fc8:	68fa      	ldr	r2, [r7, #12]
 8004fca:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004fcc:	69bb      	ldr	r3, [r7, #24]
 8004fce:	68ba      	ldr	r2, [r7, #8]
 8004fd0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004fd2:	2101      	movs	r1, #1
 8004fd4:	69b8      	ldr	r0, [r7, #24]
 8004fd6:	f7ff fecb 	bl	8004d70 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004fda:	69bb      	ldr	r3, [r7, #24]
 8004fdc:	78fa      	ldrb	r2, [r7, #3]
 8004fde:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004fe2:	bf00      	nop
 8004fe4:	3710      	adds	r7, #16
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}

08004fea <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8004fea:	b580      	push	{r7, lr}
 8004fec:	b08a      	sub	sp, #40	; 0x28
 8004fee:	af02      	add	r7, sp, #8
 8004ff0:	60f8      	str	r0, [r7, #12]
 8004ff2:	60b9      	str	r1, [r7, #8]
 8004ff4:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d10a      	bne.n	8005012 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8004ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005000:	f383 8811 	msr	BASEPRI, r3
 8005004:	f3bf 8f6f 	isb	sy
 8005008:	f3bf 8f4f 	dsb	sy
 800500c:	61bb      	str	r3, [r7, #24]
}
 800500e:	bf00      	nop
 8005010:	e7fe      	b.n	8005010 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005012:	68ba      	ldr	r2, [r7, #8]
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	429a      	cmp	r2, r3
 8005018:	d90a      	bls.n	8005030 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800501a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800501e:	f383 8811 	msr	BASEPRI, r3
 8005022:	f3bf 8f6f 	isb	sy
 8005026:	f3bf 8f4f 	dsb	sy
 800502a:	617b      	str	r3, [r7, #20]
}
 800502c:	bf00      	nop
 800502e:	e7fe      	b.n	800502e <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005030:	2302      	movs	r3, #2
 8005032:	9300      	str	r3, [sp, #0]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2200      	movs	r2, #0
 8005038:	2100      	movs	r1, #0
 800503a:	68f8      	ldr	r0, [r7, #12]
 800503c:	f7ff ff00 	bl	8004e40 <xQueueGenericCreateStatic>
 8005040:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8005042:	69fb      	ldr	r3, [r7, #28]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d002      	beq.n	800504e <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005048:	69fb      	ldr	r3, [r7, #28]
 800504a:	68ba      	ldr	r2, [r7, #8]
 800504c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800504e:	69fb      	ldr	r3, [r7, #28]
	}
 8005050:	4618      	mov	r0, r3
 8005052:	3720      	adds	r7, #32
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}

08005058 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8005058:	b580      	push	{r7, lr}
 800505a:	b086      	sub	sp, #24
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d10a      	bne.n	800507e <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8005068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800506c:	f383 8811 	msr	BASEPRI, r3
 8005070:	f3bf 8f6f 	isb	sy
 8005074:	f3bf 8f4f 	dsb	sy
 8005078:	613b      	str	r3, [r7, #16]
}
 800507a:	bf00      	nop
 800507c:	e7fe      	b.n	800507c <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800507e:	683a      	ldr	r2, [r7, #0]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	429a      	cmp	r2, r3
 8005084:	d90a      	bls.n	800509c <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8005086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800508a:	f383 8811 	msr	BASEPRI, r3
 800508e:	f3bf 8f6f 	isb	sy
 8005092:	f3bf 8f4f 	dsb	sy
 8005096:	60fb      	str	r3, [r7, #12]
}
 8005098:	bf00      	nop
 800509a:	e7fe      	b.n	800509a <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800509c:	2202      	movs	r2, #2
 800509e:	2100      	movs	r1, #0
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	f7ff ff45 	bl	8004f30 <xQueueGenericCreate>
 80050a6:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d002      	beq.n	80050b4 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	683a      	ldr	r2, [r7, #0]
 80050b2:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80050b4:	697b      	ldr	r3, [r7, #20]
	}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3718      	adds	r7, #24
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}
	...

080050c0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b08e      	sub	sp, #56	; 0x38
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	60f8      	str	r0, [r7, #12]
 80050c8:	60b9      	str	r1, [r7, #8]
 80050ca:	607a      	str	r2, [r7, #4]
 80050cc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80050ce:	2300      	movs	r3, #0
 80050d0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80050d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d10a      	bne.n	80050f2 <xQueueGenericSend+0x32>
	__asm volatile
 80050dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050e0:	f383 8811 	msr	BASEPRI, r3
 80050e4:	f3bf 8f6f 	isb	sy
 80050e8:	f3bf 8f4f 	dsb	sy
 80050ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80050ee:	bf00      	nop
 80050f0:	e7fe      	b.n	80050f0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d103      	bne.n	8005100 <xQueueGenericSend+0x40>
 80050f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d101      	bne.n	8005104 <xQueueGenericSend+0x44>
 8005100:	2301      	movs	r3, #1
 8005102:	e000      	b.n	8005106 <xQueueGenericSend+0x46>
 8005104:	2300      	movs	r3, #0
 8005106:	2b00      	cmp	r3, #0
 8005108:	d10a      	bne.n	8005120 <xQueueGenericSend+0x60>
	__asm volatile
 800510a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800510e:	f383 8811 	msr	BASEPRI, r3
 8005112:	f3bf 8f6f 	isb	sy
 8005116:	f3bf 8f4f 	dsb	sy
 800511a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800511c:	bf00      	nop
 800511e:	e7fe      	b.n	800511e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	2b02      	cmp	r3, #2
 8005124:	d103      	bne.n	800512e <xQueueGenericSend+0x6e>
 8005126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800512a:	2b01      	cmp	r3, #1
 800512c:	d101      	bne.n	8005132 <xQueueGenericSend+0x72>
 800512e:	2301      	movs	r3, #1
 8005130:	e000      	b.n	8005134 <xQueueGenericSend+0x74>
 8005132:	2300      	movs	r3, #0
 8005134:	2b00      	cmp	r3, #0
 8005136:	d10a      	bne.n	800514e <xQueueGenericSend+0x8e>
	__asm volatile
 8005138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800513c:	f383 8811 	msr	BASEPRI, r3
 8005140:	f3bf 8f6f 	isb	sy
 8005144:	f3bf 8f4f 	dsb	sy
 8005148:	623b      	str	r3, [r7, #32]
}
 800514a:	bf00      	nop
 800514c:	e7fe      	b.n	800514c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800514e:	f001 fc65 	bl	8006a1c <xTaskGetSchedulerState>
 8005152:	4603      	mov	r3, r0
 8005154:	2b00      	cmp	r3, #0
 8005156:	d102      	bne.n	800515e <xQueueGenericSend+0x9e>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d101      	bne.n	8005162 <xQueueGenericSend+0xa2>
 800515e:	2301      	movs	r3, #1
 8005160:	e000      	b.n	8005164 <xQueueGenericSend+0xa4>
 8005162:	2300      	movs	r3, #0
 8005164:	2b00      	cmp	r3, #0
 8005166:	d10a      	bne.n	800517e <xQueueGenericSend+0xbe>
	__asm volatile
 8005168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800516c:	f383 8811 	msr	BASEPRI, r3
 8005170:	f3bf 8f6f 	isb	sy
 8005174:	f3bf 8f4f 	dsb	sy
 8005178:	61fb      	str	r3, [r7, #28]
}
 800517a:	bf00      	nop
 800517c:	e7fe      	b.n	800517c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800517e:	f002 fb61 	bl	8007844 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005184:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800518a:	429a      	cmp	r2, r3
 800518c:	d302      	bcc.n	8005194 <xQueueGenericSend+0xd4>
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	2b02      	cmp	r3, #2
 8005192:	d129      	bne.n	80051e8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005194:	683a      	ldr	r2, [r7, #0]
 8005196:	68b9      	ldr	r1, [r7, #8]
 8005198:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800519a:	f000 fc5e 	bl	8005a5a <prvCopyDataToQueue>
 800519e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80051a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d010      	beq.n	80051ca <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80051a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051aa:	3324      	adds	r3, #36	; 0x24
 80051ac:	4618      	mov	r0, r3
 80051ae:	f001 fa73 	bl	8006698 <xTaskRemoveFromEventList>
 80051b2:	4603      	mov	r3, r0
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d013      	beq.n	80051e0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80051b8:	4b3f      	ldr	r3, [pc, #252]	; (80052b8 <xQueueGenericSend+0x1f8>)
 80051ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051be:	601a      	str	r2, [r3, #0]
 80051c0:	f3bf 8f4f 	dsb	sy
 80051c4:	f3bf 8f6f 	isb	sy
 80051c8:	e00a      	b.n	80051e0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80051ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d007      	beq.n	80051e0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80051d0:	4b39      	ldr	r3, [pc, #228]	; (80052b8 <xQueueGenericSend+0x1f8>)
 80051d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051d6:	601a      	str	r2, [r3, #0]
 80051d8:	f3bf 8f4f 	dsb	sy
 80051dc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80051e0:	f002 fb60 	bl	80078a4 <vPortExitCritical>
				return pdPASS;
 80051e4:	2301      	movs	r3, #1
 80051e6:	e063      	b.n	80052b0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d103      	bne.n	80051f6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80051ee:	f002 fb59 	bl	80078a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80051f2:	2300      	movs	r3, #0
 80051f4:	e05c      	b.n	80052b0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80051f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d106      	bne.n	800520a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80051fc:	f107 0314 	add.w	r3, r7, #20
 8005200:	4618      	mov	r0, r3
 8005202:	f001 faad 	bl	8006760 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005206:	2301      	movs	r3, #1
 8005208:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800520a:	f002 fb4b 	bl	80078a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800520e:	f001 f819 	bl	8006244 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005212:	f002 fb17 	bl	8007844 <vPortEnterCritical>
 8005216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005218:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800521c:	b25b      	sxtb	r3, r3
 800521e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005222:	d103      	bne.n	800522c <xQueueGenericSend+0x16c>
 8005224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005226:	2200      	movs	r2, #0
 8005228:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800522c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800522e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005232:	b25b      	sxtb	r3, r3
 8005234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005238:	d103      	bne.n	8005242 <xQueueGenericSend+0x182>
 800523a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800523c:	2200      	movs	r2, #0
 800523e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005242:	f002 fb2f 	bl	80078a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005246:	1d3a      	adds	r2, r7, #4
 8005248:	f107 0314 	add.w	r3, r7, #20
 800524c:	4611      	mov	r1, r2
 800524e:	4618      	mov	r0, r3
 8005250:	f001 fa9c 	bl	800678c <xTaskCheckForTimeOut>
 8005254:	4603      	mov	r3, r0
 8005256:	2b00      	cmp	r3, #0
 8005258:	d124      	bne.n	80052a4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800525a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800525c:	f000 fcf5 	bl	8005c4a <prvIsQueueFull>
 8005260:	4603      	mov	r3, r0
 8005262:	2b00      	cmp	r3, #0
 8005264:	d018      	beq.n	8005298 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005268:	3310      	adds	r3, #16
 800526a:	687a      	ldr	r2, [r7, #4]
 800526c:	4611      	mov	r1, r2
 800526e:	4618      	mov	r0, r3
 8005270:	f001 f9c2 	bl	80065f8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005274:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005276:	f000 fc80 	bl	8005b7a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800527a:	f000 fff1 	bl	8006260 <xTaskResumeAll>
 800527e:	4603      	mov	r3, r0
 8005280:	2b00      	cmp	r3, #0
 8005282:	f47f af7c 	bne.w	800517e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005286:	4b0c      	ldr	r3, [pc, #48]	; (80052b8 <xQueueGenericSend+0x1f8>)
 8005288:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800528c:	601a      	str	r2, [r3, #0]
 800528e:	f3bf 8f4f 	dsb	sy
 8005292:	f3bf 8f6f 	isb	sy
 8005296:	e772      	b.n	800517e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005298:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800529a:	f000 fc6e 	bl	8005b7a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800529e:	f000 ffdf 	bl	8006260 <xTaskResumeAll>
 80052a2:	e76c      	b.n	800517e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80052a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80052a6:	f000 fc68 	bl	8005b7a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80052aa:	f000 ffd9 	bl	8006260 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80052ae:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	3738      	adds	r7, #56	; 0x38
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}
 80052b8:	e000ed04 	.word	0xe000ed04

080052bc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b090      	sub	sp, #64	; 0x40
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	60f8      	str	r0, [r7, #12]
 80052c4:	60b9      	str	r1, [r7, #8]
 80052c6:	607a      	str	r2, [r7, #4]
 80052c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80052ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d10a      	bne.n	80052ea <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80052d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052d8:	f383 8811 	msr	BASEPRI, r3
 80052dc:	f3bf 8f6f 	isb	sy
 80052e0:	f3bf 8f4f 	dsb	sy
 80052e4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80052e6:	bf00      	nop
 80052e8:	e7fe      	b.n	80052e8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d103      	bne.n	80052f8 <xQueueGenericSendFromISR+0x3c>
 80052f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d101      	bne.n	80052fc <xQueueGenericSendFromISR+0x40>
 80052f8:	2301      	movs	r3, #1
 80052fa:	e000      	b.n	80052fe <xQueueGenericSendFromISR+0x42>
 80052fc:	2300      	movs	r3, #0
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d10a      	bne.n	8005318 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005306:	f383 8811 	msr	BASEPRI, r3
 800530a:	f3bf 8f6f 	isb	sy
 800530e:	f3bf 8f4f 	dsb	sy
 8005312:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005314:	bf00      	nop
 8005316:	e7fe      	b.n	8005316 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	2b02      	cmp	r3, #2
 800531c:	d103      	bne.n	8005326 <xQueueGenericSendFromISR+0x6a>
 800531e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005320:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005322:	2b01      	cmp	r3, #1
 8005324:	d101      	bne.n	800532a <xQueueGenericSendFromISR+0x6e>
 8005326:	2301      	movs	r3, #1
 8005328:	e000      	b.n	800532c <xQueueGenericSendFromISR+0x70>
 800532a:	2300      	movs	r3, #0
 800532c:	2b00      	cmp	r3, #0
 800532e:	d10a      	bne.n	8005346 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005334:	f383 8811 	msr	BASEPRI, r3
 8005338:	f3bf 8f6f 	isb	sy
 800533c:	f3bf 8f4f 	dsb	sy
 8005340:	623b      	str	r3, [r7, #32]
}
 8005342:	bf00      	nop
 8005344:	e7fe      	b.n	8005344 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005346:	f002 fb5f 	bl	8007a08 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800534a:	f3ef 8211 	mrs	r2, BASEPRI
 800534e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005352:	f383 8811 	msr	BASEPRI, r3
 8005356:	f3bf 8f6f 	isb	sy
 800535a:	f3bf 8f4f 	dsb	sy
 800535e:	61fa      	str	r2, [r7, #28]
 8005360:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005362:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005364:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005368:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800536a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800536c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800536e:	429a      	cmp	r2, r3
 8005370:	d302      	bcc.n	8005378 <xQueueGenericSendFromISR+0xbc>
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	2b02      	cmp	r3, #2
 8005376:	d12f      	bne.n	80053d8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800537a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800537e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005386:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005388:	683a      	ldr	r2, [r7, #0]
 800538a:	68b9      	ldr	r1, [r7, #8]
 800538c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800538e:	f000 fb64 	bl	8005a5a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005392:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005396:	f1b3 3fff 	cmp.w	r3, #4294967295
 800539a:	d112      	bne.n	80053c2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800539c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800539e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d016      	beq.n	80053d2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80053a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053a6:	3324      	adds	r3, #36	; 0x24
 80053a8:	4618      	mov	r0, r3
 80053aa:	f001 f975 	bl	8006698 <xTaskRemoveFromEventList>
 80053ae:	4603      	mov	r3, r0
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d00e      	beq.n	80053d2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d00b      	beq.n	80053d2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2201      	movs	r2, #1
 80053be:	601a      	str	r2, [r3, #0]
 80053c0:	e007      	b.n	80053d2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80053c2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80053c6:	3301      	adds	r3, #1
 80053c8:	b2db      	uxtb	r3, r3
 80053ca:	b25a      	sxtb	r2, r3
 80053cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80053d2:	2301      	movs	r3, #1
 80053d4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80053d6:	e001      	b.n	80053dc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80053d8:	2300      	movs	r3, #0
 80053da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053de:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80053e6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80053e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	3740      	adds	r7, #64	; 0x40
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}

080053f2 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80053f2:	b580      	push	{r7, lr}
 80053f4:	b08e      	sub	sp, #56	; 0x38
 80053f6:	af00      	add	r7, sp, #0
 80053f8:	6078      	str	r0, [r7, #4]
 80053fa:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005402:	2b00      	cmp	r3, #0
 8005404:	d10a      	bne.n	800541c <xQueueGiveFromISR+0x2a>
	__asm volatile
 8005406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800540a:	f383 8811 	msr	BASEPRI, r3
 800540e:	f3bf 8f6f 	isb	sy
 8005412:	f3bf 8f4f 	dsb	sy
 8005416:	623b      	str	r3, [r7, #32]
}
 8005418:	bf00      	nop
 800541a:	e7fe      	b.n	800541a <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800541c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800541e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005420:	2b00      	cmp	r3, #0
 8005422:	d00a      	beq.n	800543a <xQueueGiveFromISR+0x48>
	__asm volatile
 8005424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005428:	f383 8811 	msr	BASEPRI, r3
 800542c:	f3bf 8f6f 	isb	sy
 8005430:	f3bf 8f4f 	dsb	sy
 8005434:	61fb      	str	r3, [r7, #28]
}
 8005436:	bf00      	nop
 8005438:	e7fe      	b.n	8005438 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800543a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d103      	bne.n	800544a <xQueueGiveFromISR+0x58>
 8005442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d101      	bne.n	800544e <xQueueGiveFromISR+0x5c>
 800544a:	2301      	movs	r3, #1
 800544c:	e000      	b.n	8005450 <xQueueGiveFromISR+0x5e>
 800544e:	2300      	movs	r3, #0
 8005450:	2b00      	cmp	r3, #0
 8005452:	d10a      	bne.n	800546a <xQueueGiveFromISR+0x78>
	__asm volatile
 8005454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005458:	f383 8811 	msr	BASEPRI, r3
 800545c:	f3bf 8f6f 	isb	sy
 8005460:	f3bf 8f4f 	dsb	sy
 8005464:	61bb      	str	r3, [r7, #24]
}
 8005466:	bf00      	nop
 8005468:	e7fe      	b.n	8005468 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800546a:	f002 facd 	bl	8007a08 <vPortValidateInterruptPriority>
	__asm volatile
 800546e:	f3ef 8211 	mrs	r2, BASEPRI
 8005472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005476:	f383 8811 	msr	BASEPRI, r3
 800547a:	f3bf 8f6f 	isb	sy
 800547e:	f3bf 8f4f 	dsb	sy
 8005482:	617a      	str	r2, [r7, #20]
 8005484:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8005486:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005488:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800548a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800548c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800548e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005492:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005494:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005496:	429a      	cmp	r2, r3
 8005498:	d22b      	bcs.n	80054f2 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800549a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800549c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80054a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80054a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054a6:	1c5a      	adds	r2, r3, #1
 80054a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054aa:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80054ac:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80054b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054b4:	d112      	bne.n	80054dc <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80054b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d016      	beq.n	80054ec <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80054be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054c0:	3324      	adds	r3, #36	; 0x24
 80054c2:	4618      	mov	r0, r3
 80054c4:	f001 f8e8 	bl	8006698 <xTaskRemoveFromEventList>
 80054c8:	4603      	mov	r3, r0
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d00e      	beq.n	80054ec <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d00b      	beq.n	80054ec <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	2201      	movs	r2, #1
 80054d8:	601a      	str	r2, [r3, #0]
 80054da:	e007      	b.n	80054ec <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80054dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80054e0:	3301      	adds	r3, #1
 80054e2:	b2db      	uxtb	r3, r3
 80054e4:	b25a      	sxtb	r2, r3
 80054e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80054ec:	2301      	movs	r3, #1
 80054ee:	637b      	str	r3, [r7, #52]	; 0x34
 80054f0:	e001      	b.n	80054f6 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80054f2:	2300      	movs	r3, #0
 80054f4:	637b      	str	r3, [r7, #52]	; 0x34
 80054f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054f8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	f383 8811 	msr	BASEPRI, r3
}
 8005500:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005502:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005504:	4618      	mov	r0, r3
 8005506:	3738      	adds	r7, #56	; 0x38
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}

0800550c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b08c      	sub	sp, #48	; 0x30
 8005510:	af00      	add	r7, sp, #0
 8005512:	60f8      	str	r0, [r7, #12]
 8005514:	60b9      	str	r1, [r7, #8]
 8005516:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005518:	2300      	movs	r3, #0
 800551a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005522:	2b00      	cmp	r3, #0
 8005524:	d10a      	bne.n	800553c <xQueueReceive+0x30>
	__asm volatile
 8005526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800552a:	f383 8811 	msr	BASEPRI, r3
 800552e:	f3bf 8f6f 	isb	sy
 8005532:	f3bf 8f4f 	dsb	sy
 8005536:	623b      	str	r3, [r7, #32]
}
 8005538:	bf00      	nop
 800553a:	e7fe      	b.n	800553a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d103      	bne.n	800554a <xQueueReceive+0x3e>
 8005542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005546:	2b00      	cmp	r3, #0
 8005548:	d101      	bne.n	800554e <xQueueReceive+0x42>
 800554a:	2301      	movs	r3, #1
 800554c:	e000      	b.n	8005550 <xQueueReceive+0x44>
 800554e:	2300      	movs	r3, #0
 8005550:	2b00      	cmp	r3, #0
 8005552:	d10a      	bne.n	800556a <xQueueReceive+0x5e>
	__asm volatile
 8005554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005558:	f383 8811 	msr	BASEPRI, r3
 800555c:	f3bf 8f6f 	isb	sy
 8005560:	f3bf 8f4f 	dsb	sy
 8005564:	61fb      	str	r3, [r7, #28]
}
 8005566:	bf00      	nop
 8005568:	e7fe      	b.n	8005568 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800556a:	f001 fa57 	bl	8006a1c <xTaskGetSchedulerState>
 800556e:	4603      	mov	r3, r0
 8005570:	2b00      	cmp	r3, #0
 8005572:	d102      	bne.n	800557a <xQueueReceive+0x6e>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d101      	bne.n	800557e <xQueueReceive+0x72>
 800557a:	2301      	movs	r3, #1
 800557c:	e000      	b.n	8005580 <xQueueReceive+0x74>
 800557e:	2300      	movs	r3, #0
 8005580:	2b00      	cmp	r3, #0
 8005582:	d10a      	bne.n	800559a <xQueueReceive+0x8e>
	__asm volatile
 8005584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005588:	f383 8811 	msr	BASEPRI, r3
 800558c:	f3bf 8f6f 	isb	sy
 8005590:	f3bf 8f4f 	dsb	sy
 8005594:	61bb      	str	r3, [r7, #24]
}
 8005596:	bf00      	nop
 8005598:	e7fe      	b.n	8005598 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800559a:	f002 f953 	bl	8007844 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800559e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055a2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80055a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d01f      	beq.n	80055ea <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80055aa:	68b9      	ldr	r1, [r7, #8]
 80055ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80055ae:	f000 fabe 	bl	8005b2e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80055b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b4:	1e5a      	subs	r2, r3, #1
 80055b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055b8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80055ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055bc:	691b      	ldr	r3, [r3, #16]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d00f      	beq.n	80055e2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80055c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055c4:	3310      	adds	r3, #16
 80055c6:	4618      	mov	r0, r3
 80055c8:	f001 f866 	bl	8006698 <xTaskRemoveFromEventList>
 80055cc:	4603      	mov	r3, r0
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d007      	beq.n	80055e2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80055d2:	4b3d      	ldr	r3, [pc, #244]	; (80056c8 <xQueueReceive+0x1bc>)
 80055d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055d8:	601a      	str	r2, [r3, #0]
 80055da:	f3bf 8f4f 	dsb	sy
 80055de:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80055e2:	f002 f95f 	bl	80078a4 <vPortExitCritical>
				return pdPASS;
 80055e6:	2301      	movs	r3, #1
 80055e8:	e069      	b.n	80056be <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d103      	bne.n	80055f8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80055f0:	f002 f958 	bl	80078a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80055f4:	2300      	movs	r3, #0
 80055f6:	e062      	b.n	80056be <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80055f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d106      	bne.n	800560c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80055fe:	f107 0310 	add.w	r3, r7, #16
 8005602:	4618      	mov	r0, r3
 8005604:	f001 f8ac 	bl	8006760 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005608:	2301      	movs	r3, #1
 800560a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800560c:	f002 f94a 	bl	80078a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005610:	f000 fe18 	bl	8006244 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005614:	f002 f916 	bl	8007844 <vPortEnterCritical>
 8005618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800561a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800561e:	b25b      	sxtb	r3, r3
 8005620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005624:	d103      	bne.n	800562e <xQueueReceive+0x122>
 8005626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005628:	2200      	movs	r2, #0
 800562a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800562e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005630:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005634:	b25b      	sxtb	r3, r3
 8005636:	f1b3 3fff 	cmp.w	r3, #4294967295
 800563a:	d103      	bne.n	8005644 <xQueueReceive+0x138>
 800563c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800563e:	2200      	movs	r2, #0
 8005640:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005644:	f002 f92e 	bl	80078a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005648:	1d3a      	adds	r2, r7, #4
 800564a:	f107 0310 	add.w	r3, r7, #16
 800564e:	4611      	mov	r1, r2
 8005650:	4618      	mov	r0, r3
 8005652:	f001 f89b 	bl	800678c <xTaskCheckForTimeOut>
 8005656:	4603      	mov	r3, r0
 8005658:	2b00      	cmp	r3, #0
 800565a:	d123      	bne.n	80056a4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800565c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800565e:	f000 fade 	bl	8005c1e <prvIsQueueEmpty>
 8005662:	4603      	mov	r3, r0
 8005664:	2b00      	cmp	r3, #0
 8005666:	d017      	beq.n	8005698 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800566a:	3324      	adds	r3, #36	; 0x24
 800566c:	687a      	ldr	r2, [r7, #4]
 800566e:	4611      	mov	r1, r2
 8005670:	4618      	mov	r0, r3
 8005672:	f000 ffc1 	bl	80065f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005676:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005678:	f000 fa7f 	bl	8005b7a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800567c:	f000 fdf0 	bl	8006260 <xTaskResumeAll>
 8005680:	4603      	mov	r3, r0
 8005682:	2b00      	cmp	r3, #0
 8005684:	d189      	bne.n	800559a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005686:	4b10      	ldr	r3, [pc, #64]	; (80056c8 <xQueueReceive+0x1bc>)
 8005688:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800568c:	601a      	str	r2, [r3, #0]
 800568e:	f3bf 8f4f 	dsb	sy
 8005692:	f3bf 8f6f 	isb	sy
 8005696:	e780      	b.n	800559a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005698:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800569a:	f000 fa6e 	bl	8005b7a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800569e:	f000 fddf 	bl	8006260 <xTaskResumeAll>
 80056a2:	e77a      	b.n	800559a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80056a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80056a6:	f000 fa68 	bl	8005b7a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80056aa:	f000 fdd9 	bl	8006260 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80056ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80056b0:	f000 fab5 	bl	8005c1e <prvIsQueueEmpty>
 80056b4:	4603      	mov	r3, r0
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	f43f af6f 	beq.w	800559a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80056bc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3730      	adds	r7, #48	; 0x30
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}
 80056c6:	bf00      	nop
 80056c8:	e000ed04 	.word	0xe000ed04

080056cc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b08e      	sub	sp, #56	; 0x38
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
 80056d4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80056d6:	2300      	movs	r3, #0
 80056d8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80056de:	2300      	movs	r3, #0
 80056e0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80056e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d10a      	bne.n	80056fe <xQueueSemaphoreTake+0x32>
	__asm volatile
 80056e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ec:	f383 8811 	msr	BASEPRI, r3
 80056f0:	f3bf 8f6f 	isb	sy
 80056f4:	f3bf 8f4f 	dsb	sy
 80056f8:	623b      	str	r3, [r7, #32]
}
 80056fa:	bf00      	nop
 80056fc:	e7fe      	b.n	80056fc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80056fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005702:	2b00      	cmp	r3, #0
 8005704:	d00a      	beq.n	800571c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8005706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800570a:	f383 8811 	msr	BASEPRI, r3
 800570e:	f3bf 8f6f 	isb	sy
 8005712:	f3bf 8f4f 	dsb	sy
 8005716:	61fb      	str	r3, [r7, #28]
}
 8005718:	bf00      	nop
 800571a:	e7fe      	b.n	800571a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800571c:	f001 f97e 	bl	8006a1c <xTaskGetSchedulerState>
 8005720:	4603      	mov	r3, r0
 8005722:	2b00      	cmp	r3, #0
 8005724:	d102      	bne.n	800572c <xQueueSemaphoreTake+0x60>
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d101      	bne.n	8005730 <xQueueSemaphoreTake+0x64>
 800572c:	2301      	movs	r3, #1
 800572e:	e000      	b.n	8005732 <xQueueSemaphoreTake+0x66>
 8005730:	2300      	movs	r3, #0
 8005732:	2b00      	cmp	r3, #0
 8005734:	d10a      	bne.n	800574c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8005736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800573a:	f383 8811 	msr	BASEPRI, r3
 800573e:	f3bf 8f6f 	isb	sy
 8005742:	f3bf 8f4f 	dsb	sy
 8005746:	61bb      	str	r3, [r7, #24]
}
 8005748:	bf00      	nop
 800574a:	e7fe      	b.n	800574a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800574c:	f002 f87a 	bl	8007844 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005754:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005758:	2b00      	cmp	r3, #0
 800575a:	d024      	beq.n	80057a6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800575c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800575e:	1e5a      	subs	r2, r3, #1
 8005760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005762:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d104      	bne.n	8005776 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800576c:	f001 facc 	bl	8006d08 <pvTaskIncrementMutexHeldCount>
 8005770:	4602      	mov	r2, r0
 8005772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005774:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005778:	691b      	ldr	r3, [r3, #16]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d00f      	beq.n	800579e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800577e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005780:	3310      	adds	r3, #16
 8005782:	4618      	mov	r0, r3
 8005784:	f000 ff88 	bl	8006698 <xTaskRemoveFromEventList>
 8005788:	4603      	mov	r3, r0
 800578a:	2b00      	cmp	r3, #0
 800578c:	d007      	beq.n	800579e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800578e:	4b54      	ldr	r3, [pc, #336]	; (80058e0 <xQueueSemaphoreTake+0x214>)
 8005790:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005794:	601a      	str	r2, [r3, #0]
 8005796:	f3bf 8f4f 	dsb	sy
 800579a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800579e:	f002 f881 	bl	80078a4 <vPortExitCritical>
				return pdPASS;
 80057a2:	2301      	movs	r3, #1
 80057a4:	e097      	b.n	80058d6 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d111      	bne.n	80057d0 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80057ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d00a      	beq.n	80057c8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80057b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057b6:	f383 8811 	msr	BASEPRI, r3
 80057ba:	f3bf 8f6f 	isb	sy
 80057be:	f3bf 8f4f 	dsb	sy
 80057c2:	617b      	str	r3, [r7, #20]
}
 80057c4:	bf00      	nop
 80057c6:	e7fe      	b.n	80057c6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80057c8:	f002 f86c 	bl	80078a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80057cc:	2300      	movs	r3, #0
 80057ce:	e082      	b.n	80058d6 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80057d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d106      	bne.n	80057e4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80057d6:	f107 030c 	add.w	r3, r7, #12
 80057da:	4618      	mov	r0, r3
 80057dc:	f000 ffc0 	bl	8006760 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80057e0:	2301      	movs	r3, #1
 80057e2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80057e4:	f002 f85e 	bl	80078a4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80057e8:	f000 fd2c 	bl	8006244 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80057ec:	f002 f82a 	bl	8007844 <vPortEnterCritical>
 80057f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80057f6:	b25b      	sxtb	r3, r3
 80057f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057fc:	d103      	bne.n	8005806 <xQueueSemaphoreTake+0x13a>
 80057fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005800:	2200      	movs	r2, #0
 8005802:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005808:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800580c:	b25b      	sxtb	r3, r3
 800580e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005812:	d103      	bne.n	800581c <xQueueSemaphoreTake+0x150>
 8005814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005816:	2200      	movs	r2, #0
 8005818:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800581c:	f002 f842 	bl	80078a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005820:	463a      	mov	r2, r7
 8005822:	f107 030c 	add.w	r3, r7, #12
 8005826:	4611      	mov	r1, r2
 8005828:	4618      	mov	r0, r3
 800582a:	f000 ffaf 	bl	800678c <xTaskCheckForTimeOut>
 800582e:	4603      	mov	r3, r0
 8005830:	2b00      	cmp	r3, #0
 8005832:	d132      	bne.n	800589a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005834:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005836:	f000 f9f2 	bl	8005c1e <prvIsQueueEmpty>
 800583a:	4603      	mov	r3, r0
 800583c:	2b00      	cmp	r3, #0
 800583e:	d026      	beq.n	800588e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d109      	bne.n	800585c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8005848:	f001 fffc 	bl	8007844 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800584c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	4618      	mov	r0, r3
 8005852:	f001 f901 	bl	8006a58 <xTaskPriorityInherit>
 8005856:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005858:	f002 f824 	bl	80078a4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800585c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800585e:	3324      	adds	r3, #36	; 0x24
 8005860:	683a      	ldr	r2, [r7, #0]
 8005862:	4611      	mov	r1, r2
 8005864:	4618      	mov	r0, r3
 8005866:	f000 fec7 	bl	80065f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800586a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800586c:	f000 f985 	bl	8005b7a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005870:	f000 fcf6 	bl	8006260 <xTaskResumeAll>
 8005874:	4603      	mov	r3, r0
 8005876:	2b00      	cmp	r3, #0
 8005878:	f47f af68 	bne.w	800574c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800587c:	4b18      	ldr	r3, [pc, #96]	; (80058e0 <xQueueSemaphoreTake+0x214>)
 800587e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005882:	601a      	str	r2, [r3, #0]
 8005884:	f3bf 8f4f 	dsb	sy
 8005888:	f3bf 8f6f 	isb	sy
 800588c:	e75e      	b.n	800574c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800588e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005890:	f000 f973 	bl	8005b7a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005894:	f000 fce4 	bl	8006260 <xTaskResumeAll>
 8005898:	e758      	b.n	800574c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800589a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800589c:	f000 f96d 	bl	8005b7a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80058a0:	f000 fcde 	bl	8006260 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80058a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80058a6:	f000 f9ba 	bl	8005c1e <prvIsQueueEmpty>
 80058aa:	4603      	mov	r3, r0
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	f43f af4d 	beq.w	800574c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80058b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d00d      	beq.n	80058d4 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80058b8:	f001 ffc4 	bl	8007844 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80058bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80058be:	f000 f8b4 	bl	8005a2a <prvGetDisinheritPriorityAfterTimeout>
 80058c2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80058c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80058ca:	4618      	mov	r0, r3
 80058cc:	f001 f99a 	bl	8006c04 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80058d0:	f001 ffe8 	bl	80078a4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80058d4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3738      	adds	r7, #56	; 0x38
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}
 80058de:	bf00      	nop
 80058e0:	e000ed04 	.word	0xe000ed04

080058e4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b08e      	sub	sp, #56	; 0x38
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	60f8      	str	r0, [r7, #12]
 80058ec:	60b9      	str	r1, [r7, #8]
 80058ee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80058f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d10a      	bne.n	8005910 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80058fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058fe:	f383 8811 	msr	BASEPRI, r3
 8005902:	f3bf 8f6f 	isb	sy
 8005906:	f3bf 8f4f 	dsb	sy
 800590a:	623b      	str	r3, [r7, #32]
}
 800590c:	bf00      	nop
 800590e:	e7fe      	b.n	800590e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d103      	bne.n	800591e <xQueueReceiveFromISR+0x3a>
 8005916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800591a:	2b00      	cmp	r3, #0
 800591c:	d101      	bne.n	8005922 <xQueueReceiveFromISR+0x3e>
 800591e:	2301      	movs	r3, #1
 8005920:	e000      	b.n	8005924 <xQueueReceiveFromISR+0x40>
 8005922:	2300      	movs	r3, #0
 8005924:	2b00      	cmp	r3, #0
 8005926:	d10a      	bne.n	800593e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8005928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800592c:	f383 8811 	msr	BASEPRI, r3
 8005930:	f3bf 8f6f 	isb	sy
 8005934:	f3bf 8f4f 	dsb	sy
 8005938:	61fb      	str	r3, [r7, #28]
}
 800593a:	bf00      	nop
 800593c:	e7fe      	b.n	800593c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800593e:	f002 f863 	bl	8007a08 <vPortValidateInterruptPriority>
	__asm volatile
 8005942:	f3ef 8211 	mrs	r2, BASEPRI
 8005946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800594a:	f383 8811 	msr	BASEPRI, r3
 800594e:	f3bf 8f6f 	isb	sy
 8005952:	f3bf 8f4f 	dsb	sy
 8005956:	61ba      	str	r2, [r7, #24]
 8005958:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800595a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800595c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800595e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005962:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005966:	2b00      	cmp	r3, #0
 8005968:	d02f      	beq.n	80059ca <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800596a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800596c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005970:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005974:	68b9      	ldr	r1, [r7, #8]
 8005976:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005978:	f000 f8d9 	bl	8005b2e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800597c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800597e:	1e5a      	subs	r2, r3, #1
 8005980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005982:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005984:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800598c:	d112      	bne.n	80059b4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800598e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005990:	691b      	ldr	r3, [r3, #16]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d016      	beq.n	80059c4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005998:	3310      	adds	r3, #16
 800599a:	4618      	mov	r0, r3
 800599c:	f000 fe7c 	bl	8006698 <xTaskRemoveFromEventList>
 80059a0:	4603      	mov	r3, r0
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d00e      	beq.n	80059c4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d00b      	beq.n	80059c4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2201      	movs	r2, #1
 80059b0:	601a      	str	r2, [r3, #0]
 80059b2:	e007      	b.n	80059c4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80059b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80059b8:	3301      	adds	r3, #1
 80059ba:	b2db      	uxtb	r3, r3
 80059bc:	b25a      	sxtb	r2, r3
 80059be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80059c4:	2301      	movs	r3, #1
 80059c6:	637b      	str	r3, [r7, #52]	; 0x34
 80059c8:	e001      	b.n	80059ce <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80059ca:	2300      	movs	r3, #0
 80059cc:	637b      	str	r3, [r7, #52]	; 0x34
 80059ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059d0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	f383 8811 	msr	BASEPRI, r3
}
 80059d8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80059da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3738      	adds	r7, #56	; 0x38
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}

080059e4 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b084      	sub	sp, #16
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d10a      	bne.n	8005a0c <vQueueDelete+0x28>
	__asm volatile
 80059f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059fa:	f383 8811 	msr	BASEPRI, r3
 80059fe:	f3bf 8f6f 	isb	sy
 8005a02:	f3bf 8f4f 	dsb	sy
 8005a06:	60bb      	str	r3, [r7, #8]
}
 8005a08:	bf00      	nop
 8005a0a:	e7fe      	b.n	8005a0a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8005a0c:	68f8      	ldr	r0, [r7, #12]
 8005a0e:	f000 f95f 	bl	8005cd0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d102      	bne.n	8005a22 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8005a1c:	68f8      	ldr	r0, [r7, #12]
 8005a1e:	f002 f8ff 	bl	8007c20 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8005a22:	bf00      	nop
 8005a24:	3710      	adds	r7, #16
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}

08005a2a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005a2a:	b480      	push	{r7}
 8005a2c:	b085      	sub	sp, #20
 8005a2e:	af00      	add	r7, sp, #0
 8005a30:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d006      	beq.n	8005a48 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8005a44:	60fb      	str	r3, [r7, #12]
 8005a46:	e001      	b.n	8005a4c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
	}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3714      	adds	r7, #20
 8005a52:	46bd      	mov	sp, r7
 8005a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a58:	4770      	bx	lr

08005a5a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005a5a:	b580      	push	{r7, lr}
 8005a5c:	b086      	sub	sp, #24
 8005a5e:	af00      	add	r7, sp, #0
 8005a60:	60f8      	str	r0, [r7, #12]
 8005a62:	60b9      	str	r1, [r7, #8]
 8005a64:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005a66:	2300      	movs	r3, #0
 8005a68:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a6e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d10d      	bne.n	8005a94 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d14d      	bne.n	8005b1c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	4618      	mov	r0, r3
 8005a86:	f001 f84f 	bl	8006b28 <xTaskPriorityDisinherit>
 8005a8a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	609a      	str	r2, [r3, #8]
 8005a92:	e043      	b.n	8005b1c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d119      	bne.n	8005ace <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	6858      	ldr	r0, [r3, #4]
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	68b9      	ldr	r1, [r7, #8]
 8005aa6:	f002 fafc 	bl	80080a2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	685a      	ldr	r2, [r3, #4]
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab2:	441a      	add	r2, r3
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	685a      	ldr	r2, [r3, #4]
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	689b      	ldr	r3, [r3, #8]
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d32b      	bcc.n	8005b1c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	605a      	str	r2, [r3, #4]
 8005acc:	e026      	b.n	8005b1c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	68d8      	ldr	r0, [r3, #12]
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	68b9      	ldr	r1, [r7, #8]
 8005ada:	f002 fae2 	bl	80080a2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	68da      	ldr	r2, [r3, #12]
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ae6:	425b      	negs	r3, r3
 8005ae8:	441a      	add	r2, r3
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	68da      	ldr	r2, [r3, #12]
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	429a      	cmp	r2, r3
 8005af8:	d207      	bcs.n	8005b0a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	689a      	ldr	r2, [r3, #8]
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b02:	425b      	negs	r3, r3
 8005b04:	441a      	add	r2, r3
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2b02      	cmp	r3, #2
 8005b0e:	d105      	bne.n	8005b1c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d002      	beq.n	8005b1c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	3b01      	subs	r3, #1
 8005b1a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	1c5a      	adds	r2, r3, #1
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005b24:	697b      	ldr	r3, [r7, #20]
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3718      	adds	r7, #24
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}

08005b2e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005b2e:	b580      	push	{r7, lr}
 8005b30:	b082      	sub	sp, #8
 8005b32:	af00      	add	r7, sp, #0
 8005b34:	6078      	str	r0, [r7, #4]
 8005b36:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d018      	beq.n	8005b72 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	68da      	ldr	r2, [r3, #12]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b48:	441a      	add	r2, r3
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	68da      	ldr	r2, [r3, #12]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	689b      	ldr	r3, [r3, #8]
 8005b56:	429a      	cmp	r2, r3
 8005b58:	d303      	bcc.n	8005b62 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681a      	ldr	r2, [r3, #0]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	68d9      	ldr	r1, [r3, #12]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b6a:	461a      	mov	r2, r3
 8005b6c:	6838      	ldr	r0, [r7, #0]
 8005b6e:	f002 fa98 	bl	80080a2 <memcpy>
	}
}
 8005b72:	bf00      	nop
 8005b74:	3708      	adds	r7, #8
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}

08005b7a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005b7a:	b580      	push	{r7, lr}
 8005b7c:	b084      	sub	sp, #16
 8005b7e:	af00      	add	r7, sp, #0
 8005b80:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005b82:	f001 fe5f 	bl	8007844 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b8c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005b8e:	e011      	b.n	8005bb4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d012      	beq.n	8005bbe <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	3324      	adds	r3, #36	; 0x24
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	f000 fd7b 	bl	8006698 <xTaskRemoveFromEventList>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d001      	beq.n	8005bac <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005ba8:	f000 fe52 	bl	8006850 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005bac:	7bfb      	ldrb	r3, [r7, #15]
 8005bae:	3b01      	subs	r3, #1
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005bb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	dce9      	bgt.n	8005b90 <prvUnlockQueue+0x16>
 8005bbc:	e000      	b.n	8005bc0 <prvUnlockQueue+0x46>
					break;
 8005bbe:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	22ff      	movs	r2, #255	; 0xff
 8005bc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005bc8:	f001 fe6c 	bl	80078a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005bcc:	f001 fe3a 	bl	8007844 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005bd6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005bd8:	e011      	b.n	8005bfe <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	691b      	ldr	r3, [r3, #16]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d012      	beq.n	8005c08 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	3310      	adds	r3, #16
 8005be6:	4618      	mov	r0, r3
 8005be8:	f000 fd56 	bl	8006698 <xTaskRemoveFromEventList>
 8005bec:	4603      	mov	r3, r0
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d001      	beq.n	8005bf6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005bf2:	f000 fe2d 	bl	8006850 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005bf6:	7bbb      	ldrb	r3, [r7, #14]
 8005bf8:	3b01      	subs	r3, #1
 8005bfa:	b2db      	uxtb	r3, r3
 8005bfc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005bfe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	dce9      	bgt.n	8005bda <prvUnlockQueue+0x60>
 8005c06:	e000      	b.n	8005c0a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005c08:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	22ff      	movs	r2, #255	; 0xff
 8005c0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005c12:	f001 fe47 	bl	80078a4 <vPortExitCritical>
}
 8005c16:	bf00      	nop
 8005c18:	3710      	adds	r7, #16
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}

08005c1e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005c1e:	b580      	push	{r7, lr}
 8005c20:	b084      	sub	sp, #16
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005c26:	f001 fe0d 	bl	8007844 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d102      	bne.n	8005c38 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005c32:	2301      	movs	r3, #1
 8005c34:	60fb      	str	r3, [r7, #12]
 8005c36:	e001      	b.n	8005c3c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005c3c:	f001 fe32 	bl	80078a4 <vPortExitCritical>

	return xReturn;
 8005c40:	68fb      	ldr	r3, [r7, #12]
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3710      	adds	r7, #16
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}

08005c4a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005c4a:	b580      	push	{r7, lr}
 8005c4c:	b084      	sub	sp, #16
 8005c4e:	af00      	add	r7, sp, #0
 8005c50:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005c52:	f001 fdf7 	bl	8007844 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c5e:	429a      	cmp	r2, r3
 8005c60:	d102      	bne.n	8005c68 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005c62:	2301      	movs	r3, #1
 8005c64:	60fb      	str	r3, [r7, #12]
 8005c66:	e001      	b.n	8005c6c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005c6c:	f001 fe1a 	bl	80078a4 <vPortExitCritical>

	return xReturn;
 8005c70:	68fb      	ldr	r3, [r7, #12]
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	3710      	adds	r7, #16
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}
	...

08005c7c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b085      	sub	sp, #20
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
 8005c84:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005c86:	2300      	movs	r3, #0
 8005c88:	60fb      	str	r3, [r7, #12]
 8005c8a:	e014      	b.n	8005cb6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005c8c:	4a0f      	ldr	r2, [pc, #60]	; (8005ccc <vQueueAddToRegistry+0x50>)
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d10b      	bne.n	8005cb0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005c98:	490c      	ldr	r1, [pc, #48]	; (8005ccc <vQueueAddToRegistry+0x50>)
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	683a      	ldr	r2, [r7, #0]
 8005c9e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005ca2:	4a0a      	ldr	r2, [pc, #40]	; (8005ccc <vQueueAddToRegistry+0x50>)
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	00db      	lsls	r3, r3, #3
 8005ca8:	4413      	add	r3, r2
 8005caa:	687a      	ldr	r2, [r7, #4]
 8005cac:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005cae:	e006      	b.n	8005cbe <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	3301      	adds	r3, #1
 8005cb4:	60fb      	str	r3, [r7, #12]
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2b07      	cmp	r3, #7
 8005cba:	d9e7      	bls.n	8005c8c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005cbc:	bf00      	nop
 8005cbe:	bf00      	nop
 8005cc0:	3714      	adds	r7, #20
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc8:	4770      	bx	lr
 8005cca:	bf00      	nop
 8005ccc:	20000c20 	.word	0x20000c20

08005cd0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b085      	sub	sp, #20
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005cd8:	2300      	movs	r3, #0
 8005cda:	60fb      	str	r3, [r7, #12]
 8005cdc:	e016      	b.n	8005d0c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8005cde:	4a10      	ldr	r2, [pc, #64]	; (8005d20 <vQueueUnregisterQueue+0x50>)
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	00db      	lsls	r3, r3, #3
 8005ce4:	4413      	add	r3, r2
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	687a      	ldr	r2, [r7, #4]
 8005cea:	429a      	cmp	r2, r3
 8005cec:	d10b      	bne.n	8005d06 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8005cee:	4a0c      	ldr	r2, [pc, #48]	; (8005d20 <vQueueUnregisterQueue+0x50>)
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	2100      	movs	r1, #0
 8005cf4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8005cf8:	4a09      	ldr	r2, [pc, #36]	; (8005d20 <vQueueUnregisterQueue+0x50>)
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	00db      	lsls	r3, r3, #3
 8005cfe:	4413      	add	r3, r2
 8005d00:	2200      	movs	r2, #0
 8005d02:	605a      	str	r2, [r3, #4]
				break;
 8005d04:	e006      	b.n	8005d14 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	3301      	adds	r3, #1
 8005d0a:	60fb      	str	r3, [r7, #12]
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2b07      	cmp	r3, #7
 8005d10:	d9e5      	bls.n	8005cde <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8005d12:	bf00      	nop
 8005d14:	bf00      	nop
 8005d16:	3714      	adds	r7, #20
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1e:	4770      	bx	lr
 8005d20:	20000c20 	.word	0x20000c20

08005d24 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b086      	sub	sp, #24
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	60f8      	str	r0, [r7, #12]
 8005d2c:	60b9      	str	r1, [r7, #8]
 8005d2e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005d34:	f001 fd86 	bl	8007844 <vPortEnterCritical>
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d3e:	b25b      	sxtb	r3, r3
 8005d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d44:	d103      	bne.n	8005d4e <vQueueWaitForMessageRestricted+0x2a>
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d54:	b25b      	sxtb	r3, r3
 8005d56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d5a:	d103      	bne.n	8005d64 <vQueueWaitForMessageRestricted+0x40>
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d64:	f001 fd9e 	bl	80078a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d106      	bne.n	8005d7e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	3324      	adds	r3, #36	; 0x24
 8005d74:	687a      	ldr	r2, [r7, #4]
 8005d76:	68b9      	ldr	r1, [r7, #8]
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f000 fc61 	bl	8006640 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005d7e:	6978      	ldr	r0, [r7, #20]
 8005d80:	f7ff fefb 	bl	8005b7a <prvUnlockQueue>
	}
 8005d84:	bf00      	nop
 8005d86:	3718      	adds	r7, #24
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}

08005d8c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b08e      	sub	sp, #56	; 0x38
 8005d90:	af04      	add	r7, sp, #16
 8005d92:	60f8      	str	r0, [r7, #12]
 8005d94:	60b9      	str	r1, [r7, #8]
 8005d96:	607a      	str	r2, [r7, #4]
 8005d98:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005d9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d10a      	bne.n	8005db6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005da4:	f383 8811 	msr	BASEPRI, r3
 8005da8:	f3bf 8f6f 	isb	sy
 8005dac:	f3bf 8f4f 	dsb	sy
 8005db0:	623b      	str	r3, [r7, #32]
}
 8005db2:	bf00      	nop
 8005db4:	e7fe      	b.n	8005db4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d10a      	bne.n	8005dd2 <xTaskCreateStatic+0x46>
	__asm volatile
 8005dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dc0:	f383 8811 	msr	BASEPRI, r3
 8005dc4:	f3bf 8f6f 	isb	sy
 8005dc8:	f3bf 8f4f 	dsb	sy
 8005dcc:	61fb      	str	r3, [r7, #28]
}
 8005dce:	bf00      	nop
 8005dd0:	e7fe      	b.n	8005dd0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005dd2:	23bc      	movs	r3, #188	; 0xbc
 8005dd4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	2bbc      	cmp	r3, #188	; 0xbc
 8005dda:	d00a      	beq.n	8005df2 <xTaskCreateStatic+0x66>
	__asm volatile
 8005ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005de0:	f383 8811 	msr	BASEPRI, r3
 8005de4:	f3bf 8f6f 	isb	sy
 8005de8:	f3bf 8f4f 	dsb	sy
 8005dec:	61bb      	str	r3, [r7, #24]
}
 8005dee:	bf00      	nop
 8005df0:	e7fe      	b.n	8005df0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005df2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d01e      	beq.n	8005e38 <xTaskCreateStatic+0xac>
 8005dfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d01b      	beq.n	8005e38 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e02:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e08:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e0c:	2202      	movs	r2, #2
 8005e0e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005e12:	2300      	movs	r3, #0
 8005e14:	9303      	str	r3, [sp, #12]
 8005e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e18:	9302      	str	r3, [sp, #8]
 8005e1a:	f107 0314 	add.w	r3, r7, #20
 8005e1e:	9301      	str	r3, [sp, #4]
 8005e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e22:	9300      	str	r3, [sp, #0]
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	687a      	ldr	r2, [r7, #4]
 8005e28:	68b9      	ldr	r1, [r7, #8]
 8005e2a:	68f8      	ldr	r0, [r7, #12]
 8005e2c:	f000 f850 	bl	8005ed0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005e30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005e32:	f000 f8f3 	bl	800601c <prvAddNewTaskToReadyList>
 8005e36:	e001      	b.n	8005e3c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005e3c:	697b      	ldr	r3, [r7, #20]
	}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3728      	adds	r7, #40	; 0x28
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}

08005e46 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005e46:	b580      	push	{r7, lr}
 8005e48:	b08c      	sub	sp, #48	; 0x30
 8005e4a:	af04      	add	r7, sp, #16
 8005e4c:	60f8      	str	r0, [r7, #12]
 8005e4e:	60b9      	str	r1, [r7, #8]
 8005e50:	603b      	str	r3, [r7, #0]
 8005e52:	4613      	mov	r3, r2
 8005e54:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005e56:	88fb      	ldrh	r3, [r7, #6]
 8005e58:	009b      	lsls	r3, r3, #2
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	f001 fe14 	bl	8007a88 <pvPortMalloc>
 8005e60:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d00e      	beq.n	8005e86 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005e68:	20bc      	movs	r0, #188	; 0xbc
 8005e6a:	f001 fe0d 	bl	8007a88 <pvPortMalloc>
 8005e6e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005e70:	69fb      	ldr	r3, [r7, #28]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d003      	beq.n	8005e7e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005e76:	69fb      	ldr	r3, [r7, #28]
 8005e78:	697a      	ldr	r2, [r7, #20]
 8005e7a:	631a      	str	r2, [r3, #48]	; 0x30
 8005e7c:	e005      	b.n	8005e8a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005e7e:	6978      	ldr	r0, [r7, #20]
 8005e80:	f001 fece 	bl	8007c20 <vPortFree>
 8005e84:	e001      	b.n	8005e8a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005e86:	2300      	movs	r3, #0
 8005e88:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005e8a:	69fb      	ldr	r3, [r7, #28]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d017      	beq.n	8005ec0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005e90:	69fb      	ldr	r3, [r7, #28]
 8005e92:	2200      	movs	r2, #0
 8005e94:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005e98:	88fa      	ldrh	r2, [r7, #6]
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	9303      	str	r3, [sp, #12]
 8005e9e:	69fb      	ldr	r3, [r7, #28]
 8005ea0:	9302      	str	r3, [sp, #8]
 8005ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ea4:	9301      	str	r3, [sp, #4]
 8005ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ea8:	9300      	str	r3, [sp, #0]
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	68b9      	ldr	r1, [r7, #8]
 8005eae:	68f8      	ldr	r0, [r7, #12]
 8005eb0:	f000 f80e 	bl	8005ed0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005eb4:	69f8      	ldr	r0, [r7, #28]
 8005eb6:	f000 f8b1 	bl	800601c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005eba:	2301      	movs	r3, #1
 8005ebc:	61bb      	str	r3, [r7, #24]
 8005ebe:	e002      	b.n	8005ec6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005ec0:	f04f 33ff 	mov.w	r3, #4294967295
 8005ec4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005ec6:	69bb      	ldr	r3, [r7, #24]
	}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	3720      	adds	r7, #32
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bd80      	pop	{r7, pc}

08005ed0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b088      	sub	sp, #32
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	60f8      	str	r0, [r7, #12]
 8005ed8:	60b9      	str	r1, [r7, #8]
 8005eda:	607a      	str	r2, [r7, #4]
 8005edc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ee0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	009b      	lsls	r3, r3, #2
 8005ee6:	461a      	mov	r2, r3
 8005ee8:	21a5      	movs	r1, #165	; 0xa5
 8005eea:	f002 f8e8 	bl	80080be <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ef0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005ef8:	3b01      	subs	r3, #1
 8005efa:	009b      	lsls	r3, r3, #2
 8005efc:	4413      	add	r3, r2
 8005efe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005f00:	69bb      	ldr	r3, [r7, #24]
 8005f02:	f023 0307 	bic.w	r3, r3, #7
 8005f06:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005f08:	69bb      	ldr	r3, [r7, #24]
 8005f0a:	f003 0307 	and.w	r3, r3, #7
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d00a      	beq.n	8005f28 <prvInitialiseNewTask+0x58>
	__asm volatile
 8005f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f16:	f383 8811 	msr	BASEPRI, r3
 8005f1a:	f3bf 8f6f 	isb	sy
 8005f1e:	f3bf 8f4f 	dsb	sy
 8005f22:	617b      	str	r3, [r7, #20]
}
 8005f24:	bf00      	nop
 8005f26:	e7fe      	b.n	8005f26 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d01f      	beq.n	8005f6e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005f2e:	2300      	movs	r3, #0
 8005f30:	61fb      	str	r3, [r7, #28]
 8005f32:	e012      	b.n	8005f5a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005f34:	68ba      	ldr	r2, [r7, #8]
 8005f36:	69fb      	ldr	r3, [r7, #28]
 8005f38:	4413      	add	r3, r2
 8005f3a:	7819      	ldrb	r1, [r3, #0]
 8005f3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f3e:	69fb      	ldr	r3, [r7, #28]
 8005f40:	4413      	add	r3, r2
 8005f42:	3334      	adds	r3, #52	; 0x34
 8005f44:	460a      	mov	r2, r1
 8005f46:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005f48:	68ba      	ldr	r2, [r7, #8]
 8005f4a:	69fb      	ldr	r3, [r7, #28]
 8005f4c:	4413      	add	r3, r2
 8005f4e:	781b      	ldrb	r3, [r3, #0]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d006      	beq.n	8005f62 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005f54:	69fb      	ldr	r3, [r7, #28]
 8005f56:	3301      	adds	r3, #1
 8005f58:	61fb      	str	r3, [r7, #28]
 8005f5a:	69fb      	ldr	r3, [r7, #28]
 8005f5c:	2b0f      	cmp	r3, #15
 8005f5e:	d9e9      	bls.n	8005f34 <prvInitialiseNewTask+0x64>
 8005f60:	e000      	b.n	8005f64 <prvInitialiseNewTask+0x94>
			{
				break;
 8005f62:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f66:	2200      	movs	r2, #0
 8005f68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005f6c:	e003      	b.n	8005f76 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f70:	2200      	movs	r2, #0
 8005f72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f78:	2b37      	cmp	r3, #55	; 0x37
 8005f7a:	d901      	bls.n	8005f80 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005f7c:	2337      	movs	r3, #55	; 0x37
 8005f7e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f84:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f8a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f8e:	2200      	movs	r2, #0
 8005f90:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f94:	3304      	adds	r3, #4
 8005f96:	4618      	mov	r0, r3
 8005f98:	f7fe fe56 	bl	8004c48 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f9e:	3318      	adds	r3, #24
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	f7fe fe51 	bl	8004c48 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005faa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fae:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fba:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fce:	3354      	adds	r3, #84	; 0x54
 8005fd0:	2260      	movs	r2, #96	; 0x60
 8005fd2:	2100      	movs	r1, #0
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	f002 f872 	bl	80080be <memset>
 8005fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fdc:	4a0c      	ldr	r2, [pc, #48]	; (8006010 <prvInitialiseNewTask+0x140>)
 8005fde:	659a      	str	r2, [r3, #88]	; 0x58
 8005fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe2:	4a0c      	ldr	r2, [pc, #48]	; (8006014 <prvInitialiseNewTask+0x144>)
 8005fe4:	65da      	str	r2, [r3, #92]	; 0x5c
 8005fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe8:	4a0b      	ldr	r2, [pc, #44]	; (8006018 <prvInitialiseNewTask+0x148>)
 8005fea:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005fec:	683a      	ldr	r2, [r7, #0]
 8005fee:	68f9      	ldr	r1, [r7, #12]
 8005ff0:	69b8      	ldr	r0, [r7, #24]
 8005ff2:	f001 faf9 	bl	80075e8 <pxPortInitialiseStack>
 8005ff6:	4602      	mov	r2, r0
 8005ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ffa:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d002      	beq.n	8006008 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006004:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006006:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006008:	bf00      	nop
 800600a:	3720      	adds	r7, #32
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}
 8006010:	08008ba8 	.word	0x08008ba8
 8006014:	08008bc8 	.word	0x08008bc8
 8006018:	08008b88 	.word	0x08008b88

0800601c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b082      	sub	sp, #8
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006024:	f001 fc0e 	bl	8007844 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006028:	4b2d      	ldr	r3, [pc, #180]	; (80060e0 <prvAddNewTaskToReadyList+0xc4>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	3301      	adds	r3, #1
 800602e:	4a2c      	ldr	r2, [pc, #176]	; (80060e0 <prvAddNewTaskToReadyList+0xc4>)
 8006030:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006032:	4b2c      	ldr	r3, [pc, #176]	; (80060e4 <prvAddNewTaskToReadyList+0xc8>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d109      	bne.n	800604e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800603a:	4a2a      	ldr	r2, [pc, #168]	; (80060e4 <prvAddNewTaskToReadyList+0xc8>)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006040:	4b27      	ldr	r3, [pc, #156]	; (80060e0 <prvAddNewTaskToReadyList+0xc4>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	2b01      	cmp	r3, #1
 8006046:	d110      	bne.n	800606a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006048:	f000 fc26 	bl	8006898 <prvInitialiseTaskLists>
 800604c:	e00d      	b.n	800606a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800604e:	4b26      	ldr	r3, [pc, #152]	; (80060e8 <prvAddNewTaskToReadyList+0xcc>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d109      	bne.n	800606a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006056:	4b23      	ldr	r3, [pc, #140]	; (80060e4 <prvAddNewTaskToReadyList+0xc8>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006060:	429a      	cmp	r2, r3
 8006062:	d802      	bhi.n	800606a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006064:	4a1f      	ldr	r2, [pc, #124]	; (80060e4 <prvAddNewTaskToReadyList+0xc8>)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800606a:	4b20      	ldr	r3, [pc, #128]	; (80060ec <prvAddNewTaskToReadyList+0xd0>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	3301      	adds	r3, #1
 8006070:	4a1e      	ldr	r2, [pc, #120]	; (80060ec <prvAddNewTaskToReadyList+0xd0>)
 8006072:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006074:	4b1d      	ldr	r3, [pc, #116]	; (80060ec <prvAddNewTaskToReadyList+0xd0>)
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006080:	4b1b      	ldr	r3, [pc, #108]	; (80060f0 <prvAddNewTaskToReadyList+0xd4>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	429a      	cmp	r2, r3
 8006086:	d903      	bls.n	8006090 <prvAddNewTaskToReadyList+0x74>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800608c:	4a18      	ldr	r2, [pc, #96]	; (80060f0 <prvAddNewTaskToReadyList+0xd4>)
 800608e:	6013      	str	r3, [r2, #0]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006094:	4613      	mov	r3, r2
 8006096:	009b      	lsls	r3, r3, #2
 8006098:	4413      	add	r3, r2
 800609a:	009b      	lsls	r3, r3, #2
 800609c:	4a15      	ldr	r2, [pc, #84]	; (80060f4 <prvAddNewTaskToReadyList+0xd8>)
 800609e:	441a      	add	r2, r3
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	3304      	adds	r3, #4
 80060a4:	4619      	mov	r1, r3
 80060a6:	4610      	mov	r0, r2
 80060a8:	f7fe fddb 	bl	8004c62 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80060ac:	f001 fbfa 	bl	80078a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80060b0:	4b0d      	ldr	r3, [pc, #52]	; (80060e8 <prvAddNewTaskToReadyList+0xcc>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d00e      	beq.n	80060d6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80060b8:	4b0a      	ldr	r3, [pc, #40]	; (80060e4 <prvAddNewTaskToReadyList+0xc8>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060c2:	429a      	cmp	r2, r3
 80060c4:	d207      	bcs.n	80060d6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80060c6:	4b0c      	ldr	r3, [pc, #48]	; (80060f8 <prvAddNewTaskToReadyList+0xdc>)
 80060c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060cc:	601a      	str	r2, [r3, #0]
 80060ce:	f3bf 8f4f 	dsb	sy
 80060d2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80060d6:	bf00      	nop
 80060d8:	3708      	adds	r7, #8
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}
 80060de:	bf00      	nop
 80060e0:	20001134 	.word	0x20001134
 80060e4:	20000c60 	.word	0x20000c60
 80060e8:	20001140 	.word	0x20001140
 80060ec:	20001150 	.word	0x20001150
 80060f0:	2000113c 	.word	0x2000113c
 80060f4:	20000c64 	.word	0x20000c64
 80060f8:	e000ed04 	.word	0xe000ed04

080060fc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b084      	sub	sp, #16
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006104:	2300      	movs	r3, #0
 8006106:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d017      	beq.n	800613e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800610e:	4b13      	ldr	r3, [pc, #76]	; (800615c <vTaskDelay+0x60>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d00a      	beq.n	800612c <vTaskDelay+0x30>
	__asm volatile
 8006116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800611a:	f383 8811 	msr	BASEPRI, r3
 800611e:	f3bf 8f6f 	isb	sy
 8006122:	f3bf 8f4f 	dsb	sy
 8006126:	60bb      	str	r3, [r7, #8]
}
 8006128:	bf00      	nop
 800612a:	e7fe      	b.n	800612a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800612c:	f000 f88a 	bl	8006244 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006130:	2100      	movs	r1, #0
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f000 fdfc 	bl	8006d30 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006138:	f000 f892 	bl	8006260 <xTaskResumeAll>
 800613c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d107      	bne.n	8006154 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006144:	4b06      	ldr	r3, [pc, #24]	; (8006160 <vTaskDelay+0x64>)
 8006146:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800614a:	601a      	str	r2, [r3, #0]
 800614c:	f3bf 8f4f 	dsb	sy
 8006150:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006154:	bf00      	nop
 8006156:	3710      	adds	r7, #16
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}
 800615c:	2000115c 	.word	0x2000115c
 8006160:	e000ed04 	.word	0xe000ed04

08006164 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b08a      	sub	sp, #40	; 0x28
 8006168:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800616a:	2300      	movs	r3, #0
 800616c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800616e:	2300      	movs	r3, #0
 8006170:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006172:	463a      	mov	r2, r7
 8006174:	1d39      	adds	r1, r7, #4
 8006176:	f107 0308 	add.w	r3, r7, #8
 800617a:	4618      	mov	r0, r3
 800617c:	f7fe fd10 	bl	8004ba0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006180:	6839      	ldr	r1, [r7, #0]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	68ba      	ldr	r2, [r7, #8]
 8006186:	9202      	str	r2, [sp, #8]
 8006188:	9301      	str	r3, [sp, #4]
 800618a:	2300      	movs	r3, #0
 800618c:	9300      	str	r3, [sp, #0]
 800618e:	2300      	movs	r3, #0
 8006190:	460a      	mov	r2, r1
 8006192:	4924      	ldr	r1, [pc, #144]	; (8006224 <vTaskStartScheduler+0xc0>)
 8006194:	4824      	ldr	r0, [pc, #144]	; (8006228 <vTaskStartScheduler+0xc4>)
 8006196:	f7ff fdf9 	bl	8005d8c <xTaskCreateStatic>
 800619a:	4603      	mov	r3, r0
 800619c:	4a23      	ldr	r2, [pc, #140]	; (800622c <vTaskStartScheduler+0xc8>)
 800619e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80061a0:	4b22      	ldr	r3, [pc, #136]	; (800622c <vTaskStartScheduler+0xc8>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d002      	beq.n	80061ae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80061a8:	2301      	movs	r3, #1
 80061aa:	617b      	str	r3, [r7, #20]
 80061ac:	e001      	b.n	80061b2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80061ae:	2300      	movs	r3, #0
 80061b0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d102      	bne.n	80061be <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80061b8:	f000 fe0e 	bl	8006dd8 <xTimerCreateTimerTask>
 80061bc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	2b01      	cmp	r3, #1
 80061c2:	d11b      	bne.n	80061fc <vTaskStartScheduler+0x98>
	__asm volatile
 80061c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061c8:	f383 8811 	msr	BASEPRI, r3
 80061cc:	f3bf 8f6f 	isb	sy
 80061d0:	f3bf 8f4f 	dsb	sy
 80061d4:	613b      	str	r3, [r7, #16]
}
 80061d6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80061d8:	4b15      	ldr	r3, [pc, #84]	; (8006230 <vTaskStartScheduler+0xcc>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	3354      	adds	r3, #84	; 0x54
 80061de:	4a15      	ldr	r2, [pc, #84]	; (8006234 <vTaskStartScheduler+0xd0>)
 80061e0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80061e2:	4b15      	ldr	r3, [pc, #84]	; (8006238 <vTaskStartScheduler+0xd4>)
 80061e4:	f04f 32ff 	mov.w	r2, #4294967295
 80061e8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80061ea:	4b14      	ldr	r3, [pc, #80]	; (800623c <vTaskStartScheduler+0xd8>)
 80061ec:	2201      	movs	r2, #1
 80061ee:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80061f0:	4b13      	ldr	r3, [pc, #76]	; (8006240 <vTaskStartScheduler+0xdc>)
 80061f2:	2200      	movs	r2, #0
 80061f4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80061f6:	f001 fa83 	bl	8007700 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80061fa:	e00e      	b.n	800621a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006202:	d10a      	bne.n	800621a <vTaskStartScheduler+0xb6>
	__asm volatile
 8006204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006208:	f383 8811 	msr	BASEPRI, r3
 800620c:	f3bf 8f6f 	isb	sy
 8006210:	f3bf 8f4f 	dsb	sy
 8006214:	60fb      	str	r3, [r7, #12]
}
 8006216:	bf00      	nop
 8006218:	e7fe      	b.n	8006218 <vTaskStartScheduler+0xb4>
}
 800621a:	bf00      	nop
 800621c:	3718      	adds	r7, #24
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}
 8006222:	bf00      	nop
 8006224:	08008a98 	.word	0x08008a98
 8006228:	08006869 	.word	0x08006869
 800622c:	20001158 	.word	0x20001158
 8006230:	20000c60 	.word	0x20000c60
 8006234:	20000014 	.word	0x20000014
 8006238:	20001154 	.word	0x20001154
 800623c:	20001140 	.word	0x20001140
 8006240:	20001138 	.word	0x20001138

08006244 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006244:	b480      	push	{r7}
 8006246:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006248:	4b04      	ldr	r3, [pc, #16]	; (800625c <vTaskSuspendAll+0x18>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	3301      	adds	r3, #1
 800624e:	4a03      	ldr	r2, [pc, #12]	; (800625c <vTaskSuspendAll+0x18>)
 8006250:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006252:	bf00      	nop
 8006254:	46bd      	mov	sp, r7
 8006256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625a:	4770      	bx	lr
 800625c:	2000115c 	.word	0x2000115c

08006260 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b084      	sub	sp, #16
 8006264:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006266:	2300      	movs	r3, #0
 8006268:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800626a:	2300      	movs	r3, #0
 800626c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800626e:	4b42      	ldr	r3, [pc, #264]	; (8006378 <xTaskResumeAll+0x118>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d10a      	bne.n	800628c <xTaskResumeAll+0x2c>
	__asm volatile
 8006276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800627a:	f383 8811 	msr	BASEPRI, r3
 800627e:	f3bf 8f6f 	isb	sy
 8006282:	f3bf 8f4f 	dsb	sy
 8006286:	603b      	str	r3, [r7, #0]
}
 8006288:	bf00      	nop
 800628a:	e7fe      	b.n	800628a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800628c:	f001 fada 	bl	8007844 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006290:	4b39      	ldr	r3, [pc, #228]	; (8006378 <xTaskResumeAll+0x118>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	3b01      	subs	r3, #1
 8006296:	4a38      	ldr	r2, [pc, #224]	; (8006378 <xTaskResumeAll+0x118>)
 8006298:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800629a:	4b37      	ldr	r3, [pc, #220]	; (8006378 <xTaskResumeAll+0x118>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d162      	bne.n	8006368 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80062a2:	4b36      	ldr	r3, [pc, #216]	; (800637c <xTaskResumeAll+0x11c>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d05e      	beq.n	8006368 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80062aa:	e02f      	b.n	800630c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062ac:	4b34      	ldr	r3, [pc, #208]	; (8006380 <xTaskResumeAll+0x120>)
 80062ae:	68db      	ldr	r3, [r3, #12]
 80062b0:	68db      	ldr	r3, [r3, #12]
 80062b2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	3318      	adds	r3, #24
 80062b8:	4618      	mov	r0, r3
 80062ba:	f7fe fd2f 	bl	8004d1c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	3304      	adds	r3, #4
 80062c2:	4618      	mov	r0, r3
 80062c4:	f7fe fd2a 	bl	8004d1c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062cc:	4b2d      	ldr	r3, [pc, #180]	; (8006384 <xTaskResumeAll+0x124>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	429a      	cmp	r2, r3
 80062d2:	d903      	bls.n	80062dc <xTaskResumeAll+0x7c>
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062d8:	4a2a      	ldr	r2, [pc, #168]	; (8006384 <xTaskResumeAll+0x124>)
 80062da:	6013      	str	r3, [r2, #0]
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062e0:	4613      	mov	r3, r2
 80062e2:	009b      	lsls	r3, r3, #2
 80062e4:	4413      	add	r3, r2
 80062e6:	009b      	lsls	r3, r3, #2
 80062e8:	4a27      	ldr	r2, [pc, #156]	; (8006388 <xTaskResumeAll+0x128>)
 80062ea:	441a      	add	r2, r3
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	3304      	adds	r3, #4
 80062f0:	4619      	mov	r1, r3
 80062f2:	4610      	mov	r0, r2
 80062f4:	f7fe fcb5 	bl	8004c62 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062fc:	4b23      	ldr	r3, [pc, #140]	; (800638c <xTaskResumeAll+0x12c>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006302:	429a      	cmp	r2, r3
 8006304:	d302      	bcc.n	800630c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006306:	4b22      	ldr	r3, [pc, #136]	; (8006390 <xTaskResumeAll+0x130>)
 8006308:	2201      	movs	r2, #1
 800630a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800630c:	4b1c      	ldr	r3, [pc, #112]	; (8006380 <xTaskResumeAll+0x120>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d1cb      	bne.n	80062ac <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d001      	beq.n	800631e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800631a:	f000 fb5f 	bl	80069dc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800631e:	4b1d      	ldr	r3, [pc, #116]	; (8006394 <xTaskResumeAll+0x134>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d010      	beq.n	800634c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800632a:	f000 f847 	bl	80063bc <xTaskIncrementTick>
 800632e:	4603      	mov	r3, r0
 8006330:	2b00      	cmp	r3, #0
 8006332:	d002      	beq.n	800633a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006334:	4b16      	ldr	r3, [pc, #88]	; (8006390 <xTaskResumeAll+0x130>)
 8006336:	2201      	movs	r2, #1
 8006338:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	3b01      	subs	r3, #1
 800633e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d1f1      	bne.n	800632a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006346:	4b13      	ldr	r3, [pc, #76]	; (8006394 <xTaskResumeAll+0x134>)
 8006348:	2200      	movs	r2, #0
 800634a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800634c:	4b10      	ldr	r3, [pc, #64]	; (8006390 <xTaskResumeAll+0x130>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d009      	beq.n	8006368 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006354:	2301      	movs	r3, #1
 8006356:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006358:	4b0f      	ldr	r3, [pc, #60]	; (8006398 <xTaskResumeAll+0x138>)
 800635a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800635e:	601a      	str	r2, [r3, #0]
 8006360:	f3bf 8f4f 	dsb	sy
 8006364:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006368:	f001 fa9c 	bl	80078a4 <vPortExitCritical>

	return xAlreadyYielded;
 800636c:	68bb      	ldr	r3, [r7, #8]
}
 800636e:	4618      	mov	r0, r3
 8006370:	3710      	adds	r7, #16
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}
 8006376:	bf00      	nop
 8006378:	2000115c 	.word	0x2000115c
 800637c:	20001134 	.word	0x20001134
 8006380:	200010f4 	.word	0x200010f4
 8006384:	2000113c 	.word	0x2000113c
 8006388:	20000c64 	.word	0x20000c64
 800638c:	20000c60 	.word	0x20000c60
 8006390:	20001148 	.word	0x20001148
 8006394:	20001144 	.word	0x20001144
 8006398:	e000ed04 	.word	0xe000ed04

0800639c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800639c:	b480      	push	{r7}
 800639e:	b083      	sub	sp, #12
 80063a0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80063a2:	4b05      	ldr	r3, [pc, #20]	; (80063b8 <xTaskGetTickCount+0x1c>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80063a8:	687b      	ldr	r3, [r7, #4]
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	370c      	adds	r7, #12
 80063ae:	46bd      	mov	sp, r7
 80063b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b4:	4770      	bx	lr
 80063b6:	bf00      	nop
 80063b8:	20001138 	.word	0x20001138

080063bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b086      	sub	sp, #24
 80063c0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80063c2:	2300      	movs	r3, #0
 80063c4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80063c6:	4b4f      	ldr	r3, [pc, #316]	; (8006504 <xTaskIncrementTick+0x148>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	f040 808f 	bne.w	80064ee <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80063d0:	4b4d      	ldr	r3, [pc, #308]	; (8006508 <xTaskIncrementTick+0x14c>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	3301      	adds	r3, #1
 80063d6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80063d8:	4a4b      	ldr	r2, [pc, #300]	; (8006508 <xTaskIncrementTick+0x14c>)
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d120      	bne.n	8006426 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80063e4:	4b49      	ldr	r3, [pc, #292]	; (800650c <xTaskIncrementTick+0x150>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d00a      	beq.n	8006404 <xTaskIncrementTick+0x48>
	__asm volatile
 80063ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063f2:	f383 8811 	msr	BASEPRI, r3
 80063f6:	f3bf 8f6f 	isb	sy
 80063fa:	f3bf 8f4f 	dsb	sy
 80063fe:	603b      	str	r3, [r7, #0]
}
 8006400:	bf00      	nop
 8006402:	e7fe      	b.n	8006402 <xTaskIncrementTick+0x46>
 8006404:	4b41      	ldr	r3, [pc, #260]	; (800650c <xTaskIncrementTick+0x150>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	60fb      	str	r3, [r7, #12]
 800640a:	4b41      	ldr	r3, [pc, #260]	; (8006510 <xTaskIncrementTick+0x154>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a3f      	ldr	r2, [pc, #252]	; (800650c <xTaskIncrementTick+0x150>)
 8006410:	6013      	str	r3, [r2, #0]
 8006412:	4a3f      	ldr	r2, [pc, #252]	; (8006510 <xTaskIncrementTick+0x154>)
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	6013      	str	r3, [r2, #0]
 8006418:	4b3e      	ldr	r3, [pc, #248]	; (8006514 <xTaskIncrementTick+0x158>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	3301      	adds	r3, #1
 800641e:	4a3d      	ldr	r2, [pc, #244]	; (8006514 <xTaskIncrementTick+0x158>)
 8006420:	6013      	str	r3, [r2, #0]
 8006422:	f000 fadb 	bl	80069dc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006426:	4b3c      	ldr	r3, [pc, #240]	; (8006518 <xTaskIncrementTick+0x15c>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	693a      	ldr	r2, [r7, #16]
 800642c:	429a      	cmp	r2, r3
 800642e:	d349      	bcc.n	80064c4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006430:	4b36      	ldr	r3, [pc, #216]	; (800650c <xTaskIncrementTick+0x150>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d104      	bne.n	8006444 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800643a:	4b37      	ldr	r3, [pc, #220]	; (8006518 <xTaskIncrementTick+0x15c>)
 800643c:	f04f 32ff 	mov.w	r2, #4294967295
 8006440:	601a      	str	r2, [r3, #0]
					break;
 8006442:	e03f      	b.n	80064c4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006444:	4b31      	ldr	r3, [pc, #196]	; (800650c <xTaskIncrementTick+0x150>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	68db      	ldr	r3, [r3, #12]
 800644a:	68db      	ldr	r3, [r3, #12]
 800644c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006454:	693a      	ldr	r2, [r7, #16]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	429a      	cmp	r2, r3
 800645a:	d203      	bcs.n	8006464 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800645c:	4a2e      	ldr	r2, [pc, #184]	; (8006518 <xTaskIncrementTick+0x15c>)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006462:	e02f      	b.n	80064c4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	3304      	adds	r3, #4
 8006468:	4618      	mov	r0, r3
 800646a:	f7fe fc57 	bl	8004d1c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006472:	2b00      	cmp	r3, #0
 8006474:	d004      	beq.n	8006480 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	3318      	adds	r3, #24
 800647a:	4618      	mov	r0, r3
 800647c:	f7fe fc4e 	bl	8004d1c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006484:	4b25      	ldr	r3, [pc, #148]	; (800651c <xTaskIncrementTick+0x160>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	429a      	cmp	r2, r3
 800648a:	d903      	bls.n	8006494 <xTaskIncrementTick+0xd8>
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006490:	4a22      	ldr	r2, [pc, #136]	; (800651c <xTaskIncrementTick+0x160>)
 8006492:	6013      	str	r3, [r2, #0]
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006498:	4613      	mov	r3, r2
 800649a:	009b      	lsls	r3, r3, #2
 800649c:	4413      	add	r3, r2
 800649e:	009b      	lsls	r3, r3, #2
 80064a0:	4a1f      	ldr	r2, [pc, #124]	; (8006520 <xTaskIncrementTick+0x164>)
 80064a2:	441a      	add	r2, r3
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	3304      	adds	r3, #4
 80064a8:	4619      	mov	r1, r3
 80064aa:	4610      	mov	r0, r2
 80064ac:	f7fe fbd9 	bl	8004c62 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064b4:	4b1b      	ldr	r3, [pc, #108]	; (8006524 <xTaskIncrementTick+0x168>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ba:	429a      	cmp	r2, r3
 80064bc:	d3b8      	bcc.n	8006430 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80064be:	2301      	movs	r3, #1
 80064c0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80064c2:	e7b5      	b.n	8006430 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80064c4:	4b17      	ldr	r3, [pc, #92]	; (8006524 <xTaskIncrementTick+0x168>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064ca:	4915      	ldr	r1, [pc, #84]	; (8006520 <xTaskIncrementTick+0x164>)
 80064cc:	4613      	mov	r3, r2
 80064ce:	009b      	lsls	r3, r3, #2
 80064d0:	4413      	add	r3, r2
 80064d2:	009b      	lsls	r3, r3, #2
 80064d4:	440b      	add	r3, r1
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d901      	bls.n	80064e0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80064dc:	2301      	movs	r3, #1
 80064de:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80064e0:	4b11      	ldr	r3, [pc, #68]	; (8006528 <xTaskIncrementTick+0x16c>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d007      	beq.n	80064f8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80064e8:	2301      	movs	r3, #1
 80064ea:	617b      	str	r3, [r7, #20]
 80064ec:	e004      	b.n	80064f8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80064ee:	4b0f      	ldr	r3, [pc, #60]	; (800652c <xTaskIncrementTick+0x170>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	3301      	adds	r3, #1
 80064f4:	4a0d      	ldr	r2, [pc, #52]	; (800652c <xTaskIncrementTick+0x170>)
 80064f6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80064f8:	697b      	ldr	r3, [r7, #20]
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3718      	adds	r7, #24
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}
 8006502:	bf00      	nop
 8006504:	2000115c 	.word	0x2000115c
 8006508:	20001138 	.word	0x20001138
 800650c:	200010ec 	.word	0x200010ec
 8006510:	200010f0 	.word	0x200010f0
 8006514:	2000114c 	.word	0x2000114c
 8006518:	20001154 	.word	0x20001154
 800651c:	2000113c 	.word	0x2000113c
 8006520:	20000c64 	.word	0x20000c64
 8006524:	20000c60 	.word	0x20000c60
 8006528:	20001148 	.word	0x20001148
 800652c:	20001144 	.word	0x20001144

08006530 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006530:	b480      	push	{r7}
 8006532:	b085      	sub	sp, #20
 8006534:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006536:	4b2a      	ldr	r3, [pc, #168]	; (80065e0 <vTaskSwitchContext+0xb0>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d003      	beq.n	8006546 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800653e:	4b29      	ldr	r3, [pc, #164]	; (80065e4 <vTaskSwitchContext+0xb4>)
 8006540:	2201      	movs	r2, #1
 8006542:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006544:	e046      	b.n	80065d4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8006546:	4b27      	ldr	r3, [pc, #156]	; (80065e4 <vTaskSwitchContext+0xb4>)
 8006548:	2200      	movs	r2, #0
 800654a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800654c:	4b26      	ldr	r3, [pc, #152]	; (80065e8 <vTaskSwitchContext+0xb8>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	60fb      	str	r3, [r7, #12]
 8006552:	e010      	b.n	8006576 <vTaskSwitchContext+0x46>
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d10a      	bne.n	8006570 <vTaskSwitchContext+0x40>
	__asm volatile
 800655a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800655e:	f383 8811 	msr	BASEPRI, r3
 8006562:	f3bf 8f6f 	isb	sy
 8006566:	f3bf 8f4f 	dsb	sy
 800656a:	607b      	str	r3, [r7, #4]
}
 800656c:	bf00      	nop
 800656e:	e7fe      	b.n	800656e <vTaskSwitchContext+0x3e>
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	3b01      	subs	r3, #1
 8006574:	60fb      	str	r3, [r7, #12]
 8006576:	491d      	ldr	r1, [pc, #116]	; (80065ec <vTaskSwitchContext+0xbc>)
 8006578:	68fa      	ldr	r2, [r7, #12]
 800657a:	4613      	mov	r3, r2
 800657c:	009b      	lsls	r3, r3, #2
 800657e:	4413      	add	r3, r2
 8006580:	009b      	lsls	r3, r3, #2
 8006582:	440b      	add	r3, r1
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d0e4      	beq.n	8006554 <vTaskSwitchContext+0x24>
 800658a:	68fa      	ldr	r2, [r7, #12]
 800658c:	4613      	mov	r3, r2
 800658e:	009b      	lsls	r3, r3, #2
 8006590:	4413      	add	r3, r2
 8006592:	009b      	lsls	r3, r3, #2
 8006594:	4a15      	ldr	r2, [pc, #84]	; (80065ec <vTaskSwitchContext+0xbc>)
 8006596:	4413      	add	r3, r2
 8006598:	60bb      	str	r3, [r7, #8]
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	685a      	ldr	r2, [r3, #4]
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	605a      	str	r2, [r3, #4]
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	685a      	ldr	r2, [r3, #4]
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	3308      	adds	r3, #8
 80065ac:	429a      	cmp	r2, r3
 80065ae:	d104      	bne.n	80065ba <vTaskSwitchContext+0x8a>
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	685b      	ldr	r3, [r3, #4]
 80065b4:	685a      	ldr	r2, [r3, #4]
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	605a      	str	r2, [r3, #4]
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	68db      	ldr	r3, [r3, #12]
 80065c0:	4a0b      	ldr	r2, [pc, #44]	; (80065f0 <vTaskSwitchContext+0xc0>)
 80065c2:	6013      	str	r3, [r2, #0]
 80065c4:	4a08      	ldr	r2, [pc, #32]	; (80065e8 <vTaskSwitchContext+0xb8>)
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80065ca:	4b09      	ldr	r3, [pc, #36]	; (80065f0 <vTaskSwitchContext+0xc0>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	3354      	adds	r3, #84	; 0x54
 80065d0:	4a08      	ldr	r2, [pc, #32]	; (80065f4 <vTaskSwitchContext+0xc4>)
 80065d2:	6013      	str	r3, [r2, #0]
}
 80065d4:	bf00      	nop
 80065d6:	3714      	adds	r7, #20
 80065d8:	46bd      	mov	sp, r7
 80065da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065de:	4770      	bx	lr
 80065e0:	2000115c 	.word	0x2000115c
 80065e4:	20001148 	.word	0x20001148
 80065e8:	2000113c 	.word	0x2000113c
 80065ec:	20000c64 	.word	0x20000c64
 80065f0:	20000c60 	.word	0x20000c60
 80065f4:	20000014 	.word	0x20000014

080065f8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b084      	sub	sp, #16
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
 8006600:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d10a      	bne.n	800661e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800660c:	f383 8811 	msr	BASEPRI, r3
 8006610:	f3bf 8f6f 	isb	sy
 8006614:	f3bf 8f4f 	dsb	sy
 8006618:	60fb      	str	r3, [r7, #12]
}
 800661a:	bf00      	nop
 800661c:	e7fe      	b.n	800661c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800661e:	4b07      	ldr	r3, [pc, #28]	; (800663c <vTaskPlaceOnEventList+0x44>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	3318      	adds	r3, #24
 8006624:	4619      	mov	r1, r3
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f7fe fb3f 	bl	8004caa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800662c:	2101      	movs	r1, #1
 800662e:	6838      	ldr	r0, [r7, #0]
 8006630:	f000 fb7e 	bl	8006d30 <prvAddCurrentTaskToDelayedList>
}
 8006634:	bf00      	nop
 8006636:	3710      	adds	r7, #16
 8006638:	46bd      	mov	sp, r7
 800663a:	bd80      	pop	{r7, pc}
 800663c:	20000c60 	.word	0x20000c60

08006640 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006640:	b580      	push	{r7, lr}
 8006642:	b086      	sub	sp, #24
 8006644:	af00      	add	r7, sp, #0
 8006646:	60f8      	str	r0, [r7, #12]
 8006648:	60b9      	str	r1, [r7, #8]
 800664a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d10a      	bne.n	8006668 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006656:	f383 8811 	msr	BASEPRI, r3
 800665a:	f3bf 8f6f 	isb	sy
 800665e:	f3bf 8f4f 	dsb	sy
 8006662:	617b      	str	r3, [r7, #20]
}
 8006664:	bf00      	nop
 8006666:	e7fe      	b.n	8006666 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006668:	4b0a      	ldr	r3, [pc, #40]	; (8006694 <vTaskPlaceOnEventListRestricted+0x54>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	3318      	adds	r3, #24
 800666e:	4619      	mov	r1, r3
 8006670:	68f8      	ldr	r0, [r7, #12]
 8006672:	f7fe faf6 	bl	8004c62 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d002      	beq.n	8006682 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800667c:	f04f 33ff 	mov.w	r3, #4294967295
 8006680:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006682:	6879      	ldr	r1, [r7, #4]
 8006684:	68b8      	ldr	r0, [r7, #8]
 8006686:	f000 fb53 	bl	8006d30 <prvAddCurrentTaskToDelayedList>
	}
 800668a:	bf00      	nop
 800668c:	3718      	adds	r7, #24
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}
 8006692:	bf00      	nop
 8006694:	20000c60 	.word	0x20000c60

08006698 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b086      	sub	sp, #24
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	68db      	ldr	r3, [r3, #12]
 80066a4:	68db      	ldr	r3, [r3, #12]
 80066a6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80066a8:	693b      	ldr	r3, [r7, #16]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d10a      	bne.n	80066c4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80066ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066b2:	f383 8811 	msr	BASEPRI, r3
 80066b6:	f3bf 8f6f 	isb	sy
 80066ba:	f3bf 8f4f 	dsb	sy
 80066be:	60fb      	str	r3, [r7, #12]
}
 80066c0:	bf00      	nop
 80066c2:	e7fe      	b.n	80066c2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	3318      	adds	r3, #24
 80066c8:	4618      	mov	r0, r3
 80066ca:	f7fe fb27 	bl	8004d1c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80066ce:	4b1e      	ldr	r3, [pc, #120]	; (8006748 <xTaskRemoveFromEventList+0xb0>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d11d      	bne.n	8006712 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	3304      	adds	r3, #4
 80066da:	4618      	mov	r0, r3
 80066dc:	f7fe fb1e 	bl	8004d1c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066e4:	4b19      	ldr	r3, [pc, #100]	; (800674c <xTaskRemoveFromEventList+0xb4>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	429a      	cmp	r2, r3
 80066ea:	d903      	bls.n	80066f4 <xTaskRemoveFromEventList+0x5c>
 80066ec:	693b      	ldr	r3, [r7, #16]
 80066ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066f0:	4a16      	ldr	r2, [pc, #88]	; (800674c <xTaskRemoveFromEventList+0xb4>)
 80066f2:	6013      	str	r3, [r2, #0]
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066f8:	4613      	mov	r3, r2
 80066fa:	009b      	lsls	r3, r3, #2
 80066fc:	4413      	add	r3, r2
 80066fe:	009b      	lsls	r3, r3, #2
 8006700:	4a13      	ldr	r2, [pc, #76]	; (8006750 <xTaskRemoveFromEventList+0xb8>)
 8006702:	441a      	add	r2, r3
 8006704:	693b      	ldr	r3, [r7, #16]
 8006706:	3304      	adds	r3, #4
 8006708:	4619      	mov	r1, r3
 800670a:	4610      	mov	r0, r2
 800670c:	f7fe faa9 	bl	8004c62 <vListInsertEnd>
 8006710:	e005      	b.n	800671e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	3318      	adds	r3, #24
 8006716:	4619      	mov	r1, r3
 8006718:	480e      	ldr	r0, [pc, #56]	; (8006754 <xTaskRemoveFromEventList+0xbc>)
 800671a:	f7fe faa2 	bl	8004c62 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006722:	4b0d      	ldr	r3, [pc, #52]	; (8006758 <xTaskRemoveFromEventList+0xc0>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006728:	429a      	cmp	r2, r3
 800672a:	d905      	bls.n	8006738 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800672c:	2301      	movs	r3, #1
 800672e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006730:	4b0a      	ldr	r3, [pc, #40]	; (800675c <xTaskRemoveFromEventList+0xc4>)
 8006732:	2201      	movs	r2, #1
 8006734:	601a      	str	r2, [r3, #0]
 8006736:	e001      	b.n	800673c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006738:	2300      	movs	r3, #0
 800673a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800673c:	697b      	ldr	r3, [r7, #20]
}
 800673e:	4618      	mov	r0, r3
 8006740:	3718      	adds	r7, #24
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}
 8006746:	bf00      	nop
 8006748:	2000115c 	.word	0x2000115c
 800674c:	2000113c 	.word	0x2000113c
 8006750:	20000c64 	.word	0x20000c64
 8006754:	200010f4 	.word	0x200010f4
 8006758:	20000c60 	.word	0x20000c60
 800675c:	20001148 	.word	0x20001148

08006760 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006760:	b480      	push	{r7}
 8006762:	b083      	sub	sp, #12
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006768:	4b06      	ldr	r3, [pc, #24]	; (8006784 <vTaskInternalSetTimeOutState+0x24>)
 800676a:	681a      	ldr	r2, [r3, #0]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006770:	4b05      	ldr	r3, [pc, #20]	; (8006788 <vTaskInternalSetTimeOutState+0x28>)
 8006772:	681a      	ldr	r2, [r3, #0]
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	605a      	str	r2, [r3, #4]
}
 8006778:	bf00      	nop
 800677a:	370c      	adds	r7, #12
 800677c:	46bd      	mov	sp, r7
 800677e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006782:	4770      	bx	lr
 8006784:	2000114c 	.word	0x2000114c
 8006788:	20001138 	.word	0x20001138

0800678c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b088      	sub	sp, #32
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
 8006794:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d10a      	bne.n	80067b2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800679c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067a0:	f383 8811 	msr	BASEPRI, r3
 80067a4:	f3bf 8f6f 	isb	sy
 80067a8:	f3bf 8f4f 	dsb	sy
 80067ac:	613b      	str	r3, [r7, #16]
}
 80067ae:	bf00      	nop
 80067b0:	e7fe      	b.n	80067b0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d10a      	bne.n	80067ce <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80067b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067bc:	f383 8811 	msr	BASEPRI, r3
 80067c0:	f3bf 8f6f 	isb	sy
 80067c4:	f3bf 8f4f 	dsb	sy
 80067c8:	60fb      	str	r3, [r7, #12]
}
 80067ca:	bf00      	nop
 80067cc:	e7fe      	b.n	80067cc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80067ce:	f001 f839 	bl	8007844 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80067d2:	4b1d      	ldr	r3, [pc, #116]	; (8006848 <xTaskCheckForTimeOut+0xbc>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	69ba      	ldr	r2, [r7, #24]
 80067de:	1ad3      	subs	r3, r2, r3
 80067e0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067ea:	d102      	bne.n	80067f2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80067ec:	2300      	movs	r3, #0
 80067ee:	61fb      	str	r3, [r7, #28]
 80067f0:	e023      	b.n	800683a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681a      	ldr	r2, [r3, #0]
 80067f6:	4b15      	ldr	r3, [pc, #84]	; (800684c <xTaskCheckForTimeOut+0xc0>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	429a      	cmp	r2, r3
 80067fc:	d007      	beq.n	800680e <xTaskCheckForTimeOut+0x82>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	685b      	ldr	r3, [r3, #4]
 8006802:	69ba      	ldr	r2, [r7, #24]
 8006804:	429a      	cmp	r2, r3
 8006806:	d302      	bcc.n	800680e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006808:	2301      	movs	r3, #1
 800680a:	61fb      	str	r3, [r7, #28]
 800680c:	e015      	b.n	800683a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	697a      	ldr	r2, [r7, #20]
 8006814:	429a      	cmp	r2, r3
 8006816:	d20b      	bcs.n	8006830 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	681a      	ldr	r2, [r3, #0]
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	1ad2      	subs	r2, r2, r3
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f7ff ff9b 	bl	8006760 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800682a:	2300      	movs	r3, #0
 800682c:	61fb      	str	r3, [r7, #28]
 800682e:	e004      	b.n	800683a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	2200      	movs	r2, #0
 8006834:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006836:	2301      	movs	r3, #1
 8006838:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800683a:	f001 f833 	bl	80078a4 <vPortExitCritical>

	return xReturn;
 800683e:	69fb      	ldr	r3, [r7, #28]
}
 8006840:	4618      	mov	r0, r3
 8006842:	3720      	adds	r7, #32
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}
 8006848:	20001138 	.word	0x20001138
 800684c:	2000114c 	.word	0x2000114c

08006850 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006850:	b480      	push	{r7}
 8006852:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006854:	4b03      	ldr	r3, [pc, #12]	; (8006864 <vTaskMissedYield+0x14>)
 8006856:	2201      	movs	r2, #1
 8006858:	601a      	str	r2, [r3, #0]
}
 800685a:	bf00      	nop
 800685c:	46bd      	mov	sp, r7
 800685e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006862:	4770      	bx	lr
 8006864:	20001148 	.word	0x20001148

08006868 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b082      	sub	sp, #8
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006870:	f000 f852 	bl	8006918 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006874:	4b06      	ldr	r3, [pc, #24]	; (8006890 <prvIdleTask+0x28>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	2b01      	cmp	r3, #1
 800687a:	d9f9      	bls.n	8006870 <prvIdleTask+0x8>
			{
				taskYIELD();
 800687c:	4b05      	ldr	r3, [pc, #20]	; (8006894 <prvIdleTask+0x2c>)
 800687e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006882:	601a      	str	r2, [r3, #0]
 8006884:	f3bf 8f4f 	dsb	sy
 8006888:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800688c:	e7f0      	b.n	8006870 <prvIdleTask+0x8>
 800688e:	bf00      	nop
 8006890:	20000c64 	.word	0x20000c64
 8006894:	e000ed04 	.word	0xe000ed04

08006898 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b082      	sub	sp, #8
 800689c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800689e:	2300      	movs	r3, #0
 80068a0:	607b      	str	r3, [r7, #4]
 80068a2:	e00c      	b.n	80068be <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80068a4:	687a      	ldr	r2, [r7, #4]
 80068a6:	4613      	mov	r3, r2
 80068a8:	009b      	lsls	r3, r3, #2
 80068aa:	4413      	add	r3, r2
 80068ac:	009b      	lsls	r3, r3, #2
 80068ae:	4a12      	ldr	r2, [pc, #72]	; (80068f8 <prvInitialiseTaskLists+0x60>)
 80068b0:	4413      	add	r3, r2
 80068b2:	4618      	mov	r0, r3
 80068b4:	f7fe f9a8 	bl	8004c08 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	3301      	adds	r3, #1
 80068bc:	607b      	str	r3, [r7, #4]
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2b37      	cmp	r3, #55	; 0x37
 80068c2:	d9ef      	bls.n	80068a4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80068c4:	480d      	ldr	r0, [pc, #52]	; (80068fc <prvInitialiseTaskLists+0x64>)
 80068c6:	f7fe f99f 	bl	8004c08 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80068ca:	480d      	ldr	r0, [pc, #52]	; (8006900 <prvInitialiseTaskLists+0x68>)
 80068cc:	f7fe f99c 	bl	8004c08 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80068d0:	480c      	ldr	r0, [pc, #48]	; (8006904 <prvInitialiseTaskLists+0x6c>)
 80068d2:	f7fe f999 	bl	8004c08 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80068d6:	480c      	ldr	r0, [pc, #48]	; (8006908 <prvInitialiseTaskLists+0x70>)
 80068d8:	f7fe f996 	bl	8004c08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80068dc:	480b      	ldr	r0, [pc, #44]	; (800690c <prvInitialiseTaskLists+0x74>)
 80068de:	f7fe f993 	bl	8004c08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80068e2:	4b0b      	ldr	r3, [pc, #44]	; (8006910 <prvInitialiseTaskLists+0x78>)
 80068e4:	4a05      	ldr	r2, [pc, #20]	; (80068fc <prvInitialiseTaskLists+0x64>)
 80068e6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80068e8:	4b0a      	ldr	r3, [pc, #40]	; (8006914 <prvInitialiseTaskLists+0x7c>)
 80068ea:	4a05      	ldr	r2, [pc, #20]	; (8006900 <prvInitialiseTaskLists+0x68>)
 80068ec:	601a      	str	r2, [r3, #0]
}
 80068ee:	bf00      	nop
 80068f0:	3708      	adds	r7, #8
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bd80      	pop	{r7, pc}
 80068f6:	bf00      	nop
 80068f8:	20000c64 	.word	0x20000c64
 80068fc:	200010c4 	.word	0x200010c4
 8006900:	200010d8 	.word	0x200010d8
 8006904:	200010f4 	.word	0x200010f4
 8006908:	20001108 	.word	0x20001108
 800690c:	20001120 	.word	0x20001120
 8006910:	200010ec 	.word	0x200010ec
 8006914:	200010f0 	.word	0x200010f0

08006918 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b082      	sub	sp, #8
 800691c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800691e:	e019      	b.n	8006954 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006920:	f000 ff90 	bl	8007844 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006924:	4b10      	ldr	r3, [pc, #64]	; (8006968 <prvCheckTasksWaitingTermination+0x50>)
 8006926:	68db      	ldr	r3, [r3, #12]
 8006928:	68db      	ldr	r3, [r3, #12]
 800692a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	3304      	adds	r3, #4
 8006930:	4618      	mov	r0, r3
 8006932:	f7fe f9f3 	bl	8004d1c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006936:	4b0d      	ldr	r3, [pc, #52]	; (800696c <prvCheckTasksWaitingTermination+0x54>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	3b01      	subs	r3, #1
 800693c:	4a0b      	ldr	r2, [pc, #44]	; (800696c <prvCheckTasksWaitingTermination+0x54>)
 800693e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006940:	4b0b      	ldr	r3, [pc, #44]	; (8006970 <prvCheckTasksWaitingTermination+0x58>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	3b01      	subs	r3, #1
 8006946:	4a0a      	ldr	r2, [pc, #40]	; (8006970 <prvCheckTasksWaitingTermination+0x58>)
 8006948:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800694a:	f000 ffab 	bl	80078a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f000 f810 	bl	8006974 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006954:	4b06      	ldr	r3, [pc, #24]	; (8006970 <prvCheckTasksWaitingTermination+0x58>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d1e1      	bne.n	8006920 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800695c:	bf00      	nop
 800695e:	bf00      	nop
 8006960:	3708      	adds	r7, #8
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}
 8006966:	bf00      	nop
 8006968:	20001108 	.word	0x20001108
 800696c:	20001134 	.word	0x20001134
 8006970:	2000111c 	.word	0x2000111c

08006974 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006974:	b580      	push	{r7, lr}
 8006976:	b084      	sub	sp, #16
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	3354      	adds	r3, #84	; 0x54
 8006980:	4618      	mov	r0, r3
 8006982:	f001 fcbd 	bl	8008300 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800698c:	2b00      	cmp	r3, #0
 800698e:	d108      	bne.n	80069a2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006994:	4618      	mov	r0, r3
 8006996:	f001 f943 	bl	8007c20 <vPortFree>
				vPortFree( pxTCB );
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f001 f940 	bl	8007c20 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80069a0:	e018      	b.n	80069d4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80069a8:	2b01      	cmp	r3, #1
 80069aa:	d103      	bne.n	80069b4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f001 f937 	bl	8007c20 <vPortFree>
	}
 80069b2:	e00f      	b.n	80069d4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80069ba:	2b02      	cmp	r3, #2
 80069bc:	d00a      	beq.n	80069d4 <prvDeleteTCB+0x60>
	__asm volatile
 80069be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069c2:	f383 8811 	msr	BASEPRI, r3
 80069c6:	f3bf 8f6f 	isb	sy
 80069ca:	f3bf 8f4f 	dsb	sy
 80069ce:	60fb      	str	r3, [r7, #12]
}
 80069d0:	bf00      	nop
 80069d2:	e7fe      	b.n	80069d2 <prvDeleteTCB+0x5e>
	}
 80069d4:	bf00      	nop
 80069d6:	3710      	adds	r7, #16
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}

080069dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80069dc:	b480      	push	{r7}
 80069de:	b083      	sub	sp, #12
 80069e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80069e2:	4b0c      	ldr	r3, [pc, #48]	; (8006a14 <prvResetNextTaskUnblockTime+0x38>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d104      	bne.n	80069f6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80069ec:	4b0a      	ldr	r3, [pc, #40]	; (8006a18 <prvResetNextTaskUnblockTime+0x3c>)
 80069ee:	f04f 32ff 	mov.w	r2, #4294967295
 80069f2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80069f4:	e008      	b.n	8006a08 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069f6:	4b07      	ldr	r3, [pc, #28]	; (8006a14 <prvResetNextTaskUnblockTime+0x38>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	68db      	ldr	r3, [r3, #12]
 80069fc:	68db      	ldr	r3, [r3, #12]
 80069fe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	4a04      	ldr	r2, [pc, #16]	; (8006a18 <prvResetNextTaskUnblockTime+0x3c>)
 8006a06:	6013      	str	r3, [r2, #0]
}
 8006a08:	bf00      	nop
 8006a0a:	370c      	adds	r7, #12
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a12:	4770      	bx	lr
 8006a14:	200010ec 	.word	0x200010ec
 8006a18:	20001154 	.word	0x20001154

08006a1c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b083      	sub	sp, #12
 8006a20:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006a22:	4b0b      	ldr	r3, [pc, #44]	; (8006a50 <xTaskGetSchedulerState+0x34>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d102      	bne.n	8006a30 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	607b      	str	r3, [r7, #4]
 8006a2e:	e008      	b.n	8006a42 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a30:	4b08      	ldr	r3, [pc, #32]	; (8006a54 <xTaskGetSchedulerState+0x38>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d102      	bne.n	8006a3e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006a38:	2302      	movs	r3, #2
 8006a3a:	607b      	str	r3, [r7, #4]
 8006a3c:	e001      	b.n	8006a42 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006a42:	687b      	ldr	r3, [r7, #4]
	}
 8006a44:	4618      	mov	r0, r3
 8006a46:	370c      	adds	r7, #12
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4e:	4770      	bx	lr
 8006a50:	20001140 	.word	0x20001140
 8006a54:	2000115c 	.word	0x2000115c

08006a58 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b084      	sub	sp, #16
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006a64:	2300      	movs	r3, #0
 8006a66:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d051      	beq.n	8006b12 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a72:	4b2a      	ldr	r3, [pc, #168]	; (8006b1c <xTaskPriorityInherit+0xc4>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a78:	429a      	cmp	r2, r3
 8006a7a:	d241      	bcs.n	8006b00 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	699b      	ldr	r3, [r3, #24]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	db06      	blt.n	8006a92 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a84:	4b25      	ldr	r3, [pc, #148]	; (8006b1c <xTaskPriorityInherit+0xc4>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a8a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	6959      	ldr	r1, [r3, #20]
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a9a:	4613      	mov	r3, r2
 8006a9c:	009b      	lsls	r3, r3, #2
 8006a9e:	4413      	add	r3, r2
 8006aa0:	009b      	lsls	r3, r3, #2
 8006aa2:	4a1f      	ldr	r2, [pc, #124]	; (8006b20 <xTaskPriorityInherit+0xc8>)
 8006aa4:	4413      	add	r3, r2
 8006aa6:	4299      	cmp	r1, r3
 8006aa8:	d122      	bne.n	8006af0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	3304      	adds	r3, #4
 8006aae:	4618      	mov	r0, r3
 8006ab0:	f7fe f934 	bl	8004d1c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006ab4:	4b19      	ldr	r3, [pc, #100]	; (8006b1c <xTaskPriorityInherit+0xc4>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ac2:	4b18      	ldr	r3, [pc, #96]	; (8006b24 <xTaskPriorityInherit+0xcc>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	429a      	cmp	r2, r3
 8006ac8:	d903      	bls.n	8006ad2 <xTaskPriorityInherit+0x7a>
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ace:	4a15      	ldr	r2, [pc, #84]	; (8006b24 <xTaskPriorityInherit+0xcc>)
 8006ad0:	6013      	str	r3, [r2, #0]
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ad6:	4613      	mov	r3, r2
 8006ad8:	009b      	lsls	r3, r3, #2
 8006ada:	4413      	add	r3, r2
 8006adc:	009b      	lsls	r3, r3, #2
 8006ade:	4a10      	ldr	r2, [pc, #64]	; (8006b20 <xTaskPriorityInherit+0xc8>)
 8006ae0:	441a      	add	r2, r3
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	3304      	adds	r3, #4
 8006ae6:	4619      	mov	r1, r3
 8006ae8:	4610      	mov	r0, r2
 8006aea:	f7fe f8ba 	bl	8004c62 <vListInsertEnd>
 8006aee:	e004      	b.n	8006afa <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006af0:	4b0a      	ldr	r3, [pc, #40]	; (8006b1c <xTaskPriorityInherit+0xc4>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006afa:	2301      	movs	r3, #1
 8006afc:	60fb      	str	r3, [r7, #12]
 8006afe:	e008      	b.n	8006b12 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006b04:	4b05      	ldr	r3, [pc, #20]	; (8006b1c <xTaskPriorityInherit+0xc4>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b0a:	429a      	cmp	r2, r3
 8006b0c:	d201      	bcs.n	8006b12 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006b0e:	2301      	movs	r3, #1
 8006b10:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006b12:	68fb      	ldr	r3, [r7, #12]
	}
 8006b14:	4618      	mov	r0, r3
 8006b16:	3710      	adds	r7, #16
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bd80      	pop	{r7, pc}
 8006b1c:	20000c60 	.word	0x20000c60
 8006b20:	20000c64 	.word	0x20000c64
 8006b24:	2000113c 	.word	0x2000113c

08006b28 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b086      	sub	sp, #24
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006b34:	2300      	movs	r3, #0
 8006b36:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d056      	beq.n	8006bec <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006b3e:	4b2e      	ldr	r3, [pc, #184]	; (8006bf8 <xTaskPriorityDisinherit+0xd0>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	693a      	ldr	r2, [r7, #16]
 8006b44:	429a      	cmp	r2, r3
 8006b46:	d00a      	beq.n	8006b5e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b4c:	f383 8811 	msr	BASEPRI, r3
 8006b50:	f3bf 8f6f 	isb	sy
 8006b54:	f3bf 8f4f 	dsb	sy
 8006b58:	60fb      	str	r3, [r7, #12]
}
 8006b5a:	bf00      	nop
 8006b5c:	e7fe      	b.n	8006b5c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d10a      	bne.n	8006b7c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b6a:	f383 8811 	msr	BASEPRI, r3
 8006b6e:	f3bf 8f6f 	isb	sy
 8006b72:	f3bf 8f4f 	dsb	sy
 8006b76:	60bb      	str	r3, [r7, #8]
}
 8006b78:	bf00      	nop
 8006b7a:	e7fe      	b.n	8006b7a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b80:	1e5a      	subs	r2, r3, #1
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006b86:	693b      	ldr	r3, [r7, #16]
 8006b88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b8e:	429a      	cmp	r2, r3
 8006b90:	d02c      	beq.n	8006bec <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d128      	bne.n	8006bec <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	3304      	adds	r3, #4
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	f7fe f8bc 	bl	8004d1c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bb0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006bb4:	693b      	ldr	r3, [r7, #16]
 8006bb6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bbc:	4b0f      	ldr	r3, [pc, #60]	; (8006bfc <xTaskPriorityDisinherit+0xd4>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	429a      	cmp	r2, r3
 8006bc2:	d903      	bls.n	8006bcc <xTaskPriorityDisinherit+0xa4>
 8006bc4:	693b      	ldr	r3, [r7, #16]
 8006bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bc8:	4a0c      	ldr	r2, [pc, #48]	; (8006bfc <xTaskPriorityDisinherit+0xd4>)
 8006bca:	6013      	str	r3, [r2, #0]
 8006bcc:	693b      	ldr	r3, [r7, #16]
 8006bce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bd0:	4613      	mov	r3, r2
 8006bd2:	009b      	lsls	r3, r3, #2
 8006bd4:	4413      	add	r3, r2
 8006bd6:	009b      	lsls	r3, r3, #2
 8006bd8:	4a09      	ldr	r2, [pc, #36]	; (8006c00 <xTaskPriorityDisinherit+0xd8>)
 8006bda:	441a      	add	r2, r3
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	3304      	adds	r3, #4
 8006be0:	4619      	mov	r1, r3
 8006be2:	4610      	mov	r0, r2
 8006be4:	f7fe f83d 	bl	8004c62 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006be8:	2301      	movs	r3, #1
 8006bea:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006bec:	697b      	ldr	r3, [r7, #20]
	}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	3718      	adds	r7, #24
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bd80      	pop	{r7, pc}
 8006bf6:	bf00      	nop
 8006bf8:	20000c60 	.word	0x20000c60
 8006bfc:	2000113c 	.word	0x2000113c
 8006c00:	20000c64 	.word	0x20000c64

08006c04 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b088      	sub	sp, #32
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
 8006c0c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006c12:	2301      	movs	r3, #1
 8006c14:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d06a      	beq.n	8006cf2 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006c1c:	69bb      	ldr	r3, [r7, #24]
 8006c1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d10a      	bne.n	8006c3a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8006c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c28:	f383 8811 	msr	BASEPRI, r3
 8006c2c:	f3bf 8f6f 	isb	sy
 8006c30:	f3bf 8f4f 	dsb	sy
 8006c34:	60fb      	str	r3, [r7, #12]
}
 8006c36:	bf00      	nop
 8006c38:	e7fe      	b.n	8006c38 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006c3a:	69bb      	ldr	r3, [r7, #24]
 8006c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c3e:	683a      	ldr	r2, [r7, #0]
 8006c40:	429a      	cmp	r2, r3
 8006c42:	d902      	bls.n	8006c4a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	61fb      	str	r3, [r7, #28]
 8006c48:	e002      	b.n	8006c50 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006c4a:	69bb      	ldr	r3, [r7, #24]
 8006c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c4e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006c50:	69bb      	ldr	r3, [r7, #24]
 8006c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c54:	69fa      	ldr	r2, [r7, #28]
 8006c56:	429a      	cmp	r2, r3
 8006c58:	d04b      	beq.n	8006cf2 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006c5a:	69bb      	ldr	r3, [r7, #24]
 8006c5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c5e:	697a      	ldr	r2, [r7, #20]
 8006c60:	429a      	cmp	r2, r3
 8006c62:	d146      	bne.n	8006cf2 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006c64:	4b25      	ldr	r3, [pc, #148]	; (8006cfc <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	69ba      	ldr	r2, [r7, #24]
 8006c6a:	429a      	cmp	r2, r3
 8006c6c:	d10a      	bne.n	8006c84 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8006c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c72:	f383 8811 	msr	BASEPRI, r3
 8006c76:	f3bf 8f6f 	isb	sy
 8006c7a:	f3bf 8f4f 	dsb	sy
 8006c7e:	60bb      	str	r3, [r7, #8]
}
 8006c80:	bf00      	nop
 8006c82:	e7fe      	b.n	8006c82 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006c84:	69bb      	ldr	r3, [r7, #24]
 8006c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c88:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006c8a:	69bb      	ldr	r3, [r7, #24]
 8006c8c:	69fa      	ldr	r2, [r7, #28]
 8006c8e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006c90:	69bb      	ldr	r3, [r7, #24]
 8006c92:	699b      	ldr	r3, [r3, #24]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	db04      	blt.n	8006ca2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c98:	69fb      	ldr	r3, [r7, #28]
 8006c9a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006c9e:	69bb      	ldr	r3, [r7, #24]
 8006ca0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006ca2:	69bb      	ldr	r3, [r7, #24]
 8006ca4:	6959      	ldr	r1, [r3, #20]
 8006ca6:	693a      	ldr	r2, [r7, #16]
 8006ca8:	4613      	mov	r3, r2
 8006caa:	009b      	lsls	r3, r3, #2
 8006cac:	4413      	add	r3, r2
 8006cae:	009b      	lsls	r3, r3, #2
 8006cb0:	4a13      	ldr	r2, [pc, #76]	; (8006d00 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8006cb2:	4413      	add	r3, r2
 8006cb4:	4299      	cmp	r1, r3
 8006cb6:	d11c      	bne.n	8006cf2 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006cb8:	69bb      	ldr	r3, [r7, #24]
 8006cba:	3304      	adds	r3, #4
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	f7fe f82d 	bl	8004d1c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006cc2:	69bb      	ldr	r3, [r7, #24]
 8006cc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cc6:	4b0f      	ldr	r3, [pc, #60]	; (8006d04 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	429a      	cmp	r2, r3
 8006ccc:	d903      	bls.n	8006cd6 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8006cce:	69bb      	ldr	r3, [r7, #24]
 8006cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cd2:	4a0c      	ldr	r2, [pc, #48]	; (8006d04 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006cd4:	6013      	str	r3, [r2, #0]
 8006cd6:	69bb      	ldr	r3, [r7, #24]
 8006cd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cda:	4613      	mov	r3, r2
 8006cdc:	009b      	lsls	r3, r3, #2
 8006cde:	4413      	add	r3, r2
 8006ce0:	009b      	lsls	r3, r3, #2
 8006ce2:	4a07      	ldr	r2, [pc, #28]	; (8006d00 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8006ce4:	441a      	add	r2, r3
 8006ce6:	69bb      	ldr	r3, [r7, #24]
 8006ce8:	3304      	adds	r3, #4
 8006cea:	4619      	mov	r1, r3
 8006cec:	4610      	mov	r0, r2
 8006cee:	f7fd ffb8 	bl	8004c62 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006cf2:	bf00      	nop
 8006cf4:	3720      	adds	r7, #32
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bd80      	pop	{r7, pc}
 8006cfa:	bf00      	nop
 8006cfc:	20000c60 	.word	0x20000c60
 8006d00:	20000c64 	.word	0x20000c64
 8006d04:	2000113c 	.word	0x2000113c

08006d08 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006d08:	b480      	push	{r7}
 8006d0a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006d0c:	4b07      	ldr	r3, [pc, #28]	; (8006d2c <pvTaskIncrementMutexHeldCount+0x24>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d004      	beq.n	8006d1e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006d14:	4b05      	ldr	r3, [pc, #20]	; (8006d2c <pvTaskIncrementMutexHeldCount+0x24>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006d1a:	3201      	adds	r2, #1
 8006d1c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8006d1e:	4b03      	ldr	r3, [pc, #12]	; (8006d2c <pvTaskIncrementMutexHeldCount+0x24>)
 8006d20:	681b      	ldr	r3, [r3, #0]
	}
 8006d22:	4618      	mov	r0, r3
 8006d24:	46bd      	mov	sp, r7
 8006d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2a:	4770      	bx	lr
 8006d2c:	20000c60 	.word	0x20000c60

08006d30 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b084      	sub	sp, #16
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
 8006d38:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006d3a:	4b21      	ldr	r3, [pc, #132]	; (8006dc0 <prvAddCurrentTaskToDelayedList+0x90>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006d40:	4b20      	ldr	r3, [pc, #128]	; (8006dc4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	3304      	adds	r3, #4
 8006d46:	4618      	mov	r0, r3
 8006d48:	f7fd ffe8 	bl	8004d1c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d52:	d10a      	bne.n	8006d6a <prvAddCurrentTaskToDelayedList+0x3a>
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d007      	beq.n	8006d6a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006d5a:	4b1a      	ldr	r3, [pc, #104]	; (8006dc4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	3304      	adds	r3, #4
 8006d60:	4619      	mov	r1, r3
 8006d62:	4819      	ldr	r0, [pc, #100]	; (8006dc8 <prvAddCurrentTaskToDelayedList+0x98>)
 8006d64:	f7fd ff7d 	bl	8004c62 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006d68:	e026      	b.n	8006db8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006d6a:	68fa      	ldr	r2, [r7, #12]
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	4413      	add	r3, r2
 8006d70:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006d72:	4b14      	ldr	r3, [pc, #80]	; (8006dc4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	68ba      	ldr	r2, [r7, #8]
 8006d78:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006d7a:	68ba      	ldr	r2, [r7, #8]
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	429a      	cmp	r2, r3
 8006d80:	d209      	bcs.n	8006d96 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006d82:	4b12      	ldr	r3, [pc, #72]	; (8006dcc <prvAddCurrentTaskToDelayedList+0x9c>)
 8006d84:	681a      	ldr	r2, [r3, #0]
 8006d86:	4b0f      	ldr	r3, [pc, #60]	; (8006dc4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	3304      	adds	r3, #4
 8006d8c:	4619      	mov	r1, r3
 8006d8e:	4610      	mov	r0, r2
 8006d90:	f7fd ff8b 	bl	8004caa <vListInsert>
}
 8006d94:	e010      	b.n	8006db8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006d96:	4b0e      	ldr	r3, [pc, #56]	; (8006dd0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006d98:	681a      	ldr	r2, [r3, #0]
 8006d9a:	4b0a      	ldr	r3, [pc, #40]	; (8006dc4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	3304      	adds	r3, #4
 8006da0:	4619      	mov	r1, r3
 8006da2:	4610      	mov	r0, r2
 8006da4:	f7fd ff81 	bl	8004caa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006da8:	4b0a      	ldr	r3, [pc, #40]	; (8006dd4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	68ba      	ldr	r2, [r7, #8]
 8006dae:	429a      	cmp	r2, r3
 8006db0:	d202      	bcs.n	8006db8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006db2:	4a08      	ldr	r2, [pc, #32]	; (8006dd4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	6013      	str	r3, [r2, #0]
}
 8006db8:	bf00      	nop
 8006dba:	3710      	adds	r7, #16
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}
 8006dc0:	20001138 	.word	0x20001138
 8006dc4:	20000c60 	.word	0x20000c60
 8006dc8:	20001120 	.word	0x20001120
 8006dcc:	200010f0 	.word	0x200010f0
 8006dd0:	200010ec 	.word	0x200010ec
 8006dd4:	20001154 	.word	0x20001154

08006dd8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b08a      	sub	sp, #40	; 0x28
 8006ddc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006dde:	2300      	movs	r3, #0
 8006de0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006de2:	f000 fba1 	bl	8007528 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006de6:	4b1c      	ldr	r3, [pc, #112]	; (8006e58 <xTimerCreateTimerTask+0x80>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d021      	beq.n	8006e32 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006dee:	2300      	movs	r3, #0
 8006df0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006df2:	2300      	movs	r3, #0
 8006df4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006df6:	1d3a      	adds	r2, r7, #4
 8006df8:	f107 0108 	add.w	r1, r7, #8
 8006dfc:	f107 030c 	add.w	r3, r7, #12
 8006e00:	4618      	mov	r0, r3
 8006e02:	f7fd fee7 	bl	8004bd4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006e06:	6879      	ldr	r1, [r7, #4]
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	68fa      	ldr	r2, [r7, #12]
 8006e0c:	9202      	str	r2, [sp, #8]
 8006e0e:	9301      	str	r3, [sp, #4]
 8006e10:	2302      	movs	r3, #2
 8006e12:	9300      	str	r3, [sp, #0]
 8006e14:	2300      	movs	r3, #0
 8006e16:	460a      	mov	r2, r1
 8006e18:	4910      	ldr	r1, [pc, #64]	; (8006e5c <xTimerCreateTimerTask+0x84>)
 8006e1a:	4811      	ldr	r0, [pc, #68]	; (8006e60 <xTimerCreateTimerTask+0x88>)
 8006e1c:	f7fe ffb6 	bl	8005d8c <xTaskCreateStatic>
 8006e20:	4603      	mov	r3, r0
 8006e22:	4a10      	ldr	r2, [pc, #64]	; (8006e64 <xTimerCreateTimerTask+0x8c>)
 8006e24:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006e26:	4b0f      	ldr	r3, [pc, #60]	; (8006e64 <xTimerCreateTimerTask+0x8c>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d001      	beq.n	8006e32 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006e2e:	2301      	movs	r3, #1
 8006e30:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d10a      	bne.n	8006e4e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e3c:	f383 8811 	msr	BASEPRI, r3
 8006e40:	f3bf 8f6f 	isb	sy
 8006e44:	f3bf 8f4f 	dsb	sy
 8006e48:	613b      	str	r3, [r7, #16]
}
 8006e4a:	bf00      	nop
 8006e4c:	e7fe      	b.n	8006e4c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006e4e:	697b      	ldr	r3, [r7, #20]
}
 8006e50:	4618      	mov	r0, r3
 8006e52:	3718      	adds	r7, #24
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bd80      	pop	{r7, pc}
 8006e58:	20001190 	.word	0x20001190
 8006e5c:	08008aa0 	.word	0x08008aa0
 8006e60:	080070d1 	.word	0x080070d1
 8006e64:	20001194 	.word	0x20001194

08006e68 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b088      	sub	sp, #32
 8006e6c:	af02      	add	r7, sp, #8
 8006e6e:	60f8      	str	r0, [r7, #12]
 8006e70:	60b9      	str	r1, [r7, #8]
 8006e72:	607a      	str	r2, [r7, #4]
 8006e74:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8006e76:	202c      	movs	r0, #44	; 0x2c
 8006e78:	f000 fe06 	bl	8007a88 <pvPortMalloc>
 8006e7c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d00d      	beq.n	8006ea0 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8006e84:	697b      	ldr	r3, [r7, #20]
 8006e86:	2200      	movs	r2, #0
 8006e88:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	9301      	str	r3, [sp, #4]
 8006e90:	6a3b      	ldr	r3, [r7, #32]
 8006e92:	9300      	str	r3, [sp, #0]
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	687a      	ldr	r2, [r7, #4]
 8006e98:	68b9      	ldr	r1, [r7, #8]
 8006e9a:	68f8      	ldr	r0, [r7, #12]
 8006e9c:	f000 f843 	bl	8006f26 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8006ea0:	697b      	ldr	r3, [r7, #20]
	}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	3718      	adds	r7, #24
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}

08006eaa <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8006eaa:	b580      	push	{r7, lr}
 8006eac:	b08a      	sub	sp, #40	; 0x28
 8006eae:	af02      	add	r7, sp, #8
 8006eb0:	60f8      	str	r0, [r7, #12]
 8006eb2:	60b9      	str	r1, [r7, #8]
 8006eb4:	607a      	str	r2, [r7, #4]
 8006eb6:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8006eb8:	232c      	movs	r3, #44	; 0x2c
 8006eba:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8006ebc:	693b      	ldr	r3, [r7, #16]
 8006ebe:	2b2c      	cmp	r3, #44	; 0x2c
 8006ec0:	d00a      	beq.n	8006ed8 <xTimerCreateStatic+0x2e>
	__asm volatile
 8006ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ec6:	f383 8811 	msr	BASEPRI, r3
 8006eca:	f3bf 8f6f 	isb	sy
 8006ece:	f3bf 8f4f 	dsb	sy
 8006ed2:	61bb      	str	r3, [r7, #24]
}
 8006ed4:	bf00      	nop
 8006ed6:	e7fe      	b.n	8006ed6 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006ed8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8006eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d10a      	bne.n	8006ef6 <xTimerCreateStatic+0x4c>
	__asm volatile
 8006ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ee4:	f383 8811 	msr	BASEPRI, r3
 8006ee8:	f3bf 8f6f 	isb	sy
 8006eec:	f3bf 8f4f 	dsb	sy
 8006ef0:	617b      	str	r3, [r7, #20]
}
 8006ef2:	bf00      	nop
 8006ef4:	e7fe      	b.n	8006ef4 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8006ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ef8:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8006efa:	69fb      	ldr	r3, [r7, #28]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d00d      	beq.n	8006f1c <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8006f00:	69fb      	ldr	r3, [r7, #28]
 8006f02:	2202      	movs	r2, #2
 8006f04:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8006f08:	69fb      	ldr	r3, [r7, #28]
 8006f0a:	9301      	str	r3, [sp, #4]
 8006f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f0e:	9300      	str	r3, [sp, #0]
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	687a      	ldr	r2, [r7, #4]
 8006f14:	68b9      	ldr	r1, [r7, #8]
 8006f16:	68f8      	ldr	r0, [r7, #12]
 8006f18:	f000 f805 	bl	8006f26 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8006f1c:	69fb      	ldr	r3, [r7, #28]
	}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3720      	adds	r7, #32
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}

08006f26 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8006f26:	b580      	push	{r7, lr}
 8006f28:	b086      	sub	sp, #24
 8006f2a:	af00      	add	r7, sp, #0
 8006f2c:	60f8      	str	r0, [r7, #12]
 8006f2e:	60b9      	str	r1, [r7, #8]
 8006f30:	607a      	str	r2, [r7, #4]
 8006f32:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d10a      	bne.n	8006f50 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8006f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f3e:	f383 8811 	msr	BASEPRI, r3
 8006f42:	f3bf 8f6f 	isb	sy
 8006f46:	f3bf 8f4f 	dsb	sy
 8006f4a:	617b      	str	r3, [r7, #20]
}
 8006f4c:	bf00      	nop
 8006f4e:	e7fe      	b.n	8006f4e <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8006f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d01e      	beq.n	8006f94 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8006f56:	f000 fae7 	bl	8007528 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8006f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f5c:	68fa      	ldr	r2, [r7, #12]
 8006f5e:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8006f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f62:	68ba      	ldr	r2, [r7, #8]
 8006f64:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8006f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f68:	683a      	ldr	r2, [r7, #0]
 8006f6a:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8006f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f6e:	6a3a      	ldr	r2, [r7, #32]
 8006f70:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8006f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f74:	3304      	adds	r3, #4
 8006f76:	4618      	mov	r0, r3
 8006f78:	f7fd fe66 	bl	8004c48 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d008      	beq.n	8006f94 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8006f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006f88:	f043 0304 	orr.w	r3, r3, #4
 8006f8c:	b2da      	uxtb	r2, r3
 8006f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f90:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8006f94:	bf00      	nop
 8006f96:	3718      	adds	r7, #24
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}

08006f9c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b08a      	sub	sp, #40	; 0x28
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	60f8      	str	r0, [r7, #12]
 8006fa4:	60b9      	str	r1, [r7, #8]
 8006fa6:	607a      	str	r2, [r7, #4]
 8006fa8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006faa:	2300      	movs	r3, #0
 8006fac:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d10a      	bne.n	8006fca <xTimerGenericCommand+0x2e>
	__asm volatile
 8006fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fb8:	f383 8811 	msr	BASEPRI, r3
 8006fbc:	f3bf 8f6f 	isb	sy
 8006fc0:	f3bf 8f4f 	dsb	sy
 8006fc4:	623b      	str	r3, [r7, #32]
}
 8006fc6:	bf00      	nop
 8006fc8:	e7fe      	b.n	8006fc8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006fca:	4b1a      	ldr	r3, [pc, #104]	; (8007034 <xTimerGenericCommand+0x98>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d02a      	beq.n	8007028 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	2b05      	cmp	r3, #5
 8006fe2:	dc18      	bgt.n	8007016 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006fe4:	f7ff fd1a 	bl	8006a1c <xTaskGetSchedulerState>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	2b02      	cmp	r3, #2
 8006fec:	d109      	bne.n	8007002 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006fee:	4b11      	ldr	r3, [pc, #68]	; (8007034 <xTimerGenericCommand+0x98>)
 8006ff0:	6818      	ldr	r0, [r3, #0]
 8006ff2:	f107 0110 	add.w	r1, r7, #16
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ffa:	f7fe f861 	bl	80050c0 <xQueueGenericSend>
 8006ffe:	6278      	str	r0, [r7, #36]	; 0x24
 8007000:	e012      	b.n	8007028 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007002:	4b0c      	ldr	r3, [pc, #48]	; (8007034 <xTimerGenericCommand+0x98>)
 8007004:	6818      	ldr	r0, [r3, #0]
 8007006:	f107 0110 	add.w	r1, r7, #16
 800700a:	2300      	movs	r3, #0
 800700c:	2200      	movs	r2, #0
 800700e:	f7fe f857 	bl	80050c0 <xQueueGenericSend>
 8007012:	6278      	str	r0, [r7, #36]	; 0x24
 8007014:	e008      	b.n	8007028 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007016:	4b07      	ldr	r3, [pc, #28]	; (8007034 <xTimerGenericCommand+0x98>)
 8007018:	6818      	ldr	r0, [r3, #0]
 800701a:	f107 0110 	add.w	r1, r7, #16
 800701e:	2300      	movs	r3, #0
 8007020:	683a      	ldr	r2, [r7, #0]
 8007022:	f7fe f94b 	bl	80052bc <xQueueGenericSendFromISR>
 8007026:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800702a:	4618      	mov	r0, r3
 800702c:	3728      	adds	r7, #40	; 0x28
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}
 8007032:	bf00      	nop
 8007034:	20001190 	.word	0x20001190

08007038 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b088      	sub	sp, #32
 800703c:	af02      	add	r7, sp, #8
 800703e:	6078      	str	r0, [r7, #4]
 8007040:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007042:	4b22      	ldr	r3, [pc, #136]	; (80070cc <prvProcessExpiredTimer+0x94>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	68db      	ldr	r3, [r3, #12]
 8007048:	68db      	ldr	r3, [r3, #12]
 800704a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	3304      	adds	r3, #4
 8007050:	4618      	mov	r0, r3
 8007052:	f7fd fe63 	bl	8004d1c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800705c:	f003 0304 	and.w	r3, r3, #4
 8007060:	2b00      	cmp	r3, #0
 8007062:	d022      	beq.n	80070aa <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007064:	697b      	ldr	r3, [r7, #20]
 8007066:	699a      	ldr	r2, [r3, #24]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	18d1      	adds	r1, r2, r3
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	683a      	ldr	r2, [r7, #0]
 8007070:	6978      	ldr	r0, [r7, #20]
 8007072:	f000 f8d1 	bl	8007218 <prvInsertTimerInActiveList>
 8007076:	4603      	mov	r3, r0
 8007078:	2b00      	cmp	r3, #0
 800707a:	d01f      	beq.n	80070bc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800707c:	2300      	movs	r3, #0
 800707e:	9300      	str	r3, [sp, #0]
 8007080:	2300      	movs	r3, #0
 8007082:	687a      	ldr	r2, [r7, #4]
 8007084:	2100      	movs	r1, #0
 8007086:	6978      	ldr	r0, [r7, #20]
 8007088:	f7ff ff88 	bl	8006f9c <xTimerGenericCommand>
 800708c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d113      	bne.n	80070bc <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007098:	f383 8811 	msr	BASEPRI, r3
 800709c:	f3bf 8f6f 	isb	sy
 80070a0:	f3bf 8f4f 	dsb	sy
 80070a4:	60fb      	str	r3, [r7, #12]
}
 80070a6:	bf00      	nop
 80070a8:	e7fe      	b.n	80070a8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80070b0:	f023 0301 	bic.w	r3, r3, #1
 80070b4:	b2da      	uxtb	r2, r3
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	6a1b      	ldr	r3, [r3, #32]
 80070c0:	6978      	ldr	r0, [r7, #20]
 80070c2:	4798      	blx	r3
}
 80070c4:	bf00      	nop
 80070c6:	3718      	adds	r7, #24
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}
 80070cc:	20001188 	.word	0x20001188

080070d0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b084      	sub	sp, #16
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80070d8:	f107 0308 	add.w	r3, r7, #8
 80070dc:	4618      	mov	r0, r3
 80070de:	f000 f857 	bl	8007190 <prvGetNextExpireTime>
 80070e2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	4619      	mov	r1, r3
 80070e8:	68f8      	ldr	r0, [r7, #12]
 80070ea:	f000 f803 	bl	80070f4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80070ee:	f000 f8d5 	bl	800729c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80070f2:	e7f1      	b.n	80070d8 <prvTimerTask+0x8>

080070f4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b084      	sub	sp, #16
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
 80070fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80070fe:	f7ff f8a1 	bl	8006244 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007102:	f107 0308 	add.w	r3, r7, #8
 8007106:	4618      	mov	r0, r3
 8007108:	f000 f866 	bl	80071d8 <prvSampleTimeNow>
 800710c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d130      	bne.n	8007176 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d10a      	bne.n	8007130 <prvProcessTimerOrBlockTask+0x3c>
 800711a:	687a      	ldr	r2, [r7, #4]
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	429a      	cmp	r2, r3
 8007120:	d806      	bhi.n	8007130 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007122:	f7ff f89d 	bl	8006260 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007126:	68f9      	ldr	r1, [r7, #12]
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	f7ff ff85 	bl	8007038 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800712e:	e024      	b.n	800717a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d008      	beq.n	8007148 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007136:	4b13      	ldr	r3, [pc, #76]	; (8007184 <prvProcessTimerOrBlockTask+0x90>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d101      	bne.n	8007144 <prvProcessTimerOrBlockTask+0x50>
 8007140:	2301      	movs	r3, #1
 8007142:	e000      	b.n	8007146 <prvProcessTimerOrBlockTask+0x52>
 8007144:	2300      	movs	r3, #0
 8007146:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007148:	4b0f      	ldr	r3, [pc, #60]	; (8007188 <prvProcessTimerOrBlockTask+0x94>)
 800714a:	6818      	ldr	r0, [r3, #0]
 800714c:	687a      	ldr	r2, [r7, #4]
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	1ad3      	subs	r3, r2, r3
 8007152:	683a      	ldr	r2, [r7, #0]
 8007154:	4619      	mov	r1, r3
 8007156:	f7fe fde5 	bl	8005d24 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800715a:	f7ff f881 	bl	8006260 <xTaskResumeAll>
 800715e:	4603      	mov	r3, r0
 8007160:	2b00      	cmp	r3, #0
 8007162:	d10a      	bne.n	800717a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007164:	4b09      	ldr	r3, [pc, #36]	; (800718c <prvProcessTimerOrBlockTask+0x98>)
 8007166:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800716a:	601a      	str	r2, [r3, #0]
 800716c:	f3bf 8f4f 	dsb	sy
 8007170:	f3bf 8f6f 	isb	sy
}
 8007174:	e001      	b.n	800717a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007176:	f7ff f873 	bl	8006260 <xTaskResumeAll>
}
 800717a:	bf00      	nop
 800717c:	3710      	adds	r7, #16
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}
 8007182:	bf00      	nop
 8007184:	2000118c 	.word	0x2000118c
 8007188:	20001190 	.word	0x20001190
 800718c:	e000ed04 	.word	0xe000ed04

08007190 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007190:	b480      	push	{r7}
 8007192:	b085      	sub	sp, #20
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007198:	4b0e      	ldr	r3, [pc, #56]	; (80071d4 <prvGetNextExpireTime+0x44>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d101      	bne.n	80071a6 <prvGetNextExpireTime+0x16>
 80071a2:	2201      	movs	r2, #1
 80071a4:	e000      	b.n	80071a8 <prvGetNextExpireTime+0x18>
 80071a6:	2200      	movs	r2, #0
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d105      	bne.n	80071c0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80071b4:	4b07      	ldr	r3, [pc, #28]	; (80071d4 <prvGetNextExpireTime+0x44>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	68db      	ldr	r3, [r3, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	60fb      	str	r3, [r7, #12]
 80071be:	e001      	b.n	80071c4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80071c0:	2300      	movs	r3, #0
 80071c2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80071c4:	68fb      	ldr	r3, [r7, #12]
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	3714      	adds	r7, #20
 80071ca:	46bd      	mov	sp, r7
 80071cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d0:	4770      	bx	lr
 80071d2:	bf00      	nop
 80071d4:	20001188 	.word	0x20001188

080071d8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b084      	sub	sp, #16
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80071e0:	f7ff f8dc 	bl	800639c <xTaskGetTickCount>
 80071e4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80071e6:	4b0b      	ldr	r3, [pc, #44]	; (8007214 <prvSampleTimeNow+0x3c>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	68fa      	ldr	r2, [r7, #12]
 80071ec:	429a      	cmp	r2, r3
 80071ee:	d205      	bcs.n	80071fc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80071f0:	f000 f936 	bl	8007460 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2201      	movs	r2, #1
 80071f8:	601a      	str	r2, [r3, #0]
 80071fa:	e002      	b.n	8007202 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2200      	movs	r2, #0
 8007200:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007202:	4a04      	ldr	r2, [pc, #16]	; (8007214 <prvSampleTimeNow+0x3c>)
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007208:	68fb      	ldr	r3, [r7, #12]
}
 800720a:	4618      	mov	r0, r3
 800720c:	3710      	adds	r7, #16
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}
 8007212:	bf00      	nop
 8007214:	20001198 	.word	0x20001198

08007218 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b086      	sub	sp, #24
 800721c:	af00      	add	r7, sp, #0
 800721e:	60f8      	str	r0, [r7, #12]
 8007220:	60b9      	str	r1, [r7, #8]
 8007222:	607a      	str	r2, [r7, #4]
 8007224:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007226:	2300      	movs	r3, #0
 8007228:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	68ba      	ldr	r2, [r7, #8]
 800722e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	68fa      	ldr	r2, [r7, #12]
 8007234:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007236:	68ba      	ldr	r2, [r7, #8]
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	429a      	cmp	r2, r3
 800723c:	d812      	bhi.n	8007264 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800723e:	687a      	ldr	r2, [r7, #4]
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	1ad2      	subs	r2, r2, r3
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	699b      	ldr	r3, [r3, #24]
 8007248:	429a      	cmp	r2, r3
 800724a:	d302      	bcc.n	8007252 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800724c:	2301      	movs	r3, #1
 800724e:	617b      	str	r3, [r7, #20]
 8007250:	e01b      	b.n	800728a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007252:	4b10      	ldr	r3, [pc, #64]	; (8007294 <prvInsertTimerInActiveList+0x7c>)
 8007254:	681a      	ldr	r2, [r3, #0]
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	3304      	adds	r3, #4
 800725a:	4619      	mov	r1, r3
 800725c:	4610      	mov	r0, r2
 800725e:	f7fd fd24 	bl	8004caa <vListInsert>
 8007262:	e012      	b.n	800728a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007264:	687a      	ldr	r2, [r7, #4]
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	429a      	cmp	r2, r3
 800726a:	d206      	bcs.n	800727a <prvInsertTimerInActiveList+0x62>
 800726c:	68ba      	ldr	r2, [r7, #8]
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	429a      	cmp	r2, r3
 8007272:	d302      	bcc.n	800727a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007274:	2301      	movs	r3, #1
 8007276:	617b      	str	r3, [r7, #20]
 8007278:	e007      	b.n	800728a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800727a:	4b07      	ldr	r3, [pc, #28]	; (8007298 <prvInsertTimerInActiveList+0x80>)
 800727c:	681a      	ldr	r2, [r3, #0]
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	3304      	adds	r3, #4
 8007282:	4619      	mov	r1, r3
 8007284:	4610      	mov	r0, r2
 8007286:	f7fd fd10 	bl	8004caa <vListInsert>
		}
	}

	return xProcessTimerNow;
 800728a:	697b      	ldr	r3, [r7, #20]
}
 800728c:	4618      	mov	r0, r3
 800728e:	3718      	adds	r7, #24
 8007290:	46bd      	mov	sp, r7
 8007292:	bd80      	pop	{r7, pc}
 8007294:	2000118c 	.word	0x2000118c
 8007298:	20001188 	.word	0x20001188

0800729c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b08e      	sub	sp, #56	; 0x38
 80072a0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80072a2:	e0ca      	b.n	800743a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	da18      	bge.n	80072dc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80072aa:	1d3b      	adds	r3, r7, #4
 80072ac:	3304      	adds	r3, #4
 80072ae:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80072b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d10a      	bne.n	80072cc <prvProcessReceivedCommands+0x30>
	__asm volatile
 80072b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ba:	f383 8811 	msr	BASEPRI, r3
 80072be:	f3bf 8f6f 	isb	sy
 80072c2:	f3bf 8f4f 	dsb	sy
 80072c6:	61fb      	str	r3, [r7, #28]
}
 80072c8:	bf00      	nop
 80072ca:	e7fe      	b.n	80072ca <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80072cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80072d2:	6850      	ldr	r0, [r2, #4]
 80072d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80072d6:	6892      	ldr	r2, [r2, #8]
 80072d8:	4611      	mov	r1, r2
 80072da:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	f2c0 80aa 	blt.w	8007438 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80072e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ea:	695b      	ldr	r3, [r3, #20]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d004      	beq.n	80072fa <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80072f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072f2:	3304      	adds	r3, #4
 80072f4:	4618      	mov	r0, r3
 80072f6:	f7fd fd11 	bl	8004d1c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80072fa:	463b      	mov	r3, r7
 80072fc:	4618      	mov	r0, r3
 80072fe:	f7ff ff6b 	bl	80071d8 <prvSampleTimeNow>
 8007302:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2b09      	cmp	r3, #9
 8007308:	f200 8097 	bhi.w	800743a <prvProcessReceivedCommands+0x19e>
 800730c:	a201      	add	r2, pc, #4	; (adr r2, 8007314 <prvProcessReceivedCommands+0x78>)
 800730e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007312:	bf00      	nop
 8007314:	0800733d 	.word	0x0800733d
 8007318:	0800733d 	.word	0x0800733d
 800731c:	0800733d 	.word	0x0800733d
 8007320:	080073b1 	.word	0x080073b1
 8007324:	080073c5 	.word	0x080073c5
 8007328:	0800740f 	.word	0x0800740f
 800732c:	0800733d 	.word	0x0800733d
 8007330:	0800733d 	.word	0x0800733d
 8007334:	080073b1 	.word	0x080073b1
 8007338:	080073c5 	.word	0x080073c5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800733c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800733e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007342:	f043 0301 	orr.w	r3, r3, #1
 8007346:	b2da      	uxtb	r2, r3
 8007348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800734a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800734e:	68ba      	ldr	r2, [r7, #8]
 8007350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007352:	699b      	ldr	r3, [r3, #24]
 8007354:	18d1      	adds	r1, r2, r3
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800735a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800735c:	f7ff ff5c 	bl	8007218 <prvInsertTimerInActiveList>
 8007360:	4603      	mov	r3, r0
 8007362:	2b00      	cmp	r3, #0
 8007364:	d069      	beq.n	800743a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007368:	6a1b      	ldr	r3, [r3, #32]
 800736a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800736c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800736e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007370:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007374:	f003 0304 	and.w	r3, r3, #4
 8007378:	2b00      	cmp	r3, #0
 800737a:	d05e      	beq.n	800743a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800737c:	68ba      	ldr	r2, [r7, #8]
 800737e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007380:	699b      	ldr	r3, [r3, #24]
 8007382:	441a      	add	r2, r3
 8007384:	2300      	movs	r3, #0
 8007386:	9300      	str	r3, [sp, #0]
 8007388:	2300      	movs	r3, #0
 800738a:	2100      	movs	r1, #0
 800738c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800738e:	f7ff fe05 	bl	8006f9c <xTimerGenericCommand>
 8007392:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007394:	6a3b      	ldr	r3, [r7, #32]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d14f      	bne.n	800743a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800739a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800739e:	f383 8811 	msr	BASEPRI, r3
 80073a2:	f3bf 8f6f 	isb	sy
 80073a6:	f3bf 8f4f 	dsb	sy
 80073aa:	61bb      	str	r3, [r7, #24]
}
 80073ac:	bf00      	nop
 80073ae:	e7fe      	b.n	80073ae <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80073b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80073b6:	f023 0301 	bic.w	r3, r3, #1
 80073ba:	b2da      	uxtb	r2, r3
 80073bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80073c2:	e03a      	b.n	800743a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80073c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80073ca:	f043 0301 	orr.w	r3, r3, #1
 80073ce:	b2da      	uxtb	r2, r3
 80073d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80073d6:	68ba      	ldr	r2, [r7, #8]
 80073d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073da:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80073dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073de:	699b      	ldr	r3, [r3, #24]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d10a      	bne.n	80073fa <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80073e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073e8:	f383 8811 	msr	BASEPRI, r3
 80073ec:	f3bf 8f6f 	isb	sy
 80073f0:	f3bf 8f4f 	dsb	sy
 80073f4:	617b      	str	r3, [r7, #20]
}
 80073f6:	bf00      	nop
 80073f8:	e7fe      	b.n	80073f8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80073fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073fc:	699a      	ldr	r2, [r3, #24]
 80073fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007400:	18d1      	adds	r1, r2, r3
 8007402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007404:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007406:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007408:	f7ff ff06 	bl	8007218 <prvInsertTimerInActiveList>
					break;
 800740c:	e015      	b.n	800743a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800740e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007410:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007414:	f003 0302 	and.w	r3, r3, #2
 8007418:	2b00      	cmp	r3, #0
 800741a:	d103      	bne.n	8007424 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800741c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800741e:	f000 fbff 	bl	8007c20 <vPortFree>
 8007422:	e00a      	b.n	800743a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007426:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800742a:	f023 0301 	bic.w	r3, r3, #1
 800742e:	b2da      	uxtb	r2, r3
 8007430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007432:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007436:	e000      	b.n	800743a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007438:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800743a:	4b08      	ldr	r3, [pc, #32]	; (800745c <prvProcessReceivedCommands+0x1c0>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	1d39      	adds	r1, r7, #4
 8007440:	2200      	movs	r2, #0
 8007442:	4618      	mov	r0, r3
 8007444:	f7fe f862 	bl	800550c <xQueueReceive>
 8007448:	4603      	mov	r3, r0
 800744a:	2b00      	cmp	r3, #0
 800744c:	f47f af2a 	bne.w	80072a4 <prvProcessReceivedCommands+0x8>
	}
}
 8007450:	bf00      	nop
 8007452:	bf00      	nop
 8007454:	3730      	adds	r7, #48	; 0x30
 8007456:	46bd      	mov	sp, r7
 8007458:	bd80      	pop	{r7, pc}
 800745a:	bf00      	nop
 800745c:	20001190 	.word	0x20001190

08007460 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b088      	sub	sp, #32
 8007464:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007466:	e048      	b.n	80074fa <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007468:	4b2d      	ldr	r3, [pc, #180]	; (8007520 <prvSwitchTimerLists+0xc0>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	68db      	ldr	r3, [r3, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007472:	4b2b      	ldr	r3, [pc, #172]	; (8007520 <prvSwitchTimerLists+0xc0>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	68db      	ldr	r3, [r3, #12]
 8007478:	68db      	ldr	r3, [r3, #12]
 800747a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	3304      	adds	r3, #4
 8007480:	4618      	mov	r0, r3
 8007482:	f7fd fc4b 	bl	8004d1c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	6a1b      	ldr	r3, [r3, #32]
 800748a:	68f8      	ldr	r0, [r7, #12]
 800748c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007494:	f003 0304 	and.w	r3, r3, #4
 8007498:	2b00      	cmp	r3, #0
 800749a:	d02e      	beq.n	80074fa <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	699b      	ldr	r3, [r3, #24]
 80074a0:	693a      	ldr	r2, [r7, #16]
 80074a2:	4413      	add	r3, r2
 80074a4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80074a6:	68ba      	ldr	r2, [r7, #8]
 80074a8:	693b      	ldr	r3, [r7, #16]
 80074aa:	429a      	cmp	r2, r3
 80074ac:	d90e      	bls.n	80074cc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	68ba      	ldr	r2, [r7, #8]
 80074b2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	68fa      	ldr	r2, [r7, #12]
 80074b8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80074ba:	4b19      	ldr	r3, [pc, #100]	; (8007520 <prvSwitchTimerLists+0xc0>)
 80074bc:	681a      	ldr	r2, [r3, #0]
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	3304      	adds	r3, #4
 80074c2:	4619      	mov	r1, r3
 80074c4:	4610      	mov	r0, r2
 80074c6:	f7fd fbf0 	bl	8004caa <vListInsert>
 80074ca:	e016      	b.n	80074fa <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80074cc:	2300      	movs	r3, #0
 80074ce:	9300      	str	r3, [sp, #0]
 80074d0:	2300      	movs	r3, #0
 80074d2:	693a      	ldr	r2, [r7, #16]
 80074d4:	2100      	movs	r1, #0
 80074d6:	68f8      	ldr	r0, [r7, #12]
 80074d8:	f7ff fd60 	bl	8006f9c <xTimerGenericCommand>
 80074dc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d10a      	bne.n	80074fa <prvSwitchTimerLists+0x9a>
	__asm volatile
 80074e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074e8:	f383 8811 	msr	BASEPRI, r3
 80074ec:	f3bf 8f6f 	isb	sy
 80074f0:	f3bf 8f4f 	dsb	sy
 80074f4:	603b      	str	r3, [r7, #0]
}
 80074f6:	bf00      	nop
 80074f8:	e7fe      	b.n	80074f8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80074fa:	4b09      	ldr	r3, [pc, #36]	; (8007520 <prvSwitchTimerLists+0xc0>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d1b1      	bne.n	8007468 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007504:	4b06      	ldr	r3, [pc, #24]	; (8007520 <prvSwitchTimerLists+0xc0>)
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800750a:	4b06      	ldr	r3, [pc, #24]	; (8007524 <prvSwitchTimerLists+0xc4>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4a04      	ldr	r2, [pc, #16]	; (8007520 <prvSwitchTimerLists+0xc0>)
 8007510:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007512:	4a04      	ldr	r2, [pc, #16]	; (8007524 <prvSwitchTimerLists+0xc4>)
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	6013      	str	r3, [r2, #0]
}
 8007518:	bf00      	nop
 800751a:	3718      	adds	r7, #24
 800751c:	46bd      	mov	sp, r7
 800751e:	bd80      	pop	{r7, pc}
 8007520:	20001188 	.word	0x20001188
 8007524:	2000118c 	.word	0x2000118c

08007528 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b082      	sub	sp, #8
 800752c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800752e:	f000 f989 	bl	8007844 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007532:	4b15      	ldr	r3, [pc, #84]	; (8007588 <prvCheckForValidListAndQueue+0x60>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d120      	bne.n	800757c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800753a:	4814      	ldr	r0, [pc, #80]	; (800758c <prvCheckForValidListAndQueue+0x64>)
 800753c:	f7fd fb64 	bl	8004c08 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007540:	4813      	ldr	r0, [pc, #76]	; (8007590 <prvCheckForValidListAndQueue+0x68>)
 8007542:	f7fd fb61 	bl	8004c08 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007546:	4b13      	ldr	r3, [pc, #76]	; (8007594 <prvCheckForValidListAndQueue+0x6c>)
 8007548:	4a10      	ldr	r2, [pc, #64]	; (800758c <prvCheckForValidListAndQueue+0x64>)
 800754a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800754c:	4b12      	ldr	r3, [pc, #72]	; (8007598 <prvCheckForValidListAndQueue+0x70>)
 800754e:	4a10      	ldr	r2, [pc, #64]	; (8007590 <prvCheckForValidListAndQueue+0x68>)
 8007550:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007552:	2300      	movs	r3, #0
 8007554:	9300      	str	r3, [sp, #0]
 8007556:	4b11      	ldr	r3, [pc, #68]	; (800759c <prvCheckForValidListAndQueue+0x74>)
 8007558:	4a11      	ldr	r2, [pc, #68]	; (80075a0 <prvCheckForValidListAndQueue+0x78>)
 800755a:	2110      	movs	r1, #16
 800755c:	200a      	movs	r0, #10
 800755e:	f7fd fc6f 	bl	8004e40 <xQueueGenericCreateStatic>
 8007562:	4603      	mov	r3, r0
 8007564:	4a08      	ldr	r2, [pc, #32]	; (8007588 <prvCheckForValidListAndQueue+0x60>)
 8007566:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007568:	4b07      	ldr	r3, [pc, #28]	; (8007588 <prvCheckForValidListAndQueue+0x60>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d005      	beq.n	800757c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007570:	4b05      	ldr	r3, [pc, #20]	; (8007588 <prvCheckForValidListAndQueue+0x60>)
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	490b      	ldr	r1, [pc, #44]	; (80075a4 <prvCheckForValidListAndQueue+0x7c>)
 8007576:	4618      	mov	r0, r3
 8007578:	f7fe fb80 	bl	8005c7c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800757c:	f000 f992 	bl	80078a4 <vPortExitCritical>
}
 8007580:	bf00      	nop
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}
 8007586:	bf00      	nop
 8007588:	20001190 	.word	0x20001190
 800758c:	20001160 	.word	0x20001160
 8007590:	20001174 	.word	0x20001174
 8007594:	20001188 	.word	0x20001188
 8007598:	2000118c 	.word	0x2000118c
 800759c:	2000123c 	.word	0x2000123c
 80075a0:	2000119c 	.word	0x2000119c
 80075a4:	08008aa8 	.word	0x08008aa8

080075a8 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b086      	sub	sp, #24
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d10a      	bne.n	80075d0 <pvTimerGetTimerID+0x28>
	__asm volatile
 80075ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075be:	f383 8811 	msr	BASEPRI, r3
 80075c2:	f3bf 8f6f 	isb	sy
 80075c6:	f3bf 8f4f 	dsb	sy
 80075ca:	60fb      	str	r3, [r7, #12]
}
 80075cc:	bf00      	nop
 80075ce:	e7fe      	b.n	80075ce <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 80075d0:	f000 f938 	bl	8007844 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	69db      	ldr	r3, [r3, #28]
 80075d8:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 80075da:	f000 f963 	bl	80078a4 <vPortExitCritical>

	return pvReturn;
 80075de:	693b      	ldr	r3, [r7, #16]
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	3718      	adds	r7, #24
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}

080075e8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80075e8:	b480      	push	{r7}
 80075ea:	b085      	sub	sp, #20
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	60f8      	str	r0, [r7, #12]
 80075f0:	60b9      	str	r1, [r7, #8]
 80075f2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	3b04      	subs	r3, #4
 80075f8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007600:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	3b04      	subs	r3, #4
 8007606:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	f023 0201 	bic.w	r2, r3, #1
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	3b04      	subs	r3, #4
 8007616:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007618:	4a0c      	ldr	r2, [pc, #48]	; (800764c <pxPortInitialiseStack+0x64>)
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	3b14      	subs	r3, #20
 8007622:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007624:	687a      	ldr	r2, [r7, #4]
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	3b04      	subs	r3, #4
 800762e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	f06f 0202 	mvn.w	r2, #2
 8007636:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	3b20      	subs	r3, #32
 800763c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800763e:	68fb      	ldr	r3, [r7, #12]
}
 8007640:	4618      	mov	r0, r3
 8007642:	3714      	adds	r7, #20
 8007644:	46bd      	mov	sp, r7
 8007646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764a:	4770      	bx	lr
 800764c:	08007651 	.word	0x08007651

08007650 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007650:	b480      	push	{r7}
 8007652:	b085      	sub	sp, #20
 8007654:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007656:	2300      	movs	r3, #0
 8007658:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800765a:	4b12      	ldr	r3, [pc, #72]	; (80076a4 <prvTaskExitError+0x54>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007662:	d00a      	beq.n	800767a <prvTaskExitError+0x2a>
	__asm volatile
 8007664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007668:	f383 8811 	msr	BASEPRI, r3
 800766c:	f3bf 8f6f 	isb	sy
 8007670:	f3bf 8f4f 	dsb	sy
 8007674:	60fb      	str	r3, [r7, #12]
}
 8007676:	bf00      	nop
 8007678:	e7fe      	b.n	8007678 <prvTaskExitError+0x28>
	__asm volatile
 800767a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800767e:	f383 8811 	msr	BASEPRI, r3
 8007682:	f3bf 8f6f 	isb	sy
 8007686:	f3bf 8f4f 	dsb	sy
 800768a:	60bb      	str	r3, [r7, #8]
}
 800768c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800768e:	bf00      	nop
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d0fc      	beq.n	8007690 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007696:	bf00      	nop
 8007698:	bf00      	nop
 800769a:	3714      	adds	r7, #20
 800769c:	46bd      	mov	sp, r7
 800769e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a2:	4770      	bx	lr
 80076a4:	20000010 	.word	0x20000010
	...

080076b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80076b0:	4b07      	ldr	r3, [pc, #28]	; (80076d0 <pxCurrentTCBConst2>)
 80076b2:	6819      	ldr	r1, [r3, #0]
 80076b4:	6808      	ldr	r0, [r1, #0]
 80076b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076ba:	f380 8809 	msr	PSP, r0
 80076be:	f3bf 8f6f 	isb	sy
 80076c2:	f04f 0000 	mov.w	r0, #0
 80076c6:	f380 8811 	msr	BASEPRI, r0
 80076ca:	4770      	bx	lr
 80076cc:	f3af 8000 	nop.w

080076d0 <pxCurrentTCBConst2>:
 80076d0:	20000c60 	.word	0x20000c60
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80076d4:	bf00      	nop
 80076d6:	bf00      	nop

080076d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80076d8:	4808      	ldr	r0, [pc, #32]	; (80076fc <prvPortStartFirstTask+0x24>)
 80076da:	6800      	ldr	r0, [r0, #0]
 80076dc:	6800      	ldr	r0, [r0, #0]
 80076de:	f380 8808 	msr	MSP, r0
 80076e2:	f04f 0000 	mov.w	r0, #0
 80076e6:	f380 8814 	msr	CONTROL, r0
 80076ea:	b662      	cpsie	i
 80076ec:	b661      	cpsie	f
 80076ee:	f3bf 8f4f 	dsb	sy
 80076f2:	f3bf 8f6f 	isb	sy
 80076f6:	df00      	svc	0
 80076f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80076fa:	bf00      	nop
 80076fc:	e000ed08 	.word	0xe000ed08

08007700 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b086      	sub	sp, #24
 8007704:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007706:	4b46      	ldr	r3, [pc, #280]	; (8007820 <xPortStartScheduler+0x120>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4a46      	ldr	r2, [pc, #280]	; (8007824 <xPortStartScheduler+0x124>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d10a      	bne.n	8007726 <xPortStartScheduler+0x26>
	__asm volatile
 8007710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007714:	f383 8811 	msr	BASEPRI, r3
 8007718:	f3bf 8f6f 	isb	sy
 800771c:	f3bf 8f4f 	dsb	sy
 8007720:	613b      	str	r3, [r7, #16]
}
 8007722:	bf00      	nop
 8007724:	e7fe      	b.n	8007724 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007726:	4b3e      	ldr	r3, [pc, #248]	; (8007820 <xPortStartScheduler+0x120>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	4a3f      	ldr	r2, [pc, #252]	; (8007828 <xPortStartScheduler+0x128>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d10a      	bne.n	8007746 <xPortStartScheduler+0x46>
	__asm volatile
 8007730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007734:	f383 8811 	msr	BASEPRI, r3
 8007738:	f3bf 8f6f 	isb	sy
 800773c:	f3bf 8f4f 	dsb	sy
 8007740:	60fb      	str	r3, [r7, #12]
}
 8007742:	bf00      	nop
 8007744:	e7fe      	b.n	8007744 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007746:	4b39      	ldr	r3, [pc, #228]	; (800782c <xPortStartScheduler+0x12c>)
 8007748:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800774a:	697b      	ldr	r3, [r7, #20]
 800774c:	781b      	ldrb	r3, [r3, #0]
 800774e:	b2db      	uxtb	r3, r3
 8007750:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007752:	697b      	ldr	r3, [r7, #20]
 8007754:	22ff      	movs	r2, #255	; 0xff
 8007756:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	781b      	ldrb	r3, [r3, #0]
 800775c:	b2db      	uxtb	r3, r3
 800775e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007760:	78fb      	ldrb	r3, [r7, #3]
 8007762:	b2db      	uxtb	r3, r3
 8007764:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007768:	b2da      	uxtb	r2, r3
 800776a:	4b31      	ldr	r3, [pc, #196]	; (8007830 <xPortStartScheduler+0x130>)
 800776c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800776e:	4b31      	ldr	r3, [pc, #196]	; (8007834 <xPortStartScheduler+0x134>)
 8007770:	2207      	movs	r2, #7
 8007772:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007774:	e009      	b.n	800778a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007776:	4b2f      	ldr	r3, [pc, #188]	; (8007834 <xPortStartScheduler+0x134>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	3b01      	subs	r3, #1
 800777c:	4a2d      	ldr	r2, [pc, #180]	; (8007834 <xPortStartScheduler+0x134>)
 800777e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007780:	78fb      	ldrb	r3, [r7, #3]
 8007782:	b2db      	uxtb	r3, r3
 8007784:	005b      	lsls	r3, r3, #1
 8007786:	b2db      	uxtb	r3, r3
 8007788:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800778a:	78fb      	ldrb	r3, [r7, #3]
 800778c:	b2db      	uxtb	r3, r3
 800778e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007792:	2b80      	cmp	r3, #128	; 0x80
 8007794:	d0ef      	beq.n	8007776 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007796:	4b27      	ldr	r3, [pc, #156]	; (8007834 <xPortStartScheduler+0x134>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f1c3 0307 	rsb	r3, r3, #7
 800779e:	2b04      	cmp	r3, #4
 80077a0:	d00a      	beq.n	80077b8 <xPortStartScheduler+0xb8>
	__asm volatile
 80077a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077a6:	f383 8811 	msr	BASEPRI, r3
 80077aa:	f3bf 8f6f 	isb	sy
 80077ae:	f3bf 8f4f 	dsb	sy
 80077b2:	60bb      	str	r3, [r7, #8]
}
 80077b4:	bf00      	nop
 80077b6:	e7fe      	b.n	80077b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80077b8:	4b1e      	ldr	r3, [pc, #120]	; (8007834 <xPortStartScheduler+0x134>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	021b      	lsls	r3, r3, #8
 80077be:	4a1d      	ldr	r2, [pc, #116]	; (8007834 <xPortStartScheduler+0x134>)
 80077c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80077c2:	4b1c      	ldr	r3, [pc, #112]	; (8007834 <xPortStartScheduler+0x134>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80077ca:	4a1a      	ldr	r2, [pc, #104]	; (8007834 <xPortStartScheduler+0x134>)
 80077cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	b2da      	uxtb	r2, r3
 80077d2:	697b      	ldr	r3, [r7, #20]
 80077d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80077d6:	4b18      	ldr	r3, [pc, #96]	; (8007838 <xPortStartScheduler+0x138>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	4a17      	ldr	r2, [pc, #92]	; (8007838 <xPortStartScheduler+0x138>)
 80077dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80077e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80077e2:	4b15      	ldr	r3, [pc, #84]	; (8007838 <xPortStartScheduler+0x138>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	4a14      	ldr	r2, [pc, #80]	; (8007838 <xPortStartScheduler+0x138>)
 80077e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80077ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80077ee:	f000 f8dd 	bl	80079ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80077f2:	4b12      	ldr	r3, [pc, #72]	; (800783c <xPortStartScheduler+0x13c>)
 80077f4:	2200      	movs	r2, #0
 80077f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80077f8:	f000 f8fc 	bl	80079f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80077fc:	4b10      	ldr	r3, [pc, #64]	; (8007840 <xPortStartScheduler+0x140>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	4a0f      	ldr	r2, [pc, #60]	; (8007840 <xPortStartScheduler+0x140>)
 8007802:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007806:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007808:	f7ff ff66 	bl	80076d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800780c:	f7fe fe90 	bl	8006530 <vTaskSwitchContext>
	prvTaskExitError();
 8007810:	f7ff ff1e 	bl	8007650 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007814:	2300      	movs	r3, #0
}
 8007816:	4618      	mov	r0, r3
 8007818:	3718      	adds	r7, #24
 800781a:	46bd      	mov	sp, r7
 800781c:	bd80      	pop	{r7, pc}
 800781e:	bf00      	nop
 8007820:	e000ed00 	.word	0xe000ed00
 8007824:	410fc271 	.word	0x410fc271
 8007828:	410fc270 	.word	0x410fc270
 800782c:	e000e400 	.word	0xe000e400
 8007830:	2000128c 	.word	0x2000128c
 8007834:	20001290 	.word	0x20001290
 8007838:	e000ed20 	.word	0xe000ed20
 800783c:	20000010 	.word	0x20000010
 8007840:	e000ef34 	.word	0xe000ef34

08007844 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007844:	b480      	push	{r7}
 8007846:	b083      	sub	sp, #12
 8007848:	af00      	add	r7, sp, #0
	__asm volatile
 800784a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800784e:	f383 8811 	msr	BASEPRI, r3
 8007852:	f3bf 8f6f 	isb	sy
 8007856:	f3bf 8f4f 	dsb	sy
 800785a:	607b      	str	r3, [r7, #4]
}
 800785c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800785e:	4b0f      	ldr	r3, [pc, #60]	; (800789c <vPortEnterCritical+0x58>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	3301      	adds	r3, #1
 8007864:	4a0d      	ldr	r2, [pc, #52]	; (800789c <vPortEnterCritical+0x58>)
 8007866:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007868:	4b0c      	ldr	r3, [pc, #48]	; (800789c <vPortEnterCritical+0x58>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	2b01      	cmp	r3, #1
 800786e:	d10f      	bne.n	8007890 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007870:	4b0b      	ldr	r3, [pc, #44]	; (80078a0 <vPortEnterCritical+0x5c>)
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	b2db      	uxtb	r3, r3
 8007876:	2b00      	cmp	r3, #0
 8007878:	d00a      	beq.n	8007890 <vPortEnterCritical+0x4c>
	__asm volatile
 800787a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800787e:	f383 8811 	msr	BASEPRI, r3
 8007882:	f3bf 8f6f 	isb	sy
 8007886:	f3bf 8f4f 	dsb	sy
 800788a:	603b      	str	r3, [r7, #0]
}
 800788c:	bf00      	nop
 800788e:	e7fe      	b.n	800788e <vPortEnterCritical+0x4a>
	}
}
 8007890:	bf00      	nop
 8007892:	370c      	adds	r7, #12
 8007894:	46bd      	mov	sp, r7
 8007896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789a:	4770      	bx	lr
 800789c:	20000010 	.word	0x20000010
 80078a0:	e000ed04 	.word	0xe000ed04

080078a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80078a4:	b480      	push	{r7}
 80078a6:	b083      	sub	sp, #12
 80078a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80078aa:	4b12      	ldr	r3, [pc, #72]	; (80078f4 <vPortExitCritical+0x50>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d10a      	bne.n	80078c8 <vPortExitCritical+0x24>
	__asm volatile
 80078b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078b6:	f383 8811 	msr	BASEPRI, r3
 80078ba:	f3bf 8f6f 	isb	sy
 80078be:	f3bf 8f4f 	dsb	sy
 80078c2:	607b      	str	r3, [r7, #4]
}
 80078c4:	bf00      	nop
 80078c6:	e7fe      	b.n	80078c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80078c8:	4b0a      	ldr	r3, [pc, #40]	; (80078f4 <vPortExitCritical+0x50>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	3b01      	subs	r3, #1
 80078ce:	4a09      	ldr	r2, [pc, #36]	; (80078f4 <vPortExitCritical+0x50>)
 80078d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80078d2:	4b08      	ldr	r3, [pc, #32]	; (80078f4 <vPortExitCritical+0x50>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d105      	bne.n	80078e6 <vPortExitCritical+0x42>
 80078da:	2300      	movs	r3, #0
 80078dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	f383 8811 	msr	BASEPRI, r3
}
 80078e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80078e6:	bf00      	nop
 80078e8:	370c      	adds	r7, #12
 80078ea:	46bd      	mov	sp, r7
 80078ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f0:	4770      	bx	lr
 80078f2:	bf00      	nop
 80078f4:	20000010 	.word	0x20000010
	...

08007900 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007900:	f3ef 8009 	mrs	r0, PSP
 8007904:	f3bf 8f6f 	isb	sy
 8007908:	4b15      	ldr	r3, [pc, #84]	; (8007960 <pxCurrentTCBConst>)
 800790a:	681a      	ldr	r2, [r3, #0]
 800790c:	f01e 0f10 	tst.w	lr, #16
 8007910:	bf08      	it	eq
 8007912:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007916:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800791a:	6010      	str	r0, [r2, #0]
 800791c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007920:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007924:	f380 8811 	msr	BASEPRI, r0
 8007928:	f3bf 8f4f 	dsb	sy
 800792c:	f3bf 8f6f 	isb	sy
 8007930:	f7fe fdfe 	bl	8006530 <vTaskSwitchContext>
 8007934:	f04f 0000 	mov.w	r0, #0
 8007938:	f380 8811 	msr	BASEPRI, r0
 800793c:	bc09      	pop	{r0, r3}
 800793e:	6819      	ldr	r1, [r3, #0]
 8007940:	6808      	ldr	r0, [r1, #0]
 8007942:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007946:	f01e 0f10 	tst.w	lr, #16
 800794a:	bf08      	it	eq
 800794c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007950:	f380 8809 	msr	PSP, r0
 8007954:	f3bf 8f6f 	isb	sy
 8007958:	4770      	bx	lr
 800795a:	bf00      	nop
 800795c:	f3af 8000 	nop.w

08007960 <pxCurrentTCBConst>:
 8007960:	20000c60 	.word	0x20000c60
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007964:	bf00      	nop
 8007966:	bf00      	nop

08007968 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b082      	sub	sp, #8
 800796c:	af00      	add	r7, sp, #0
	__asm volatile
 800796e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007972:	f383 8811 	msr	BASEPRI, r3
 8007976:	f3bf 8f6f 	isb	sy
 800797a:	f3bf 8f4f 	dsb	sy
 800797e:	607b      	str	r3, [r7, #4]
}
 8007980:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007982:	f7fe fd1b 	bl	80063bc <xTaskIncrementTick>
 8007986:	4603      	mov	r3, r0
 8007988:	2b00      	cmp	r3, #0
 800798a:	d003      	beq.n	8007994 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800798c:	4b06      	ldr	r3, [pc, #24]	; (80079a8 <xPortSysTickHandler+0x40>)
 800798e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007992:	601a      	str	r2, [r3, #0]
 8007994:	2300      	movs	r3, #0
 8007996:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	f383 8811 	msr	BASEPRI, r3
}
 800799e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80079a0:	bf00      	nop
 80079a2:	3708      	adds	r7, #8
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd80      	pop	{r7, pc}
 80079a8:	e000ed04 	.word	0xe000ed04

080079ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80079ac:	b480      	push	{r7}
 80079ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80079b0:	4b0b      	ldr	r3, [pc, #44]	; (80079e0 <vPortSetupTimerInterrupt+0x34>)
 80079b2:	2200      	movs	r2, #0
 80079b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80079b6:	4b0b      	ldr	r3, [pc, #44]	; (80079e4 <vPortSetupTimerInterrupt+0x38>)
 80079b8:	2200      	movs	r2, #0
 80079ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80079bc:	4b0a      	ldr	r3, [pc, #40]	; (80079e8 <vPortSetupTimerInterrupt+0x3c>)
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	4a0a      	ldr	r2, [pc, #40]	; (80079ec <vPortSetupTimerInterrupt+0x40>)
 80079c2:	fba2 2303 	umull	r2, r3, r2, r3
 80079c6:	099b      	lsrs	r3, r3, #6
 80079c8:	4a09      	ldr	r2, [pc, #36]	; (80079f0 <vPortSetupTimerInterrupt+0x44>)
 80079ca:	3b01      	subs	r3, #1
 80079cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80079ce:	4b04      	ldr	r3, [pc, #16]	; (80079e0 <vPortSetupTimerInterrupt+0x34>)
 80079d0:	2207      	movs	r2, #7
 80079d2:	601a      	str	r2, [r3, #0]
}
 80079d4:	bf00      	nop
 80079d6:	46bd      	mov	sp, r7
 80079d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079dc:	4770      	bx	lr
 80079de:	bf00      	nop
 80079e0:	e000e010 	.word	0xe000e010
 80079e4:	e000e018 	.word	0xe000e018
 80079e8:	20000004 	.word	0x20000004
 80079ec:	10624dd3 	.word	0x10624dd3
 80079f0:	e000e014 	.word	0xe000e014

080079f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80079f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007a04 <vPortEnableVFP+0x10>
 80079f8:	6801      	ldr	r1, [r0, #0]
 80079fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80079fe:	6001      	str	r1, [r0, #0]
 8007a00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007a02:	bf00      	nop
 8007a04:	e000ed88 	.word	0xe000ed88

08007a08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007a08:	b480      	push	{r7}
 8007a0a:	b085      	sub	sp, #20
 8007a0c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007a0e:	f3ef 8305 	mrs	r3, IPSR
 8007a12:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	2b0f      	cmp	r3, #15
 8007a18:	d914      	bls.n	8007a44 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007a1a:	4a17      	ldr	r2, [pc, #92]	; (8007a78 <vPortValidateInterruptPriority+0x70>)
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	4413      	add	r3, r2
 8007a20:	781b      	ldrb	r3, [r3, #0]
 8007a22:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007a24:	4b15      	ldr	r3, [pc, #84]	; (8007a7c <vPortValidateInterruptPriority+0x74>)
 8007a26:	781b      	ldrb	r3, [r3, #0]
 8007a28:	7afa      	ldrb	r2, [r7, #11]
 8007a2a:	429a      	cmp	r2, r3
 8007a2c:	d20a      	bcs.n	8007a44 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a32:	f383 8811 	msr	BASEPRI, r3
 8007a36:	f3bf 8f6f 	isb	sy
 8007a3a:	f3bf 8f4f 	dsb	sy
 8007a3e:	607b      	str	r3, [r7, #4]
}
 8007a40:	bf00      	nop
 8007a42:	e7fe      	b.n	8007a42 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007a44:	4b0e      	ldr	r3, [pc, #56]	; (8007a80 <vPortValidateInterruptPriority+0x78>)
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007a4c:	4b0d      	ldr	r3, [pc, #52]	; (8007a84 <vPortValidateInterruptPriority+0x7c>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	429a      	cmp	r2, r3
 8007a52:	d90a      	bls.n	8007a6a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a58:	f383 8811 	msr	BASEPRI, r3
 8007a5c:	f3bf 8f6f 	isb	sy
 8007a60:	f3bf 8f4f 	dsb	sy
 8007a64:	603b      	str	r3, [r7, #0]
}
 8007a66:	bf00      	nop
 8007a68:	e7fe      	b.n	8007a68 <vPortValidateInterruptPriority+0x60>
	}
 8007a6a:	bf00      	nop
 8007a6c:	3714      	adds	r7, #20
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a74:	4770      	bx	lr
 8007a76:	bf00      	nop
 8007a78:	e000e3f0 	.word	0xe000e3f0
 8007a7c:	2000128c 	.word	0x2000128c
 8007a80:	e000ed0c 	.word	0xe000ed0c
 8007a84:	20001290 	.word	0x20001290

08007a88 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b08a      	sub	sp, #40	; 0x28
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007a90:	2300      	movs	r3, #0
 8007a92:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007a94:	f7fe fbd6 	bl	8006244 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007a98:	4b5b      	ldr	r3, [pc, #364]	; (8007c08 <pvPortMalloc+0x180>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d101      	bne.n	8007aa4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007aa0:	f000 f920 	bl	8007ce4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007aa4:	4b59      	ldr	r3, [pc, #356]	; (8007c0c <pvPortMalloc+0x184>)
 8007aa6:	681a      	ldr	r2, [r3, #0]
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	4013      	ands	r3, r2
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	f040 8093 	bne.w	8007bd8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d01d      	beq.n	8007af4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007ab8:	2208      	movs	r2, #8
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	4413      	add	r3, r2
 8007abe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f003 0307 	and.w	r3, r3, #7
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d014      	beq.n	8007af4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	f023 0307 	bic.w	r3, r3, #7
 8007ad0:	3308      	adds	r3, #8
 8007ad2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	f003 0307 	and.w	r3, r3, #7
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d00a      	beq.n	8007af4 <pvPortMalloc+0x6c>
	__asm volatile
 8007ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ae2:	f383 8811 	msr	BASEPRI, r3
 8007ae6:	f3bf 8f6f 	isb	sy
 8007aea:	f3bf 8f4f 	dsb	sy
 8007aee:	617b      	str	r3, [r7, #20]
}
 8007af0:	bf00      	nop
 8007af2:	e7fe      	b.n	8007af2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d06e      	beq.n	8007bd8 <pvPortMalloc+0x150>
 8007afa:	4b45      	ldr	r3, [pc, #276]	; (8007c10 <pvPortMalloc+0x188>)
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	687a      	ldr	r2, [r7, #4]
 8007b00:	429a      	cmp	r2, r3
 8007b02:	d869      	bhi.n	8007bd8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007b04:	4b43      	ldr	r3, [pc, #268]	; (8007c14 <pvPortMalloc+0x18c>)
 8007b06:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007b08:	4b42      	ldr	r3, [pc, #264]	; (8007c14 <pvPortMalloc+0x18c>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007b0e:	e004      	b.n	8007b1a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b12:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b1c:	685b      	ldr	r3, [r3, #4]
 8007b1e:	687a      	ldr	r2, [r7, #4]
 8007b20:	429a      	cmp	r2, r3
 8007b22:	d903      	bls.n	8007b2c <pvPortMalloc+0xa4>
 8007b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d1f1      	bne.n	8007b10 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007b2c:	4b36      	ldr	r3, [pc, #216]	; (8007c08 <pvPortMalloc+0x180>)
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b32:	429a      	cmp	r2, r3
 8007b34:	d050      	beq.n	8007bd8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007b36:	6a3b      	ldr	r3, [r7, #32]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	2208      	movs	r2, #8
 8007b3c:	4413      	add	r3, r2
 8007b3e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b42:	681a      	ldr	r2, [r3, #0]
 8007b44:	6a3b      	ldr	r3, [r7, #32]
 8007b46:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b4a:	685a      	ldr	r2, [r3, #4]
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	1ad2      	subs	r2, r2, r3
 8007b50:	2308      	movs	r3, #8
 8007b52:	005b      	lsls	r3, r3, #1
 8007b54:	429a      	cmp	r2, r3
 8007b56:	d91f      	bls.n	8007b98 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007b58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	4413      	add	r3, r2
 8007b5e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b60:	69bb      	ldr	r3, [r7, #24]
 8007b62:	f003 0307 	and.w	r3, r3, #7
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d00a      	beq.n	8007b80 <pvPortMalloc+0xf8>
	__asm volatile
 8007b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b6e:	f383 8811 	msr	BASEPRI, r3
 8007b72:	f3bf 8f6f 	isb	sy
 8007b76:	f3bf 8f4f 	dsb	sy
 8007b7a:	613b      	str	r3, [r7, #16]
}
 8007b7c:	bf00      	nop
 8007b7e:	e7fe      	b.n	8007b7e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b82:	685a      	ldr	r2, [r3, #4]
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	1ad2      	subs	r2, r2, r3
 8007b88:	69bb      	ldr	r3, [r7, #24]
 8007b8a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b8e:	687a      	ldr	r2, [r7, #4]
 8007b90:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007b92:	69b8      	ldr	r0, [r7, #24]
 8007b94:	f000 f908 	bl	8007da8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007b98:	4b1d      	ldr	r3, [pc, #116]	; (8007c10 <pvPortMalloc+0x188>)
 8007b9a:	681a      	ldr	r2, [r3, #0]
 8007b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b9e:	685b      	ldr	r3, [r3, #4]
 8007ba0:	1ad3      	subs	r3, r2, r3
 8007ba2:	4a1b      	ldr	r2, [pc, #108]	; (8007c10 <pvPortMalloc+0x188>)
 8007ba4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007ba6:	4b1a      	ldr	r3, [pc, #104]	; (8007c10 <pvPortMalloc+0x188>)
 8007ba8:	681a      	ldr	r2, [r3, #0]
 8007baa:	4b1b      	ldr	r3, [pc, #108]	; (8007c18 <pvPortMalloc+0x190>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	429a      	cmp	r2, r3
 8007bb0:	d203      	bcs.n	8007bba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007bb2:	4b17      	ldr	r3, [pc, #92]	; (8007c10 <pvPortMalloc+0x188>)
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	4a18      	ldr	r2, [pc, #96]	; (8007c18 <pvPortMalloc+0x190>)
 8007bb8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bbc:	685a      	ldr	r2, [r3, #4]
 8007bbe:	4b13      	ldr	r3, [pc, #76]	; (8007c0c <pvPortMalloc+0x184>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	431a      	orrs	r2, r3
 8007bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bca:	2200      	movs	r2, #0
 8007bcc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007bce:	4b13      	ldr	r3, [pc, #76]	; (8007c1c <pvPortMalloc+0x194>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	3301      	adds	r3, #1
 8007bd4:	4a11      	ldr	r2, [pc, #68]	; (8007c1c <pvPortMalloc+0x194>)
 8007bd6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007bd8:	f7fe fb42 	bl	8006260 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007bdc:	69fb      	ldr	r3, [r7, #28]
 8007bde:	f003 0307 	and.w	r3, r3, #7
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d00a      	beq.n	8007bfc <pvPortMalloc+0x174>
	__asm volatile
 8007be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bea:	f383 8811 	msr	BASEPRI, r3
 8007bee:	f3bf 8f6f 	isb	sy
 8007bf2:	f3bf 8f4f 	dsb	sy
 8007bf6:	60fb      	str	r3, [r7, #12]
}
 8007bf8:	bf00      	nop
 8007bfa:	e7fe      	b.n	8007bfa <pvPortMalloc+0x172>
	return pvReturn;
 8007bfc:	69fb      	ldr	r3, [r7, #28]
}
 8007bfe:	4618      	mov	r0, r3
 8007c00:	3728      	adds	r7, #40	; 0x28
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd80      	pop	{r7, pc}
 8007c06:	bf00      	nop
 8007c08:	20001e9c 	.word	0x20001e9c
 8007c0c:	20001eb0 	.word	0x20001eb0
 8007c10:	20001ea0 	.word	0x20001ea0
 8007c14:	20001e94 	.word	0x20001e94
 8007c18:	20001ea4 	.word	0x20001ea4
 8007c1c:	20001ea8 	.word	0x20001ea8

08007c20 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b086      	sub	sp, #24
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d04d      	beq.n	8007cce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007c32:	2308      	movs	r3, #8
 8007c34:	425b      	negs	r3, r3
 8007c36:	697a      	ldr	r2, [r7, #20]
 8007c38:	4413      	add	r3, r2
 8007c3a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007c3c:	697b      	ldr	r3, [r7, #20]
 8007c3e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007c40:	693b      	ldr	r3, [r7, #16]
 8007c42:	685a      	ldr	r2, [r3, #4]
 8007c44:	4b24      	ldr	r3, [pc, #144]	; (8007cd8 <vPortFree+0xb8>)
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	4013      	ands	r3, r2
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d10a      	bne.n	8007c64 <vPortFree+0x44>
	__asm volatile
 8007c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c52:	f383 8811 	msr	BASEPRI, r3
 8007c56:	f3bf 8f6f 	isb	sy
 8007c5a:	f3bf 8f4f 	dsb	sy
 8007c5e:	60fb      	str	r3, [r7, #12]
}
 8007c60:	bf00      	nop
 8007c62:	e7fe      	b.n	8007c62 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007c64:	693b      	ldr	r3, [r7, #16]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d00a      	beq.n	8007c82 <vPortFree+0x62>
	__asm volatile
 8007c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c70:	f383 8811 	msr	BASEPRI, r3
 8007c74:	f3bf 8f6f 	isb	sy
 8007c78:	f3bf 8f4f 	dsb	sy
 8007c7c:	60bb      	str	r3, [r7, #8]
}
 8007c7e:	bf00      	nop
 8007c80:	e7fe      	b.n	8007c80 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007c82:	693b      	ldr	r3, [r7, #16]
 8007c84:	685a      	ldr	r2, [r3, #4]
 8007c86:	4b14      	ldr	r3, [pc, #80]	; (8007cd8 <vPortFree+0xb8>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	4013      	ands	r3, r2
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d01e      	beq.n	8007cce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007c90:	693b      	ldr	r3, [r7, #16]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d11a      	bne.n	8007cce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007c98:	693b      	ldr	r3, [r7, #16]
 8007c9a:	685a      	ldr	r2, [r3, #4]
 8007c9c:	4b0e      	ldr	r3, [pc, #56]	; (8007cd8 <vPortFree+0xb8>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	43db      	mvns	r3, r3
 8007ca2:	401a      	ands	r2, r3
 8007ca4:	693b      	ldr	r3, [r7, #16]
 8007ca6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007ca8:	f7fe facc 	bl	8006244 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007cac:	693b      	ldr	r3, [r7, #16]
 8007cae:	685a      	ldr	r2, [r3, #4]
 8007cb0:	4b0a      	ldr	r3, [pc, #40]	; (8007cdc <vPortFree+0xbc>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	4413      	add	r3, r2
 8007cb6:	4a09      	ldr	r2, [pc, #36]	; (8007cdc <vPortFree+0xbc>)
 8007cb8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007cba:	6938      	ldr	r0, [r7, #16]
 8007cbc:	f000 f874 	bl	8007da8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007cc0:	4b07      	ldr	r3, [pc, #28]	; (8007ce0 <vPortFree+0xc0>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	3301      	adds	r3, #1
 8007cc6:	4a06      	ldr	r2, [pc, #24]	; (8007ce0 <vPortFree+0xc0>)
 8007cc8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007cca:	f7fe fac9 	bl	8006260 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007cce:	bf00      	nop
 8007cd0:	3718      	adds	r7, #24
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}
 8007cd6:	bf00      	nop
 8007cd8:	20001eb0 	.word	0x20001eb0
 8007cdc:	20001ea0 	.word	0x20001ea0
 8007ce0:	20001eac 	.word	0x20001eac

08007ce4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	b085      	sub	sp, #20
 8007ce8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007cea:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8007cee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007cf0:	4b27      	ldr	r3, [pc, #156]	; (8007d90 <prvHeapInit+0xac>)
 8007cf2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	f003 0307 	and.w	r3, r3, #7
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d00c      	beq.n	8007d18 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	3307      	adds	r3, #7
 8007d02:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	f023 0307 	bic.w	r3, r3, #7
 8007d0a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007d0c:	68ba      	ldr	r2, [r7, #8]
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	1ad3      	subs	r3, r2, r3
 8007d12:	4a1f      	ldr	r2, [pc, #124]	; (8007d90 <prvHeapInit+0xac>)
 8007d14:	4413      	add	r3, r2
 8007d16:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007d1c:	4a1d      	ldr	r2, [pc, #116]	; (8007d94 <prvHeapInit+0xb0>)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007d22:	4b1c      	ldr	r3, [pc, #112]	; (8007d94 <prvHeapInit+0xb0>)
 8007d24:	2200      	movs	r2, #0
 8007d26:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	68ba      	ldr	r2, [r7, #8]
 8007d2c:	4413      	add	r3, r2
 8007d2e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007d30:	2208      	movs	r2, #8
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	1a9b      	subs	r3, r3, r2
 8007d36:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	f023 0307 	bic.w	r3, r3, #7
 8007d3e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	4a15      	ldr	r2, [pc, #84]	; (8007d98 <prvHeapInit+0xb4>)
 8007d44:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007d46:	4b14      	ldr	r3, [pc, #80]	; (8007d98 <prvHeapInit+0xb4>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007d4e:	4b12      	ldr	r3, [pc, #72]	; (8007d98 <prvHeapInit+0xb4>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	2200      	movs	r2, #0
 8007d54:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	68fa      	ldr	r2, [r7, #12]
 8007d5e:	1ad2      	subs	r2, r2, r3
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007d64:	4b0c      	ldr	r3, [pc, #48]	; (8007d98 <prvHeapInit+0xb4>)
 8007d66:	681a      	ldr	r2, [r3, #0]
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	685b      	ldr	r3, [r3, #4]
 8007d70:	4a0a      	ldr	r2, [pc, #40]	; (8007d9c <prvHeapInit+0xb8>)
 8007d72:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	685b      	ldr	r3, [r3, #4]
 8007d78:	4a09      	ldr	r2, [pc, #36]	; (8007da0 <prvHeapInit+0xbc>)
 8007d7a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007d7c:	4b09      	ldr	r3, [pc, #36]	; (8007da4 <prvHeapInit+0xc0>)
 8007d7e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007d82:	601a      	str	r2, [r3, #0]
}
 8007d84:	bf00      	nop
 8007d86:	3714      	adds	r7, #20
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8e:	4770      	bx	lr
 8007d90:	20001294 	.word	0x20001294
 8007d94:	20001e94 	.word	0x20001e94
 8007d98:	20001e9c 	.word	0x20001e9c
 8007d9c:	20001ea4 	.word	0x20001ea4
 8007da0:	20001ea0 	.word	0x20001ea0
 8007da4:	20001eb0 	.word	0x20001eb0

08007da8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007da8:	b480      	push	{r7}
 8007daa:	b085      	sub	sp, #20
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007db0:	4b28      	ldr	r3, [pc, #160]	; (8007e54 <prvInsertBlockIntoFreeList+0xac>)
 8007db2:	60fb      	str	r3, [r7, #12]
 8007db4:	e002      	b.n	8007dbc <prvInsertBlockIntoFreeList+0x14>
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	60fb      	str	r3, [r7, #12]
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	687a      	ldr	r2, [r7, #4]
 8007dc2:	429a      	cmp	r2, r3
 8007dc4:	d8f7      	bhi.n	8007db6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	685b      	ldr	r3, [r3, #4]
 8007dce:	68ba      	ldr	r2, [r7, #8]
 8007dd0:	4413      	add	r3, r2
 8007dd2:	687a      	ldr	r2, [r7, #4]
 8007dd4:	429a      	cmp	r2, r3
 8007dd6:	d108      	bne.n	8007dea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	685a      	ldr	r2, [r3, #4]
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	685b      	ldr	r3, [r3, #4]
 8007de0:	441a      	add	r2, r3
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	685b      	ldr	r3, [r3, #4]
 8007df2:	68ba      	ldr	r2, [r7, #8]
 8007df4:	441a      	add	r2, r3
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	429a      	cmp	r2, r3
 8007dfc:	d118      	bne.n	8007e30 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681a      	ldr	r2, [r3, #0]
 8007e02:	4b15      	ldr	r3, [pc, #84]	; (8007e58 <prvInsertBlockIntoFreeList+0xb0>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	429a      	cmp	r2, r3
 8007e08:	d00d      	beq.n	8007e26 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	685a      	ldr	r2, [r3, #4]
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	685b      	ldr	r3, [r3, #4]
 8007e14:	441a      	add	r2, r3
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	681a      	ldr	r2, [r3, #0]
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	601a      	str	r2, [r3, #0]
 8007e24:	e008      	b.n	8007e38 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007e26:	4b0c      	ldr	r3, [pc, #48]	; (8007e58 <prvInsertBlockIntoFreeList+0xb0>)
 8007e28:	681a      	ldr	r2, [r3, #0]
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	601a      	str	r2, [r3, #0]
 8007e2e:	e003      	b.n	8007e38 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681a      	ldr	r2, [r3, #0]
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007e38:	68fa      	ldr	r2, [r7, #12]
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	429a      	cmp	r2, r3
 8007e3e:	d002      	beq.n	8007e46 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	687a      	ldr	r2, [r7, #4]
 8007e44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007e46:	bf00      	nop
 8007e48:	3714      	adds	r7, #20
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e50:	4770      	bx	lr
 8007e52:	bf00      	nop
 8007e54:	20001e94 	.word	0x20001e94
 8007e58:	20001e9c 	.word	0x20001e9c

08007e5c <__errno>:
 8007e5c:	4b01      	ldr	r3, [pc, #4]	; (8007e64 <__errno+0x8>)
 8007e5e:	6818      	ldr	r0, [r3, #0]
 8007e60:	4770      	bx	lr
 8007e62:	bf00      	nop
 8007e64:	20000014 	.word	0x20000014

08007e68 <std>:
 8007e68:	2300      	movs	r3, #0
 8007e6a:	b510      	push	{r4, lr}
 8007e6c:	4604      	mov	r4, r0
 8007e6e:	e9c0 3300 	strd	r3, r3, [r0]
 8007e72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007e76:	6083      	str	r3, [r0, #8]
 8007e78:	8181      	strh	r1, [r0, #12]
 8007e7a:	6643      	str	r3, [r0, #100]	; 0x64
 8007e7c:	81c2      	strh	r2, [r0, #14]
 8007e7e:	6183      	str	r3, [r0, #24]
 8007e80:	4619      	mov	r1, r3
 8007e82:	2208      	movs	r2, #8
 8007e84:	305c      	adds	r0, #92	; 0x5c
 8007e86:	f000 f91a 	bl	80080be <memset>
 8007e8a:	4b05      	ldr	r3, [pc, #20]	; (8007ea0 <std+0x38>)
 8007e8c:	6263      	str	r3, [r4, #36]	; 0x24
 8007e8e:	4b05      	ldr	r3, [pc, #20]	; (8007ea4 <std+0x3c>)
 8007e90:	62a3      	str	r3, [r4, #40]	; 0x28
 8007e92:	4b05      	ldr	r3, [pc, #20]	; (8007ea8 <std+0x40>)
 8007e94:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007e96:	4b05      	ldr	r3, [pc, #20]	; (8007eac <std+0x44>)
 8007e98:	6224      	str	r4, [r4, #32]
 8007e9a:	6323      	str	r3, [r4, #48]	; 0x30
 8007e9c:	bd10      	pop	{r4, pc}
 8007e9e:	bf00      	nop
 8007ea0:	080083d9 	.word	0x080083d9
 8007ea4:	080083fb 	.word	0x080083fb
 8007ea8:	08008433 	.word	0x08008433
 8007eac:	08008457 	.word	0x08008457

08007eb0 <_cleanup_r>:
 8007eb0:	4901      	ldr	r1, [pc, #4]	; (8007eb8 <_cleanup_r+0x8>)
 8007eb2:	f000 b8af 	b.w	8008014 <_fwalk_reent>
 8007eb6:	bf00      	nop
 8007eb8:	08008731 	.word	0x08008731

08007ebc <__sfmoreglue>:
 8007ebc:	b570      	push	{r4, r5, r6, lr}
 8007ebe:	2268      	movs	r2, #104	; 0x68
 8007ec0:	1e4d      	subs	r5, r1, #1
 8007ec2:	4355      	muls	r5, r2
 8007ec4:	460e      	mov	r6, r1
 8007ec6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007eca:	f000 f921 	bl	8008110 <_malloc_r>
 8007ece:	4604      	mov	r4, r0
 8007ed0:	b140      	cbz	r0, 8007ee4 <__sfmoreglue+0x28>
 8007ed2:	2100      	movs	r1, #0
 8007ed4:	e9c0 1600 	strd	r1, r6, [r0]
 8007ed8:	300c      	adds	r0, #12
 8007eda:	60a0      	str	r0, [r4, #8]
 8007edc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007ee0:	f000 f8ed 	bl	80080be <memset>
 8007ee4:	4620      	mov	r0, r4
 8007ee6:	bd70      	pop	{r4, r5, r6, pc}

08007ee8 <__sfp_lock_acquire>:
 8007ee8:	4801      	ldr	r0, [pc, #4]	; (8007ef0 <__sfp_lock_acquire+0x8>)
 8007eea:	f000 b8d8 	b.w	800809e <__retarget_lock_acquire_recursive>
 8007eee:	bf00      	nop
 8007ef0:	20001eb5 	.word	0x20001eb5

08007ef4 <__sfp_lock_release>:
 8007ef4:	4801      	ldr	r0, [pc, #4]	; (8007efc <__sfp_lock_release+0x8>)
 8007ef6:	f000 b8d3 	b.w	80080a0 <__retarget_lock_release_recursive>
 8007efa:	bf00      	nop
 8007efc:	20001eb5 	.word	0x20001eb5

08007f00 <__sinit_lock_acquire>:
 8007f00:	4801      	ldr	r0, [pc, #4]	; (8007f08 <__sinit_lock_acquire+0x8>)
 8007f02:	f000 b8cc 	b.w	800809e <__retarget_lock_acquire_recursive>
 8007f06:	bf00      	nop
 8007f08:	20001eb6 	.word	0x20001eb6

08007f0c <__sinit_lock_release>:
 8007f0c:	4801      	ldr	r0, [pc, #4]	; (8007f14 <__sinit_lock_release+0x8>)
 8007f0e:	f000 b8c7 	b.w	80080a0 <__retarget_lock_release_recursive>
 8007f12:	bf00      	nop
 8007f14:	20001eb6 	.word	0x20001eb6

08007f18 <__sinit>:
 8007f18:	b510      	push	{r4, lr}
 8007f1a:	4604      	mov	r4, r0
 8007f1c:	f7ff fff0 	bl	8007f00 <__sinit_lock_acquire>
 8007f20:	69a3      	ldr	r3, [r4, #24]
 8007f22:	b11b      	cbz	r3, 8007f2c <__sinit+0x14>
 8007f24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f28:	f7ff bff0 	b.w	8007f0c <__sinit_lock_release>
 8007f2c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007f30:	6523      	str	r3, [r4, #80]	; 0x50
 8007f32:	4b13      	ldr	r3, [pc, #76]	; (8007f80 <__sinit+0x68>)
 8007f34:	4a13      	ldr	r2, [pc, #76]	; (8007f84 <__sinit+0x6c>)
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	62a2      	str	r2, [r4, #40]	; 0x28
 8007f3a:	42a3      	cmp	r3, r4
 8007f3c:	bf04      	itt	eq
 8007f3e:	2301      	moveq	r3, #1
 8007f40:	61a3      	streq	r3, [r4, #24]
 8007f42:	4620      	mov	r0, r4
 8007f44:	f000 f820 	bl	8007f88 <__sfp>
 8007f48:	6060      	str	r0, [r4, #4]
 8007f4a:	4620      	mov	r0, r4
 8007f4c:	f000 f81c 	bl	8007f88 <__sfp>
 8007f50:	60a0      	str	r0, [r4, #8]
 8007f52:	4620      	mov	r0, r4
 8007f54:	f000 f818 	bl	8007f88 <__sfp>
 8007f58:	2200      	movs	r2, #0
 8007f5a:	60e0      	str	r0, [r4, #12]
 8007f5c:	2104      	movs	r1, #4
 8007f5e:	6860      	ldr	r0, [r4, #4]
 8007f60:	f7ff ff82 	bl	8007e68 <std>
 8007f64:	68a0      	ldr	r0, [r4, #8]
 8007f66:	2201      	movs	r2, #1
 8007f68:	2109      	movs	r1, #9
 8007f6a:	f7ff ff7d 	bl	8007e68 <std>
 8007f6e:	68e0      	ldr	r0, [r4, #12]
 8007f70:	2202      	movs	r2, #2
 8007f72:	2112      	movs	r1, #18
 8007f74:	f7ff ff78 	bl	8007e68 <std>
 8007f78:	2301      	movs	r3, #1
 8007f7a:	61a3      	str	r3, [r4, #24]
 8007f7c:	e7d2      	b.n	8007f24 <__sinit+0xc>
 8007f7e:	bf00      	nop
 8007f80:	08008be8 	.word	0x08008be8
 8007f84:	08007eb1 	.word	0x08007eb1

08007f88 <__sfp>:
 8007f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f8a:	4607      	mov	r7, r0
 8007f8c:	f7ff ffac 	bl	8007ee8 <__sfp_lock_acquire>
 8007f90:	4b1e      	ldr	r3, [pc, #120]	; (800800c <__sfp+0x84>)
 8007f92:	681e      	ldr	r6, [r3, #0]
 8007f94:	69b3      	ldr	r3, [r6, #24]
 8007f96:	b913      	cbnz	r3, 8007f9e <__sfp+0x16>
 8007f98:	4630      	mov	r0, r6
 8007f9a:	f7ff ffbd 	bl	8007f18 <__sinit>
 8007f9e:	3648      	adds	r6, #72	; 0x48
 8007fa0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007fa4:	3b01      	subs	r3, #1
 8007fa6:	d503      	bpl.n	8007fb0 <__sfp+0x28>
 8007fa8:	6833      	ldr	r3, [r6, #0]
 8007faa:	b30b      	cbz	r3, 8007ff0 <__sfp+0x68>
 8007fac:	6836      	ldr	r6, [r6, #0]
 8007fae:	e7f7      	b.n	8007fa0 <__sfp+0x18>
 8007fb0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007fb4:	b9d5      	cbnz	r5, 8007fec <__sfp+0x64>
 8007fb6:	4b16      	ldr	r3, [pc, #88]	; (8008010 <__sfp+0x88>)
 8007fb8:	60e3      	str	r3, [r4, #12]
 8007fba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007fbe:	6665      	str	r5, [r4, #100]	; 0x64
 8007fc0:	f000 f86c 	bl	800809c <__retarget_lock_init_recursive>
 8007fc4:	f7ff ff96 	bl	8007ef4 <__sfp_lock_release>
 8007fc8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007fcc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007fd0:	6025      	str	r5, [r4, #0]
 8007fd2:	61a5      	str	r5, [r4, #24]
 8007fd4:	2208      	movs	r2, #8
 8007fd6:	4629      	mov	r1, r5
 8007fd8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007fdc:	f000 f86f 	bl	80080be <memset>
 8007fe0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007fe4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007fe8:	4620      	mov	r0, r4
 8007fea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007fec:	3468      	adds	r4, #104	; 0x68
 8007fee:	e7d9      	b.n	8007fa4 <__sfp+0x1c>
 8007ff0:	2104      	movs	r1, #4
 8007ff2:	4638      	mov	r0, r7
 8007ff4:	f7ff ff62 	bl	8007ebc <__sfmoreglue>
 8007ff8:	4604      	mov	r4, r0
 8007ffa:	6030      	str	r0, [r6, #0]
 8007ffc:	2800      	cmp	r0, #0
 8007ffe:	d1d5      	bne.n	8007fac <__sfp+0x24>
 8008000:	f7ff ff78 	bl	8007ef4 <__sfp_lock_release>
 8008004:	230c      	movs	r3, #12
 8008006:	603b      	str	r3, [r7, #0]
 8008008:	e7ee      	b.n	8007fe8 <__sfp+0x60>
 800800a:	bf00      	nop
 800800c:	08008be8 	.word	0x08008be8
 8008010:	ffff0001 	.word	0xffff0001

08008014 <_fwalk_reent>:
 8008014:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008018:	4606      	mov	r6, r0
 800801a:	4688      	mov	r8, r1
 800801c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008020:	2700      	movs	r7, #0
 8008022:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008026:	f1b9 0901 	subs.w	r9, r9, #1
 800802a:	d505      	bpl.n	8008038 <_fwalk_reent+0x24>
 800802c:	6824      	ldr	r4, [r4, #0]
 800802e:	2c00      	cmp	r4, #0
 8008030:	d1f7      	bne.n	8008022 <_fwalk_reent+0xe>
 8008032:	4638      	mov	r0, r7
 8008034:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008038:	89ab      	ldrh	r3, [r5, #12]
 800803a:	2b01      	cmp	r3, #1
 800803c:	d907      	bls.n	800804e <_fwalk_reent+0x3a>
 800803e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008042:	3301      	adds	r3, #1
 8008044:	d003      	beq.n	800804e <_fwalk_reent+0x3a>
 8008046:	4629      	mov	r1, r5
 8008048:	4630      	mov	r0, r6
 800804a:	47c0      	blx	r8
 800804c:	4307      	orrs	r7, r0
 800804e:	3568      	adds	r5, #104	; 0x68
 8008050:	e7e9      	b.n	8008026 <_fwalk_reent+0x12>
	...

08008054 <__libc_init_array>:
 8008054:	b570      	push	{r4, r5, r6, lr}
 8008056:	4d0d      	ldr	r5, [pc, #52]	; (800808c <__libc_init_array+0x38>)
 8008058:	4c0d      	ldr	r4, [pc, #52]	; (8008090 <__libc_init_array+0x3c>)
 800805a:	1b64      	subs	r4, r4, r5
 800805c:	10a4      	asrs	r4, r4, #2
 800805e:	2600      	movs	r6, #0
 8008060:	42a6      	cmp	r6, r4
 8008062:	d109      	bne.n	8008078 <__libc_init_array+0x24>
 8008064:	4d0b      	ldr	r5, [pc, #44]	; (8008094 <__libc_init_array+0x40>)
 8008066:	4c0c      	ldr	r4, [pc, #48]	; (8008098 <__libc_init_array+0x44>)
 8008068:	f000 fca2 	bl	80089b0 <_init>
 800806c:	1b64      	subs	r4, r4, r5
 800806e:	10a4      	asrs	r4, r4, #2
 8008070:	2600      	movs	r6, #0
 8008072:	42a6      	cmp	r6, r4
 8008074:	d105      	bne.n	8008082 <__libc_init_array+0x2e>
 8008076:	bd70      	pop	{r4, r5, r6, pc}
 8008078:	f855 3b04 	ldr.w	r3, [r5], #4
 800807c:	4798      	blx	r3
 800807e:	3601      	adds	r6, #1
 8008080:	e7ee      	b.n	8008060 <__libc_init_array+0xc>
 8008082:	f855 3b04 	ldr.w	r3, [r5], #4
 8008086:	4798      	blx	r3
 8008088:	3601      	adds	r6, #1
 800808a:	e7f2      	b.n	8008072 <__libc_init_array+0x1e>
 800808c:	08008bf4 	.word	0x08008bf4
 8008090:	08008bf4 	.word	0x08008bf4
 8008094:	08008bf4 	.word	0x08008bf4
 8008098:	08008bf8 	.word	0x08008bf8

0800809c <__retarget_lock_init_recursive>:
 800809c:	4770      	bx	lr

0800809e <__retarget_lock_acquire_recursive>:
 800809e:	4770      	bx	lr

080080a0 <__retarget_lock_release_recursive>:
 80080a0:	4770      	bx	lr

080080a2 <memcpy>:
 80080a2:	440a      	add	r2, r1
 80080a4:	4291      	cmp	r1, r2
 80080a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80080aa:	d100      	bne.n	80080ae <memcpy+0xc>
 80080ac:	4770      	bx	lr
 80080ae:	b510      	push	{r4, lr}
 80080b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80080b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80080b8:	4291      	cmp	r1, r2
 80080ba:	d1f9      	bne.n	80080b0 <memcpy+0xe>
 80080bc:	bd10      	pop	{r4, pc}

080080be <memset>:
 80080be:	4402      	add	r2, r0
 80080c0:	4603      	mov	r3, r0
 80080c2:	4293      	cmp	r3, r2
 80080c4:	d100      	bne.n	80080c8 <memset+0xa>
 80080c6:	4770      	bx	lr
 80080c8:	f803 1b01 	strb.w	r1, [r3], #1
 80080cc:	e7f9      	b.n	80080c2 <memset+0x4>
	...

080080d0 <sbrk_aligned>:
 80080d0:	b570      	push	{r4, r5, r6, lr}
 80080d2:	4e0e      	ldr	r6, [pc, #56]	; (800810c <sbrk_aligned+0x3c>)
 80080d4:	460c      	mov	r4, r1
 80080d6:	6831      	ldr	r1, [r6, #0]
 80080d8:	4605      	mov	r5, r0
 80080da:	b911      	cbnz	r1, 80080e2 <sbrk_aligned+0x12>
 80080dc:	f000 f96c 	bl	80083b8 <_sbrk_r>
 80080e0:	6030      	str	r0, [r6, #0]
 80080e2:	4621      	mov	r1, r4
 80080e4:	4628      	mov	r0, r5
 80080e6:	f000 f967 	bl	80083b8 <_sbrk_r>
 80080ea:	1c43      	adds	r3, r0, #1
 80080ec:	d00a      	beq.n	8008104 <sbrk_aligned+0x34>
 80080ee:	1cc4      	adds	r4, r0, #3
 80080f0:	f024 0403 	bic.w	r4, r4, #3
 80080f4:	42a0      	cmp	r0, r4
 80080f6:	d007      	beq.n	8008108 <sbrk_aligned+0x38>
 80080f8:	1a21      	subs	r1, r4, r0
 80080fa:	4628      	mov	r0, r5
 80080fc:	f000 f95c 	bl	80083b8 <_sbrk_r>
 8008100:	3001      	adds	r0, #1
 8008102:	d101      	bne.n	8008108 <sbrk_aligned+0x38>
 8008104:	f04f 34ff 	mov.w	r4, #4294967295
 8008108:	4620      	mov	r0, r4
 800810a:	bd70      	pop	{r4, r5, r6, pc}
 800810c:	20001ebc 	.word	0x20001ebc

08008110 <_malloc_r>:
 8008110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008114:	1ccd      	adds	r5, r1, #3
 8008116:	f025 0503 	bic.w	r5, r5, #3
 800811a:	3508      	adds	r5, #8
 800811c:	2d0c      	cmp	r5, #12
 800811e:	bf38      	it	cc
 8008120:	250c      	movcc	r5, #12
 8008122:	2d00      	cmp	r5, #0
 8008124:	4607      	mov	r7, r0
 8008126:	db01      	blt.n	800812c <_malloc_r+0x1c>
 8008128:	42a9      	cmp	r1, r5
 800812a:	d905      	bls.n	8008138 <_malloc_r+0x28>
 800812c:	230c      	movs	r3, #12
 800812e:	603b      	str	r3, [r7, #0]
 8008130:	2600      	movs	r6, #0
 8008132:	4630      	mov	r0, r6
 8008134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008138:	4e2e      	ldr	r6, [pc, #184]	; (80081f4 <_malloc_r+0xe4>)
 800813a:	f000 fbad 	bl	8008898 <__malloc_lock>
 800813e:	6833      	ldr	r3, [r6, #0]
 8008140:	461c      	mov	r4, r3
 8008142:	bb34      	cbnz	r4, 8008192 <_malloc_r+0x82>
 8008144:	4629      	mov	r1, r5
 8008146:	4638      	mov	r0, r7
 8008148:	f7ff ffc2 	bl	80080d0 <sbrk_aligned>
 800814c:	1c43      	adds	r3, r0, #1
 800814e:	4604      	mov	r4, r0
 8008150:	d14d      	bne.n	80081ee <_malloc_r+0xde>
 8008152:	6834      	ldr	r4, [r6, #0]
 8008154:	4626      	mov	r6, r4
 8008156:	2e00      	cmp	r6, #0
 8008158:	d140      	bne.n	80081dc <_malloc_r+0xcc>
 800815a:	6823      	ldr	r3, [r4, #0]
 800815c:	4631      	mov	r1, r6
 800815e:	4638      	mov	r0, r7
 8008160:	eb04 0803 	add.w	r8, r4, r3
 8008164:	f000 f928 	bl	80083b8 <_sbrk_r>
 8008168:	4580      	cmp	r8, r0
 800816a:	d13a      	bne.n	80081e2 <_malloc_r+0xd2>
 800816c:	6821      	ldr	r1, [r4, #0]
 800816e:	3503      	adds	r5, #3
 8008170:	1a6d      	subs	r5, r5, r1
 8008172:	f025 0503 	bic.w	r5, r5, #3
 8008176:	3508      	adds	r5, #8
 8008178:	2d0c      	cmp	r5, #12
 800817a:	bf38      	it	cc
 800817c:	250c      	movcc	r5, #12
 800817e:	4629      	mov	r1, r5
 8008180:	4638      	mov	r0, r7
 8008182:	f7ff ffa5 	bl	80080d0 <sbrk_aligned>
 8008186:	3001      	adds	r0, #1
 8008188:	d02b      	beq.n	80081e2 <_malloc_r+0xd2>
 800818a:	6823      	ldr	r3, [r4, #0]
 800818c:	442b      	add	r3, r5
 800818e:	6023      	str	r3, [r4, #0]
 8008190:	e00e      	b.n	80081b0 <_malloc_r+0xa0>
 8008192:	6822      	ldr	r2, [r4, #0]
 8008194:	1b52      	subs	r2, r2, r5
 8008196:	d41e      	bmi.n	80081d6 <_malloc_r+0xc6>
 8008198:	2a0b      	cmp	r2, #11
 800819a:	d916      	bls.n	80081ca <_malloc_r+0xba>
 800819c:	1961      	adds	r1, r4, r5
 800819e:	42a3      	cmp	r3, r4
 80081a0:	6025      	str	r5, [r4, #0]
 80081a2:	bf18      	it	ne
 80081a4:	6059      	strne	r1, [r3, #4]
 80081a6:	6863      	ldr	r3, [r4, #4]
 80081a8:	bf08      	it	eq
 80081aa:	6031      	streq	r1, [r6, #0]
 80081ac:	5162      	str	r2, [r4, r5]
 80081ae:	604b      	str	r3, [r1, #4]
 80081b0:	4638      	mov	r0, r7
 80081b2:	f104 060b 	add.w	r6, r4, #11
 80081b6:	f000 fb75 	bl	80088a4 <__malloc_unlock>
 80081ba:	f026 0607 	bic.w	r6, r6, #7
 80081be:	1d23      	adds	r3, r4, #4
 80081c0:	1af2      	subs	r2, r6, r3
 80081c2:	d0b6      	beq.n	8008132 <_malloc_r+0x22>
 80081c4:	1b9b      	subs	r3, r3, r6
 80081c6:	50a3      	str	r3, [r4, r2]
 80081c8:	e7b3      	b.n	8008132 <_malloc_r+0x22>
 80081ca:	6862      	ldr	r2, [r4, #4]
 80081cc:	42a3      	cmp	r3, r4
 80081ce:	bf0c      	ite	eq
 80081d0:	6032      	streq	r2, [r6, #0]
 80081d2:	605a      	strne	r2, [r3, #4]
 80081d4:	e7ec      	b.n	80081b0 <_malloc_r+0xa0>
 80081d6:	4623      	mov	r3, r4
 80081d8:	6864      	ldr	r4, [r4, #4]
 80081da:	e7b2      	b.n	8008142 <_malloc_r+0x32>
 80081dc:	4634      	mov	r4, r6
 80081de:	6876      	ldr	r6, [r6, #4]
 80081e0:	e7b9      	b.n	8008156 <_malloc_r+0x46>
 80081e2:	230c      	movs	r3, #12
 80081e4:	603b      	str	r3, [r7, #0]
 80081e6:	4638      	mov	r0, r7
 80081e8:	f000 fb5c 	bl	80088a4 <__malloc_unlock>
 80081ec:	e7a1      	b.n	8008132 <_malloc_r+0x22>
 80081ee:	6025      	str	r5, [r4, #0]
 80081f0:	e7de      	b.n	80081b0 <_malloc_r+0xa0>
 80081f2:	bf00      	nop
 80081f4:	20001eb8 	.word	0x20001eb8

080081f8 <_puts_r>:
 80081f8:	b570      	push	{r4, r5, r6, lr}
 80081fa:	460e      	mov	r6, r1
 80081fc:	4605      	mov	r5, r0
 80081fe:	b118      	cbz	r0, 8008208 <_puts_r+0x10>
 8008200:	6983      	ldr	r3, [r0, #24]
 8008202:	b90b      	cbnz	r3, 8008208 <_puts_r+0x10>
 8008204:	f7ff fe88 	bl	8007f18 <__sinit>
 8008208:	69ab      	ldr	r3, [r5, #24]
 800820a:	68ac      	ldr	r4, [r5, #8]
 800820c:	b913      	cbnz	r3, 8008214 <_puts_r+0x1c>
 800820e:	4628      	mov	r0, r5
 8008210:	f7ff fe82 	bl	8007f18 <__sinit>
 8008214:	4b2c      	ldr	r3, [pc, #176]	; (80082c8 <_puts_r+0xd0>)
 8008216:	429c      	cmp	r4, r3
 8008218:	d120      	bne.n	800825c <_puts_r+0x64>
 800821a:	686c      	ldr	r4, [r5, #4]
 800821c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800821e:	07db      	lsls	r3, r3, #31
 8008220:	d405      	bmi.n	800822e <_puts_r+0x36>
 8008222:	89a3      	ldrh	r3, [r4, #12]
 8008224:	0598      	lsls	r0, r3, #22
 8008226:	d402      	bmi.n	800822e <_puts_r+0x36>
 8008228:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800822a:	f7ff ff38 	bl	800809e <__retarget_lock_acquire_recursive>
 800822e:	89a3      	ldrh	r3, [r4, #12]
 8008230:	0719      	lsls	r1, r3, #28
 8008232:	d51d      	bpl.n	8008270 <_puts_r+0x78>
 8008234:	6923      	ldr	r3, [r4, #16]
 8008236:	b1db      	cbz	r3, 8008270 <_puts_r+0x78>
 8008238:	3e01      	subs	r6, #1
 800823a:	68a3      	ldr	r3, [r4, #8]
 800823c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008240:	3b01      	subs	r3, #1
 8008242:	60a3      	str	r3, [r4, #8]
 8008244:	bb39      	cbnz	r1, 8008296 <_puts_r+0x9e>
 8008246:	2b00      	cmp	r3, #0
 8008248:	da38      	bge.n	80082bc <_puts_r+0xc4>
 800824a:	4622      	mov	r2, r4
 800824c:	210a      	movs	r1, #10
 800824e:	4628      	mov	r0, r5
 8008250:	f000 f906 	bl	8008460 <__swbuf_r>
 8008254:	3001      	adds	r0, #1
 8008256:	d011      	beq.n	800827c <_puts_r+0x84>
 8008258:	250a      	movs	r5, #10
 800825a:	e011      	b.n	8008280 <_puts_r+0x88>
 800825c:	4b1b      	ldr	r3, [pc, #108]	; (80082cc <_puts_r+0xd4>)
 800825e:	429c      	cmp	r4, r3
 8008260:	d101      	bne.n	8008266 <_puts_r+0x6e>
 8008262:	68ac      	ldr	r4, [r5, #8]
 8008264:	e7da      	b.n	800821c <_puts_r+0x24>
 8008266:	4b1a      	ldr	r3, [pc, #104]	; (80082d0 <_puts_r+0xd8>)
 8008268:	429c      	cmp	r4, r3
 800826a:	bf08      	it	eq
 800826c:	68ec      	ldreq	r4, [r5, #12]
 800826e:	e7d5      	b.n	800821c <_puts_r+0x24>
 8008270:	4621      	mov	r1, r4
 8008272:	4628      	mov	r0, r5
 8008274:	f000 f958 	bl	8008528 <__swsetup_r>
 8008278:	2800      	cmp	r0, #0
 800827a:	d0dd      	beq.n	8008238 <_puts_r+0x40>
 800827c:	f04f 35ff 	mov.w	r5, #4294967295
 8008280:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008282:	07da      	lsls	r2, r3, #31
 8008284:	d405      	bmi.n	8008292 <_puts_r+0x9a>
 8008286:	89a3      	ldrh	r3, [r4, #12]
 8008288:	059b      	lsls	r3, r3, #22
 800828a:	d402      	bmi.n	8008292 <_puts_r+0x9a>
 800828c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800828e:	f7ff ff07 	bl	80080a0 <__retarget_lock_release_recursive>
 8008292:	4628      	mov	r0, r5
 8008294:	bd70      	pop	{r4, r5, r6, pc}
 8008296:	2b00      	cmp	r3, #0
 8008298:	da04      	bge.n	80082a4 <_puts_r+0xac>
 800829a:	69a2      	ldr	r2, [r4, #24]
 800829c:	429a      	cmp	r2, r3
 800829e:	dc06      	bgt.n	80082ae <_puts_r+0xb6>
 80082a0:	290a      	cmp	r1, #10
 80082a2:	d004      	beq.n	80082ae <_puts_r+0xb6>
 80082a4:	6823      	ldr	r3, [r4, #0]
 80082a6:	1c5a      	adds	r2, r3, #1
 80082a8:	6022      	str	r2, [r4, #0]
 80082aa:	7019      	strb	r1, [r3, #0]
 80082ac:	e7c5      	b.n	800823a <_puts_r+0x42>
 80082ae:	4622      	mov	r2, r4
 80082b0:	4628      	mov	r0, r5
 80082b2:	f000 f8d5 	bl	8008460 <__swbuf_r>
 80082b6:	3001      	adds	r0, #1
 80082b8:	d1bf      	bne.n	800823a <_puts_r+0x42>
 80082ba:	e7df      	b.n	800827c <_puts_r+0x84>
 80082bc:	6823      	ldr	r3, [r4, #0]
 80082be:	250a      	movs	r5, #10
 80082c0:	1c5a      	adds	r2, r3, #1
 80082c2:	6022      	str	r2, [r4, #0]
 80082c4:	701d      	strb	r5, [r3, #0]
 80082c6:	e7db      	b.n	8008280 <_puts_r+0x88>
 80082c8:	08008ba8 	.word	0x08008ba8
 80082cc:	08008bc8 	.word	0x08008bc8
 80082d0:	08008b88 	.word	0x08008b88

080082d4 <puts>:
 80082d4:	4b02      	ldr	r3, [pc, #8]	; (80082e0 <puts+0xc>)
 80082d6:	4601      	mov	r1, r0
 80082d8:	6818      	ldr	r0, [r3, #0]
 80082da:	f7ff bf8d 	b.w	80081f8 <_puts_r>
 80082de:	bf00      	nop
 80082e0:	20000014 	.word	0x20000014

080082e4 <cleanup_glue>:
 80082e4:	b538      	push	{r3, r4, r5, lr}
 80082e6:	460c      	mov	r4, r1
 80082e8:	6809      	ldr	r1, [r1, #0]
 80082ea:	4605      	mov	r5, r0
 80082ec:	b109      	cbz	r1, 80082f2 <cleanup_glue+0xe>
 80082ee:	f7ff fff9 	bl	80082e4 <cleanup_glue>
 80082f2:	4621      	mov	r1, r4
 80082f4:	4628      	mov	r0, r5
 80082f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80082fa:	f000 bad9 	b.w	80088b0 <_free_r>
	...

08008300 <_reclaim_reent>:
 8008300:	4b2c      	ldr	r3, [pc, #176]	; (80083b4 <_reclaim_reent+0xb4>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	4283      	cmp	r3, r0
 8008306:	b570      	push	{r4, r5, r6, lr}
 8008308:	4604      	mov	r4, r0
 800830a:	d051      	beq.n	80083b0 <_reclaim_reent+0xb0>
 800830c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800830e:	b143      	cbz	r3, 8008322 <_reclaim_reent+0x22>
 8008310:	68db      	ldr	r3, [r3, #12]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d14a      	bne.n	80083ac <_reclaim_reent+0xac>
 8008316:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008318:	6819      	ldr	r1, [r3, #0]
 800831a:	b111      	cbz	r1, 8008322 <_reclaim_reent+0x22>
 800831c:	4620      	mov	r0, r4
 800831e:	f000 fac7 	bl	80088b0 <_free_r>
 8008322:	6961      	ldr	r1, [r4, #20]
 8008324:	b111      	cbz	r1, 800832c <_reclaim_reent+0x2c>
 8008326:	4620      	mov	r0, r4
 8008328:	f000 fac2 	bl	80088b0 <_free_r>
 800832c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800832e:	b111      	cbz	r1, 8008336 <_reclaim_reent+0x36>
 8008330:	4620      	mov	r0, r4
 8008332:	f000 fabd 	bl	80088b0 <_free_r>
 8008336:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008338:	b111      	cbz	r1, 8008340 <_reclaim_reent+0x40>
 800833a:	4620      	mov	r0, r4
 800833c:	f000 fab8 	bl	80088b0 <_free_r>
 8008340:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008342:	b111      	cbz	r1, 800834a <_reclaim_reent+0x4a>
 8008344:	4620      	mov	r0, r4
 8008346:	f000 fab3 	bl	80088b0 <_free_r>
 800834a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800834c:	b111      	cbz	r1, 8008354 <_reclaim_reent+0x54>
 800834e:	4620      	mov	r0, r4
 8008350:	f000 faae 	bl	80088b0 <_free_r>
 8008354:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008356:	b111      	cbz	r1, 800835e <_reclaim_reent+0x5e>
 8008358:	4620      	mov	r0, r4
 800835a:	f000 faa9 	bl	80088b0 <_free_r>
 800835e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008360:	b111      	cbz	r1, 8008368 <_reclaim_reent+0x68>
 8008362:	4620      	mov	r0, r4
 8008364:	f000 faa4 	bl	80088b0 <_free_r>
 8008368:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800836a:	b111      	cbz	r1, 8008372 <_reclaim_reent+0x72>
 800836c:	4620      	mov	r0, r4
 800836e:	f000 fa9f 	bl	80088b0 <_free_r>
 8008372:	69a3      	ldr	r3, [r4, #24]
 8008374:	b1e3      	cbz	r3, 80083b0 <_reclaim_reent+0xb0>
 8008376:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008378:	4620      	mov	r0, r4
 800837a:	4798      	blx	r3
 800837c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800837e:	b1b9      	cbz	r1, 80083b0 <_reclaim_reent+0xb0>
 8008380:	4620      	mov	r0, r4
 8008382:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008386:	f7ff bfad 	b.w	80082e4 <cleanup_glue>
 800838a:	5949      	ldr	r1, [r1, r5]
 800838c:	b941      	cbnz	r1, 80083a0 <_reclaim_reent+0xa0>
 800838e:	3504      	adds	r5, #4
 8008390:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008392:	2d80      	cmp	r5, #128	; 0x80
 8008394:	68d9      	ldr	r1, [r3, #12]
 8008396:	d1f8      	bne.n	800838a <_reclaim_reent+0x8a>
 8008398:	4620      	mov	r0, r4
 800839a:	f000 fa89 	bl	80088b0 <_free_r>
 800839e:	e7ba      	b.n	8008316 <_reclaim_reent+0x16>
 80083a0:	680e      	ldr	r6, [r1, #0]
 80083a2:	4620      	mov	r0, r4
 80083a4:	f000 fa84 	bl	80088b0 <_free_r>
 80083a8:	4631      	mov	r1, r6
 80083aa:	e7ef      	b.n	800838c <_reclaim_reent+0x8c>
 80083ac:	2500      	movs	r5, #0
 80083ae:	e7ef      	b.n	8008390 <_reclaim_reent+0x90>
 80083b0:	bd70      	pop	{r4, r5, r6, pc}
 80083b2:	bf00      	nop
 80083b4:	20000014 	.word	0x20000014

080083b8 <_sbrk_r>:
 80083b8:	b538      	push	{r3, r4, r5, lr}
 80083ba:	4d06      	ldr	r5, [pc, #24]	; (80083d4 <_sbrk_r+0x1c>)
 80083bc:	2300      	movs	r3, #0
 80083be:	4604      	mov	r4, r0
 80083c0:	4608      	mov	r0, r1
 80083c2:	602b      	str	r3, [r5, #0]
 80083c4:	f7f8 fd48 	bl	8000e58 <_sbrk>
 80083c8:	1c43      	adds	r3, r0, #1
 80083ca:	d102      	bne.n	80083d2 <_sbrk_r+0x1a>
 80083cc:	682b      	ldr	r3, [r5, #0]
 80083ce:	b103      	cbz	r3, 80083d2 <_sbrk_r+0x1a>
 80083d0:	6023      	str	r3, [r4, #0]
 80083d2:	bd38      	pop	{r3, r4, r5, pc}
 80083d4:	20001ec0 	.word	0x20001ec0

080083d8 <__sread>:
 80083d8:	b510      	push	{r4, lr}
 80083da:	460c      	mov	r4, r1
 80083dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083e0:	f000 fab2 	bl	8008948 <_read_r>
 80083e4:	2800      	cmp	r0, #0
 80083e6:	bfab      	itete	ge
 80083e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80083ea:	89a3      	ldrhlt	r3, [r4, #12]
 80083ec:	181b      	addge	r3, r3, r0
 80083ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80083f2:	bfac      	ite	ge
 80083f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80083f6:	81a3      	strhlt	r3, [r4, #12]
 80083f8:	bd10      	pop	{r4, pc}

080083fa <__swrite>:
 80083fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083fe:	461f      	mov	r7, r3
 8008400:	898b      	ldrh	r3, [r1, #12]
 8008402:	05db      	lsls	r3, r3, #23
 8008404:	4605      	mov	r5, r0
 8008406:	460c      	mov	r4, r1
 8008408:	4616      	mov	r6, r2
 800840a:	d505      	bpl.n	8008418 <__swrite+0x1e>
 800840c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008410:	2302      	movs	r3, #2
 8008412:	2200      	movs	r2, #0
 8008414:	f000 f9c8 	bl	80087a8 <_lseek_r>
 8008418:	89a3      	ldrh	r3, [r4, #12]
 800841a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800841e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008422:	81a3      	strh	r3, [r4, #12]
 8008424:	4632      	mov	r2, r6
 8008426:	463b      	mov	r3, r7
 8008428:	4628      	mov	r0, r5
 800842a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800842e:	f000 b869 	b.w	8008504 <_write_r>

08008432 <__sseek>:
 8008432:	b510      	push	{r4, lr}
 8008434:	460c      	mov	r4, r1
 8008436:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800843a:	f000 f9b5 	bl	80087a8 <_lseek_r>
 800843e:	1c43      	adds	r3, r0, #1
 8008440:	89a3      	ldrh	r3, [r4, #12]
 8008442:	bf15      	itete	ne
 8008444:	6560      	strne	r0, [r4, #84]	; 0x54
 8008446:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800844a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800844e:	81a3      	strheq	r3, [r4, #12]
 8008450:	bf18      	it	ne
 8008452:	81a3      	strhne	r3, [r4, #12]
 8008454:	bd10      	pop	{r4, pc}

08008456 <__sclose>:
 8008456:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800845a:	f000 b8d3 	b.w	8008604 <_close_r>
	...

08008460 <__swbuf_r>:
 8008460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008462:	460e      	mov	r6, r1
 8008464:	4614      	mov	r4, r2
 8008466:	4605      	mov	r5, r0
 8008468:	b118      	cbz	r0, 8008472 <__swbuf_r+0x12>
 800846a:	6983      	ldr	r3, [r0, #24]
 800846c:	b90b      	cbnz	r3, 8008472 <__swbuf_r+0x12>
 800846e:	f7ff fd53 	bl	8007f18 <__sinit>
 8008472:	4b21      	ldr	r3, [pc, #132]	; (80084f8 <__swbuf_r+0x98>)
 8008474:	429c      	cmp	r4, r3
 8008476:	d12b      	bne.n	80084d0 <__swbuf_r+0x70>
 8008478:	686c      	ldr	r4, [r5, #4]
 800847a:	69a3      	ldr	r3, [r4, #24]
 800847c:	60a3      	str	r3, [r4, #8]
 800847e:	89a3      	ldrh	r3, [r4, #12]
 8008480:	071a      	lsls	r2, r3, #28
 8008482:	d52f      	bpl.n	80084e4 <__swbuf_r+0x84>
 8008484:	6923      	ldr	r3, [r4, #16]
 8008486:	b36b      	cbz	r3, 80084e4 <__swbuf_r+0x84>
 8008488:	6923      	ldr	r3, [r4, #16]
 800848a:	6820      	ldr	r0, [r4, #0]
 800848c:	1ac0      	subs	r0, r0, r3
 800848e:	6963      	ldr	r3, [r4, #20]
 8008490:	b2f6      	uxtb	r6, r6
 8008492:	4283      	cmp	r3, r0
 8008494:	4637      	mov	r7, r6
 8008496:	dc04      	bgt.n	80084a2 <__swbuf_r+0x42>
 8008498:	4621      	mov	r1, r4
 800849a:	4628      	mov	r0, r5
 800849c:	f000 f948 	bl	8008730 <_fflush_r>
 80084a0:	bb30      	cbnz	r0, 80084f0 <__swbuf_r+0x90>
 80084a2:	68a3      	ldr	r3, [r4, #8]
 80084a4:	3b01      	subs	r3, #1
 80084a6:	60a3      	str	r3, [r4, #8]
 80084a8:	6823      	ldr	r3, [r4, #0]
 80084aa:	1c5a      	adds	r2, r3, #1
 80084ac:	6022      	str	r2, [r4, #0]
 80084ae:	701e      	strb	r6, [r3, #0]
 80084b0:	6963      	ldr	r3, [r4, #20]
 80084b2:	3001      	adds	r0, #1
 80084b4:	4283      	cmp	r3, r0
 80084b6:	d004      	beq.n	80084c2 <__swbuf_r+0x62>
 80084b8:	89a3      	ldrh	r3, [r4, #12]
 80084ba:	07db      	lsls	r3, r3, #31
 80084bc:	d506      	bpl.n	80084cc <__swbuf_r+0x6c>
 80084be:	2e0a      	cmp	r6, #10
 80084c0:	d104      	bne.n	80084cc <__swbuf_r+0x6c>
 80084c2:	4621      	mov	r1, r4
 80084c4:	4628      	mov	r0, r5
 80084c6:	f000 f933 	bl	8008730 <_fflush_r>
 80084ca:	b988      	cbnz	r0, 80084f0 <__swbuf_r+0x90>
 80084cc:	4638      	mov	r0, r7
 80084ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80084d0:	4b0a      	ldr	r3, [pc, #40]	; (80084fc <__swbuf_r+0x9c>)
 80084d2:	429c      	cmp	r4, r3
 80084d4:	d101      	bne.n	80084da <__swbuf_r+0x7a>
 80084d6:	68ac      	ldr	r4, [r5, #8]
 80084d8:	e7cf      	b.n	800847a <__swbuf_r+0x1a>
 80084da:	4b09      	ldr	r3, [pc, #36]	; (8008500 <__swbuf_r+0xa0>)
 80084dc:	429c      	cmp	r4, r3
 80084de:	bf08      	it	eq
 80084e0:	68ec      	ldreq	r4, [r5, #12]
 80084e2:	e7ca      	b.n	800847a <__swbuf_r+0x1a>
 80084e4:	4621      	mov	r1, r4
 80084e6:	4628      	mov	r0, r5
 80084e8:	f000 f81e 	bl	8008528 <__swsetup_r>
 80084ec:	2800      	cmp	r0, #0
 80084ee:	d0cb      	beq.n	8008488 <__swbuf_r+0x28>
 80084f0:	f04f 37ff 	mov.w	r7, #4294967295
 80084f4:	e7ea      	b.n	80084cc <__swbuf_r+0x6c>
 80084f6:	bf00      	nop
 80084f8:	08008ba8 	.word	0x08008ba8
 80084fc:	08008bc8 	.word	0x08008bc8
 8008500:	08008b88 	.word	0x08008b88

08008504 <_write_r>:
 8008504:	b538      	push	{r3, r4, r5, lr}
 8008506:	4d07      	ldr	r5, [pc, #28]	; (8008524 <_write_r+0x20>)
 8008508:	4604      	mov	r4, r0
 800850a:	4608      	mov	r0, r1
 800850c:	4611      	mov	r1, r2
 800850e:	2200      	movs	r2, #0
 8008510:	602a      	str	r2, [r5, #0]
 8008512:	461a      	mov	r2, r3
 8008514:	f7f8 fc4f 	bl	8000db6 <_write>
 8008518:	1c43      	adds	r3, r0, #1
 800851a:	d102      	bne.n	8008522 <_write_r+0x1e>
 800851c:	682b      	ldr	r3, [r5, #0]
 800851e:	b103      	cbz	r3, 8008522 <_write_r+0x1e>
 8008520:	6023      	str	r3, [r4, #0]
 8008522:	bd38      	pop	{r3, r4, r5, pc}
 8008524:	20001ec0 	.word	0x20001ec0

08008528 <__swsetup_r>:
 8008528:	4b32      	ldr	r3, [pc, #200]	; (80085f4 <__swsetup_r+0xcc>)
 800852a:	b570      	push	{r4, r5, r6, lr}
 800852c:	681d      	ldr	r5, [r3, #0]
 800852e:	4606      	mov	r6, r0
 8008530:	460c      	mov	r4, r1
 8008532:	b125      	cbz	r5, 800853e <__swsetup_r+0x16>
 8008534:	69ab      	ldr	r3, [r5, #24]
 8008536:	b913      	cbnz	r3, 800853e <__swsetup_r+0x16>
 8008538:	4628      	mov	r0, r5
 800853a:	f7ff fced 	bl	8007f18 <__sinit>
 800853e:	4b2e      	ldr	r3, [pc, #184]	; (80085f8 <__swsetup_r+0xd0>)
 8008540:	429c      	cmp	r4, r3
 8008542:	d10f      	bne.n	8008564 <__swsetup_r+0x3c>
 8008544:	686c      	ldr	r4, [r5, #4]
 8008546:	89a3      	ldrh	r3, [r4, #12]
 8008548:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800854c:	0719      	lsls	r1, r3, #28
 800854e:	d42c      	bmi.n	80085aa <__swsetup_r+0x82>
 8008550:	06dd      	lsls	r5, r3, #27
 8008552:	d411      	bmi.n	8008578 <__swsetup_r+0x50>
 8008554:	2309      	movs	r3, #9
 8008556:	6033      	str	r3, [r6, #0]
 8008558:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800855c:	81a3      	strh	r3, [r4, #12]
 800855e:	f04f 30ff 	mov.w	r0, #4294967295
 8008562:	e03e      	b.n	80085e2 <__swsetup_r+0xba>
 8008564:	4b25      	ldr	r3, [pc, #148]	; (80085fc <__swsetup_r+0xd4>)
 8008566:	429c      	cmp	r4, r3
 8008568:	d101      	bne.n	800856e <__swsetup_r+0x46>
 800856a:	68ac      	ldr	r4, [r5, #8]
 800856c:	e7eb      	b.n	8008546 <__swsetup_r+0x1e>
 800856e:	4b24      	ldr	r3, [pc, #144]	; (8008600 <__swsetup_r+0xd8>)
 8008570:	429c      	cmp	r4, r3
 8008572:	bf08      	it	eq
 8008574:	68ec      	ldreq	r4, [r5, #12]
 8008576:	e7e6      	b.n	8008546 <__swsetup_r+0x1e>
 8008578:	0758      	lsls	r0, r3, #29
 800857a:	d512      	bpl.n	80085a2 <__swsetup_r+0x7a>
 800857c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800857e:	b141      	cbz	r1, 8008592 <__swsetup_r+0x6a>
 8008580:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008584:	4299      	cmp	r1, r3
 8008586:	d002      	beq.n	800858e <__swsetup_r+0x66>
 8008588:	4630      	mov	r0, r6
 800858a:	f000 f991 	bl	80088b0 <_free_r>
 800858e:	2300      	movs	r3, #0
 8008590:	6363      	str	r3, [r4, #52]	; 0x34
 8008592:	89a3      	ldrh	r3, [r4, #12]
 8008594:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008598:	81a3      	strh	r3, [r4, #12]
 800859a:	2300      	movs	r3, #0
 800859c:	6063      	str	r3, [r4, #4]
 800859e:	6923      	ldr	r3, [r4, #16]
 80085a0:	6023      	str	r3, [r4, #0]
 80085a2:	89a3      	ldrh	r3, [r4, #12]
 80085a4:	f043 0308 	orr.w	r3, r3, #8
 80085a8:	81a3      	strh	r3, [r4, #12]
 80085aa:	6923      	ldr	r3, [r4, #16]
 80085ac:	b94b      	cbnz	r3, 80085c2 <__swsetup_r+0x9a>
 80085ae:	89a3      	ldrh	r3, [r4, #12]
 80085b0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80085b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80085b8:	d003      	beq.n	80085c2 <__swsetup_r+0x9a>
 80085ba:	4621      	mov	r1, r4
 80085bc:	4630      	mov	r0, r6
 80085be:	f000 f92b 	bl	8008818 <__smakebuf_r>
 80085c2:	89a0      	ldrh	r0, [r4, #12]
 80085c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80085c8:	f010 0301 	ands.w	r3, r0, #1
 80085cc:	d00a      	beq.n	80085e4 <__swsetup_r+0xbc>
 80085ce:	2300      	movs	r3, #0
 80085d0:	60a3      	str	r3, [r4, #8]
 80085d2:	6963      	ldr	r3, [r4, #20]
 80085d4:	425b      	negs	r3, r3
 80085d6:	61a3      	str	r3, [r4, #24]
 80085d8:	6923      	ldr	r3, [r4, #16]
 80085da:	b943      	cbnz	r3, 80085ee <__swsetup_r+0xc6>
 80085dc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80085e0:	d1ba      	bne.n	8008558 <__swsetup_r+0x30>
 80085e2:	bd70      	pop	{r4, r5, r6, pc}
 80085e4:	0781      	lsls	r1, r0, #30
 80085e6:	bf58      	it	pl
 80085e8:	6963      	ldrpl	r3, [r4, #20]
 80085ea:	60a3      	str	r3, [r4, #8]
 80085ec:	e7f4      	b.n	80085d8 <__swsetup_r+0xb0>
 80085ee:	2000      	movs	r0, #0
 80085f0:	e7f7      	b.n	80085e2 <__swsetup_r+0xba>
 80085f2:	bf00      	nop
 80085f4:	20000014 	.word	0x20000014
 80085f8:	08008ba8 	.word	0x08008ba8
 80085fc:	08008bc8 	.word	0x08008bc8
 8008600:	08008b88 	.word	0x08008b88

08008604 <_close_r>:
 8008604:	b538      	push	{r3, r4, r5, lr}
 8008606:	4d06      	ldr	r5, [pc, #24]	; (8008620 <_close_r+0x1c>)
 8008608:	2300      	movs	r3, #0
 800860a:	4604      	mov	r4, r0
 800860c:	4608      	mov	r0, r1
 800860e:	602b      	str	r3, [r5, #0]
 8008610:	f7f8 fbed 	bl	8000dee <_close>
 8008614:	1c43      	adds	r3, r0, #1
 8008616:	d102      	bne.n	800861e <_close_r+0x1a>
 8008618:	682b      	ldr	r3, [r5, #0]
 800861a:	b103      	cbz	r3, 800861e <_close_r+0x1a>
 800861c:	6023      	str	r3, [r4, #0]
 800861e:	bd38      	pop	{r3, r4, r5, pc}
 8008620:	20001ec0 	.word	0x20001ec0

08008624 <__sflush_r>:
 8008624:	898a      	ldrh	r2, [r1, #12]
 8008626:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800862a:	4605      	mov	r5, r0
 800862c:	0710      	lsls	r0, r2, #28
 800862e:	460c      	mov	r4, r1
 8008630:	d458      	bmi.n	80086e4 <__sflush_r+0xc0>
 8008632:	684b      	ldr	r3, [r1, #4]
 8008634:	2b00      	cmp	r3, #0
 8008636:	dc05      	bgt.n	8008644 <__sflush_r+0x20>
 8008638:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800863a:	2b00      	cmp	r3, #0
 800863c:	dc02      	bgt.n	8008644 <__sflush_r+0x20>
 800863e:	2000      	movs	r0, #0
 8008640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008644:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008646:	2e00      	cmp	r6, #0
 8008648:	d0f9      	beq.n	800863e <__sflush_r+0x1a>
 800864a:	2300      	movs	r3, #0
 800864c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008650:	682f      	ldr	r7, [r5, #0]
 8008652:	602b      	str	r3, [r5, #0]
 8008654:	d032      	beq.n	80086bc <__sflush_r+0x98>
 8008656:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008658:	89a3      	ldrh	r3, [r4, #12]
 800865a:	075a      	lsls	r2, r3, #29
 800865c:	d505      	bpl.n	800866a <__sflush_r+0x46>
 800865e:	6863      	ldr	r3, [r4, #4]
 8008660:	1ac0      	subs	r0, r0, r3
 8008662:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008664:	b10b      	cbz	r3, 800866a <__sflush_r+0x46>
 8008666:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008668:	1ac0      	subs	r0, r0, r3
 800866a:	2300      	movs	r3, #0
 800866c:	4602      	mov	r2, r0
 800866e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008670:	6a21      	ldr	r1, [r4, #32]
 8008672:	4628      	mov	r0, r5
 8008674:	47b0      	blx	r6
 8008676:	1c43      	adds	r3, r0, #1
 8008678:	89a3      	ldrh	r3, [r4, #12]
 800867a:	d106      	bne.n	800868a <__sflush_r+0x66>
 800867c:	6829      	ldr	r1, [r5, #0]
 800867e:	291d      	cmp	r1, #29
 8008680:	d82c      	bhi.n	80086dc <__sflush_r+0xb8>
 8008682:	4a2a      	ldr	r2, [pc, #168]	; (800872c <__sflush_r+0x108>)
 8008684:	40ca      	lsrs	r2, r1
 8008686:	07d6      	lsls	r6, r2, #31
 8008688:	d528      	bpl.n	80086dc <__sflush_r+0xb8>
 800868a:	2200      	movs	r2, #0
 800868c:	6062      	str	r2, [r4, #4]
 800868e:	04d9      	lsls	r1, r3, #19
 8008690:	6922      	ldr	r2, [r4, #16]
 8008692:	6022      	str	r2, [r4, #0]
 8008694:	d504      	bpl.n	80086a0 <__sflush_r+0x7c>
 8008696:	1c42      	adds	r2, r0, #1
 8008698:	d101      	bne.n	800869e <__sflush_r+0x7a>
 800869a:	682b      	ldr	r3, [r5, #0]
 800869c:	b903      	cbnz	r3, 80086a0 <__sflush_r+0x7c>
 800869e:	6560      	str	r0, [r4, #84]	; 0x54
 80086a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80086a2:	602f      	str	r7, [r5, #0]
 80086a4:	2900      	cmp	r1, #0
 80086a6:	d0ca      	beq.n	800863e <__sflush_r+0x1a>
 80086a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80086ac:	4299      	cmp	r1, r3
 80086ae:	d002      	beq.n	80086b6 <__sflush_r+0x92>
 80086b0:	4628      	mov	r0, r5
 80086b2:	f000 f8fd 	bl	80088b0 <_free_r>
 80086b6:	2000      	movs	r0, #0
 80086b8:	6360      	str	r0, [r4, #52]	; 0x34
 80086ba:	e7c1      	b.n	8008640 <__sflush_r+0x1c>
 80086bc:	6a21      	ldr	r1, [r4, #32]
 80086be:	2301      	movs	r3, #1
 80086c0:	4628      	mov	r0, r5
 80086c2:	47b0      	blx	r6
 80086c4:	1c41      	adds	r1, r0, #1
 80086c6:	d1c7      	bne.n	8008658 <__sflush_r+0x34>
 80086c8:	682b      	ldr	r3, [r5, #0]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d0c4      	beq.n	8008658 <__sflush_r+0x34>
 80086ce:	2b1d      	cmp	r3, #29
 80086d0:	d001      	beq.n	80086d6 <__sflush_r+0xb2>
 80086d2:	2b16      	cmp	r3, #22
 80086d4:	d101      	bne.n	80086da <__sflush_r+0xb6>
 80086d6:	602f      	str	r7, [r5, #0]
 80086d8:	e7b1      	b.n	800863e <__sflush_r+0x1a>
 80086da:	89a3      	ldrh	r3, [r4, #12]
 80086dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80086e0:	81a3      	strh	r3, [r4, #12]
 80086e2:	e7ad      	b.n	8008640 <__sflush_r+0x1c>
 80086e4:	690f      	ldr	r7, [r1, #16]
 80086e6:	2f00      	cmp	r7, #0
 80086e8:	d0a9      	beq.n	800863e <__sflush_r+0x1a>
 80086ea:	0793      	lsls	r3, r2, #30
 80086ec:	680e      	ldr	r6, [r1, #0]
 80086ee:	bf08      	it	eq
 80086f0:	694b      	ldreq	r3, [r1, #20]
 80086f2:	600f      	str	r7, [r1, #0]
 80086f4:	bf18      	it	ne
 80086f6:	2300      	movne	r3, #0
 80086f8:	eba6 0807 	sub.w	r8, r6, r7
 80086fc:	608b      	str	r3, [r1, #8]
 80086fe:	f1b8 0f00 	cmp.w	r8, #0
 8008702:	dd9c      	ble.n	800863e <__sflush_r+0x1a>
 8008704:	6a21      	ldr	r1, [r4, #32]
 8008706:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008708:	4643      	mov	r3, r8
 800870a:	463a      	mov	r2, r7
 800870c:	4628      	mov	r0, r5
 800870e:	47b0      	blx	r6
 8008710:	2800      	cmp	r0, #0
 8008712:	dc06      	bgt.n	8008722 <__sflush_r+0xfe>
 8008714:	89a3      	ldrh	r3, [r4, #12]
 8008716:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800871a:	81a3      	strh	r3, [r4, #12]
 800871c:	f04f 30ff 	mov.w	r0, #4294967295
 8008720:	e78e      	b.n	8008640 <__sflush_r+0x1c>
 8008722:	4407      	add	r7, r0
 8008724:	eba8 0800 	sub.w	r8, r8, r0
 8008728:	e7e9      	b.n	80086fe <__sflush_r+0xda>
 800872a:	bf00      	nop
 800872c:	20400001 	.word	0x20400001

08008730 <_fflush_r>:
 8008730:	b538      	push	{r3, r4, r5, lr}
 8008732:	690b      	ldr	r3, [r1, #16]
 8008734:	4605      	mov	r5, r0
 8008736:	460c      	mov	r4, r1
 8008738:	b913      	cbnz	r3, 8008740 <_fflush_r+0x10>
 800873a:	2500      	movs	r5, #0
 800873c:	4628      	mov	r0, r5
 800873e:	bd38      	pop	{r3, r4, r5, pc}
 8008740:	b118      	cbz	r0, 800874a <_fflush_r+0x1a>
 8008742:	6983      	ldr	r3, [r0, #24]
 8008744:	b90b      	cbnz	r3, 800874a <_fflush_r+0x1a>
 8008746:	f7ff fbe7 	bl	8007f18 <__sinit>
 800874a:	4b14      	ldr	r3, [pc, #80]	; (800879c <_fflush_r+0x6c>)
 800874c:	429c      	cmp	r4, r3
 800874e:	d11b      	bne.n	8008788 <_fflush_r+0x58>
 8008750:	686c      	ldr	r4, [r5, #4]
 8008752:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d0ef      	beq.n	800873a <_fflush_r+0xa>
 800875a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800875c:	07d0      	lsls	r0, r2, #31
 800875e:	d404      	bmi.n	800876a <_fflush_r+0x3a>
 8008760:	0599      	lsls	r1, r3, #22
 8008762:	d402      	bmi.n	800876a <_fflush_r+0x3a>
 8008764:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008766:	f7ff fc9a 	bl	800809e <__retarget_lock_acquire_recursive>
 800876a:	4628      	mov	r0, r5
 800876c:	4621      	mov	r1, r4
 800876e:	f7ff ff59 	bl	8008624 <__sflush_r>
 8008772:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008774:	07da      	lsls	r2, r3, #31
 8008776:	4605      	mov	r5, r0
 8008778:	d4e0      	bmi.n	800873c <_fflush_r+0xc>
 800877a:	89a3      	ldrh	r3, [r4, #12]
 800877c:	059b      	lsls	r3, r3, #22
 800877e:	d4dd      	bmi.n	800873c <_fflush_r+0xc>
 8008780:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008782:	f7ff fc8d 	bl	80080a0 <__retarget_lock_release_recursive>
 8008786:	e7d9      	b.n	800873c <_fflush_r+0xc>
 8008788:	4b05      	ldr	r3, [pc, #20]	; (80087a0 <_fflush_r+0x70>)
 800878a:	429c      	cmp	r4, r3
 800878c:	d101      	bne.n	8008792 <_fflush_r+0x62>
 800878e:	68ac      	ldr	r4, [r5, #8]
 8008790:	e7df      	b.n	8008752 <_fflush_r+0x22>
 8008792:	4b04      	ldr	r3, [pc, #16]	; (80087a4 <_fflush_r+0x74>)
 8008794:	429c      	cmp	r4, r3
 8008796:	bf08      	it	eq
 8008798:	68ec      	ldreq	r4, [r5, #12]
 800879a:	e7da      	b.n	8008752 <_fflush_r+0x22>
 800879c:	08008ba8 	.word	0x08008ba8
 80087a0:	08008bc8 	.word	0x08008bc8
 80087a4:	08008b88 	.word	0x08008b88

080087a8 <_lseek_r>:
 80087a8:	b538      	push	{r3, r4, r5, lr}
 80087aa:	4d07      	ldr	r5, [pc, #28]	; (80087c8 <_lseek_r+0x20>)
 80087ac:	4604      	mov	r4, r0
 80087ae:	4608      	mov	r0, r1
 80087b0:	4611      	mov	r1, r2
 80087b2:	2200      	movs	r2, #0
 80087b4:	602a      	str	r2, [r5, #0]
 80087b6:	461a      	mov	r2, r3
 80087b8:	f7f8 fb40 	bl	8000e3c <_lseek>
 80087bc:	1c43      	adds	r3, r0, #1
 80087be:	d102      	bne.n	80087c6 <_lseek_r+0x1e>
 80087c0:	682b      	ldr	r3, [r5, #0]
 80087c2:	b103      	cbz	r3, 80087c6 <_lseek_r+0x1e>
 80087c4:	6023      	str	r3, [r4, #0]
 80087c6:	bd38      	pop	{r3, r4, r5, pc}
 80087c8:	20001ec0 	.word	0x20001ec0

080087cc <__swhatbuf_r>:
 80087cc:	b570      	push	{r4, r5, r6, lr}
 80087ce:	460e      	mov	r6, r1
 80087d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087d4:	2900      	cmp	r1, #0
 80087d6:	b096      	sub	sp, #88	; 0x58
 80087d8:	4614      	mov	r4, r2
 80087da:	461d      	mov	r5, r3
 80087dc:	da08      	bge.n	80087f0 <__swhatbuf_r+0x24>
 80087de:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80087e2:	2200      	movs	r2, #0
 80087e4:	602a      	str	r2, [r5, #0]
 80087e6:	061a      	lsls	r2, r3, #24
 80087e8:	d410      	bmi.n	800880c <__swhatbuf_r+0x40>
 80087ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80087ee:	e00e      	b.n	800880e <__swhatbuf_r+0x42>
 80087f0:	466a      	mov	r2, sp
 80087f2:	f000 f8bb 	bl	800896c <_fstat_r>
 80087f6:	2800      	cmp	r0, #0
 80087f8:	dbf1      	blt.n	80087de <__swhatbuf_r+0x12>
 80087fa:	9a01      	ldr	r2, [sp, #4]
 80087fc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008800:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008804:	425a      	negs	r2, r3
 8008806:	415a      	adcs	r2, r3
 8008808:	602a      	str	r2, [r5, #0]
 800880a:	e7ee      	b.n	80087ea <__swhatbuf_r+0x1e>
 800880c:	2340      	movs	r3, #64	; 0x40
 800880e:	2000      	movs	r0, #0
 8008810:	6023      	str	r3, [r4, #0]
 8008812:	b016      	add	sp, #88	; 0x58
 8008814:	bd70      	pop	{r4, r5, r6, pc}
	...

08008818 <__smakebuf_r>:
 8008818:	898b      	ldrh	r3, [r1, #12]
 800881a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800881c:	079d      	lsls	r5, r3, #30
 800881e:	4606      	mov	r6, r0
 8008820:	460c      	mov	r4, r1
 8008822:	d507      	bpl.n	8008834 <__smakebuf_r+0x1c>
 8008824:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008828:	6023      	str	r3, [r4, #0]
 800882a:	6123      	str	r3, [r4, #16]
 800882c:	2301      	movs	r3, #1
 800882e:	6163      	str	r3, [r4, #20]
 8008830:	b002      	add	sp, #8
 8008832:	bd70      	pop	{r4, r5, r6, pc}
 8008834:	ab01      	add	r3, sp, #4
 8008836:	466a      	mov	r2, sp
 8008838:	f7ff ffc8 	bl	80087cc <__swhatbuf_r>
 800883c:	9900      	ldr	r1, [sp, #0]
 800883e:	4605      	mov	r5, r0
 8008840:	4630      	mov	r0, r6
 8008842:	f7ff fc65 	bl	8008110 <_malloc_r>
 8008846:	b948      	cbnz	r0, 800885c <__smakebuf_r+0x44>
 8008848:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800884c:	059a      	lsls	r2, r3, #22
 800884e:	d4ef      	bmi.n	8008830 <__smakebuf_r+0x18>
 8008850:	f023 0303 	bic.w	r3, r3, #3
 8008854:	f043 0302 	orr.w	r3, r3, #2
 8008858:	81a3      	strh	r3, [r4, #12]
 800885a:	e7e3      	b.n	8008824 <__smakebuf_r+0xc>
 800885c:	4b0d      	ldr	r3, [pc, #52]	; (8008894 <__smakebuf_r+0x7c>)
 800885e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008860:	89a3      	ldrh	r3, [r4, #12]
 8008862:	6020      	str	r0, [r4, #0]
 8008864:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008868:	81a3      	strh	r3, [r4, #12]
 800886a:	9b00      	ldr	r3, [sp, #0]
 800886c:	6163      	str	r3, [r4, #20]
 800886e:	9b01      	ldr	r3, [sp, #4]
 8008870:	6120      	str	r0, [r4, #16]
 8008872:	b15b      	cbz	r3, 800888c <__smakebuf_r+0x74>
 8008874:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008878:	4630      	mov	r0, r6
 800887a:	f000 f889 	bl	8008990 <_isatty_r>
 800887e:	b128      	cbz	r0, 800888c <__smakebuf_r+0x74>
 8008880:	89a3      	ldrh	r3, [r4, #12]
 8008882:	f023 0303 	bic.w	r3, r3, #3
 8008886:	f043 0301 	orr.w	r3, r3, #1
 800888a:	81a3      	strh	r3, [r4, #12]
 800888c:	89a0      	ldrh	r0, [r4, #12]
 800888e:	4305      	orrs	r5, r0
 8008890:	81a5      	strh	r5, [r4, #12]
 8008892:	e7cd      	b.n	8008830 <__smakebuf_r+0x18>
 8008894:	08007eb1 	.word	0x08007eb1

08008898 <__malloc_lock>:
 8008898:	4801      	ldr	r0, [pc, #4]	; (80088a0 <__malloc_lock+0x8>)
 800889a:	f7ff bc00 	b.w	800809e <__retarget_lock_acquire_recursive>
 800889e:	bf00      	nop
 80088a0:	20001eb4 	.word	0x20001eb4

080088a4 <__malloc_unlock>:
 80088a4:	4801      	ldr	r0, [pc, #4]	; (80088ac <__malloc_unlock+0x8>)
 80088a6:	f7ff bbfb 	b.w	80080a0 <__retarget_lock_release_recursive>
 80088aa:	bf00      	nop
 80088ac:	20001eb4 	.word	0x20001eb4

080088b0 <_free_r>:
 80088b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80088b2:	2900      	cmp	r1, #0
 80088b4:	d044      	beq.n	8008940 <_free_r+0x90>
 80088b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80088ba:	9001      	str	r0, [sp, #4]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	f1a1 0404 	sub.w	r4, r1, #4
 80088c2:	bfb8      	it	lt
 80088c4:	18e4      	addlt	r4, r4, r3
 80088c6:	f7ff ffe7 	bl	8008898 <__malloc_lock>
 80088ca:	4a1e      	ldr	r2, [pc, #120]	; (8008944 <_free_r+0x94>)
 80088cc:	9801      	ldr	r0, [sp, #4]
 80088ce:	6813      	ldr	r3, [r2, #0]
 80088d0:	b933      	cbnz	r3, 80088e0 <_free_r+0x30>
 80088d2:	6063      	str	r3, [r4, #4]
 80088d4:	6014      	str	r4, [r2, #0]
 80088d6:	b003      	add	sp, #12
 80088d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80088dc:	f7ff bfe2 	b.w	80088a4 <__malloc_unlock>
 80088e0:	42a3      	cmp	r3, r4
 80088e2:	d908      	bls.n	80088f6 <_free_r+0x46>
 80088e4:	6825      	ldr	r5, [r4, #0]
 80088e6:	1961      	adds	r1, r4, r5
 80088e8:	428b      	cmp	r3, r1
 80088ea:	bf01      	itttt	eq
 80088ec:	6819      	ldreq	r1, [r3, #0]
 80088ee:	685b      	ldreq	r3, [r3, #4]
 80088f0:	1949      	addeq	r1, r1, r5
 80088f2:	6021      	streq	r1, [r4, #0]
 80088f4:	e7ed      	b.n	80088d2 <_free_r+0x22>
 80088f6:	461a      	mov	r2, r3
 80088f8:	685b      	ldr	r3, [r3, #4]
 80088fa:	b10b      	cbz	r3, 8008900 <_free_r+0x50>
 80088fc:	42a3      	cmp	r3, r4
 80088fe:	d9fa      	bls.n	80088f6 <_free_r+0x46>
 8008900:	6811      	ldr	r1, [r2, #0]
 8008902:	1855      	adds	r5, r2, r1
 8008904:	42a5      	cmp	r5, r4
 8008906:	d10b      	bne.n	8008920 <_free_r+0x70>
 8008908:	6824      	ldr	r4, [r4, #0]
 800890a:	4421      	add	r1, r4
 800890c:	1854      	adds	r4, r2, r1
 800890e:	42a3      	cmp	r3, r4
 8008910:	6011      	str	r1, [r2, #0]
 8008912:	d1e0      	bne.n	80088d6 <_free_r+0x26>
 8008914:	681c      	ldr	r4, [r3, #0]
 8008916:	685b      	ldr	r3, [r3, #4]
 8008918:	6053      	str	r3, [r2, #4]
 800891a:	4421      	add	r1, r4
 800891c:	6011      	str	r1, [r2, #0]
 800891e:	e7da      	b.n	80088d6 <_free_r+0x26>
 8008920:	d902      	bls.n	8008928 <_free_r+0x78>
 8008922:	230c      	movs	r3, #12
 8008924:	6003      	str	r3, [r0, #0]
 8008926:	e7d6      	b.n	80088d6 <_free_r+0x26>
 8008928:	6825      	ldr	r5, [r4, #0]
 800892a:	1961      	adds	r1, r4, r5
 800892c:	428b      	cmp	r3, r1
 800892e:	bf04      	itt	eq
 8008930:	6819      	ldreq	r1, [r3, #0]
 8008932:	685b      	ldreq	r3, [r3, #4]
 8008934:	6063      	str	r3, [r4, #4]
 8008936:	bf04      	itt	eq
 8008938:	1949      	addeq	r1, r1, r5
 800893a:	6021      	streq	r1, [r4, #0]
 800893c:	6054      	str	r4, [r2, #4]
 800893e:	e7ca      	b.n	80088d6 <_free_r+0x26>
 8008940:	b003      	add	sp, #12
 8008942:	bd30      	pop	{r4, r5, pc}
 8008944:	20001eb8 	.word	0x20001eb8

08008948 <_read_r>:
 8008948:	b538      	push	{r3, r4, r5, lr}
 800894a:	4d07      	ldr	r5, [pc, #28]	; (8008968 <_read_r+0x20>)
 800894c:	4604      	mov	r4, r0
 800894e:	4608      	mov	r0, r1
 8008950:	4611      	mov	r1, r2
 8008952:	2200      	movs	r2, #0
 8008954:	602a      	str	r2, [r5, #0]
 8008956:	461a      	mov	r2, r3
 8008958:	f7f8 fa10 	bl	8000d7c <_read>
 800895c:	1c43      	adds	r3, r0, #1
 800895e:	d102      	bne.n	8008966 <_read_r+0x1e>
 8008960:	682b      	ldr	r3, [r5, #0]
 8008962:	b103      	cbz	r3, 8008966 <_read_r+0x1e>
 8008964:	6023      	str	r3, [r4, #0]
 8008966:	bd38      	pop	{r3, r4, r5, pc}
 8008968:	20001ec0 	.word	0x20001ec0

0800896c <_fstat_r>:
 800896c:	b538      	push	{r3, r4, r5, lr}
 800896e:	4d07      	ldr	r5, [pc, #28]	; (800898c <_fstat_r+0x20>)
 8008970:	2300      	movs	r3, #0
 8008972:	4604      	mov	r4, r0
 8008974:	4608      	mov	r0, r1
 8008976:	4611      	mov	r1, r2
 8008978:	602b      	str	r3, [r5, #0]
 800897a:	f7f8 fa44 	bl	8000e06 <_fstat>
 800897e:	1c43      	adds	r3, r0, #1
 8008980:	d102      	bne.n	8008988 <_fstat_r+0x1c>
 8008982:	682b      	ldr	r3, [r5, #0]
 8008984:	b103      	cbz	r3, 8008988 <_fstat_r+0x1c>
 8008986:	6023      	str	r3, [r4, #0]
 8008988:	bd38      	pop	{r3, r4, r5, pc}
 800898a:	bf00      	nop
 800898c:	20001ec0 	.word	0x20001ec0

08008990 <_isatty_r>:
 8008990:	b538      	push	{r3, r4, r5, lr}
 8008992:	4d06      	ldr	r5, [pc, #24]	; (80089ac <_isatty_r+0x1c>)
 8008994:	2300      	movs	r3, #0
 8008996:	4604      	mov	r4, r0
 8008998:	4608      	mov	r0, r1
 800899a:	602b      	str	r3, [r5, #0]
 800899c:	f7f8 fa43 	bl	8000e26 <_isatty>
 80089a0:	1c43      	adds	r3, r0, #1
 80089a2:	d102      	bne.n	80089aa <_isatty_r+0x1a>
 80089a4:	682b      	ldr	r3, [r5, #0]
 80089a6:	b103      	cbz	r3, 80089aa <_isatty_r+0x1a>
 80089a8:	6023      	str	r3, [r4, #0]
 80089aa:	bd38      	pop	{r3, r4, r5, pc}
 80089ac:	20001ec0 	.word	0x20001ec0

080089b0 <_init>:
 80089b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089b2:	bf00      	nop
 80089b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089b6:	bc08      	pop	{r3}
 80089b8:	469e      	mov	lr, r3
 80089ba:	4770      	bx	lr

080089bc <_fini>:
 80089bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089be:	bf00      	nop
 80089c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089c2:	bc08      	pop	{r3}
 80089c4:	469e      	mov	lr, r3
 80089c6:	4770      	bx	lr
