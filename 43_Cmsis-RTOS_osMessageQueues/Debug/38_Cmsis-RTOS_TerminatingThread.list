
38_Cmsis-RTOS_TerminatingThread.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007110  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000019c  08007250  08007250  00017250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080073ec  080073ec  000173ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080073f4  080073f4  000173f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080073f8  080073f8  000173f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  20000004  080073fc  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001e34  20000078  08007470  00020078  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20001eac  08007470  00021eac  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 10 .debug_info   000259f0  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004538  00000000  00000000  00045a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000021f0  00000000  00000000  00049fd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002078  00000000  00000000  0004c1c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00004ec7  00000000  00000000  0004e238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001fa75  00000000  00000000  000530ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000ee44c  00000000  00000000  00072b74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00160fc0  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000093cc  00000000  00000000  00161010  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000078 	.word	0x20000078
 800015c:	00000000 	.word	0x00000000
 8000160:	08007238 	.word	0x08007238

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000007c 	.word	0x2000007c
 800017c:	08007238 	.word	0x08007238

08000180 <__aeabi_uldivmod>:
 8000180:	b953      	cbnz	r3, 8000198 <__aeabi_uldivmod+0x18>
 8000182:	b94a      	cbnz	r2, 8000198 <__aeabi_uldivmod+0x18>
 8000184:	2900      	cmp	r1, #0
 8000186:	bf08      	it	eq
 8000188:	2800      	cmpeq	r0, #0
 800018a:	bf1c      	itt	ne
 800018c:	f04f 31ff 	movne.w	r1, #4294967295
 8000190:	f04f 30ff 	movne.w	r0, #4294967295
 8000194:	f000 b974 	b.w	8000480 <__aeabi_idiv0>
 8000198:	f1ad 0c08 	sub.w	ip, sp, #8
 800019c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001a0:	f000 f806 	bl	80001b0 <__udivmoddi4>
 80001a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001ac:	b004      	add	sp, #16
 80001ae:	4770      	bx	lr

080001b0 <__udivmoddi4>:
 80001b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b4:	9d08      	ldr	r5, [sp, #32]
 80001b6:	4604      	mov	r4, r0
 80001b8:	468e      	mov	lr, r1
 80001ba:	2b00      	cmp	r3, #0
 80001bc:	d14d      	bne.n	800025a <__udivmoddi4+0xaa>
 80001be:	428a      	cmp	r2, r1
 80001c0:	4694      	mov	ip, r2
 80001c2:	d969      	bls.n	8000298 <__udivmoddi4+0xe8>
 80001c4:	fab2 f282 	clz	r2, r2
 80001c8:	b152      	cbz	r2, 80001e0 <__udivmoddi4+0x30>
 80001ca:	fa01 f302 	lsl.w	r3, r1, r2
 80001ce:	f1c2 0120 	rsb	r1, r2, #32
 80001d2:	fa20 f101 	lsr.w	r1, r0, r1
 80001d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80001da:	ea41 0e03 	orr.w	lr, r1, r3
 80001de:	4094      	lsls	r4, r2
 80001e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80001e4:	0c21      	lsrs	r1, r4, #16
 80001e6:	fbbe f6f8 	udiv	r6, lr, r8
 80001ea:	fa1f f78c 	uxth.w	r7, ip
 80001ee:	fb08 e316 	mls	r3, r8, r6, lr
 80001f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80001f6:	fb06 f107 	mul.w	r1, r6, r7
 80001fa:	4299      	cmp	r1, r3
 80001fc:	d90a      	bls.n	8000214 <__udivmoddi4+0x64>
 80001fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000202:	f106 30ff 	add.w	r0, r6, #4294967295
 8000206:	f080 811f 	bcs.w	8000448 <__udivmoddi4+0x298>
 800020a:	4299      	cmp	r1, r3
 800020c:	f240 811c 	bls.w	8000448 <__udivmoddi4+0x298>
 8000210:	3e02      	subs	r6, #2
 8000212:	4463      	add	r3, ip
 8000214:	1a5b      	subs	r3, r3, r1
 8000216:	b2a4      	uxth	r4, r4
 8000218:	fbb3 f0f8 	udiv	r0, r3, r8
 800021c:	fb08 3310 	mls	r3, r8, r0, r3
 8000220:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000224:	fb00 f707 	mul.w	r7, r0, r7
 8000228:	42a7      	cmp	r7, r4
 800022a:	d90a      	bls.n	8000242 <__udivmoddi4+0x92>
 800022c:	eb1c 0404 	adds.w	r4, ip, r4
 8000230:	f100 33ff 	add.w	r3, r0, #4294967295
 8000234:	f080 810a 	bcs.w	800044c <__udivmoddi4+0x29c>
 8000238:	42a7      	cmp	r7, r4
 800023a:	f240 8107 	bls.w	800044c <__udivmoddi4+0x29c>
 800023e:	4464      	add	r4, ip
 8000240:	3802      	subs	r0, #2
 8000242:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000246:	1be4      	subs	r4, r4, r7
 8000248:	2600      	movs	r6, #0
 800024a:	b11d      	cbz	r5, 8000254 <__udivmoddi4+0xa4>
 800024c:	40d4      	lsrs	r4, r2
 800024e:	2300      	movs	r3, #0
 8000250:	e9c5 4300 	strd	r4, r3, [r5]
 8000254:	4631      	mov	r1, r6
 8000256:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800025a:	428b      	cmp	r3, r1
 800025c:	d909      	bls.n	8000272 <__udivmoddi4+0xc2>
 800025e:	2d00      	cmp	r5, #0
 8000260:	f000 80ef 	beq.w	8000442 <__udivmoddi4+0x292>
 8000264:	2600      	movs	r6, #0
 8000266:	e9c5 0100 	strd	r0, r1, [r5]
 800026a:	4630      	mov	r0, r6
 800026c:	4631      	mov	r1, r6
 800026e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000272:	fab3 f683 	clz	r6, r3
 8000276:	2e00      	cmp	r6, #0
 8000278:	d14a      	bne.n	8000310 <__udivmoddi4+0x160>
 800027a:	428b      	cmp	r3, r1
 800027c:	d302      	bcc.n	8000284 <__udivmoddi4+0xd4>
 800027e:	4282      	cmp	r2, r0
 8000280:	f200 80f9 	bhi.w	8000476 <__udivmoddi4+0x2c6>
 8000284:	1a84      	subs	r4, r0, r2
 8000286:	eb61 0303 	sbc.w	r3, r1, r3
 800028a:	2001      	movs	r0, #1
 800028c:	469e      	mov	lr, r3
 800028e:	2d00      	cmp	r5, #0
 8000290:	d0e0      	beq.n	8000254 <__udivmoddi4+0xa4>
 8000292:	e9c5 4e00 	strd	r4, lr, [r5]
 8000296:	e7dd      	b.n	8000254 <__udivmoddi4+0xa4>
 8000298:	b902      	cbnz	r2, 800029c <__udivmoddi4+0xec>
 800029a:	deff      	udf	#255	; 0xff
 800029c:	fab2 f282 	clz	r2, r2
 80002a0:	2a00      	cmp	r2, #0
 80002a2:	f040 8092 	bne.w	80003ca <__udivmoddi4+0x21a>
 80002a6:	eba1 010c 	sub.w	r1, r1, ip
 80002aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ae:	fa1f fe8c 	uxth.w	lr, ip
 80002b2:	2601      	movs	r6, #1
 80002b4:	0c20      	lsrs	r0, r4, #16
 80002b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80002ba:	fb07 1113 	mls	r1, r7, r3, r1
 80002be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80002c2:	fb0e f003 	mul.w	r0, lr, r3
 80002c6:	4288      	cmp	r0, r1
 80002c8:	d908      	bls.n	80002dc <__udivmoddi4+0x12c>
 80002ca:	eb1c 0101 	adds.w	r1, ip, r1
 80002ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0x12a>
 80002d4:	4288      	cmp	r0, r1
 80002d6:	f200 80cb 	bhi.w	8000470 <__udivmoddi4+0x2c0>
 80002da:	4643      	mov	r3, r8
 80002dc:	1a09      	subs	r1, r1, r0
 80002de:	b2a4      	uxth	r4, r4
 80002e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80002e4:	fb07 1110 	mls	r1, r7, r0, r1
 80002e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80002ec:	fb0e fe00 	mul.w	lr, lr, r0
 80002f0:	45a6      	cmp	lr, r4
 80002f2:	d908      	bls.n	8000306 <__udivmoddi4+0x156>
 80002f4:	eb1c 0404 	adds.w	r4, ip, r4
 80002f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80002fc:	d202      	bcs.n	8000304 <__udivmoddi4+0x154>
 80002fe:	45a6      	cmp	lr, r4
 8000300:	f200 80bb 	bhi.w	800047a <__udivmoddi4+0x2ca>
 8000304:	4608      	mov	r0, r1
 8000306:	eba4 040e 	sub.w	r4, r4, lr
 800030a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800030e:	e79c      	b.n	800024a <__udivmoddi4+0x9a>
 8000310:	f1c6 0720 	rsb	r7, r6, #32
 8000314:	40b3      	lsls	r3, r6
 8000316:	fa22 fc07 	lsr.w	ip, r2, r7
 800031a:	ea4c 0c03 	orr.w	ip, ip, r3
 800031e:	fa20 f407 	lsr.w	r4, r0, r7
 8000322:	fa01 f306 	lsl.w	r3, r1, r6
 8000326:	431c      	orrs	r4, r3
 8000328:	40f9      	lsrs	r1, r7
 800032a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800032e:	fa00 f306 	lsl.w	r3, r0, r6
 8000332:	fbb1 f8f9 	udiv	r8, r1, r9
 8000336:	0c20      	lsrs	r0, r4, #16
 8000338:	fa1f fe8c 	uxth.w	lr, ip
 800033c:	fb09 1118 	mls	r1, r9, r8, r1
 8000340:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000344:	fb08 f00e 	mul.w	r0, r8, lr
 8000348:	4288      	cmp	r0, r1
 800034a:	fa02 f206 	lsl.w	r2, r2, r6
 800034e:	d90b      	bls.n	8000368 <__udivmoddi4+0x1b8>
 8000350:	eb1c 0101 	adds.w	r1, ip, r1
 8000354:	f108 3aff 	add.w	sl, r8, #4294967295
 8000358:	f080 8088 	bcs.w	800046c <__udivmoddi4+0x2bc>
 800035c:	4288      	cmp	r0, r1
 800035e:	f240 8085 	bls.w	800046c <__udivmoddi4+0x2bc>
 8000362:	f1a8 0802 	sub.w	r8, r8, #2
 8000366:	4461      	add	r1, ip
 8000368:	1a09      	subs	r1, r1, r0
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000370:	fb09 1110 	mls	r1, r9, r0, r1
 8000374:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	458e      	cmp	lr, r1
 800037e:	d908      	bls.n	8000392 <__udivmoddi4+0x1e2>
 8000380:	eb1c 0101 	adds.w	r1, ip, r1
 8000384:	f100 34ff 	add.w	r4, r0, #4294967295
 8000388:	d26c      	bcs.n	8000464 <__udivmoddi4+0x2b4>
 800038a:	458e      	cmp	lr, r1
 800038c:	d96a      	bls.n	8000464 <__udivmoddi4+0x2b4>
 800038e:	3802      	subs	r0, #2
 8000390:	4461      	add	r1, ip
 8000392:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000396:	fba0 9402 	umull	r9, r4, r0, r2
 800039a:	eba1 010e 	sub.w	r1, r1, lr
 800039e:	42a1      	cmp	r1, r4
 80003a0:	46c8      	mov	r8, r9
 80003a2:	46a6      	mov	lr, r4
 80003a4:	d356      	bcc.n	8000454 <__udivmoddi4+0x2a4>
 80003a6:	d053      	beq.n	8000450 <__udivmoddi4+0x2a0>
 80003a8:	b15d      	cbz	r5, 80003c2 <__udivmoddi4+0x212>
 80003aa:	ebb3 0208 	subs.w	r2, r3, r8
 80003ae:	eb61 010e 	sbc.w	r1, r1, lr
 80003b2:	fa01 f707 	lsl.w	r7, r1, r7
 80003b6:	fa22 f306 	lsr.w	r3, r2, r6
 80003ba:	40f1      	lsrs	r1, r6
 80003bc:	431f      	orrs	r7, r3
 80003be:	e9c5 7100 	strd	r7, r1, [r5]
 80003c2:	2600      	movs	r6, #0
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	f1c2 0320 	rsb	r3, r2, #32
 80003ce:	40d8      	lsrs	r0, r3
 80003d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80003d4:	fa21 f303 	lsr.w	r3, r1, r3
 80003d8:	4091      	lsls	r1, r2
 80003da:	4301      	orrs	r1, r0
 80003dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e0:	fa1f fe8c 	uxth.w	lr, ip
 80003e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80003e8:	fb07 3610 	mls	r6, r7, r0, r3
 80003ec:	0c0b      	lsrs	r3, r1, #16
 80003ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80003f2:	fb00 f60e 	mul.w	r6, r0, lr
 80003f6:	429e      	cmp	r6, r3
 80003f8:	fa04 f402 	lsl.w	r4, r4, r2
 80003fc:	d908      	bls.n	8000410 <__udivmoddi4+0x260>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f100 38ff 	add.w	r8, r0, #4294967295
 8000406:	d22f      	bcs.n	8000468 <__udivmoddi4+0x2b8>
 8000408:	429e      	cmp	r6, r3
 800040a:	d92d      	bls.n	8000468 <__udivmoddi4+0x2b8>
 800040c:	3802      	subs	r0, #2
 800040e:	4463      	add	r3, ip
 8000410:	1b9b      	subs	r3, r3, r6
 8000412:	b289      	uxth	r1, r1
 8000414:	fbb3 f6f7 	udiv	r6, r3, r7
 8000418:	fb07 3316 	mls	r3, r7, r6, r3
 800041c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000420:	fb06 f30e 	mul.w	r3, r6, lr
 8000424:	428b      	cmp	r3, r1
 8000426:	d908      	bls.n	800043a <__udivmoddi4+0x28a>
 8000428:	eb1c 0101 	adds.w	r1, ip, r1
 800042c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000430:	d216      	bcs.n	8000460 <__udivmoddi4+0x2b0>
 8000432:	428b      	cmp	r3, r1
 8000434:	d914      	bls.n	8000460 <__udivmoddi4+0x2b0>
 8000436:	3e02      	subs	r6, #2
 8000438:	4461      	add	r1, ip
 800043a:	1ac9      	subs	r1, r1, r3
 800043c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000440:	e738      	b.n	80002b4 <__udivmoddi4+0x104>
 8000442:	462e      	mov	r6, r5
 8000444:	4628      	mov	r0, r5
 8000446:	e705      	b.n	8000254 <__udivmoddi4+0xa4>
 8000448:	4606      	mov	r6, r0
 800044a:	e6e3      	b.n	8000214 <__udivmoddi4+0x64>
 800044c:	4618      	mov	r0, r3
 800044e:	e6f8      	b.n	8000242 <__udivmoddi4+0x92>
 8000450:	454b      	cmp	r3, r9
 8000452:	d2a9      	bcs.n	80003a8 <__udivmoddi4+0x1f8>
 8000454:	ebb9 0802 	subs.w	r8, r9, r2
 8000458:	eb64 0e0c 	sbc.w	lr, r4, ip
 800045c:	3801      	subs	r0, #1
 800045e:	e7a3      	b.n	80003a8 <__udivmoddi4+0x1f8>
 8000460:	4646      	mov	r6, r8
 8000462:	e7ea      	b.n	800043a <__udivmoddi4+0x28a>
 8000464:	4620      	mov	r0, r4
 8000466:	e794      	b.n	8000392 <__udivmoddi4+0x1e2>
 8000468:	4640      	mov	r0, r8
 800046a:	e7d1      	b.n	8000410 <__udivmoddi4+0x260>
 800046c:	46d0      	mov	r8, sl
 800046e:	e77b      	b.n	8000368 <__udivmoddi4+0x1b8>
 8000470:	3b02      	subs	r3, #2
 8000472:	4461      	add	r1, ip
 8000474:	e732      	b.n	80002dc <__udivmoddi4+0x12c>
 8000476:	4630      	mov	r0, r6
 8000478:	e709      	b.n	800028e <__udivmoddi4+0xde>
 800047a:	4464      	add	r4, ip
 800047c:	3802      	subs	r0, #2
 800047e:	e742      	b.n	8000306 <__udivmoddi4+0x156>

08000480 <__aeabi_idiv0>:
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop

08000484 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000484:	b480      	push	{r7}
 8000486:	b083      	sub	sp, #12
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800048c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000490:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000494:	f023 0218 	bic.w	r2, r3, #24
 8000498:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	4313      	orrs	r3, r2
 80004a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80004a4:	bf00      	nop
 80004a6:	370c      	adds	r7, #12
 80004a8:	46bd      	mov	sp, r7
 80004aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ae:	4770      	bx	lr

080004b0 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004b0:	b480      	push	{r7}
 80004b2:	b085      	sub	sp, #20
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80004b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004bc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	4313      	orrs	r3, r2
 80004c6:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80004c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	4013      	ands	r3, r2
 80004d2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004d4:	68fb      	ldr	r3, [r7, #12]
}
 80004d6:	bf00      	nop
 80004d8:	3714      	adds	r7, #20
 80004da:	46bd      	mov	sp, r7
 80004dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e0:	4770      	bx	lr
	...

080004e4 <main>:
uint32_t redTask_execution_monitor = {0};
uint32_t resume_monitor = {0};
bool _killed = false;

int main(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b0a4      	sub	sp, #144	; 0x90
 80004e8:	af00      	add	r7, sp, #0

  HAL_Init();
 80004ea:	f000 fc69 	bl	8000dc0 <HAL_Init>
  SystemClock_Config();
 80004ee:	f000 f8fd 	bl	80006ec <SystemClock_Config>
  MX_GPIO_Init();
 80004f2:	f000 f9e5 	bl	80008c0 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80004f6:	f000 f96f 	bl	80007d8 <MX_LPUART1_UART_Init>
  MX_USB_PCD_Init();
 80004fa:	f000 f9b9 	bl	8000870 <MX_USB_PCD_Init>

  // Initialize the kernel
  osKernelInitialize();
 80004fe:	f003 ff6d 	bl	80043dc <osKernelInitialize>

  osThreadAttr_t greenThreadAttribs = {
 8000502:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000506:	2224      	movs	r2, #36	; 0x24
 8000508:	2100      	movs	r1, #0
 800050a:	4618      	mov	r0, r3
 800050c:	f006 fdca 	bl	80070a4 <memset>
 8000510:	4b2d      	ldr	r3, [pc, #180]	; (80005c8 <main+0xe4>)
 8000512:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000514:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000518:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800051c:	2318      	movs	r3, #24
 800051e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		  .name = "Green Task",
		  .stack_size = STACK_SIZE,
		  .priority	= osPriorityNormal
  };

  osThreadAttr_t redThreadAttribs = {
 8000522:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000526:	2224      	movs	r2, #36	; 0x24
 8000528:	2100      	movs	r1, #0
 800052a:	4618      	mov	r0, r3
 800052c:	f006 fdba 	bl	80070a4 <memset>
 8000530:	4b26      	ldr	r3, [pc, #152]	; (80005cc <main+0xe8>)
 8000532:	64bb      	str	r3, [r7, #72]	; 0x48
 8000534:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000538:	65fb      	str	r3, [r7, #92]	; 0x5c
 800053a:	2318      	movs	r3, #24
 800053c:	663b      	str	r3, [r7, #96]	; 0x60
		  .name = "Red Task",
		  .stack_size = STACK_SIZE,
		  .priority	= osPriorityNormal
  };

  osThreadAttr_t orangeThreadAttribs = {
 800053e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000542:	2224      	movs	r2, #36	; 0x24
 8000544:	2100      	movs	r1, #0
 8000546:	4618      	mov	r0, r3
 8000548:	f006 fdac 	bl	80070a4 <memset>
 800054c:	4b20      	ldr	r3, [pc, #128]	; (80005d0 <main+0xec>)
 800054e:	627b      	str	r3, [r7, #36]	; 0x24
 8000550:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000554:	63bb      	str	r3, [r7, #56]	; 0x38
 8000556:	2318      	movs	r3, #24
 8000558:	63fb      	str	r3, [r7, #60]	; 0x3c
		  .name = "Orange Task",
		  .stack_size = STACK_SIZE,
		  .priority	= osPriorityNormal
  };

  osThreadAttr_t blueThreadAttribs = {
 800055a:	463b      	mov	r3, r7
 800055c:	2224      	movs	r2, #36	; 0x24
 800055e:	2100      	movs	r1, #0
 8000560:	4618      	mov	r0, r3
 8000562:	f006 fd9f 	bl	80070a4 <memset>
 8000566:	4b1b      	ldr	r3, [pc, #108]	; (80005d4 <main+0xf0>)
 8000568:	603b      	str	r3, [r7, #0]
 800056a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800056e:	617b      	str	r3, [r7, #20]
 8000570:	2318      	movs	r3, #24
 8000572:	61bb      	str	r3, [r7, #24]
		  .stack_size = STACK_SIZE,
		  .priority	= osPriorityNormal
  };

  // Created Threads
  green_id = osThreadNew(vGreenLedControllerTask, NULL, &greenThreadAttribs);
 8000574:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000578:	461a      	mov	r2, r3
 800057a:	2100      	movs	r1, #0
 800057c:	4816      	ldr	r0, [pc, #88]	; (80005d8 <main+0xf4>)
 800057e:	f003 ff77 	bl	8004470 <osThreadNew>
 8000582:	4603      	mov	r3, r0
 8000584:	4a15      	ldr	r2, [pc, #84]	; (80005dc <main+0xf8>)
 8000586:	6013      	str	r3, [r2, #0]
  red_id = osThreadNew(vRedLedControllerTask, NULL, &redThreadAttribs);
 8000588:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800058c:	461a      	mov	r2, r3
 800058e:	2100      	movs	r1, #0
 8000590:	4813      	ldr	r0, [pc, #76]	; (80005e0 <main+0xfc>)
 8000592:	f003 ff6d 	bl	8004470 <osThreadNew>
 8000596:	4603      	mov	r3, r0
 8000598:	4a12      	ldr	r2, [pc, #72]	; (80005e4 <main+0x100>)
 800059a:	6013      	str	r3, [r2, #0]
  orange_id = osThreadNew(vOrangeLedControllerTask, NULL, &orangeThreadAttribs);
 800059c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005a0:	461a      	mov	r2, r3
 80005a2:	2100      	movs	r1, #0
 80005a4:	4810      	ldr	r0, [pc, #64]	; (80005e8 <main+0x104>)
 80005a6:	f003 ff63 	bl	8004470 <osThreadNew>
 80005aa:	4603      	mov	r3, r0
 80005ac:	4a0f      	ldr	r2, [pc, #60]	; (80005ec <main+0x108>)
 80005ae:	6013      	str	r3, [r2, #0]
  blue_id = osThreadNew(vBlueLedControllerTask, NULL, &blueThreadAttribs);
 80005b0:	463b      	mov	r3, r7
 80005b2:	461a      	mov	r2, r3
 80005b4:	2100      	movs	r1, #0
 80005b6:	480e      	ldr	r0, [pc, #56]	; (80005f0 <main+0x10c>)
 80005b8:	f003 ff5a 	bl	8004470 <osThreadNew>
 80005bc:	4603      	mov	r3, r0
 80005be:	4a0d      	ldr	r2, [pc, #52]	; (80005f4 <main+0x110>)
 80005c0:	6013      	str	r3, [r2, #0]

  osKernelStart();
 80005c2:	f003 ff2f 	bl	8004424 <osKernelStart>

  while (1)
 80005c6:	e7fe      	b.n	80005c6 <main+0xe2>
 80005c8:	08007250 	.word	0x08007250
 80005cc:	0800725c 	.word	0x0800725c
 80005d0:	08007268 	.word	0x08007268
 80005d4:	08007274 	.word	0x08007274
 80005d8:	080005f9 	.word	0x080005f9
 80005dc:	20000430 	.word	0x20000430
 80005e0:	08000629 	.word	0x08000629
 80005e4:	2000042c 	.word	0x2000042c
 80005e8:	08000659 	.word	0x08000659
 80005ec:	20000438 	.word	0x20000438
 80005f0:	08000689 	.word	0x08000689
 80005f4:	20000434 	.word	0x20000434

080005f8 <vGreenLedControllerTask>:
  }
  /* USER CODE END 3 */
}

void vGreenLedControllerTask(void *pvParameters)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b085      	sub	sp, #20
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
	while(1)
	{
		++Green_TaskProfiler;
 8000600:	4b08      	ldr	r3, [pc, #32]	; (8000624 <vGreenLedControllerTask+0x2c>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	3301      	adds	r3, #1
 8000606:	4a07      	ldr	r2, [pc, #28]	; (8000624 <vGreenLedControllerTask+0x2c>)
 8000608:	6013      	str	r3, [r2, #0]
		for(uint32_t i = 0; i < 7000; ++i) {}
 800060a:	2300      	movs	r3, #0
 800060c:	60fb      	str	r3, [r7, #12]
 800060e:	e002      	b.n	8000616 <vGreenLedControllerTask+0x1e>
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	3301      	adds	r3, #1
 8000614:	60fb      	str	r3, [r7, #12]
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	f641 3257 	movw	r2, #6999	; 0x1b57
 800061c:	4293      	cmp	r3, r2
 800061e:	d9f7      	bls.n	8000610 <vGreenLedControllerTask+0x18>
		++Green_TaskProfiler;
 8000620:	e7ee      	b.n	8000600 <vGreenLedControllerTask+0x8>
 8000622:	bf00      	nop
 8000624:	20000424 	.word	0x20000424

08000628 <vRedLedControllerTask>:
	}
}

void vRedLedControllerTask(void *pvParameters)
{
 8000628:	b480      	push	{r7}
 800062a:	b085      	sub	sp, #20
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
	while(1)
	{
		++Red_TaskProfiler;
 8000630:	4b08      	ldr	r3, [pc, #32]	; (8000654 <vRedLedControllerTask+0x2c>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	3301      	adds	r3, #1
 8000636:	4a07      	ldr	r2, [pc, #28]	; (8000654 <vRedLedControllerTask+0x2c>)
 8000638:	6013      	str	r3, [r2, #0]
		for(uint32_t i = 0; i < 7000; ++i) {}
 800063a:	2300      	movs	r3, #0
 800063c:	60fb      	str	r3, [r7, #12]
 800063e:	e002      	b.n	8000646 <vRedLedControllerTask+0x1e>
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	3301      	adds	r3, #1
 8000644:	60fb      	str	r3, [r7, #12]
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	f641 3257 	movw	r2, #6999	; 0x1b57
 800064c:	4293      	cmp	r3, r2
 800064e:	d9f7      	bls.n	8000640 <vRedLedControllerTask+0x18>
		++Red_TaskProfiler;
 8000650:	e7ee      	b.n	8000630 <vRedLedControllerTask+0x8>
 8000652:	bf00      	nop
 8000654:	20000420 	.word	0x20000420

08000658 <vOrangeLedControllerTask>:
	}
}


void vOrangeLedControllerTask(void *pvParameters)
{
 8000658:	b480      	push	{r7}
 800065a:	b085      	sub	sp, #20
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
	while(1)
	{
		++Orange_TaskProfiler;
 8000660:	4b08      	ldr	r3, [pc, #32]	; (8000684 <vOrangeLedControllerTask+0x2c>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	3301      	adds	r3, #1
 8000666:	4a07      	ldr	r2, [pc, #28]	; (8000684 <vOrangeLedControllerTask+0x2c>)
 8000668:	6013      	str	r3, [r2, #0]
		for(uint32_t i = 0; i < 7000; ++i) {}
 800066a:	2300      	movs	r3, #0
 800066c:	60fb      	str	r3, [r7, #12]
 800066e:	e002      	b.n	8000676 <vOrangeLedControllerTask+0x1e>
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	3301      	adds	r3, #1
 8000674:	60fb      	str	r3, [r7, #12]
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	f641 3257 	movw	r2, #6999	; 0x1b57
 800067c:	4293      	cmp	r3, r2
 800067e:	d9f7      	bls.n	8000670 <vOrangeLedControllerTask+0x18>
		++Orange_TaskProfiler;
 8000680:	e7ee      	b.n	8000660 <vOrangeLedControllerTask+0x8>
 8000682:	bf00      	nop
 8000684:	2000041c 	.word	0x2000041c

08000688 <vBlueLedControllerTask>:

	}
}

void vBlueLedControllerTask(void *pvParameters)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b084      	sub	sp, #16
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
	while(1)
	{
		++Blue_TaskProfiler;
 8000690:	4b12      	ldr	r3, [pc, #72]	; (80006dc <vBlueLedControllerTask+0x54>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	3301      	adds	r3, #1
 8000696:	4a11      	ldr	r2, [pc, #68]	; (80006dc <vBlueLedControllerTask+0x54>)
 8000698:	6013      	str	r3, [r2, #0]
		for(uint32_t i = 0; i < 7000; ++i) {}
 800069a:	2300      	movs	r3, #0
 800069c:	60fb      	str	r3, [r7, #12]
 800069e:	e002      	b.n	80006a6 <vBlueLedControllerTask+0x1e>
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	3301      	adds	r3, #1
 80006a4:	60fb      	str	r3, [r7, #12]
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	f641 3257 	movw	r2, #6999	; 0x1b57
 80006ac:	4293      	cmp	r3, r2
 80006ae:	d9f7      	bls.n	80006a0 <vBlueLedControllerTask+0x18>

		redTask_execution_monitor++;
 80006b0:	4b0b      	ldr	r3, [pc, #44]	; (80006e0 <vBlueLedControllerTask+0x58>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	3301      	adds	r3, #1
 80006b6:	4a0a      	ldr	r2, [pc, #40]	; (80006e0 <vBlueLedControllerTask+0x58>)
 80006b8:	6013      	str	r3, [r2, #0]

		if(redTask_execution_monitor >= 50)
 80006ba:	4b09      	ldr	r3, [pc, #36]	; (80006e0 <vBlueLedControllerTask+0x58>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	2b31      	cmp	r3, #49	; 0x31
 80006c0:	d9e6      	bls.n	8000690 <vBlueLedControllerTask+0x8>
		{
			_killed = true;
 80006c2:	4b08      	ldr	r3, [pc, #32]	; (80006e4 <vBlueLedControllerTask+0x5c>)
 80006c4:	2201      	movs	r2, #1
 80006c6:	701a      	strb	r2, [r3, #0]
			redTask_execution_monitor = 0;
 80006c8:	4b05      	ldr	r3, [pc, #20]	; (80006e0 <vBlueLedControllerTask+0x58>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
			osThreadTerminate(red_id);
 80006ce:	4b06      	ldr	r3, [pc, #24]	; (80006e8 <vBlueLedControllerTask+0x60>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	4618      	mov	r0, r3
 80006d4:	f003 ff5e 	bl	8004594 <osThreadTerminate>
		++Blue_TaskProfiler;
 80006d8:	e7da      	b.n	8000690 <vBlueLedControllerTask+0x8>
 80006da:	bf00      	nop
 80006dc:	20000428 	.word	0x20000428
 80006e0:	2000043c 	.word	0x2000043c
 80006e4:	20000440 	.word	0x20000440
 80006e8:	2000042c 	.word	0x2000042c

080006ec <SystemClock_Config>:
		}
	}
}

void SystemClock_Config(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b09a      	sub	sp, #104	; 0x68
 80006f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006f2:	f107 0320 	add.w	r3, r7, #32
 80006f6:	2248      	movs	r2, #72	; 0x48
 80006f8:	2100      	movs	r1, #0
 80006fa:	4618      	mov	r0, r3
 80006fc:	f006 fcd2 	bl	80070a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000700:	1d3b      	adds	r3, r7, #4
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
 8000706:	605a      	str	r2, [r3, #4]
 8000708:	609a      	str	r2, [r3, #8]
 800070a:	60da      	str	r2, [r3, #12]
 800070c:	611a      	str	r2, [r3, #16]
 800070e:	615a      	str	r2, [r3, #20]
 8000710:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 8000712:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000716:	68db      	ldr	r3, [r3, #12]
 8000718:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800071c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000720:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 8000722:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000726:	68db      	ldr	r3, [r3, #12]
 8000728:	f023 0303 	bic.w	r3, r3, #3
 800072c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000730:	f043 0301 	orr.w	r3, r3, #1
 8000734:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000736:	f000 ff99 	bl	800166c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800073a:	2000      	movs	r0, #0
 800073c:	f7ff fea2 	bl	8000484 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000740:	4b24      	ldr	r3, [pc, #144]	; (80007d4 <SystemClock_Config+0xe8>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000748:	4a22      	ldr	r2, [pc, #136]	; (80007d4 <SystemClock_Config+0xe8>)
 800074a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800074e:	6013      	str	r3, [r2, #0]
 8000750:	4b20      	ldr	r3, [pc, #128]	; (80007d4 <SystemClock_Config+0xe8>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000758:	603b      	str	r3, [r7, #0]
 800075a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 800075c:	2327      	movs	r3, #39	; 0x27
 800075e:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000760:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000764:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000766:	2301      	movs	r3, #1
 8000768:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800076a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800076e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000770:	2301      	movs	r3, #1
 8000772:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000774:	2340      	movs	r3, #64	; 0x40
 8000776:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000778:	2300      	movs	r3, #0
 800077a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800077c:	2360      	movs	r3, #96	; 0x60
 800077e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000780:	2300      	movs	r3, #0
 8000782:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000784:	f107 0320 	add.w	r3, r7, #32
 8000788:	4618      	mov	r0, r3
 800078a:	f001 fb61 	bl	8001e50 <HAL_RCC_OscConfig>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000794:	f000 f8fe 	bl	8000994 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000798:	236f      	movs	r3, #111	; 0x6f
 800079a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800079c:	2302      	movs	r3, #2
 800079e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007a0:	2300      	movs	r3, #0
 80007a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007a4:	2300      	movs	r3, #0
 80007a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007a8:	2300      	movs	r3, #0
 80007aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80007ac:	2300      	movs	r3, #0
 80007ae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80007b0:	2300      	movs	r3, #0
 80007b2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007b4:	1d3b      	adds	r3, r7, #4
 80007b6:	2101      	movs	r1, #1
 80007b8:	4618      	mov	r0, r3
 80007ba:	f001 febd 	bl	8002538 <HAL_RCC_ClockConfig>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 80007c4:	f000 f8e6 	bl	8000994 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80007c8:	f002 fcaa 	bl	8003120 <HAL_RCCEx_EnableMSIPLLMode>
}
 80007cc:	bf00      	nop
 80007ce:	3768      	adds	r7, #104	; 0x68
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	58000400 	.word	0x58000400

080007d8 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80007dc:	4b22      	ldr	r3, [pc, #136]	; (8000868 <MX_LPUART1_UART_Init+0x90>)
 80007de:	4a23      	ldr	r2, [pc, #140]	; (800086c <MX_LPUART1_UART_Init+0x94>)
 80007e0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80007e2:	4b21      	ldr	r3, [pc, #132]	; (8000868 <MX_LPUART1_UART_Init+0x90>)
 80007e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007e8:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007ea:	4b1f      	ldr	r3, [pc, #124]	; (8000868 <MX_LPUART1_UART_Init+0x90>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80007f0:	4b1d      	ldr	r3, [pc, #116]	; (8000868 <MX_LPUART1_UART_Init+0x90>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80007f6:	4b1c      	ldr	r3, [pc, #112]	; (8000868 <MX_LPUART1_UART_Init+0x90>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80007fc:	4b1a      	ldr	r3, [pc, #104]	; (8000868 <MX_LPUART1_UART_Init+0x90>)
 80007fe:	220c      	movs	r2, #12
 8000800:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000802:	4b19      	ldr	r3, [pc, #100]	; (8000868 <MX_LPUART1_UART_Init+0x90>)
 8000804:	2200      	movs	r2, #0
 8000806:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000808:	4b17      	ldr	r3, [pc, #92]	; (8000868 <MX_LPUART1_UART_Init+0x90>)
 800080a:	2200      	movs	r2, #0
 800080c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800080e:	4b16      	ldr	r3, [pc, #88]	; (8000868 <MX_LPUART1_UART_Init+0x90>)
 8000810:	2200      	movs	r2, #0
 8000812:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000814:	4b14      	ldr	r3, [pc, #80]	; (8000868 <MX_LPUART1_UART_Init+0x90>)
 8000816:	2200      	movs	r2, #0
 8000818:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800081a:	4b13      	ldr	r3, [pc, #76]	; (8000868 <MX_LPUART1_UART_Init+0x90>)
 800081c:	2200      	movs	r2, #0
 800081e:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000820:	4811      	ldr	r0, [pc, #68]	; (8000868 <MX_LPUART1_UART_Init+0x90>)
 8000822:	f003 f82d 	bl	8003880 <HAL_UART_Init>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 800082c:	f000 f8b2 	bl	8000994 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000830:	2100      	movs	r1, #0
 8000832:	480d      	ldr	r0, [pc, #52]	; (8000868 <MX_LPUART1_UART_Init+0x90>)
 8000834:	f003 fc88 	bl	8004148 <HAL_UARTEx_SetTxFifoThreshold>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 800083e:	f000 f8a9 	bl	8000994 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000842:	2100      	movs	r1, #0
 8000844:	4808      	ldr	r0, [pc, #32]	; (8000868 <MX_LPUART1_UART_Init+0x90>)
 8000846:	f003 fcbd 	bl	80041c4 <HAL_UARTEx_SetRxFifoThreshold>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000850:	f000 f8a0 	bl	8000994 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000854:	4804      	ldr	r0, [pc, #16]	; (8000868 <MX_LPUART1_UART_Init+0x90>)
 8000856:	f003 fc3e 	bl	80040d6 <HAL_UARTEx_DisableFifoMode>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000860:	f000 f898 	bl	8000994 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000864:	bf00      	nop
 8000866:	bd80      	pop	{r7, pc}
 8000868:	20000094 	.word	0x20000094
 800086c:	40008000 	.word	0x40008000

08000870 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000874:	4b10      	ldr	r3, [pc, #64]	; (80008b8 <MX_USB_PCD_Init+0x48>)
 8000876:	4a11      	ldr	r2, [pc, #68]	; (80008bc <MX_USB_PCD_Init+0x4c>)
 8000878:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800087a:	4b0f      	ldr	r3, [pc, #60]	; (80008b8 <MX_USB_PCD_Init+0x48>)
 800087c:	2208      	movs	r2, #8
 800087e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000880:	4b0d      	ldr	r3, [pc, #52]	; (80008b8 <MX_USB_PCD_Init+0x48>)
 8000882:	2202      	movs	r2, #2
 8000884:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000886:	4b0c      	ldr	r3, [pc, #48]	; (80008b8 <MX_USB_PCD_Init+0x48>)
 8000888:	2202      	movs	r2, #2
 800088a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800088c:	4b0a      	ldr	r3, [pc, #40]	; (80008b8 <MX_USB_PCD_Init+0x48>)
 800088e:	2200      	movs	r2, #0
 8000890:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000892:	4b09      	ldr	r3, [pc, #36]	; (80008b8 <MX_USB_PCD_Init+0x48>)
 8000894:	2200      	movs	r2, #0
 8000896:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000898:	4b07      	ldr	r3, [pc, #28]	; (80008b8 <MX_USB_PCD_Init+0x48>)
 800089a:	2200      	movs	r2, #0
 800089c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800089e:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <MX_USB_PCD_Init+0x48>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80008a4:	4804      	ldr	r0, [pc, #16]	; (80008b8 <MX_USB_PCD_Init+0x48>)
 80008a6:	f000 fd3f 	bl	8001328 <HAL_PCD_Init>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 80008b0:	f000 f870 	bl	8000994 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80008b4:	bf00      	nop
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	20000124 	.word	0x20000124
 80008bc:	40006800 	.word	0x40006800

080008c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b086      	sub	sp, #24
 80008c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c6:	1d3b      	adds	r3, r7, #4
 80008c8:	2200      	movs	r2, #0
 80008ca:	601a      	str	r2, [r3, #0]
 80008cc:	605a      	str	r2, [r3, #4]
 80008ce:	609a      	str	r2, [r3, #8]
 80008d0:	60da      	str	r2, [r3, #12]
 80008d2:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008d4:	2004      	movs	r0, #4
 80008d6:	f7ff fdeb 	bl	80004b0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008da:	2001      	movs	r0, #1
 80008dc:	f7ff fde8 	bl	80004b0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008e0:	2002      	movs	r0, #2
 80008e2:	f7ff fde5 	bl	80004b0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008e6:	2008      	movs	r0, #8
 80008e8:	f7ff fde2 	bl	80004b0 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 80008ec:	2200      	movs	r2, #0
 80008ee:	2123      	movs	r1, #35	; 0x23
 80008f0:	481c      	ldr	r0, [pc, #112]	; (8000964 <MX_GPIO_Init+0xa4>)
 80008f2:	f000 fd01 	bl	80012f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008f6:	2310      	movs	r3, #16
 80008f8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008fa:	2300      	movs	r3, #0
 80008fc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fe:	2300      	movs	r3, #0
 8000900:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000902:	1d3b      	adds	r3, r7, #4
 8000904:	4619      	mov	r1, r3
 8000906:	4818      	ldr	r0, [pc, #96]	; (8000968 <MX_GPIO_Init+0xa8>)
 8000908:	f000 fb86 	bl	8001018 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 800090c:	2323      	movs	r3, #35	; 0x23
 800090e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000910:	2301      	movs	r3, #1
 8000912:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000914:	2300      	movs	r3, #0
 8000916:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000918:	2300      	movs	r3, #0
 800091a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800091c:	1d3b      	adds	r3, r7, #4
 800091e:	4619      	mov	r1, r3
 8000920:	4810      	ldr	r0, [pc, #64]	; (8000964 <MX_GPIO_Init+0xa4>)
 8000922:	f000 fb79 	bl	8001018 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8000926:	2303      	movs	r3, #3
 8000928:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800092a:	2300      	movs	r3, #0
 800092c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092e:	2300      	movs	r3, #0
 8000930:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000932:	1d3b      	adds	r3, r7, #4
 8000934:	4619      	mov	r1, r3
 8000936:	480d      	ldr	r0, [pc, #52]	; (800096c <MX_GPIO_Init+0xac>)
 8000938:	f000 fb6e 	bl	8001018 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800093c:	23c0      	movs	r3, #192	; 0xc0
 800093e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000940:	2302      	movs	r3, #2
 8000942:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000944:	2301      	movs	r3, #1
 8000946:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000948:	2300      	movs	r3, #0
 800094a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800094c:	2307      	movs	r3, #7
 800094e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000950:	1d3b      	adds	r3, r7, #4
 8000952:	4619      	mov	r1, r3
 8000954:	4803      	ldr	r0, [pc, #12]	; (8000964 <MX_GPIO_Init+0xa4>)
 8000956:	f000 fb5f 	bl	8001018 <HAL_GPIO_Init>

}
 800095a:	bf00      	nop
 800095c:	3718      	adds	r7, #24
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	48000400 	.word	0x48000400
 8000968:	48000800 	.word	0x48000800
 800096c:	48000c00 	.word	0x48000c00

08000970 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a04      	ldr	r2, [pc, #16]	; (8000990 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d101      	bne.n	8000986 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000982:	f000 fa3d 	bl	8000e00 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000986:	bf00      	nop
 8000988:	3708      	adds	r7, #8
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40012c00 	.word	0x40012c00

08000994 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000998:	b672      	cpsid	i
}
 800099a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800099c:	e7fe      	b.n	800099c <Error_Handler+0x8>

0800099e <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800099e:	b480      	push	{r7}
 80009a0:	b085      	sub	sp, #20
 80009a2:	af00      	add	r7, sp, #0
 80009a4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80009a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80009ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	4313      	orrs	r3, r2
 80009b4:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80009b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	4013      	ands	r3, r2
 80009c0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80009c2:	68fb      	ldr	r3, [r7, #12]
}
 80009c4:	bf00      	nop
 80009c6:	3714      	adds	r7, #20
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr

080009d0 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b085      	sub	sp, #20
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80009d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009dc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80009de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	4313      	orrs	r3, r2
 80009e6:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80009e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009ec:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	4013      	ands	r3, r2
 80009f2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80009f4:	68fb      	ldr	r3, [r7, #12]
}
 80009f6:	bf00      	nop
 80009f8:	3714      	adds	r7, #20
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr

08000a02 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM2
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8000a02:	b480      	push	{r7}
 8000a04:	b085      	sub	sp, #20
 8000a06:	af00      	add	r7, sp, #0
 8000a08:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8000a0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a0e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000a10:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	4313      	orrs	r3, r2
 8000a18:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8000a1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a1e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	4013      	ands	r3, r2
 8000a24:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a26:	68fb      	ldr	r3, [r7, #12]
}
 8000a28:	bf00      	nop
 8000a2a:	3714      	adds	r7, #20
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr

08000a34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */
  PWR_PVDTypeDef sConfigPVD = {0};
 8000a3a:	463b      	mov	r3, r7
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	601a      	str	r2, [r3, #0]
 8000a40:	605a      	str	r2, [r3, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a42:	2200      	movs	r2, #0
 8000a44:	210f      	movs	r1, #15
 8000a46:	f06f 0001 	mvn.w	r0, #1
 8000a4a:	f000 fabd 	bl	8000fc8 <HAL_NVIC_SetPriority>

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_0;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	603b      	str	r3, [r7, #0]
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
 8000a52:	2300      	movs	r3, #0
 8000a54:	607b      	str	r3, [r7, #4]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 8000a56:	463b      	mov	r3, r7
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f000 fe17 	bl	800168c <HAL_PWR_ConfigPVD>

  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 8000a5e:	f000 fe57 	bl	8001710 <HAL_PWR_EnablePVD>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a62:	bf00      	nop
 8000a64:	3708      	adds	r7, #8
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
	...

08000a6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b09c      	sub	sp, #112	; 0x70
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a74:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
 8000a80:	60da      	str	r2, [r3, #12]
 8000a82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a84:	f107 030c 	add.w	r3, r7, #12
 8000a88:	2250      	movs	r2, #80	; 0x50
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f006 fb09 	bl	80070a4 <memset>
  if(huart->Instance==LPUART1)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a16      	ldr	r2, [pc, #88]	; (8000af0 <HAL_UART_MspInit+0x84>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d124      	bne.n	8000ae6 <HAL_UART_MspInit+0x7a>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000aa4:	f107 030c 	add.w	r3, r7, #12
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f002 f9c3 	bl	8002e34 <HAL_RCCEx_PeriphCLKConfig>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ab4:	f7ff ff6e 	bl	8000994 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000ab8:	2001      	movs	r0, #1
 8000aba:	f7ff ffa2 	bl	8000a02 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000abe:	2001      	movs	r0, #1
 8000ac0:	f7ff ff6d 	bl	800099e <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ac4:	230c      	movs	r3, #12
 8000ac6:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac8:	2302      	movs	r3, #2
 8000aca:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	2300      	movs	r3, #0
 8000ace:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000ad4:	2308      	movs	r3, #8
 8000ad6:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000adc:	4619      	mov	r1, r3
 8000ade:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ae2:	f000 fa99 	bl	8001018 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000ae6:	bf00      	nop
 8000ae8:	3770      	adds	r7, #112	; 0x70
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	40008000 	.word	0x40008000

08000af4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b09c      	sub	sp, #112	; 0x70
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	605a      	str	r2, [r3, #4]
 8000b06:	609a      	str	r2, [r3, #8]
 8000b08:	60da      	str	r2, [r3, #12]
 8000b0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b0c:	f107 030c 	add.w	r3, r7, #12
 8000b10:	2250      	movs	r2, #80	; 0x50
 8000b12:	2100      	movs	r1, #0
 8000b14:	4618      	mov	r0, r3
 8000b16:	f006 fac5 	bl	80070a4 <memset>
  if(hpcd->Instance==USB)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	4a1f      	ldr	r2, [pc, #124]	; (8000b9c <HAL_PCD_MspInit+0xa8>)
 8000b20:	4293      	cmp	r3, r2
 8000b22:	d136      	bne.n	8000b92 <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000b24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b28:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8000b2a:	2318      	movs	r3, #24
 8000b2c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8000b2e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b32:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8000b34:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000b38:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8000b3a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000b3e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8000b40:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000b44:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000b46:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000b4a:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b4c:	f107 030c 	add.w	r3, r7, #12
 8000b50:	4618      	mov	r0, r3
 8000b52:	f002 f96f 	bl	8002e34 <HAL_RCCEx_PeriphCLKConfig>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8000b5c:	f7ff ff1a 	bl	8000994 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b60:	2001      	movs	r0, #1
 8000b62:	f7ff ff1c 	bl	800099e <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000b66:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000b6a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b74:	2300      	movs	r3, #0
 8000b76:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000b78:	230a      	movs	r3, #10
 8000b7a:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b7c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000b80:	4619      	mov	r1, r3
 8000b82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b86:	f000 fa47 	bl	8001018 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000b8a:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000b8e:	f7ff ff1f 	bl	80009d0 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000b92:	bf00      	nop
 8000b94:	3770      	adds	r7, #112	; 0x70
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	40006800 	.word	0x40006800

08000ba0 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b085      	sub	sp, #20
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000ba8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bac:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000bae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	4313      	orrs	r3, r2
 8000bb6:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000bb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bbc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000bc4:	68fb      	ldr	r3, [r7, #12]
}
 8000bc6:	bf00      	nop
 8000bc8:	3714      	adds	r7, #20
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
	...

08000bd4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b08c      	sub	sp, #48	; 0x30
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000be0:	2300      	movs	r3, #0
 8000be2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8000be4:	2200      	movs	r2, #0
 8000be6:	6879      	ldr	r1, [r7, #4]
 8000be8:	2019      	movs	r0, #25
 8000bea:	f000 f9ed 	bl	8000fc8 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000bee:	2019      	movs	r0, #25
 8000bf0:	f000 fa04 	bl	8000ffc <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000bf4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000bf8:	f7ff ffd2 	bl	8000ba0 <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000bfc:	f107 0208 	add.w	r2, r7, #8
 8000c00:	f107 030c 	add.w	r3, r7, #12
 8000c04:	4611      	mov	r1, r2
 8000c06:	4618      	mov	r0, r3
 8000c08:	f001 fe82 	bl	8002910 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000c0c:	f001 fe6a 	bl	80028e4 <HAL_RCC_GetPCLK2Freq>
 8000c10:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c14:	4a12      	ldr	r2, [pc, #72]	; (8000c60 <HAL_InitTick+0x8c>)
 8000c16:	fba2 2303 	umull	r2, r3, r2, r3
 8000c1a:	0c9b      	lsrs	r3, r3, #18
 8000c1c:	3b01      	subs	r3, #1
 8000c1e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000c20:	4b10      	ldr	r3, [pc, #64]	; (8000c64 <HAL_InitTick+0x90>)
 8000c22:	4a11      	ldr	r2, [pc, #68]	; (8000c68 <HAL_InitTick+0x94>)
 8000c24:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000c26:	4b0f      	ldr	r3, [pc, #60]	; (8000c64 <HAL_InitTick+0x90>)
 8000c28:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c2c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000c2e:	4a0d      	ldr	r2, [pc, #52]	; (8000c64 <HAL_InitTick+0x90>)
 8000c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c32:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000c34:	4b0b      	ldr	r3, [pc, #44]	; (8000c64 <HAL_InitTick+0x90>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c3a:	4b0a      	ldr	r3, [pc, #40]	; (8000c64 <HAL_InitTick+0x90>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000c40:	4808      	ldr	r0, [pc, #32]	; (8000c64 <HAL_InitTick+0x90>)
 8000c42:	f002 fb84 	bl	800334e <HAL_TIM_Base_Init>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d104      	bne.n	8000c56 <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000c4c:	4805      	ldr	r0, [pc, #20]	; (8000c64 <HAL_InitTick+0x90>)
 8000c4e:	f002 fbdf 	bl	8003410 <HAL_TIM_Base_Start_IT>
 8000c52:	4603      	mov	r3, r0
 8000c54:	e000      	b.n	8000c58 <HAL_InitTick+0x84>
  }

  /* Return function status */
  return HAL_ERROR;
 8000c56:	2301      	movs	r3, #1
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	3730      	adds	r7, #48	; 0x30
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	431bde83 	.word	0x431bde83
 8000c64:	20000444 	.word	0x20000444
 8000c68:	40012c00 	.word	0x40012c00

08000c6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c70:	e7fe      	b.n	8000c70 <NMI_Handler+0x4>

08000c72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c72:	b480      	push	{r7}
 8000c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c76:	e7fe      	b.n	8000c76 <HardFault_Handler+0x4>

08000c78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c7c:	e7fe      	b.n	8000c7c <MemManage_Handler+0x4>

08000c7e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c82:	e7fe      	b.n	8000c82 <BusFault_Handler+0x4>

08000c84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c88:	e7fe      	b.n	8000c88 <UsageFault_Handler+0x4>

08000c8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c8e:	bf00      	nop
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr

08000c98 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c9c:	4802      	ldr	r0, [pc, #8]	; (8000ca8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000c9e:	f002 fc05 	bl	80034ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000ca2:	bf00      	nop
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	20000444 	.word	0x20000444

08000cac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8000cb0:	4b24      	ldr	r3, [pc, #144]	; (8000d44 <SystemInit+0x98>)
 8000cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cb6:	4a23      	ldr	r2, [pc, #140]	; (8000d44 <SystemInit+0x98>)
 8000cb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000cc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000cca:	f043 0301 	orr.w	r3, r3, #1
 8000cce:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000cd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cd4:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000cd8:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000cda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cde:	681a      	ldr	r2, [r3, #0]
 8000ce0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000ce4:	4b18      	ldr	r3, [pc, #96]	; (8000d48 <SystemInit+0x9c>)
 8000ce6:	4013      	ands	r3, r2
 8000ce8:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000cea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000cf2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000cf6:	f023 0305 	bic.w	r3, r3, #5
 8000cfa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000cfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d02:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000d06:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d0a:	f023 0301 	bic.w	r3, r3, #1
 8000d0e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000d12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d16:	4a0d      	ldr	r2, [pc, #52]	; (8000d4c <SystemInit+0xa0>)
 8000d18:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000d1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d1e:	4a0b      	ldr	r2, [pc, #44]	; (8000d4c <SystemInit+0xa0>)
 8000d20:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d30:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000d32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d36:	2200      	movs	r2, #0
 8000d38:	619a      	str	r2, [r3, #24]
}
 8000d3a:	bf00      	nop
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr
 8000d44:	e000ed00 	.word	0xe000ed00
 8000d48:	faf6fefb 	.word	0xfaf6fefb
 8000d4c:	22041000 	.word	0x22041000

08000d50 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000d50:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d52:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d54:	3304      	adds	r3, #4

08000d56 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d56:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d58:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000d5a:	d3f9      	bcc.n	8000d50 <CopyDataInit>
  bx lr
 8000d5c:	4770      	bx	lr

08000d5e <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000d5e:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000d60:	3004      	adds	r0, #4

08000d62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000d62:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000d64:	d3fb      	bcc.n	8000d5e <FillZerobss>
  bx lr
 8000d66:	4770      	bx	lr

08000d68 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d68:	480c      	ldr	r0, [pc, #48]	; (8000d9c <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8000d6a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d6c:	f7ff ff9e 	bl	8000cac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000d70:	480b      	ldr	r0, [pc, #44]	; (8000da0 <LoopForever+0x8>)
 8000d72:	490c      	ldr	r1, [pc, #48]	; (8000da4 <LoopForever+0xc>)
 8000d74:	4a0c      	ldr	r2, [pc, #48]	; (8000da8 <LoopForever+0x10>)
 8000d76:	2300      	movs	r3, #0
 8000d78:	f7ff ffed 	bl	8000d56 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000d7c:	480b      	ldr	r0, [pc, #44]	; (8000dac <LoopForever+0x14>)
 8000d7e:	490c      	ldr	r1, [pc, #48]	; (8000db0 <LoopForever+0x18>)
 8000d80:	2300      	movs	r3, #0
 8000d82:	f7ff ffee 	bl	8000d62 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000d86:	480b      	ldr	r0, [pc, #44]	; (8000db4 <LoopForever+0x1c>)
 8000d88:	490b      	ldr	r1, [pc, #44]	; (8000db8 <LoopForever+0x20>)
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	f7ff ffe9 	bl	8000d62 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d90:	f006 f954 	bl	800703c <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8000d94:	f7ff fba6 	bl	80004e4 <main>

08000d98 <LoopForever>:

LoopForever:
  b LoopForever
 8000d98:	e7fe      	b.n	8000d98 <LoopForever>
 8000d9a:	0000      	.short	0x0000
  ldr   r0, =_estack
 8000d9c:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000da0:	20000004 	.word	0x20000004
 8000da4:	20000078 	.word	0x20000078
 8000da8:	080073fc 	.word	0x080073fc
  INIT_BSS _sbss, _ebss
 8000dac:	20000078 	.word	0x20000078
 8000db0:	20001eac 	.word	0x20001eac
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000db4:	20030000 	.word	0x20030000
 8000db8:	20030000 	.word	0x20030000

08000dbc <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000dbc:	e7fe      	b.n	8000dbc <ADC1_IRQHandler>
	...

08000dc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dca:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <HAL_Init+0x3c>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4a0b      	ldr	r2, [pc, #44]	; (8000dfc <HAL_Init+0x3c>)
 8000dd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dd4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dd6:	2003      	movs	r0, #3
 8000dd8:	f000 f8eb 	bl	8000fb2 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ddc:	200f      	movs	r0, #15
 8000dde:	f7ff fef9 	bl	8000bd4 <HAL_InitTick>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d002      	beq.n	8000dee <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000de8:	2301      	movs	r3, #1
 8000dea:	71fb      	strb	r3, [r7, #7]
 8000dec:	e001      	b.n	8000df2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000dee:	f7ff fe21 	bl	8000a34 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000df2:	79fb      	ldrb	r3, [r7, #7]
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	3708      	adds	r7, #8
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	58004000 	.word	0x58004000

08000e00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e04:	4b06      	ldr	r3, [pc, #24]	; (8000e20 <HAL_IncTick+0x20>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	461a      	mov	r2, r3
 8000e0a:	4b06      	ldr	r3, [pc, #24]	; (8000e24 <HAL_IncTick+0x24>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4413      	add	r3, r2
 8000e10:	4a04      	ldr	r2, [pc, #16]	; (8000e24 <HAL_IncTick+0x24>)
 8000e12:	6013      	str	r3, [r2, #0]
}
 8000e14:	bf00      	nop
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	2000000c 	.word	0x2000000c
 8000e24:	20000490 	.word	0x20000490

08000e28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e2c:	4b03      	ldr	r3, [pc, #12]	; (8000e3c <HAL_GetTick+0x14>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	20000490 	.word	0x20000490

08000e40 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8000e44:	4b03      	ldr	r3, [pc, #12]	; (8000e54 <HAL_GetTickPrio+0x14>)
 8000e46:	681b      	ldr	r3, [r3, #0]
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	20000008 	.word	0x20000008

08000e58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b085      	sub	sp, #20
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	f003 0307 	and.w	r3, r3, #7
 8000e66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e68:	4b0c      	ldr	r3, [pc, #48]	; (8000e9c <__NVIC_SetPriorityGrouping+0x44>)
 8000e6a:	68db      	ldr	r3, [r3, #12]
 8000e6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e6e:	68ba      	ldr	r2, [r7, #8]
 8000e70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e74:	4013      	ands	r3, r2
 8000e76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e8a:	4a04      	ldr	r2, [pc, #16]	; (8000e9c <__NVIC_SetPriorityGrouping+0x44>)
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	60d3      	str	r3, [r2, #12]
}
 8000e90:	bf00      	nop
 8000e92:	3714      	adds	r7, #20
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr
 8000e9c:	e000ed00 	.word	0xe000ed00

08000ea0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ea4:	4b04      	ldr	r3, [pc, #16]	; (8000eb8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ea6:	68db      	ldr	r3, [r3, #12]
 8000ea8:	0a1b      	lsrs	r3, r3, #8
 8000eaa:	f003 0307 	and.w	r3, r3, #7
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr
 8000eb8:	e000ed00 	.word	0xe000ed00

08000ebc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	db0b      	blt.n	8000ee6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ece:	79fb      	ldrb	r3, [r7, #7]
 8000ed0:	f003 021f 	and.w	r2, r3, #31
 8000ed4:	4907      	ldr	r1, [pc, #28]	; (8000ef4 <__NVIC_EnableIRQ+0x38>)
 8000ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eda:	095b      	lsrs	r3, r3, #5
 8000edc:	2001      	movs	r0, #1
 8000ede:	fa00 f202 	lsl.w	r2, r0, r2
 8000ee2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ee6:	bf00      	nop
 8000ee8:	370c      	adds	r7, #12
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	e000e100 	.word	0xe000e100

08000ef8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	4603      	mov	r3, r0
 8000f00:	6039      	str	r1, [r7, #0]
 8000f02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	db0a      	blt.n	8000f22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	b2da      	uxtb	r2, r3
 8000f10:	490c      	ldr	r1, [pc, #48]	; (8000f44 <__NVIC_SetPriority+0x4c>)
 8000f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f16:	0112      	lsls	r2, r2, #4
 8000f18:	b2d2      	uxtb	r2, r2
 8000f1a:	440b      	add	r3, r1
 8000f1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f20:	e00a      	b.n	8000f38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	b2da      	uxtb	r2, r3
 8000f26:	4908      	ldr	r1, [pc, #32]	; (8000f48 <__NVIC_SetPriority+0x50>)
 8000f28:	79fb      	ldrb	r3, [r7, #7]
 8000f2a:	f003 030f 	and.w	r3, r3, #15
 8000f2e:	3b04      	subs	r3, #4
 8000f30:	0112      	lsls	r2, r2, #4
 8000f32:	b2d2      	uxtb	r2, r2
 8000f34:	440b      	add	r3, r1
 8000f36:	761a      	strb	r2, [r3, #24]
}
 8000f38:	bf00      	nop
 8000f3a:	370c      	adds	r7, #12
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr
 8000f44:	e000e100 	.word	0xe000e100
 8000f48:	e000ed00 	.word	0xe000ed00

08000f4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b089      	sub	sp, #36	; 0x24
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	60f8      	str	r0, [r7, #12]
 8000f54:	60b9      	str	r1, [r7, #8]
 8000f56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	f003 0307 	and.w	r3, r3, #7
 8000f5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	f1c3 0307 	rsb	r3, r3, #7
 8000f66:	2b04      	cmp	r3, #4
 8000f68:	bf28      	it	cs
 8000f6a:	2304      	movcs	r3, #4
 8000f6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	3304      	adds	r3, #4
 8000f72:	2b06      	cmp	r3, #6
 8000f74:	d902      	bls.n	8000f7c <NVIC_EncodePriority+0x30>
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	3b03      	subs	r3, #3
 8000f7a:	e000      	b.n	8000f7e <NVIC_EncodePriority+0x32>
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f80:	f04f 32ff 	mov.w	r2, #4294967295
 8000f84:	69bb      	ldr	r3, [r7, #24]
 8000f86:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8a:	43da      	mvns	r2, r3
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	401a      	ands	r2, r3
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f94:	f04f 31ff 	mov.w	r1, #4294967295
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f9e:	43d9      	mvns	r1, r3
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fa4:	4313      	orrs	r3, r2
         );
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3724      	adds	r7, #36	; 0x24
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr

08000fb2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	b082      	sub	sp, #8
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	f7ff ff4c 	bl	8000e58 <__NVIC_SetPriorityGrouping>
}
 8000fc0:	bf00      	nop
 8000fc2:	3708      	adds	r7, #8
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	60b9      	str	r1, [r7, #8]
 8000fd2:	607a      	str	r2, [r7, #4]
 8000fd4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000fd6:	f7ff ff63 	bl	8000ea0 <__NVIC_GetPriorityGrouping>
 8000fda:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fdc:	687a      	ldr	r2, [r7, #4]
 8000fde:	68b9      	ldr	r1, [r7, #8]
 8000fe0:	6978      	ldr	r0, [r7, #20]
 8000fe2:	f7ff ffb3 	bl	8000f4c <NVIC_EncodePriority>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fec:	4611      	mov	r1, r2
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f7ff ff82 	bl	8000ef8 <__NVIC_SetPriority>
}
 8000ff4:	bf00      	nop
 8000ff6:	3718      	adds	r7, #24
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}

08000ffc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100a:	4618      	mov	r0, r3
 800100c:	f7ff ff56 	bl	8000ebc <__NVIC_EnableIRQ>
}
 8001010:	bf00      	nop
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}

08001018 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001018:	b480      	push	{r7}
 800101a:	b087      	sub	sp, #28
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001022:	2300      	movs	r3, #0
 8001024:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001026:	e14c      	b.n	80012c2 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	2101      	movs	r1, #1
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	fa01 f303 	lsl.w	r3, r1, r3
 8001034:	4013      	ands	r3, r2
 8001036:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	2b00      	cmp	r3, #0
 800103c:	f000 813e 	beq.w	80012bc <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f003 0303 	and.w	r3, r3, #3
 8001048:	2b01      	cmp	r3, #1
 800104a:	d005      	beq.n	8001058 <HAL_GPIO_Init+0x40>
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f003 0303 	and.w	r3, r3, #3
 8001054:	2b02      	cmp	r3, #2
 8001056:	d130      	bne.n	80010ba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	689b      	ldr	r3, [r3, #8]
 800105c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	2203      	movs	r2, #3
 8001064:	fa02 f303 	lsl.w	r3, r2, r3
 8001068:	43db      	mvns	r3, r3
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	4013      	ands	r3, r2
 800106e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	68da      	ldr	r2, [r3, #12]
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	693a      	ldr	r2, [r7, #16]
 800107e:	4313      	orrs	r3, r2
 8001080:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	693a      	ldr	r2, [r7, #16]
 8001086:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800108e:	2201      	movs	r2, #1
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	fa02 f303 	lsl.w	r3, r2, r3
 8001096:	43db      	mvns	r3, r3
 8001098:	693a      	ldr	r2, [r7, #16]
 800109a:	4013      	ands	r3, r2
 800109c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	091b      	lsrs	r3, r3, #4
 80010a4:	f003 0201 	and.w	r2, r3, #1
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	fa02 f303 	lsl.w	r3, r2, r3
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	f003 0303 	and.w	r3, r3, #3
 80010c2:	2b03      	cmp	r3, #3
 80010c4:	d017      	beq.n	80010f6 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	68db      	ldr	r3, [r3, #12]
 80010ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	2203      	movs	r2, #3
 80010d2:	fa02 f303 	lsl.w	r3, r2, r3
 80010d6:	43db      	mvns	r3, r3
 80010d8:	693a      	ldr	r2, [r7, #16]
 80010da:	4013      	ands	r3, r2
 80010dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	689a      	ldr	r2, [r3, #8]
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f003 0303 	and.w	r3, r3, #3
 80010fe:	2b02      	cmp	r3, #2
 8001100:	d123      	bne.n	800114a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	08da      	lsrs	r2, r3, #3
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	3208      	adds	r2, #8
 800110a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800110e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	f003 0307 	and.w	r3, r3, #7
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	220f      	movs	r2, #15
 800111a:	fa02 f303 	lsl.w	r3, r2, r3
 800111e:	43db      	mvns	r3, r3
 8001120:	693a      	ldr	r2, [r7, #16]
 8001122:	4013      	ands	r3, r2
 8001124:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	691a      	ldr	r2, [r3, #16]
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	f003 0307 	and.w	r3, r3, #7
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	fa02 f303 	lsl.w	r3, r2, r3
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	4313      	orrs	r3, r2
 800113a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	08da      	lsrs	r2, r3, #3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	3208      	adds	r2, #8
 8001144:	6939      	ldr	r1, [r7, #16]
 8001146:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	005b      	lsls	r3, r3, #1
 8001154:	2203      	movs	r2, #3
 8001156:	fa02 f303 	lsl.w	r3, r2, r3
 800115a:	43db      	mvns	r3, r3
 800115c:	693a      	ldr	r2, [r7, #16]
 800115e:	4013      	ands	r3, r2
 8001160:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f003 0203 	and.w	r2, r3, #3
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	005b      	lsls	r3, r3, #1
 800116e:	fa02 f303 	lsl.w	r3, r2, r3
 8001172:	693a      	ldr	r2, [r7, #16]
 8001174:	4313      	orrs	r3, r2
 8001176:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	693a      	ldr	r2, [r7, #16]
 800117c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001186:	2b00      	cmp	r3, #0
 8001188:	f000 8098 	beq.w	80012bc <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800118c:	4a54      	ldr	r2, [pc, #336]	; (80012e0 <HAL_GPIO_Init+0x2c8>)
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	089b      	lsrs	r3, r3, #2
 8001192:	3302      	adds	r3, #2
 8001194:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001198:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	f003 0303 	and.w	r3, r3, #3
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	220f      	movs	r2, #15
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	43db      	mvns	r3, r3
 80011aa:	693a      	ldr	r2, [r7, #16]
 80011ac:	4013      	ands	r3, r2
 80011ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80011b6:	d019      	beq.n	80011ec <HAL_GPIO_Init+0x1d4>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	4a4a      	ldr	r2, [pc, #296]	; (80012e4 <HAL_GPIO_Init+0x2cc>)
 80011bc:	4293      	cmp	r3, r2
 80011be:	d013      	beq.n	80011e8 <HAL_GPIO_Init+0x1d0>
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	4a49      	ldr	r2, [pc, #292]	; (80012e8 <HAL_GPIO_Init+0x2d0>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d00d      	beq.n	80011e4 <HAL_GPIO_Init+0x1cc>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	4a48      	ldr	r2, [pc, #288]	; (80012ec <HAL_GPIO_Init+0x2d4>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d007      	beq.n	80011e0 <HAL_GPIO_Init+0x1c8>
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	4a47      	ldr	r2, [pc, #284]	; (80012f0 <HAL_GPIO_Init+0x2d8>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d101      	bne.n	80011dc <HAL_GPIO_Init+0x1c4>
 80011d8:	2304      	movs	r3, #4
 80011da:	e008      	b.n	80011ee <HAL_GPIO_Init+0x1d6>
 80011dc:	2307      	movs	r3, #7
 80011de:	e006      	b.n	80011ee <HAL_GPIO_Init+0x1d6>
 80011e0:	2303      	movs	r3, #3
 80011e2:	e004      	b.n	80011ee <HAL_GPIO_Init+0x1d6>
 80011e4:	2302      	movs	r3, #2
 80011e6:	e002      	b.n	80011ee <HAL_GPIO_Init+0x1d6>
 80011e8:	2301      	movs	r3, #1
 80011ea:	e000      	b.n	80011ee <HAL_GPIO_Init+0x1d6>
 80011ec:	2300      	movs	r3, #0
 80011ee:	697a      	ldr	r2, [r7, #20]
 80011f0:	f002 0203 	and.w	r2, r2, #3
 80011f4:	0092      	lsls	r2, r2, #2
 80011f6:	4093      	lsls	r3, r2
 80011f8:	693a      	ldr	r2, [r7, #16]
 80011fa:	4313      	orrs	r3, r2
 80011fc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80011fe:	4938      	ldr	r1, [pc, #224]	; (80012e0 <HAL_GPIO_Init+0x2c8>)
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	089b      	lsrs	r3, r3, #2
 8001204:	3302      	adds	r3, #2
 8001206:	693a      	ldr	r2, [r7, #16]
 8001208:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800120c:	4b39      	ldr	r3, [pc, #228]	; (80012f4 <HAL_GPIO_Init+0x2dc>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	43db      	mvns	r3, r3
 8001216:	693a      	ldr	r2, [r7, #16]
 8001218:	4013      	ands	r3, r2
 800121a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001224:	2b00      	cmp	r3, #0
 8001226:	d003      	beq.n	8001230 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001228:	693a      	ldr	r2, [r7, #16]
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	4313      	orrs	r3, r2
 800122e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001230:	4a30      	ldr	r2, [pc, #192]	; (80012f4 <HAL_GPIO_Init+0x2dc>)
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001236:	4b2f      	ldr	r3, [pc, #188]	; (80012f4 <HAL_GPIO_Init+0x2dc>)
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	43db      	mvns	r3, r3
 8001240:	693a      	ldr	r2, [r7, #16]
 8001242:	4013      	ands	r3, r2
 8001244:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800124e:	2b00      	cmp	r3, #0
 8001250:	d003      	beq.n	800125a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001252:	693a      	ldr	r2, [r7, #16]
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	4313      	orrs	r3, r2
 8001258:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800125a:	4a26      	ldr	r2, [pc, #152]	; (80012f4 <HAL_GPIO_Init+0x2dc>)
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001260:	4b24      	ldr	r3, [pc, #144]	; (80012f4 <HAL_GPIO_Init+0x2dc>)
 8001262:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001266:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	43db      	mvns	r3, r3
 800126c:	693a      	ldr	r2, [r7, #16]
 800126e:	4013      	ands	r3, r2
 8001270:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800127a:	2b00      	cmp	r3, #0
 800127c:	d003      	beq.n	8001286 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800127e:	693a      	ldr	r2, [r7, #16]
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	4313      	orrs	r3, r2
 8001284:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001286:	4a1b      	ldr	r2, [pc, #108]	; (80012f4 <HAL_GPIO_Init+0x2dc>)
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 800128e:	4b19      	ldr	r3, [pc, #100]	; (80012f4 <HAL_GPIO_Init+0x2dc>)
 8001290:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001294:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	43db      	mvns	r3, r3
 800129a:	693a      	ldr	r2, [r7, #16]
 800129c:	4013      	ands	r3, r2
 800129e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d003      	beq.n	80012b4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80012ac:	693a      	ldr	r2, [r7, #16]
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80012b4:	4a0f      	ldr	r2, [pc, #60]	; (80012f4 <HAL_GPIO_Init+0x2dc>)
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	3301      	adds	r3, #1
 80012c0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	fa22 f303 	lsr.w	r3, r2, r3
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	f47f aeab 	bne.w	8001028 <HAL_GPIO_Init+0x10>
  }
}
 80012d2:	bf00      	nop
 80012d4:	bf00      	nop
 80012d6:	371c      	adds	r7, #28
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr
 80012e0:	40010000 	.word	0x40010000
 80012e4:	48000400 	.word	0x48000400
 80012e8:	48000800 	.word	0x48000800
 80012ec:	48000c00 	.word	0x48000c00
 80012f0:	48001000 	.word	0x48001000
 80012f4:	58000800 	.word	0x58000800

080012f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	460b      	mov	r3, r1
 8001302:	807b      	strh	r3, [r7, #2]
 8001304:	4613      	mov	r3, r2
 8001306:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001308:	787b      	ldrb	r3, [r7, #1]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d003      	beq.n	8001316 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800130e:	887a      	ldrh	r2, [r7, #2]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001314:	e002      	b.n	800131c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001316:	887a      	ldrh	r2, [r7, #2]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800131c:	bf00      	nop
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr

08001328 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001328:	b5f0      	push	{r4, r5, r6, r7, lr}
 800132a:	b08b      	sub	sp, #44	; 0x2c
 800132c:	af06      	add	r7, sp, #24
 800132e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d101      	bne.n	800133a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	e0dd      	b.n	80014f6 <HAL_PCD_Init+0x1ce>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	f893 32ad 	ldrb.w	r3, [r3, #685]	; 0x2ad
 8001340:	b2db      	uxtb	r3, r3
 8001342:	2b00      	cmp	r3, #0
 8001344:	d106      	bne.n	8001354 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2200      	movs	r2, #0
 800134a:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800134e:	6878      	ldr	r0, [r7, #4]
 8001350:	f7ff fbd0 	bl	8000af4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2203      	movs	r2, #3
 8001358:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad

  /* DMA Not supported for FS instance, Force to Zero */
  hpcd->Init.dma_enable = 0U;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2200      	movs	r2, #0
 8001360:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4618      	mov	r0, r3
 8001368:	f002 ffb8 	bl	80042dc <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800136c:	2300      	movs	r3, #0
 800136e:	73fb      	strb	r3, [r7, #15]
 8001370:	e04d      	b.n	800140e <HAL_PCD_Init+0xe6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001372:	7bfb      	ldrb	r3, [r7, #15]
 8001374:	6879      	ldr	r1, [r7, #4]
 8001376:	1c5a      	adds	r2, r3, #1
 8001378:	4613      	mov	r3, r2
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	4413      	add	r3, r2
 800137e:	00db      	lsls	r3, r3, #3
 8001380:	440b      	add	r3, r1
 8001382:	3305      	adds	r3, #5
 8001384:	2201      	movs	r2, #1
 8001386:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001388:	7bfb      	ldrb	r3, [r7, #15]
 800138a:	6879      	ldr	r1, [r7, #4]
 800138c:	1c5a      	adds	r2, r3, #1
 800138e:	4613      	mov	r3, r2
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	4413      	add	r3, r2
 8001394:	00db      	lsls	r3, r3, #3
 8001396:	440b      	add	r3, r1
 8001398:	3304      	adds	r3, #4
 800139a:	7bfa      	ldrb	r2, [r7, #15]
 800139c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800139e:	7bfa      	ldrb	r2, [r7, #15]
 80013a0:	7bfb      	ldrb	r3, [r7, #15]
 80013a2:	b298      	uxth	r0, r3
 80013a4:	6879      	ldr	r1, [r7, #4]
 80013a6:	4613      	mov	r3, r2
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	4413      	add	r3, r2
 80013ac:	00db      	lsls	r3, r3, #3
 80013ae:	440b      	add	r3, r1
 80013b0:	333a      	adds	r3, #58	; 0x3a
 80013b2:	4602      	mov	r2, r0
 80013b4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80013b6:	7bfb      	ldrb	r3, [r7, #15]
 80013b8:	6879      	ldr	r1, [r7, #4]
 80013ba:	1c5a      	adds	r2, r3, #1
 80013bc:	4613      	mov	r3, r2
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	4413      	add	r3, r2
 80013c2:	00db      	lsls	r3, r3, #3
 80013c4:	440b      	add	r3, r1
 80013c6:	3307      	adds	r3, #7
 80013c8:	2200      	movs	r2, #0
 80013ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80013cc:	7bfa      	ldrb	r2, [r7, #15]
 80013ce:	6879      	ldr	r1, [r7, #4]
 80013d0:	4613      	mov	r3, r2
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	4413      	add	r3, r2
 80013d6:	00db      	lsls	r3, r3, #3
 80013d8:	440b      	add	r3, r1
 80013da:	333c      	adds	r3, #60	; 0x3c
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80013e0:	7bfa      	ldrb	r2, [r7, #15]
 80013e2:	6879      	ldr	r1, [r7, #4]
 80013e4:	4613      	mov	r3, r2
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	4413      	add	r3, r2
 80013ea:	00db      	lsls	r3, r3, #3
 80013ec:	440b      	add	r3, r1
 80013ee:	3340      	adds	r3, #64	; 0x40
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80013f4:	7bfa      	ldrb	r2, [r7, #15]
 80013f6:	6879      	ldr	r1, [r7, #4]
 80013f8:	4613      	mov	r3, r2
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	4413      	add	r3, r2
 80013fe:	00db      	lsls	r3, r3, #3
 8001400:	440b      	add	r3, r1
 8001402:	3344      	adds	r3, #68	; 0x44
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001408:	7bfb      	ldrb	r3, [r7, #15]
 800140a:	3301      	adds	r3, #1
 800140c:	73fb      	strb	r3, [r7, #15]
 800140e:	7bfa      	ldrb	r2, [r7, #15]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	429a      	cmp	r2, r3
 8001416:	d3ac      	bcc.n	8001372 <HAL_PCD_Init+0x4a>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001418:	2300      	movs	r3, #0
 800141a:	73fb      	strb	r3, [r7, #15]
 800141c:	e044      	b.n	80014a8 <HAL_PCD_Init+0x180>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800141e:	7bfa      	ldrb	r2, [r7, #15]
 8001420:	6879      	ldr	r1, [r7, #4]
 8001422:	4613      	mov	r3, r2
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	4413      	add	r3, r2
 8001428:	00db      	lsls	r3, r3, #3
 800142a:	440b      	add	r3, r1
 800142c:	f203 136d 	addw	r3, r3, #365	; 0x16d
 8001430:	2200      	movs	r2, #0
 8001432:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001434:	7bfa      	ldrb	r2, [r7, #15]
 8001436:	6879      	ldr	r1, [r7, #4]
 8001438:	4613      	mov	r3, r2
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	4413      	add	r3, r2
 800143e:	00db      	lsls	r3, r3, #3
 8001440:	440b      	add	r3, r1
 8001442:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8001446:	7bfa      	ldrb	r2, [r7, #15]
 8001448:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800144a:	7bfa      	ldrb	r2, [r7, #15]
 800144c:	6879      	ldr	r1, [r7, #4]
 800144e:	4613      	mov	r3, r2
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	4413      	add	r3, r2
 8001454:	00db      	lsls	r3, r3, #3
 8001456:	440b      	add	r3, r1
 8001458:	f203 136f 	addw	r3, r3, #367	; 0x16f
 800145c:	2200      	movs	r2, #0
 800145e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001460:	7bfa      	ldrb	r2, [r7, #15]
 8001462:	6879      	ldr	r1, [r7, #4]
 8001464:	4613      	mov	r3, r2
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	4413      	add	r3, r2
 800146a:	00db      	lsls	r3, r3, #3
 800146c:	440b      	add	r3, r1
 800146e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001472:	2200      	movs	r2, #0
 8001474:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001476:	7bfa      	ldrb	r2, [r7, #15]
 8001478:	6879      	ldr	r1, [r7, #4]
 800147a:	4613      	mov	r3, r2
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	4413      	add	r3, r2
 8001480:	00db      	lsls	r3, r3, #3
 8001482:	440b      	add	r3, r1
 8001484:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001488:	2200      	movs	r2, #0
 800148a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800148c:	7bfa      	ldrb	r2, [r7, #15]
 800148e:	6879      	ldr	r1, [r7, #4]
 8001490:	4613      	mov	r3, r2
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	4413      	add	r3, r2
 8001496:	00db      	lsls	r3, r3, #3
 8001498:	440b      	add	r3, r1
 800149a:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800149e:	2200      	movs	r2, #0
 80014a0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014a2:	7bfb      	ldrb	r3, [r7, #15]
 80014a4:	3301      	adds	r3, #1
 80014a6:	73fb      	strb	r3, [r7, #15]
 80014a8:	7bfa      	ldrb	r2, [r7, #15]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	429a      	cmp	r2, r3
 80014b0:	d3b5      	bcc.n	800141e <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	603b      	str	r3, [r7, #0]
 80014b8:	687e      	ldr	r6, [r7, #4]
 80014ba:	466d      	mov	r5, sp
 80014bc:	f106 0410 	add.w	r4, r6, #16
 80014c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014c4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80014c8:	e885 0003 	stmia.w	r5, {r0, r1}
 80014cc:	1d33      	adds	r3, r6, #4
 80014ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014d0:	6838      	ldr	r0, [r7, #0]
 80014d2:	f002 ff1e 	bl	8004312 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2200      	movs	r2, #0
 80014da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  hpcd->State = HAL_PCD_STATE_READY;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2201      	movs	r2, #1
 80014e2:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	69db      	ldr	r3, [r3, #28]
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d102      	bne.n	80014f4 <HAL_PCD_Init+0x1cc>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f000 f805 	bl	80014fe <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80014f4:	2300      	movs	r3, #0
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3714      	adds	r7, #20
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080014fe <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80014fe:	b480      	push	{r7}
 8001500:	b085      	sub	sp, #20
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2201      	movs	r2, #1
 8001510:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
  hpcd->LPM_State = LPM_L0;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2200      	movs	r2, #0
 8001518:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001522:	b29b      	uxth	r3, r3
 8001524:	f043 0301 	orr.w	r3, r3, #1
 8001528:	b29a      	uxth	r2, r3
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001536:	b29b      	uxth	r3, r3
 8001538:	f043 0302 	orr.w	r3, r3, #2
 800153c:	b29a      	uxth	r2, r3
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8001544:	2300      	movs	r3, #0
}
 8001546:	4618      	mov	r0, r3
 8001548:	3714      	adds	r7, #20
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
	...

08001554 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800155c:	4b06      	ldr	r3, [pc, #24]	; (8001578 <LL_EXTI_EnableIT_0_31+0x24>)
 800155e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001562:	4905      	ldr	r1, [pc, #20]	; (8001578 <LL_EXTI_EnableIT_0_31+0x24>)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	4313      	orrs	r3, r2
 8001568:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 800156c:	bf00      	nop
 800156e:	370c      	adds	r7, #12
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr
 8001578:	58000800 	.word	0x58000800

0800157c <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8001584:	4b07      	ldr	r3, [pc, #28]	; (80015a4 <LL_EXTI_DisableIT_0_31+0x28>)
 8001586:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	43db      	mvns	r3, r3
 800158e:	4905      	ldr	r1, [pc, #20]	; (80015a4 <LL_EXTI_DisableIT_0_31+0x28>)
 8001590:	4013      	ands	r3, r2
 8001592:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8001596:	bf00      	nop
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	58000800 	.word	0x58000800

080015a8 <LL_C2_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->C2IMR1, ExtiLine);
 80015b0:	4b07      	ldr	r3, [pc, #28]	; (80015d0 <LL_C2_EXTI_DisableIT_0_31+0x28>)
 80015b2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	43db      	mvns	r3, r3
 80015ba:	4905      	ldr	r1, [pc, #20]	; (80015d0 <LL_C2_EXTI_DisableIT_0_31+0x28>)
 80015bc:	4013      	ands	r3, r2
 80015be:	f8c1 30c0 	str.w	r3, [r1, #192]	; 0xc0
}
 80015c2:	bf00      	nop
 80015c4:	370c      	adds	r7, #12
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	58000800 	.word	0x58000800

080015d4 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80015dc:	4b05      	ldr	r3, [pc, #20]	; (80015f4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	4904      	ldr	r1, [pc, #16]	; (80015f4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4313      	orrs	r3, r2
 80015e6:	600b      	str	r3, [r1, #0]

}
 80015e8:	bf00      	nop
 80015ea:	370c      	adds	r7, #12
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr
 80015f4:	58000800 	.word	0x58000800

080015f8 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8001600:	4b06      	ldr	r3, [pc, #24]	; (800161c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	43db      	mvns	r3, r3
 8001608:	4904      	ldr	r1, [pc, #16]	; (800161c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800160a:	4013      	ands	r3, r2
 800160c:	600b      	str	r3, [r1, #0]

}
 800160e:	bf00      	nop
 8001610:	370c      	adds	r7, #12
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	58000800 	.word	0x58000800

08001620 <LL_EXTI_EnableFallingTrig_0_31>:
  *         (*) value not defined in all devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8001628:	4b05      	ldr	r3, [pc, #20]	; (8001640 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800162a:	685a      	ldr	r2, [r3, #4]
 800162c:	4904      	ldr	r1, [pc, #16]	; (8001640 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4313      	orrs	r3, r2
 8001632:	604b      	str	r3, [r1, #4]
}
 8001634:	bf00      	nop
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr
 8001640:	58000800 	.word	0x58000800

08001644 <LL_EXTI_DisableFallingTrig_0_31>:
  *         (*) value not defined in all devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 800164c:	4b06      	ldr	r3, [pc, #24]	; (8001668 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800164e:	685a      	ldr	r2, [r3, #4]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	43db      	mvns	r3, r3
 8001654:	4904      	ldr	r1, [pc, #16]	; (8001668 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8001656:	4013      	ands	r3, r2
 8001658:	604b      	str	r3, [r1, #4]
}
 800165a:	bf00      	nop
 800165c:	370c      	adds	r7, #12
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	58000800 	.word	0x58000800

0800166c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001670:	4b05      	ldr	r3, [pc, #20]	; (8001688 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a04      	ldr	r2, [pc, #16]	; (8001688 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001676:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800167a:	6013      	str	r3, [r2, #0]
}
 800167c:	bf00      	nop
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	58000400 	.word	0x58000400

0800168c <HAL_PWR_ConfigPVD>:
  *         (and optionally, to select CPU2 only (not both CPU1 and CPU2):
  *         "__HAL_PWR_PVD_EXTI_DISABLE_IT()").
  * @retval None
  */
HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS bits according to PVDLevel value */
  MODIFY_REG(PWR->CR2, PWR_CR2_PLS, sConfigPVD->PVDLevel);
 8001694:	4b1d      	ldr	r3, [pc, #116]	; (800170c <HAL_PWR_ConfigPVD+0x80>)
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f023 020e 	bic.w	r2, r3, #14
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	491a      	ldr	r1, [pc, #104]	; (800170c <HAL_PWR_ConfigPVD+0x80>)
 80016a2:	4313      	orrs	r3, r2
 80016a4:	604b      	str	r3, [r1, #4]
  
  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  
  /* Note: On STM32WB series, power PVD event is not available on AIEC lines   */
  /*       (only interruption is available through AIEC line 16).             */
  __HAL_PWR_PVD_EXTI_DISABLE_IT();      /*CPU1*/
 80016a6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80016aa:	f7ff ff67 	bl	800157c <LL_EXTI_DisableIT_0_31>
  __HAL_PWR_PVD_EXTIC2_DISABLE_IT();    /*CPU2*/
 80016ae:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80016b2:	f7ff ff79 	bl	80015a8 <LL_C2_EXTI_DisableIT_0_31>
    
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 80016b6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80016ba:	f7ff ffc3 	bl	8001644 <LL_EXTI_DisableFallingTrig_0_31>
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE(); 
 80016be:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80016c2:	f7ff ff99 	bl	80015f8 <LL_EXTI_DisableRisingTrig_0_31>

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d003      	beq.n	80016da <HAL_PWR_ConfigPVD+0x4e>
  {
    /* Set CPU1 as wakeup target */
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 80016d2:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80016d6:	f7ff ff3d 	bl	8001554 <LL_EXTI_EnableIT_0_31>
  }
  
  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	f003 0301 	and.w	r3, r3, #1
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d003      	beq.n	80016ee <HAL_PWR_ConfigPVD+0x62>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 80016e6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80016ea:	f7ff ff73 	bl	80015d4 <LL_EXTI_EnableRisingTrig_0_31>
  }
  
  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	f003 0302 	and.w	r3, r3, #2
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d003      	beq.n	8001702 <HAL_PWR_ConfigPVD+0x76>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 80016fa:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80016fe:	f7ff ff8f 	bl	8001620 <LL_EXTI_EnableFallingTrig_0_31>
  }

  return HAL_OK;
 8001702:	2300      	movs	r3, #0
}
 8001704:	4618      	mov	r0, r3
 8001706:	3708      	adds	r7, #8
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	58000400 	.word	0x58000400

08001710 <HAL_PWR_EnablePVD>:
/**
  * @brief Enables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  /* Enable the power voltage detector */
  SET_BIT(PWR->CR2, PWR_CR2_PVDE);
 8001714:	4b05      	ldr	r3, [pc, #20]	; (800172c <HAL_PWR_EnablePVD+0x1c>)
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	4a04      	ldr	r2, [pc, #16]	; (800172c <HAL_PWR_EnablePVD+0x1c>)
 800171a:	f043 0301 	orr.w	r3, r3, #1
 800171e:	6053      	str	r3, [r2, #4]
}
 8001720:	bf00      	nop
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	58000400 	.word	0x58000400

08001730 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001734:	4b04      	ldr	r3, [pc, #16]	; (8001748 <HAL_PWREx_GetVoltageRange+0x18>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 800173c:	4618      	mov	r0, r3
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	58000400 	.word	0x58000400

0800174c <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001750:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800175a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800175e:	d101      	bne.n	8001764 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001760:	2301      	movs	r3, #1
 8001762:	e000      	b.n	8001766 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001764:	2300      	movs	r3, #0
}
 8001766:	4618      	mov	r0, r3
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr

08001770 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001774:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800177e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001782:	6013      	str	r3, [r2, #0]
}
 8001784:	bf00      	nop
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr

0800178e <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 800178e:	b480      	push	{r7}
 8001790:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001792:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800179c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017a0:	6013      	str	r3, [r2, #0]
}
 80017a2:	bf00      	nop
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr

080017ac <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80017b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80017be:	d101      	bne.n	80017c4 <LL_RCC_HSE_IsReady+0x18>
 80017c0:	2301      	movs	r3, #1
 80017c2:	e000      	b.n	80017c6 <LL_RCC_HSE_IsReady+0x1a>
 80017c4:	2300      	movs	r3, #0
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80017d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017e2:	6013      	str	r3, [r2, #0]
}
 80017e4:	bf00      	nop
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr

080017ee <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 80017ee:	b480      	push	{r7}
 80017f0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80017f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001800:	6013      	str	r3, [r2, #0]
}
 8001802:	bf00      	nop
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr

0800180c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001810:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800181a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800181e:	d101      	bne.n	8001824 <LL_RCC_HSI_IsReady+0x18>
 8001820:	2301      	movs	r3, #1
 8001822:	e000      	b.n	8001826 <LL_RCC_HSI_IsReady+0x1a>
 8001824:	2300      	movs	r3, #0
}
 8001826:	4618      	mov	r0, r3
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr

08001830 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001838:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	061b      	lsls	r3, r3, #24
 8001846:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800184a:	4313      	orrs	r3, r2
 800184c:	604b      	str	r3, [r1, #4]
}
 800184e:	bf00      	nop
 8001850:	370c      	adds	r7, #12
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr

0800185a <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 800185a:	b480      	push	{r7}
 800185c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800185e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001862:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001866:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800186a:	f043 0301 	orr.w	r3, r3, #1
 800186e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001872:	bf00      	nop
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001880:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001884:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001888:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800188c:	f023 0301 	bic.w	r3, r3, #1
 8001890:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001894:	bf00      	nop
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr

0800189e <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 800189e:	b480      	push	{r7}
 80018a0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80018a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018aa:	f003 0302 	and.w	r3, r3, #2
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	d101      	bne.n	80018b6 <LL_RCC_HSI48_IsReady+0x18>
 80018b2:	2301      	movs	r3, #1
 80018b4:	e000      	b.n	80018b8 <LL_RCC_HSI48_IsReady+0x1a>
 80018b6:	2300      	movs	r3, #0
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr

080018c2 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 80018c2:	b480      	push	{r7}
 80018c4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80018c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018d2:	f043 0301 	orr.w	r3, r3, #1
 80018d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80018da:	bf00      	nop
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr

080018e4 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80018e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018f4:	f023 0301 	bic.w	r3, r3, #1
 80018f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80018fc:	bf00      	nop
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr

08001906 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8001906:	b480      	push	{r7}
 8001908:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800190a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800190e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001912:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001916:	f043 0304 	orr.w	r3, r3, #4
 800191a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800191e:	bf00      	nop
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr

08001928 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800192c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001930:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001934:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001938:	f023 0304 	bic.w	r3, r3, #4
 800193c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001940:	bf00      	nop
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr

0800194a <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 800194a:	b480      	push	{r7}
 800194c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800194e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001952:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001956:	f003 0302 	and.w	r3, r3, #2
 800195a:	2b02      	cmp	r3, #2
 800195c:	d101      	bne.n	8001962 <LL_RCC_LSE_IsReady+0x18>
 800195e:	2301      	movs	r3, #1
 8001960:	e000      	b.n	8001964 <LL_RCC_LSE_IsReady+0x1a>
 8001962:	2300      	movs	r3, #0
}
 8001964:	4618      	mov	r0, r3
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr

0800196e <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 800196e:	b480      	push	{r7}
 8001970:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001972:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001976:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800197a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800197e:	f043 0301 	orr.w	r3, r3, #1
 8001982:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001986:	bf00      	nop
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr

08001990 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001994:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001998:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800199c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019a0:	f023 0301 	bic.w	r3, r3, #1
 80019a4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80019a8:	bf00      	nop
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr

080019b2 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 80019b2:	b480      	push	{r7}
 80019b4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80019b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019be:	f003 0302 	and.w	r3, r3, #2
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d101      	bne.n	80019ca <LL_RCC_LSI1_IsReady+0x18>
 80019c6:	2301      	movs	r3, #1
 80019c8:	e000      	b.n	80019cc <LL_RCC_LSI1_IsReady+0x1a>
 80019ca:	2300      	movs	r3, #0
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr

080019d6 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 80019d6:	b480      	push	{r7}
 80019d8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80019da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019e6:	f043 0304 	orr.w	r3, r3, #4
 80019ea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80019ee:	bf00      	nop
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80019fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a04:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a08:	f023 0304 	bic.w	r3, r3, #4
 8001a0c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001a10:	bf00      	nop
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr

08001a1a <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8001a1a:	b480      	push	{r7}
 8001a1c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8001a1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a26:	f003 0308 	and.w	r3, r3, #8
 8001a2a:	2b08      	cmp	r3, #8
 8001a2c:	d101      	bne.n	8001a32 <LL_RCC_LSI2_IsReady+0x18>
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e000      	b.n	8001a34 <LL_RCC_LSI2_IsReady+0x1a>
 8001a32:	2300      	movs	r3, #0
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr

08001a3e <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	b083      	sub	sp, #12
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8001a46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a4e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	021b      	lsls	r3, r3, #8
 8001a56:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8001a60:	bf00      	nop
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr

08001a6c <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001a70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a7a:	f043 0301 	orr.w	r3, r3, #1
 8001a7e:	6013      	str	r3, [r2, #0]
}
 8001a80:	bf00      	nop
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr

08001a8a <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001a8a:	b480      	push	{r7}
 8001a8c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001a8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a98:	f023 0301 	bic.w	r3, r3, #1
 8001a9c:	6013      	str	r3, [r2, #0]
}
 8001a9e:	bf00      	nop
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr

08001aa8 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001aac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 0302 	and.w	r3, r3, #2
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d101      	bne.n	8001abe <LL_RCC_MSI_IsReady+0x16>
 8001aba:	2301      	movs	r3, #1
 8001abc:	e000      	b.n	8001ac0 <LL_RCC_MSI_IsReady+0x18>
 8001abe:	2300      	movs	r3, #0
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr

08001aca <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8001aca:	b480      	push	{r7}
 8001acc:	b083      	sub	sp, #12
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8001ad2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001adc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	600b      	str	r3, [r1, #0]
}
 8001ae6:	bf00      	nop
 8001ae8:	370c      	adds	r7, #12
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr

08001af2 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8001af2:	b480      	push	{r7}
 8001af4:	b083      	sub	sp, #12
 8001af6:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8001af8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b02:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2bb0      	cmp	r3, #176	; 0xb0
 8001b08:	d901      	bls.n	8001b0e <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8001b0a:	23b0      	movs	r3, #176	; 0xb0
 8001b0c:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8001b0e:	687b      	ldr	r3, [r7, #4]
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr

08001b1c <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001b24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	021b      	lsls	r3, r3, #8
 8001b32:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b36:	4313      	orrs	r3, r2
 8001b38:	604b      	str	r3, [r1, #4]
}
 8001b3a:	bf00      	nop
 8001b3c:	370c      	adds	r7, #12
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr

08001b46 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001b46:	b480      	push	{r7}
 8001b48:	b083      	sub	sp, #12
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001b4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	f023 0203 	bic.w	r2, r3, #3
 8001b58:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	608b      	str	r3, [r1, #8]
}
 8001b62:	bf00      	nop
 8001b64:	370c      	adds	r7, #12
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr

08001b6e <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001b72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	f003 030c 	and.w	r3, r3, #12
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr

08001b86 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001b86:	b480      	push	{r7}
 8001b88:	b083      	sub	sp, #12
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001b8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b98:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	608b      	str	r3, [r1, #8]
}
 8001ba2:	bf00      	nop
 8001ba4:	370c      	adds	r7, #12
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr

08001bae <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	b083      	sub	sp, #12
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001bb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bba:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001bbe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bc2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001bce:	bf00      	nop
 8001bd0:	370c      	adds	r7, #12
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr

08001bda <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	b083      	sub	sp, #12
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001be2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001be6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001bea:	f023 020f 	bic.w	r2, r3, #15
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	091b      	lsrs	r3, r3, #4
 8001bf2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001bfc:	bf00      	nop
 8001bfe:	370c      	adds	r7, #12
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr

08001c08 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001c10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	608b      	str	r3, [r1, #8]
}
 8001c24:	bf00      	nop
 8001c26:	370c      	adds	r7, #12
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001c38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	608b      	str	r3, [r1, #8]
}
 8001c4c:	bf00      	nop
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001c5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr

08001c70 <LL_C2_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_C2_RCC_GetAHBPrescaler(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 8001c74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c78:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001c7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr

08001c8a <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8001c8a:	b480      	push	{r7}
 8001c8c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001c8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c92:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001c96:	011b      	lsls	r3, r3, #4
 8001c98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr

08001ca6 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001caa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr

08001cbe <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001cc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr

08001cd6 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001cd6:	b480      	push	{r7}
 8001cd8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001cda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ce4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ce8:	6013      	str	r3, [r2, #0]
}
 8001cea:	bf00      	nop
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr

08001cf4 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001cf8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d06:	6013      	str	r3, [r2, #0]
}
 8001d08:	bf00      	nop
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr

08001d12 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001d12:	b480      	push	{r7}
 8001d14:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001d16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d20:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001d24:	d101      	bne.n	8001d2a <LL_RCC_PLL_IsReady+0x18>
 8001d26:	2301      	movs	r3, #1
 8001d28:	e000      	b.n	8001d2c <LL_RCC_PLL_IsReady+0x1a>
 8001d2a:	2300      	movs	r3, #0
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr

08001d36 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001d36:	b480      	push	{r7}
 8001d38:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001d3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	0a1b      	lsrs	r3, r3, #8
 8001d42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr

08001d50 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001d54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d58:	68db      	ldr	r3, [r3, #12]
 8001d5a:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001d6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d70:	68db      	ldr	r3, [r3, #12]
 8001d72:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001d84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d88:	68db      	ldr	r3, [r3, #12]
 8001d8a:	f003 0303 	and.w	r3, r3, #3
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr

08001d98 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001d9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001da6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001daa:	d101      	bne.n	8001db0 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001dac:	2301      	movs	r3, #1
 8001dae:	e000      	b.n	8001db2 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001db0:	2300      	movs	r3, #0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr

08001dbc <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001dc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dc4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001dc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dcc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001dd0:	d101      	bne.n	8001dd6 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e000      	b.n	8001dd8 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8001dd6:	2300      	movs	r3, #0
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr

08001de2 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001de2:	b480      	push	{r7}
 8001de4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001de6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dea:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001dee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001df2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001df6:	d101      	bne.n	8001dfc <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e000      	b.n	8001dfe <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001dfc:	2300      	movs	r3, #0
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001e0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e16:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001e1a:	d101      	bne.n	8001e20 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e000      	b.n	8001e22 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001e20:	2300      	movs	r3, #0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001e30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e3a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001e3e:	d101      	bne.n	8001e44 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001e40:	2301      	movs	r3, #1
 8001e42:	e000      	b.n	8001e46 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001e44:	2300      	movs	r3, #0
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e50:	b590      	push	{r4, r7, lr}
 8001e52:	b08d      	sub	sp, #52	; 0x34
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d101      	bne.n	8001e62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e363      	b.n	800252a <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0320 	and.w	r3, r3, #32
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	f000 808d 	beq.w	8001f8a <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e70:	f7ff fe7d 	bl	8001b6e <LL_RCC_GetSysClkSource>
 8001e74:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e76:	f7ff ff83 	bl	8001d80 <LL_RCC_PLL_GetMainSource>
 8001e7a:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d005      	beq.n	8001e8e <HAL_RCC_OscConfig+0x3e>
 8001e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e84:	2b0c      	cmp	r3, #12
 8001e86:	d147      	bne.n	8001f18 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8001e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d144      	bne.n	8001f18 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	69db      	ldr	r3, [r3, #28]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d101      	bne.n	8001e9a <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e347      	b.n	800252a <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8001e9e:	f7ff fe28 	bl	8001af2 <LL_RCC_MSI_GetRange>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	429c      	cmp	r4, r3
 8001ea6:	d914      	bls.n	8001ed2 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eac:	4618      	mov	r0, r3
 8001eae:	f000 fd61 	bl	8002974 <RCC_SetFlashLatencyFromMSIRange>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d001      	beq.n	8001ebc <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e336      	b.n	800252a <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7ff fe02 	bl	8001aca <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6a1b      	ldr	r3, [r3, #32]
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f7ff fe26 	bl	8001b1c <LL_RCC_MSI_SetCalibTrimming>
 8001ed0:	e013      	b.n	8001efa <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7ff fdf7 	bl	8001aca <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6a1b      	ldr	r3, [r3, #32]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7ff fe1b 	bl	8001b1c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eea:	4618      	mov	r0, r3
 8001eec:	f000 fd42 	bl	8002974 <RCC_SetFlashLatencyFromMSIRange>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d001      	beq.n	8001efa <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e317      	b.n	800252a <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001efa:	f000 fcc9 	bl	8002890 <HAL_RCC_GetHCLKFreq>
 8001efe:	4603      	mov	r3, r0
 8001f00:	4aa4      	ldr	r2, [pc, #656]	; (8002194 <HAL_RCC_OscConfig+0x344>)
 8001f02:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001f04:	4ba4      	ldr	r3, [pc, #656]	; (8002198 <HAL_RCC_OscConfig+0x348>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f7fe fe63 	bl	8000bd4 <HAL_InitTick>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d039      	beq.n	8001f88 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e308      	b.n	800252a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	69db      	ldr	r3, [r3, #28]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d01e      	beq.n	8001f5e <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001f20:	f7ff fda4 	bl	8001a6c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f24:	f7fe ff80 	bl	8000e28 <HAL_GetTick>
 8001f28:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001f2a:	e008      	b.n	8001f3e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f2c:	f7fe ff7c 	bl	8000e28 <HAL_GetTick>
 8001f30:	4602      	mov	r2, r0
 8001f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d901      	bls.n	8001f3e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e2f5      	b.n	800252a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8001f3e:	f7ff fdb3 	bl	8001aa8 <LL_RCC_MSI_IsReady>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d0f1      	beq.n	8001f2c <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7ff fdbc 	bl	8001aca <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6a1b      	ldr	r3, [r3, #32]
 8001f56:	4618      	mov	r0, r3
 8001f58:	f7ff fde0 	bl	8001b1c <LL_RCC_MSI_SetCalibTrimming>
 8001f5c:	e015      	b.n	8001f8a <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001f5e:	f7ff fd94 	bl	8001a8a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f62:	f7fe ff61 	bl	8000e28 <HAL_GetTick>
 8001f66:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8001f68:	e008      	b.n	8001f7c <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f6a:	f7fe ff5d 	bl	8000e28 <HAL_GetTick>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	d901      	bls.n	8001f7c <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	e2d6      	b.n	800252a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8001f7c:	f7ff fd94 	bl	8001aa8 <LL_RCC_MSI_IsReady>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d1f1      	bne.n	8001f6a <HAL_RCC_OscConfig+0x11a>
 8001f86:	e000      	b.n	8001f8a <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001f88:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0301 	and.w	r3, r3, #1
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d047      	beq.n	8002026 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f96:	f7ff fdea 	bl	8001b6e <LL_RCC_GetSysClkSource>
 8001f9a:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f9c:	f7ff fef0 	bl	8001d80 <LL_RCC_PLL_GetMainSource>
 8001fa0:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001fa2:	6a3b      	ldr	r3, [r7, #32]
 8001fa4:	2b08      	cmp	r3, #8
 8001fa6:	d005      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x164>
 8001fa8:	6a3b      	ldr	r3, [r7, #32]
 8001faa:	2b0c      	cmp	r3, #12
 8001fac:	d108      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	2b03      	cmp	r3, #3
 8001fb2:	d105      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d134      	bne.n	8002026 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e2b4      	b.n	800252a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fc8:	d102      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x180>
 8001fca:	f7ff fbd1 	bl	8001770 <LL_RCC_HSE_Enable>
 8001fce:	e001      	b.n	8001fd4 <HAL_RCC_OscConfig+0x184>
 8001fd0:	f7ff fbdd 	bl	800178e <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d012      	beq.n	8002002 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fdc:	f7fe ff24 	bl	8000e28 <HAL_GetTick>
 8001fe0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8001fe2:	e008      	b.n	8001ff6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fe4:	f7fe ff20 	bl	8000e28 <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	2b64      	cmp	r3, #100	; 0x64
 8001ff0:	d901      	bls.n	8001ff6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e299      	b.n	800252a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8001ff6:	f7ff fbd9 	bl	80017ac <LL_RCC_HSE_IsReady>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d0f1      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x194>
 8002000:	e011      	b.n	8002026 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002002:	f7fe ff11 	bl	8000e28 <HAL_GetTick>
 8002006:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002008:	e008      	b.n	800201c <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800200a:	f7fe ff0d 	bl	8000e28 <HAL_GetTick>
 800200e:	4602      	mov	r2, r0
 8002010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	2b64      	cmp	r3, #100	; 0x64
 8002016:	d901      	bls.n	800201c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002018:	2303      	movs	r3, #3
 800201a:	e286      	b.n	800252a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 800201c:	f7ff fbc6 	bl	80017ac <LL_RCC_HSE_IsReady>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d1f1      	bne.n	800200a <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0302 	and.w	r3, r3, #2
 800202e:	2b00      	cmp	r3, #0
 8002030:	d04c      	beq.n	80020cc <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002032:	f7ff fd9c 	bl	8001b6e <LL_RCC_GetSysClkSource>
 8002036:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002038:	f7ff fea2 	bl	8001d80 <LL_RCC_PLL_GetMainSource>
 800203c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800203e:	69bb      	ldr	r3, [r7, #24]
 8002040:	2b04      	cmp	r3, #4
 8002042:	d005      	beq.n	8002050 <HAL_RCC_OscConfig+0x200>
 8002044:	69bb      	ldr	r3, [r7, #24]
 8002046:	2b0c      	cmp	r3, #12
 8002048:	d10e      	bne.n	8002068 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	2b02      	cmp	r3, #2
 800204e:	d10b      	bne.n	8002068 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d101      	bne.n	800205c <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e266      	b.n	800252a <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	691b      	ldr	r3, [r3, #16]
 8002060:	4618      	mov	r0, r3
 8002062:	f7ff fbe5 	bl	8001830 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002066:	e031      	b.n	80020cc <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d019      	beq.n	80020a4 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002070:	f7ff fbae 	bl	80017d0 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002074:	f7fe fed8 	bl	8000e28 <HAL_GetTick>
 8002078:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800207a:	e008      	b.n	800208e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800207c:	f7fe fed4 	bl	8000e28 <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	2b02      	cmp	r3, #2
 8002088:	d901      	bls.n	800208e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800208a:	2303      	movs	r3, #3
 800208c:	e24d      	b.n	800252a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800208e:	f7ff fbbd 	bl	800180c <LL_RCC_HSI_IsReady>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d0f1      	beq.n	800207c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	691b      	ldr	r3, [r3, #16]
 800209c:	4618      	mov	r0, r3
 800209e:	f7ff fbc7 	bl	8001830 <LL_RCC_HSI_SetCalibTrimming>
 80020a2:	e013      	b.n	80020cc <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020a4:	f7ff fba3 	bl	80017ee <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020a8:	f7fe febe 	bl	8000e28 <HAL_GetTick>
 80020ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80020ae:	e008      	b.n	80020c2 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020b0:	f7fe feba 	bl	8000e28 <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d901      	bls.n	80020c2 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80020be:	2303      	movs	r3, #3
 80020c0:	e233      	b.n	800252a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80020c2:	f7ff fba3 	bl	800180c <LL_RCC_HSI_IsReady>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d1f1      	bne.n	80020b0 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0308 	and.w	r3, r3, #8
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d106      	bne.n	80020e6 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	f000 80a3 	beq.w	800222c <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	695b      	ldr	r3, [r3, #20]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d076      	beq.n	80021dc <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0310 	and.w	r3, r3, #16
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d046      	beq.n	8002188 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80020fa:	f7ff fc5a 	bl	80019b2 <LL_RCC_LSI1_IsReady>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d113      	bne.n	800212c <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8002104:	f7ff fc33 	bl	800196e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002108:	f7fe fe8e 	bl	8000e28 <HAL_GetTick>
 800210c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800210e:	e008      	b.n	8002122 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002110:	f7fe fe8a 	bl	8000e28 <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	2b02      	cmp	r3, #2
 800211c:	d901      	bls.n	8002122 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e203      	b.n	800252a <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002122:	f7ff fc46 	bl	80019b2 <LL_RCC_LSI1_IsReady>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d0f1      	beq.n	8002110 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800212c:	f7ff fc53 	bl	80019d6 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002130:	f7fe fe7a 	bl	8000e28 <HAL_GetTick>
 8002134:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002136:	e008      	b.n	800214a <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002138:	f7fe fe76 	bl	8000e28 <HAL_GetTick>
 800213c:	4602      	mov	r2, r0
 800213e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	2b03      	cmp	r3, #3
 8002144:	d901      	bls.n	800214a <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8002146:	2303      	movs	r3, #3
 8002148:	e1ef      	b.n	800252a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800214a:	f7ff fc66 	bl	8001a1a <LL_RCC_LSI2_IsReady>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d0f1      	beq.n	8002138 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	699b      	ldr	r3, [r3, #24]
 8002158:	4618      	mov	r0, r3
 800215a:	f7ff fc70 	bl	8001a3e <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800215e:	f7ff fc17 	bl	8001990 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002162:	f7fe fe61 	bl	8000e28 <HAL_GetTick>
 8002166:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002168:	e008      	b.n	800217c <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800216a:	f7fe fe5d 	bl	8000e28 <HAL_GetTick>
 800216e:	4602      	mov	r2, r0
 8002170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	2b02      	cmp	r3, #2
 8002176:	d901      	bls.n	800217c <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8002178:	2303      	movs	r3, #3
 800217a:	e1d6      	b.n	800252a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800217c:	f7ff fc19 	bl	80019b2 <LL_RCC_LSI1_IsReady>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d1f1      	bne.n	800216a <HAL_RCC_OscConfig+0x31a>
 8002186:	e051      	b.n	800222c <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8002188:	f7ff fbf1 	bl	800196e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800218c:	f7fe fe4c 	bl	8000e28 <HAL_GetTick>
 8002190:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002192:	e00c      	b.n	80021ae <HAL_RCC_OscConfig+0x35e>
 8002194:	20000004 	.word	0x20000004
 8002198:	20000008 	.word	0x20000008
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800219c:	f7fe fe44 	bl	8000e28 <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e1bd      	b.n	800252a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80021ae:	f7ff fc00 	bl	80019b2 <LL_RCC_LSI1_IsReady>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d0f1      	beq.n	800219c <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80021b8:	f7ff fc1e 	bl	80019f8 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80021bc:	e008      	b.n	80021d0 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80021be:	f7fe fe33 	bl	8000e28 <HAL_GetTick>
 80021c2:	4602      	mov	r2, r0
 80021c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c6:	1ad3      	subs	r3, r2, r3
 80021c8:	2b03      	cmp	r3, #3
 80021ca:	d901      	bls.n	80021d0 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80021cc:	2303      	movs	r3, #3
 80021ce:	e1ac      	b.n	800252a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80021d0:	f7ff fc23 	bl	8001a1a <LL_RCC_LSI2_IsReady>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d1f1      	bne.n	80021be <HAL_RCC_OscConfig+0x36e>
 80021da:	e027      	b.n	800222c <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80021dc:	f7ff fc0c 	bl	80019f8 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021e0:	f7fe fe22 	bl	8000e28 <HAL_GetTick>
 80021e4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80021e6:	e008      	b.n	80021fa <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80021e8:	f7fe fe1e 	bl	8000e28 <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	2b03      	cmp	r3, #3
 80021f4:	d901      	bls.n	80021fa <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e197      	b.n	800252a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80021fa:	f7ff fc0e 	bl	8001a1a <LL_RCC_LSI2_IsReady>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d1f1      	bne.n	80021e8 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8002204:	f7ff fbc4 	bl	8001990 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002208:	f7fe fe0e 	bl	8000e28 <HAL_GetTick>
 800220c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800220e:	e008      	b.n	8002222 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002210:	f7fe fe0a 	bl	8000e28 <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	2b02      	cmp	r3, #2
 800221c:	d901      	bls.n	8002222 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e183      	b.n	800252a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002222:	f7ff fbc6 	bl	80019b2 <LL_RCC_LSI1_IsReady>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d1f1      	bne.n	8002210 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0304 	and.w	r3, r3, #4
 8002234:	2b00      	cmp	r3, #0
 8002236:	d05b      	beq.n	80022f0 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002238:	4ba7      	ldr	r3, [pc, #668]	; (80024d8 <HAL_RCC_OscConfig+0x688>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002240:	2b00      	cmp	r3, #0
 8002242:	d114      	bne.n	800226e <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002244:	f7ff fa12 	bl	800166c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002248:	f7fe fdee 	bl	8000e28 <HAL_GetTick>
 800224c:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800224e:	e008      	b.n	8002262 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002250:	f7fe fdea 	bl	8000e28 <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	2b02      	cmp	r3, #2
 800225c:	d901      	bls.n	8002262 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e163      	b.n	800252a <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002262:	4b9d      	ldr	r3, [pc, #628]	; (80024d8 <HAL_RCC_OscConfig+0x688>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800226a:	2b00      	cmp	r3, #0
 800226c:	d0f0      	beq.n	8002250 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	2b01      	cmp	r3, #1
 8002274:	d102      	bne.n	800227c <HAL_RCC_OscConfig+0x42c>
 8002276:	f7ff fb24 	bl	80018c2 <LL_RCC_LSE_Enable>
 800227a:	e00c      	b.n	8002296 <HAL_RCC_OscConfig+0x446>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	2b05      	cmp	r3, #5
 8002282:	d104      	bne.n	800228e <HAL_RCC_OscConfig+0x43e>
 8002284:	f7ff fb3f 	bl	8001906 <LL_RCC_LSE_EnableBypass>
 8002288:	f7ff fb1b 	bl	80018c2 <LL_RCC_LSE_Enable>
 800228c:	e003      	b.n	8002296 <HAL_RCC_OscConfig+0x446>
 800228e:	f7ff fb29 	bl	80018e4 <LL_RCC_LSE_Disable>
 8002292:	f7ff fb49 	bl	8001928 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d014      	beq.n	80022c8 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800229e:	f7fe fdc3 	bl	8000e28 <HAL_GetTick>
 80022a2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80022a4:	e00a      	b.n	80022bc <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022a6:	f7fe fdbf 	bl	8000e28 <HAL_GetTick>
 80022aa:	4602      	mov	r2, r0
 80022ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ae:	1ad3      	subs	r3, r2, r3
 80022b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d901      	bls.n	80022bc <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80022b8:	2303      	movs	r3, #3
 80022ba:	e136      	b.n	800252a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80022bc:	f7ff fb45 	bl	800194a <LL_RCC_LSE_IsReady>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d0ef      	beq.n	80022a6 <HAL_RCC_OscConfig+0x456>
 80022c6:	e013      	b.n	80022f0 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022c8:	f7fe fdae 	bl	8000e28 <HAL_GetTick>
 80022cc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80022ce:	e00a      	b.n	80022e6 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022d0:	f7fe fdaa 	bl	8000e28 <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	f241 3288 	movw	r2, #5000	; 0x1388
 80022de:	4293      	cmp	r3, r2
 80022e0:	d901      	bls.n	80022e6 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e121      	b.n	800252a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 80022e6:	f7ff fb30 	bl	800194a <LL_RCC_LSE_IsReady>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d1ef      	bne.n	80022d0 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d02c      	beq.n	8002356 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002300:	2b00      	cmp	r3, #0
 8002302:	d014      	beq.n	800232e <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002304:	f7ff faa9 	bl	800185a <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002308:	f7fe fd8e 	bl	8000e28 <HAL_GetTick>
 800230c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800230e:	e008      	b.n	8002322 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002310:	f7fe fd8a 	bl	8000e28 <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	2b02      	cmp	r3, #2
 800231c:	d901      	bls.n	8002322 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e103      	b.n	800252a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002322:	f7ff fabc 	bl	800189e <LL_RCC_HSI48_IsReady>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d0f1      	beq.n	8002310 <HAL_RCC_OscConfig+0x4c0>
 800232c:	e013      	b.n	8002356 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800232e:	f7ff faa5 	bl	800187c <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002332:	f7fe fd79 	bl	8000e28 <HAL_GetTick>
 8002336:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002338:	e008      	b.n	800234c <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800233a:	f7fe fd75 	bl	8000e28 <HAL_GetTick>
 800233e:	4602      	mov	r2, r0
 8002340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	2b02      	cmp	r3, #2
 8002346:	d901      	bls.n	800234c <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8002348:	2303      	movs	r3, #3
 800234a:	e0ee      	b.n	800252a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800234c:	f7ff faa7 	bl	800189e <LL_RCC_HSI48_IsReady>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d1f1      	bne.n	800233a <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800235a:	2b00      	cmp	r3, #0
 800235c:	f000 80e4 	beq.w	8002528 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002360:	f7ff fc05 	bl	8001b6e <LL_RCC_GetSysClkSource>
 8002364:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8002366:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002372:	2b02      	cmp	r3, #2
 8002374:	f040 80b4 	bne.w	80024e0 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	f003 0203 	and.w	r2, r3, #3
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002382:	429a      	cmp	r2, r3
 8002384:	d123      	bne.n	80023ce <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002390:	429a      	cmp	r2, r3
 8002392:	d11c      	bne.n	80023ce <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	0a1b      	lsrs	r3, r3, #8
 8002398:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d114      	bne.n	80023ce <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d10d      	bne.n	80023ce <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80023bc:	429a      	cmp	r2, r3
 80023be:	d106      	bne.n	80023ce <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d05d      	beq.n	800248a <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	2b0c      	cmp	r3, #12
 80023d2:	d058      	beq.n	8002486 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80023d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d001      	beq.n	80023e6 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e0a1      	b.n	800252a <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80023e6:	f7ff fc85 	bl	8001cf4 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80023ea:	f7fe fd1d 	bl	8000e28 <HAL_GetTick>
 80023ee:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023f0:	e008      	b.n	8002404 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023f2:	f7fe fd19 	bl	8000e28 <HAL_GetTick>
 80023f6:	4602      	mov	r2, r0
 80023f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	2b02      	cmp	r3, #2
 80023fe:	d901      	bls.n	8002404 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8002400:	2303      	movs	r3, #3
 8002402:	e092      	b.n	800252a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002404:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d1ef      	bne.n	80023f2 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002412:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002416:	68da      	ldr	r2, [r3, #12]
 8002418:	4b30      	ldr	r3, [pc, #192]	; (80024dc <HAL_RCC_OscConfig+0x68c>)
 800241a:	4013      	ands	r3, r2
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002424:	4311      	orrs	r1, r2
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800242a:	0212      	lsls	r2, r2, #8
 800242c:	4311      	orrs	r1, r2
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002432:	4311      	orrs	r1, r2
 8002434:	687a      	ldr	r2, [r7, #4]
 8002436:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002438:	4311      	orrs	r1, r2
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800243e:	430a      	orrs	r2, r1
 8002440:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002444:	4313      	orrs	r3, r2
 8002446:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002448:	f7ff fc45 	bl	8001cd6 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800244c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002456:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800245a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800245c:	f7fe fce4 	bl	8000e28 <HAL_GetTick>
 8002460:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002462:	e008      	b.n	8002476 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002464:	f7fe fce0 	bl	8000e28 <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	2b02      	cmp	r3, #2
 8002470:	d901      	bls.n	8002476 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e059      	b.n	800252a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002476:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d0ef      	beq.n	8002464 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002484:	e050      	b.n	8002528 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e04f      	b.n	800252a <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800248a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d147      	bne.n	8002528 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002498:	f7ff fc1d 	bl	8001cd6 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800249c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024a0:	68db      	ldr	r3, [r3, #12]
 80024a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024aa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80024ac:	f7fe fcbc 	bl	8000e28 <HAL_GetTick>
 80024b0:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024b2:	e008      	b.n	80024c6 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024b4:	f7fe fcb8 	bl	8000e28 <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	2b02      	cmp	r3, #2
 80024c0:	d901      	bls.n	80024c6 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e031      	b.n	800252a <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d0ef      	beq.n	80024b4 <HAL_RCC_OscConfig+0x664>
 80024d4:	e028      	b.n	8002528 <HAL_RCC_OscConfig+0x6d8>
 80024d6:	bf00      	nop
 80024d8:	58000400 	.word	0x58000400
 80024dc:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	2b0c      	cmp	r3, #12
 80024e4:	d01e      	beq.n	8002524 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024e6:	f7ff fc05 	bl	8001cf4 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ea:	f7fe fc9d 	bl	8000e28 <HAL_GetTick>
 80024ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024f0:	e008      	b.n	8002504 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024f2:	f7fe fc99 	bl	8000e28 <HAL_GetTick>
 80024f6:	4602      	mov	r2, r0
 80024f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d901      	bls.n	8002504 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8002500:	2303      	movs	r3, #3
 8002502:	e012      	b.n	800252a <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002504:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d1ef      	bne.n	80024f2 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8002512:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002516:	68da      	ldr	r2, [r3, #12]
 8002518:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800251c:	4b05      	ldr	r3, [pc, #20]	; (8002534 <HAL_RCC_OscConfig+0x6e4>)
 800251e:	4013      	ands	r3, r2
 8002520:	60cb      	str	r3, [r1, #12]
 8002522:	e001      	b.n	8002528 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e000      	b.n	800252a <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	3734      	adds	r7, #52	; 0x34
 800252e:	46bd      	mov	sp, r7
 8002530:	bd90      	pop	{r4, r7, pc}
 8002532:	bf00      	nop
 8002534:	eefefffc 	.word	0xeefefffc

08002538 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d101      	bne.n	800254c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e12d      	b.n	80027a8 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800254c:	4b98      	ldr	r3, [pc, #608]	; (80027b0 <HAL_RCC_ClockConfig+0x278>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0307 	and.w	r3, r3, #7
 8002554:	683a      	ldr	r2, [r7, #0]
 8002556:	429a      	cmp	r2, r3
 8002558:	d91b      	bls.n	8002592 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800255a:	4b95      	ldr	r3, [pc, #596]	; (80027b0 <HAL_RCC_ClockConfig+0x278>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f023 0207 	bic.w	r2, r3, #7
 8002562:	4993      	ldr	r1, [pc, #588]	; (80027b0 <HAL_RCC_ClockConfig+0x278>)
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	4313      	orrs	r3, r2
 8002568:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800256a:	f7fe fc5d 	bl	8000e28 <HAL_GetTick>
 800256e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002570:	e008      	b.n	8002584 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002572:	f7fe fc59 	bl	8000e28 <HAL_GetTick>
 8002576:	4602      	mov	r2, r0
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	2b02      	cmp	r3, #2
 800257e:	d901      	bls.n	8002584 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002580:	2303      	movs	r3, #3
 8002582:	e111      	b.n	80027a8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002584:	4b8a      	ldr	r3, [pc, #552]	; (80027b0 <HAL_RCC_ClockConfig+0x278>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0307 	and.w	r3, r3, #7
 800258c:	683a      	ldr	r2, [r7, #0]
 800258e:	429a      	cmp	r2, r3
 8002590:	d1ef      	bne.n	8002572 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0302 	and.w	r3, r3, #2
 800259a:	2b00      	cmp	r3, #0
 800259c:	d016      	beq.n	80025cc <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7ff faef 	bl	8001b86 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80025a8:	f7fe fc3e 	bl	8000e28 <HAL_GetTick>
 80025ac:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80025ae:	e008      	b.n	80025c2 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80025b0:	f7fe fc3a 	bl	8000e28 <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d901      	bls.n	80025c2 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e0f2      	b.n	80027a8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80025c2:	f7ff fbe9 	bl	8001d98 <LL_RCC_IsActiveFlag_HPRE>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d0f1      	beq.n	80025b0 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0320 	and.w	r3, r3, #32
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d016      	beq.n	8002606 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	695b      	ldr	r3, [r3, #20]
 80025dc:	4618      	mov	r0, r3
 80025de:	f7ff fae6 	bl	8001bae <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80025e2:	f7fe fc21 	bl	8000e28 <HAL_GetTick>
 80025e6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80025e8:	e008      	b.n	80025fc <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80025ea:	f7fe fc1d 	bl	8000e28 <HAL_GetTick>
 80025ee:	4602      	mov	r2, r0
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	2b02      	cmp	r3, #2
 80025f6:	d901      	bls.n	80025fc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80025f8:	2303      	movs	r3, #3
 80025fa:	e0d5      	b.n	80027a8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80025fc:	f7ff fbde 	bl	8001dbc <LL_RCC_IsActiveFlag_C2HPRE>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d0f1      	beq.n	80025ea <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800260e:	2b00      	cmp	r3, #0
 8002610:	d016      	beq.n	8002640 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	699b      	ldr	r3, [r3, #24]
 8002616:	4618      	mov	r0, r3
 8002618:	f7ff fadf 	bl	8001bda <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800261c:	f7fe fc04 	bl	8000e28 <HAL_GetTick>
 8002620:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002622:	e008      	b.n	8002636 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002624:	f7fe fc00 	bl	8000e28 <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	2b02      	cmp	r3, #2
 8002630:	d901      	bls.n	8002636 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e0b8      	b.n	80027a8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002636:	f7ff fbd4 	bl	8001de2 <LL_RCC_IsActiveFlag_SHDHPRE>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d0f1      	beq.n	8002624 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0304 	and.w	r3, r3, #4
 8002648:	2b00      	cmp	r3, #0
 800264a:	d016      	beq.n	800267a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	4618      	mov	r0, r3
 8002652:	f7ff fad9 	bl	8001c08 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002656:	f7fe fbe7 	bl	8000e28 <HAL_GetTick>
 800265a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800265c:	e008      	b.n	8002670 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800265e:	f7fe fbe3 	bl	8000e28 <HAL_GetTick>
 8002662:	4602      	mov	r2, r0
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	1ad3      	subs	r3, r2, r3
 8002668:	2b02      	cmp	r3, #2
 800266a:	d901      	bls.n	8002670 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800266c:	2303      	movs	r3, #3
 800266e:	e09b      	b.n	80027a8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002670:	f7ff fbca 	bl	8001e08 <LL_RCC_IsActiveFlag_PPRE1>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d0f1      	beq.n	800265e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0308 	and.w	r3, r3, #8
 8002682:	2b00      	cmp	r3, #0
 8002684:	d017      	beq.n	80026b6 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	691b      	ldr	r3, [r3, #16]
 800268a:	00db      	lsls	r3, r3, #3
 800268c:	4618      	mov	r0, r3
 800268e:	f7ff facf 	bl	8001c30 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002692:	f7fe fbc9 	bl	8000e28 <HAL_GetTick>
 8002696:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002698:	e008      	b.n	80026ac <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800269a:	f7fe fbc5 	bl	8000e28 <HAL_GetTick>
 800269e:	4602      	mov	r2, r0
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	2b02      	cmp	r3, #2
 80026a6:	d901      	bls.n	80026ac <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80026a8:	2303      	movs	r3, #3
 80026aa:	e07d      	b.n	80027a8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80026ac:	f7ff fbbe 	bl	8001e2c <LL_RCC_IsActiveFlag_PPRE2>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d0f1      	beq.n	800269a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0301 	and.w	r3, r3, #1
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d043      	beq.n	800274a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d106      	bne.n	80026d8 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80026ca:	f7ff f86f 	bl	80017ac <LL_RCC_HSE_IsReady>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d11e      	bne.n	8002712 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e067      	b.n	80027a8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	2b03      	cmp	r3, #3
 80026de:	d106      	bne.n	80026ee <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80026e0:	f7ff fb17 	bl	8001d12 <LL_RCC_PLL_IsReady>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d113      	bne.n	8002712 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e05c      	b.n	80027a8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d106      	bne.n	8002704 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80026f6:	f7ff f9d7 	bl	8001aa8 <LL_RCC_MSI_IsReady>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d108      	bne.n	8002712 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e051      	b.n	80027a8 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002704:	f7ff f882 	bl	800180c <LL_RCC_HSI_IsReady>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d101      	bne.n	8002712 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e04a      	b.n	80027a8 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	4618      	mov	r0, r3
 8002718:	f7ff fa15 	bl	8001b46 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800271c:	f7fe fb84 	bl	8000e28 <HAL_GetTick>
 8002720:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002722:	e00a      	b.n	800273a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002724:	f7fe fb80 	bl	8000e28 <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002732:	4293      	cmp	r3, r2
 8002734:	d901      	bls.n	800273a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e036      	b.n	80027a8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800273a:	f7ff fa18 	bl	8001b6e <LL_RCC_GetSysClkSource>
 800273e:	4602      	mov	r2, r0
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	429a      	cmp	r2, r3
 8002748:	d1ec      	bne.n	8002724 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800274a:	4b19      	ldr	r3, [pc, #100]	; (80027b0 <HAL_RCC_ClockConfig+0x278>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0307 	and.w	r3, r3, #7
 8002752:	683a      	ldr	r2, [r7, #0]
 8002754:	429a      	cmp	r2, r3
 8002756:	d21b      	bcs.n	8002790 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002758:	4b15      	ldr	r3, [pc, #84]	; (80027b0 <HAL_RCC_ClockConfig+0x278>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f023 0207 	bic.w	r2, r3, #7
 8002760:	4913      	ldr	r1, [pc, #76]	; (80027b0 <HAL_RCC_ClockConfig+0x278>)
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	4313      	orrs	r3, r2
 8002766:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002768:	f7fe fb5e 	bl	8000e28 <HAL_GetTick>
 800276c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800276e:	e008      	b.n	8002782 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002770:	f7fe fb5a 	bl	8000e28 <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	2b02      	cmp	r3, #2
 800277c:	d901      	bls.n	8002782 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e012      	b.n	80027a8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002782:	4b0b      	ldr	r3, [pc, #44]	; (80027b0 <HAL_RCC_ClockConfig+0x278>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0307 	and.w	r3, r3, #7
 800278a:	683a      	ldr	r2, [r7, #0]
 800278c:	429a      	cmp	r2, r3
 800278e:	d1ef      	bne.n	8002770 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002790:	f000 f87e 	bl	8002890 <HAL_RCC_GetHCLKFreq>
 8002794:	4603      	mov	r3, r0
 8002796:	4a07      	ldr	r2, [pc, #28]	; (80027b4 <HAL_RCC_ClockConfig+0x27c>)
 8002798:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800279a:	f7fe fb51 	bl	8000e40 <HAL_GetTickPrio>
 800279e:	4603      	mov	r3, r0
 80027a0:	4618      	mov	r0, r3
 80027a2:	f7fe fa17 	bl	8000bd4 <HAL_InitTick>
 80027a6:	4603      	mov	r3, r0
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3710      	adds	r7, #16
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	58004000 	.word	0x58004000
 80027b4:	20000004 	.word	0x20000004

080027b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027b8:	b590      	push	{r4, r7, lr}
 80027ba:	b085      	sub	sp, #20
 80027bc:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027be:	f7ff f9d6 	bl	8001b6e <LL_RCC_GetSysClkSource>
 80027c2:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d10a      	bne.n	80027e0 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80027ca:	f7ff f992 	bl	8001af2 <LL_RCC_MSI_GetRange>
 80027ce:	4603      	mov	r3, r0
 80027d0:	091b      	lsrs	r3, r3, #4
 80027d2:	f003 030f 	and.w	r3, r3, #15
 80027d6:	4a2b      	ldr	r2, [pc, #172]	; (8002884 <HAL_RCC_GetSysClockFreq+0xcc>)
 80027d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027dc:	60fb      	str	r3, [r7, #12]
 80027de:	e04b      	b.n	8002878 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2b04      	cmp	r3, #4
 80027e4:	d102      	bne.n	80027ec <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80027e6:	4b28      	ldr	r3, [pc, #160]	; (8002888 <HAL_RCC_GetSysClockFreq+0xd0>)
 80027e8:	60fb      	str	r3, [r7, #12]
 80027ea:	e045      	b.n	8002878 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2b08      	cmp	r3, #8
 80027f0:	d10a      	bne.n	8002808 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80027f2:	f7fe ffab 	bl	800174c <LL_RCC_HSE_IsEnabledDiv2>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d102      	bne.n	8002802 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80027fc:	4b22      	ldr	r3, [pc, #136]	; (8002888 <HAL_RCC_GetSysClockFreq+0xd0>)
 80027fe:	60fb      	str	r3, [r7, #12]
 8002800:	e03a      	b.n	8002878 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002802:	4b22      	ldr	r3, [pc, #136]	; (800288c <HAL_RCC_GetSysClockFreq+0xd4>)
 8002804:	60fb      	str	r3, [r7, #12]
 8002806:	e037      	b.n	8002878 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002808:	f7ff faba 	bl	8001d80 <LL_RCC_PLL_GetMainSource>
 800280c:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	2b02      	cmp	r3, #2
 8002812:	d003      	beq.n	800281c <HAL_RCC_GetSysClockFreq+0x64>
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	2b03      	cmp	r3, #3
 8002818:	d003      	beq.n	8002822 <HAL_RCC_GetSysClockFreq+0x6a>
 800281a:	e00d      	b.n	8002838 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800281c:	4b1a      	ldr	r3, [pc, #104]	; (8002888 <HAL_RCC_GetSysClockFreq+0xd0>)
 800281e:	60bb      	str	r3, [r7, #8]
        break;
 8002820:	e015      	b.n	800284e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002822:	f7fe ff93 	bl	800174c <LL_RCC_HSE_IsEnabledDiv2>
 8002826:	4603      	mov	r3, r0
 8002828:	2b01      	cmp	r3, #1
 800282a:	d102      	bne.n	8002832 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800282c:	4b16      	ldr	r3, [pc, #88]	; (8002888 <HAL_RCC_GetSysClockFreq+0xd0>)
 800282e:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002830:	e00d      	b.n	800284e <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8002832:	4b16      	ldr	r3, [pc, #88]	; (800288c <HAL_RCC_GetSysClockFreq+0xd4>)
 8002834:	60bb      	str	r3, [r7, #8]
        break;
 8002836:	e00a      	b.n	800284e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002838:	f7ff f95b 	bl	8001af2 <LL_RCC_MSI_GetRange>
 800283c:	4603      	mov	r3, r0
 800283e:	091b      	lsrs	r3, r3, #4
 8002840:	f003 030f 	and.w	r3, r3, #15
 8002844:	4a0f      	ldr	r2, [pc, #60]	; (8002884 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002846:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800284a:	60bb      	str	r3, [r7, #8]
        break;
 800284c:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800284e:	f7ff fa72 	bl	8001d36 <LL_RCC_PLL_GetN>
 8002852:	4602      	mov	r2, r0
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	fb03 f402 	mul.w	r4, r3, r2
 800285a:	f7ff fa85 	bl	8001d68 <LL_RCC_PLL_GetDivider>
 800285e:	4603      	mov	r3, r0
 8002860:	091b      	lsrs	r3, r3, #4
 8002862:	3301      	adds	r3, #1
 8002864:	fbb4 f4f3 	udiv	r4, r4, r3
 8002868:	f7ff fa72 	bl	8001d50 <LL_RCC_PLL_GetR>
 800286c:	4603      	mov	r3, r0
 800286e:	0f5b      	lsrs	r3, r3, #29
 8002870:	3301      	adds	r3, #1
 8002872:	fbb4 f3f3 	udiv	r3, r4, r3
 8002876:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002878:	68fb      	ldr	r3, [r7, #12]
}
 800287a:	4618      	mov	r0, r3
 800287c:	3714      	adds	r7, #20
 800287e:	46bd      	mov	sp, r7
 8002880:	bd90      	pop	{r4, r7, pc}
 8002882:	bf00      	nop
 8002884:	08007324 	.word	0x08007324
 8002888:	00f42400 	.word	0x00f42400
 800288c:	01e84800 	.word	0x01e84800

08002890 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002890:	b598      	push	{r3, r4, r7, lr}
 8002892:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002894:	f7ff ff90 	bl	80027b8 <HAL_RCC_GetSysClockFreq>
 8002898:	4604      	mov	r4, r0
 800289a:	f7ff f9dd 	bl	8001c58 <LL_RCC_GetAHBPrescaler>
 800289e:	4603      	mov	r3, r0
 80028a0:	091b      	lsrs	r3, r3, #4
 80028a2:	f003 030f 	and.w	r3, r3, #15
 80028a6:	4a03      	ldr	r2, [pc, #12]	; (80028b4 <HAL_RCC_GetHCLKFreq+0x24>)
 80028a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028ac:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	bd98      	pop	{r3, r4, r7, pc}
 80028b4:	080072c4 	.word	0x080072c4

080028b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028b8:	b598      	push	{r3, r4, r7, lr}
 80028ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80028bc:	f7ff ffe8 	bl	8002890 <HAL_RCC_GetHCLKFreq>
 80028c0:	4604      	mov	r4, r0
 80028c2:	f7ff f9f0 	bl	8001ca6 <LL_RCC_GetAPB1Prescaler>
 80028c6:	4603      	mov	r3, r0
 80028c8:	0a1b      	lsrs	r3, r3, #8
 80028ca:	f003 0307 	and.w	r3, r3, #7
 80028ce:	4a04      	ldr	r2, [pc, #16]	; (80028e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80028d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028d4:	f003 031f 	and.w	r3, r3, #31
 80028d8:	fa24 f303 	lsr.w	r3, r4, r3
}
 80028dc:	4618      	mov	r0, r3
 80028de:	bd98      	pop	{r3, r4, r7, pc}
 80028e0:	08007304 	.word	0x08007304

080028e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028e4:	b598      	push	{r3, r4, r7, lr}
 80028e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80028e8:	f7ff ffd2 	bl	8002890 <HAL_RCC_GetHCLKFreq>
 80028ec:	4604      	mov	r4, r0
 80028ee:	f7ff f9e6 	bl	8001cbe <LL_RCC_GetAPB2Prescaler>
 80028f2:	4603      	mov	r3, r0
 80028f4:	0adb      	lsrs	r3, r3, #11
 80028f6:	f003 0307 	and.w	r3, r3, #7
 80028fa:	4a04      	ldr	r2, [pc, #16]	; (800290c <HAL_RCC_GetPCLK2Freq+0x28>)
 80028fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002900:	f003 031f 	and.w	r3, r3, #31
 8002904:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002908:	4618      	mov	r0, r3
 800290a:	bd98      	pop	{r3, r4, r7, pc}
 800290c:	08007304 	.word	0x08007304

08002910 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 |
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	226f      	movs	r2, #111	; 0x6f
 800291e:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 8002920:	f7ff f925 	bl	8001b6e <LL_RCC_GetSysClkSource>
 8002924:	4602      	mov	r2, r0
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 800292a:	f7ff f995 	bl	8001c58 <LL_RCC_GetAHBPrescaler>
 800292e:	4602      	mov	r2, r0
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 8002934:	f7ff f9b7 	bl	8001ca6 <LL_RCC_GetAPB1Prescaler>
 8002938:	4602      	mov	r2, r0
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 800293e:	f7ff f9be 	bl	8001cbe <LL_RCC_GetAPB2Prescaler>
 8002942:	4602      	mov	r2, r0
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 8002948:	f7ff f992 	bl	8001c70 <LL_C2_RCC_GetAHBPrescaler>
 800294c:	4602      	mov	r2, r0
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 8002952:	f7ff f99a 	bl	8001c8a <LL_RCC_GetAHB4Prescaler>
 8002956:	4602      	mov	r2, r0
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800295c:	4b04      	ldr	r3, [pc, #16]	; (8002970 <HAL_RCC_GetClockConfig+0x60>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0207 	and.w	r2, r3, #7
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	601a      	str	r2, [r3, #0]
}
 8002968:	bf00      	nop
 800296a:	3708      	adds	r7, #8
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}
 8002970:	58004000 	.word	0x58004000

08002974 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002974:	b590      	push	{r4, r7, lr}
 8002976:	b085      	sub	sp, #20
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2bb0      	cmp	r3, #176	; 0xb0
 8002980:	d903      	bls.n	800298a <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8002982:	4b15      	ldr	r3, [pc, #84]	; (80029d8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002986:	60fb      	str	r3, [r7, #12]
 8002988:	e007      	b.n	800299a <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	091b      	lsrs	r3, r3, #4
 800298e:	f003 030f 	and.w	r3, r3, #15
 8002992:	4a11      	ldr	r2, [pc, #68]	; (80029d8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002994:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002998:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800299a:	f7ff f976 	bl	8001c8a <LL_RCC_GetAHB4Prescaler>
 800299e:	4603      	mov	r3, r0
 80029a0:	091b      	lsrs	r3, r3, #4
 80029a2:	f003 030f 	and.w	r3, r3, #15
 80029a6:	4a0d      	ldr	r2, [pc, #52]	; (80029dc <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80029a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029ac:	68fa      	ldr	r2, [r7, #12]
 80029ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80029b2:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	4a0a      	ldr	r2, [pc, #40]	; (80029e0 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 80029b8:	fba2 2303 	umull	r2, r3, r2, r3
 80029bc:	0c9c      	lsrs	r4, r3, #18
 80029be:	f7fe feb7 	bl	8001730 <HAL_PWREx_GetVoltageRange>
 80029c2:	4603      	mov	r3, r0
 80029c4:	4619      	mov	r1, r3
 80029c6:	4620      	mov	r0, r4
 80029c8:	f000 f80c 	bl	80029e4 <RCC_SetFlashLatency>
 80029cc:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3714      	adds	r7, #20
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd90      	pop	{r4, r7, pc}
 80029d6:	bf00      	nop
 80029d8:	08007324 	.word	0x08007324
 80029dc:	080072c4 	.word	0x080072c4
 80029e0:	431bde83 	.word	0x431bde83

080029e4 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80029e4:	b590      	push	{r4, r7, lr}
 80029e6:	b093      	sub	sp, #76	; 0x4c
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80029ee:	4b37      	ldr	r3, [pc, #220]	; (8002acc <RCC_SetFlashLatency+0xe8>)
 80029f0:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80029f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80029f6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80029fa:	4a35      	ldr	r2, [pc, #212]	; (8002ad0 <RCC_SetFlashLatency+0xec>)
 80029fc:	f107 031c 	add.w	r3, r7, #28
 8002a00:	ca07      	ldmia	r2, {r0, r1, r2}
 8002a02:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8002a06:	4b33      	ldr	r3, [pc, #204]	; (8002ad4 <RCC_SetFlashLatency+0xf0>)
 8002a08:	f107 040c 	add.w	r4, r7, #12
 8002a0c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a0e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002a12:	2300      	movs	r3, #0
 8002a14:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a1c:	d11a      	bne.n	8002a54 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002a1e:	2300      	movs	r3, #0
 8002a20:	643b      	str	r3, [r7, #64]	; 0x40
 8002a22:	e013      	b.n	8002a4c <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002a24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	3348      	adds	r3, #72	; 0x48
 8002a2a:	443b      	add	r3, r7
 8002a2c:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d807      	bhi.n	8002a46 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002a36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	3348      	adds	r3, #72	; 0x48
 8002a3c:	443b      	add	r3, r7
 8002a3e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002a42:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002a44:	e020      	b.n	8002a88 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002a46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a48:	3301      	adds	r3, #1
 8002a4a:	643b      	str	r3, [r7, #64]	; 0x40
 8002a4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a4e:	2b03      	cmp	r3, #3
 8002a50:	d9e8      	bls.n	8002a24 <RCC_SetFlashLatency+0x40>
 8002a52:	e019      	b.n	8002a88 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002a54:	2300      	movs	r3, #0
 8002a56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a58:	e013      	b.n	8002a82 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002a5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	3348      	adds	r3, #72	; 0x48
 8002a60:	443b      	add	r3, r7
 8002a62:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d807      	bhi.n	8002a7c <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002a6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	3348      	adds	r3, #72	; 0x48
 8002a72:	443b      	add	r3, r7
 8002a74:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002a78:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002a7a:	e005      	b.n	8002a88 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002a7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a7e:	3301      	adds	r3, #1
 8002a80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a84:	2b02      	cmp	r3, #2
 8002a86:	d9e8      	bls.n	8002a5a <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8002a88:	4b13      	ldr	r3, [pc, #76]	; (8002ad8 <RCC_SetFlashLatency+0xf4>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f023 0207 	bic.w	r2, r3, #7
 8002a90:	4911      	ldr	r1, [pc, #68]	; (8002ad8 <RCC_SetFlashLatency+0xf4>)
 8002a92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a94:	4313      	orrs	r3, r2
 8002a96:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002a98:	f7fe f9c6 	bl	8000e28 <HAL_GetTick>
 8002a9c:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002a9e:	e008      	b.n	8002ab2 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002aa0:	f7fe f9c2 	bl	8000e28 <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d901      	bls.n	8002ab2 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e007      	b.n	8002ac2 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002ab2:	4b09      	ldr	r3, [pc, #36]	; (8002ad8 <RCC_SetFlashLatency+0xf4>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0307 	and.w	r3, r3, #7
 8002aba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d1ef      	bne.n	8002aa0 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8002ac0:	2300      	movs	r3, #0
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	374c      	adds	r7, #76	; 0x4c
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd90      	pop	{r4, r7, pc}
 8002aca:	bf00      	nop
 8002acc:	08007280 	.word	0x08007280
 8002ad0:	08007290 	.word	0x08007290
 8002ad4:	0800729c 	.word	0x0800729c
 8002ad8:	58004000 	.word	0x58004000

08002adc <LL_RCC_LSE_IsEnabled>:
{
 8002adc:	b480      	push	{r7}
 8002ade:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8002ae0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ae4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ae8:	f003 0301 	and.w	r3, r3, #1
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d101      	bne.n	8002af4 <LL_RCC_LSE_IsEnabled+0x18>
 8002af0:	2301      	movs	r3, #1
 8002af2:	e000      	b.n	8002af6 <LL_RCC_LSE_IsEnabled+0x1a>
 8002af4:	2300      	movs	r3, #0
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr

08002b00 <LL_RCC_LSE_IsReady>:
{
 8002b00:	b480      	push	{r7}
 8002b02:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002b04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b0c:	f003 0302 	and.w	r3, r3, #2
 8002b10:	2b02      	cmp	r3, #2
 8002b12:	d101      	bne.n	8002b18 <LL_RCC_LSE_IsReady+0x18>
 8002b14:	2301      	movs	r3, #1
 8002b16:	e000      	b.n	8002b1a <LL_RCC_LSE_IsReady+0x1a>
 8002b18:	2300      	movs	r3, #0
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr

08002b24 <LL_RCC_MSI_EnablePLLMode>:
{
 8002b24:	b480      	push	{r7}
 8002b26:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8002b28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b32:	f043 0304 	orr.w	r3, r3, #4
 8002b36:	6013      	str	r3, [r2, #0]
}
 8002b38:	bf00      	nop
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr

08002b42 <LL_RCC_SetRFWKPClockSource>:
{
 8002b42:	b480      	push	{r7}
 8002b44:	b083      	sub	sp, #12
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8002b4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b52:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002b56:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002b62:	bf00      	nop
 8002b64:	370c      	adds	r7, #12
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr

08002b6e <LL_RCC_SetSMPSClockSource>:
{
 8002b6e:	b480      	push	{r7}
 8002b70:	b083      	sub	sp, #12
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8002b76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7c:	f023 0203 	bic.w	r2, r3, #3
 8002b80:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	4313      	orrs	r3, r2
 8002b88:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002b8a:	bf00      	nop
 8002b8c:	370c      	adds	r7, #12
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr

08002b96 <LL_RCC_SetSMPSPrescaler>:
{
 8002b96:	b480      	push	{r7}
 8002b98:	b083      	sub	sp, #12
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8002b9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002ba8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002bb2:	bf00      	nop
 8002bb4:	370c      	adds	r7, #12
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr

08002bbe <LL_RCC_SetUSARTClockSource>:
{
 8002bbe:	b480      	push	{r7}
 8002bc0:	b083      	sub	sp, #12
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8002bc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bce:	f023 0203 	bic.w	r2, r3, #3
 8002bd2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002bde:	bf00      	nop
 8002be0:	370c      	adds	r7, #12
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr

08002bea <LL_RCC_SetLPUARTClockSource>:
{
 8002bea:	b480      	push	{r7}
 8002bec:	b083      	sub	sp, #12
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002bf2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bfa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002bfe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002c0a:	bf00      	nop
 8002c0c:	370c      	adds	r7, #12
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr

08002c16 <LL_RCC_SetI2CClockSource>:
{
 8002c16:	b480      	push	{r7}
 8002c18:	b083      	sub	sp, #12
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002c1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c22:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	091b      	lsrs	r3, r3, #4
 8002c2a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002c2e:	43db      	mvns	r3, r3
 8002c30:	401a      	ands	r2, r3
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	011b      	lsls	r3, r3, #4
 8002c36:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002c3a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002c44:	bf00      	nop
 8002c46:	370c      	adds	r7, #12
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr

08002c50 <LL_RCC_SetLPTIMClockSource>:
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002c58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c5c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	0c1b      	lsrs	r3, r3, #16
 8002c64:	041b      	lsls	r3, r3, #16
 8002c66:	43db      	mvns	r3, r3
 8002c68:	401a      	ands	r2, r3
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	041b      	lsls	r3, r3, #16
 8002c6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c72:	4313      	orrs	r3, r2
 8002c74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002c78:	bf00      	nop
 8002c7a:	370c      	adds	r7, #12
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr

08002c84 <LL_RCC_SetSAIClockSource>:
{
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8002c8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c94:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c98:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002ca4:	bf00      	nop
 8002ca6:	370c      	adds	r7, #12
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr

08002cb0 <LL_RCC_SetRNGClockSource>:
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002cb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cc0:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002cc4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002cd0:	bf00      	nop
 8002cd2:	370c      	adds	r7, #12
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr

08002cdc <LL_RCC_SetCLK48ClockSource>:
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8002ce4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ce8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cec:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002cf0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002cfc:	bf00      	nop
 8002cfe:	370c      	adds	r7, #12
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr

08002d08 <LL_RCC_SetUSBClockSource>:
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	f7ff ffe3 	bl	8002cdc <LL_RCC_SetCLK48ClockSource>
}
 8002d16:	bf00      	nop
 8002d18:	3708      	adds	r7, #8
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}

08002d1e <LL_RCC_SetADCClockSource>:
{
 8002d1e:	b480      	push	{r7}
 8002d20:	b083      	sub	sp, #12
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002d26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d2e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002d32:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002d3e:	bf00      	nop
 8002d40:	370c      	adds	r7, #12
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr

08002d4a <LL_RCC_SetRTCClockSource>:
{
 8002d4a:	b480      	push	{r7}
 8002d4c:	b083      	sub	sp, #12
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002d52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d5a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d5e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002d6a:	bf00      	nop
 8002d6c:	370c      	adds	r7, #12
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr

08002d76 <LL_RCC_GetRTCClockSource>:
{
 8002d76:	b480      	push	{r7}
 8002d78:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002d7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d82:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr

08002d90 <LL_RCC_ForceBackupDomainReset>:
{
 8002d90:	b480      	push	{r7}
 8002d92:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002d94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d9c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002da0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002da4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002da8:	bf00      	nop
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr

08002db2 <LL_RCC_ReleaseBackupDomainReset>:
{
 8002db2:	b480      	push	{r7}
 8002db4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002db6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dbe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002dc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dc6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002dca:	bf00      	nop
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr

08002dd4 <LL_RCC_PLLSAI1_Enable>:
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002dd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002de2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002de6:	6013      	str	r3, [r2, #0]
}
 8002de8:	bf00      	nop
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr

08002df2 <LL_RCC_PLLSAI1_Disable>:
{
 8002df2:	b480      	push	{r7}
 8002df4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002df6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e00:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002e04:	6013      	str	r3, [r2, #0]
}
 8002e06:	bf00      	nop
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr

08002e10 <LL_RCC_PLLSAI1_IsReady>:
{
 8002e10:	b480      	push	{r7}
 8002e12:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8002e14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e1e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e22:	d101      	bne.n	8002e28 <LL_RCC_PLLSAI1_IsReady+0x18>
 8002e24:	2301      	movs	r3, #1
 8002e26:	e000      	b.n	8002e2a <LL_RCC_PLLSAI1_IsReady+0x1a>
 8002e28:	2300      	movs	r3, #0
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b088      	sub	sp, #32
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002e40:	2300      	movs	r3, #0
 8002e42:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d034      	beq.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e54:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002e58:	d021      	beq.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8002e5a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002e5e:	d81b      	bhi.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002e60:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e64:	d01d      	beq.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8002e66:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e6a:	d815      	bhi.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d00b      	beq.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8002e70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e74:	d110      	bne.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8002e76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e84:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8002e86:	e00d      	b.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	3304      	adds	r3, #4
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f000 f94d 	bl	800312c <RCCEx_PLLSAI1_ConfigNP>
 8002e92:	4603      	mov	r3, r0
 8002e94:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002e96:	e005      	b.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	77fb      	strb	r3, [r7, #31]
        break;
 8002e9c:	e002      	b.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8002e9e:	bf00      	nop
 8002ea0:	e000      	b.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8002ea2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ea4:	7ffb      	ldrb	r3, [r7, #31]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d105      	bne.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f7ff fee8 	bl	8002c84 <LL_RCC_SetSAIClockSource>
 8002eb4:	e001      	b.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002eb6:	7ffb      	ldrb	r3, [r7, #31]
 8002eb8:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d046      	beq.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8002ec6:	f7ff ff56 	bl	8002d76 <LL_RCC_GetRTCClockSource>
 8002eca:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed0:	69ba      	ldr	r2, [r7, #24]
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d03c      	beq.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002ed6:	f7fe fbc9 	bl	800166c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8002eda:	69bb      	ldr	r3, [r7, #24]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d105      	bne.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f7ff ff30 	bl	8002d4a <LL_RCC_SetRTCClockSource>
 8002eea:	e02e      	b.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8002eec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ef4:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8002ef6:	f7ff ff4b 	bl	8002d90 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8002efa:	f7ff ff5a 	bl	8002db2 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8002f0c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8002f16:	f7ff fde1 	bl	8002adc <LL_RCC_LSE_IsEnabled>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d114      	bne.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002f20:	f7fd ff82 	bl	8000e28 <HAL_GetTick>
 8002f24:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8002f26:	e00b      	b.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f28:	f7fd ff7e 	bl	8000e28 <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d902      	bls.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	77fb      	strb	r3, [r7, #31]
              break;
 8002f3e:	e004      	b.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8002f40:	f7ff fdde 	bl	8002b00 <LL_RCC_LSE_IsReady>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d1ee      	bne.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8002f4a:	7ffb      	ldrb	r3, [r7, #31]
 8002f4c:	77bb      	strb	r3, [r7, #30]
 8002f4e:	e001      	b.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f50:	7ffb      	ldrb	r3, [r7, #31]
 8002f52:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0301 	and.w	r3, r3, #1
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d004      	beq.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	699b      	ldr	r3, [r3, #24]
 8002f64:	4618      	mov	r0, r3
 8002f66:	f7ff fe2a 	bl	8002bbe <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0302 	and.w	r3, r3, #2
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d004      	beq.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	69db      	ldr	r3, [r3, #28]
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f7ff fe35 	bl	8002bea <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0310 	and.w	r3, r3, #16
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d004      	beq.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f90:	4618      	mov	r0, r3
 8002f92:	f7ff fe5d 	bl	8002c50 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0320 	and.w	r3, r3, #32
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d004      	beq.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f7ff fe52 	bl	8002c50 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0304 	and.w	r3, r3, #4
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d004      	beq.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6a1b      	ldr	r3, [r3, #32]
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f7ff fe2a 	bl	8002c16 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0308 	and.w	r3, r3, #8
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d004      	beq.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f7ff fe1f 	bl	8002c16 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d022      	beq.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f7ff fe8d 	bl	8002d08 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ff2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ff6:	d107      	bne.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8002ff8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003002:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003006:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800300c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003010:	d10b      	bne.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	3304      	adds	r3, #4
 8003016:	4618      	mov	r0, r3
 8003018:	f000 f8e3 	bl	80031e2 <RCCEx_PLLSAI1_ConfigNQ>
 800301c:	4603      	mov	r3, r0
 800301e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003020:	7ffb      	ldrb	r3, [r7, #31]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d001      	beq.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8003026:	7ffb      	ldrb	r3, [r7, #31]
 8003028:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003032:	2b00      	cmp	r3, #0
 8003034:	d02b      	beq.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800303a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800303e:	d008      	beq.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003044:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003048:	d003      	beq.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800304e:	2b00      	cmp	r3, #0
 8003050:	d105      	bne.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003056:	4618      	mov	r0, r3
 8003058:	f7ff fe2a 	bl	8002cb0 <LL_RCC_SetRNGClockSource>
 800305c:	e00a      	b.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003062:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003066:	60fb      	str	r3, [r7, #12]
 8003068:	2000      	movs	r0, #0
 800306a:	f7ff fe21 	bl	8002cb0 <LL_RCC_SetRNGClockSource>
 800306e:	68f8      	ldr	r0, [r7, #12]
 8003070:	f7ff fe34 	bl	8002cdc <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003078:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800307c:	d107      	bne.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800307e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003088:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800308c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003096:	2b00      	cmp	r3, #0
 8003098:	d022      	beq.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800309e:	4618      	mov	r0, r3
 80030a0:	f7ff fe3d 	bl	8002d1e <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80030ac:	d107      	bne.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80030ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030bc:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80030c6:	d10b      	bne.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	3304      	adds	r3, #4
 80030cc:	4618      	mov	r0, r3
 80030ce:	f000 f8e3 	bl	8003298 <RCCEx_PLLSAI1_ConfigNR>
 80030d2:	4603      	mov	r3, r0
 80030d4:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80030d6:	7ffb      	ldrb	r3, [r7, #31]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d001      	beq.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 80030dc:	7ffb      	ldrb	r3, [r7, #31]
 80030de:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d004      	beq.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030f0:	4618      	mov	r0, r3
 80030f2:	f7ff fd26 	bl	8002b42 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d009      	beq.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003106:	4618      	mov	r0, r3
 8003108:	f7ff fd45 	bl	8002b96 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003110:	4618      	mov	r0, r3
 8003112:	f7ff fd2c 	bl	8002b6e <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8003116:	7fbb      	ldrb	r3, [r7, #30]
}
 8003118:	4618      	mov	r0, r3
 800311a:	3720      	adds	r7, #32
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}

08003120 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8003124:	f7ff fcfe 	bl	8002b24 <LL_RCC_MSI_EnablePLLMode>
}
 8003128:	bf00      	nop
 800312a:	bd80      	pop	{r7, pc}

0800312c <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003134:	2300      	movs	r3, #0
 8003136:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003138:	f7ff fe5b 	bl	8002df2 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800313c:	f7fd fe74 	bl	8000e28 <HAL_GetTick>
 8003140:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003142:	e009      	b.n	8003158 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003144:	f7fd fe70 	bl	8000e28 <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	2b02      	cmp	r3, #2
 8003150:	d902      	bls.n	8003158 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	73fb      	strb	r3, [r7, #15]
      break;
 8003156:	e004      	b.n	8003162 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003158:	f7ff fe5a 	bl	8002e10 <LL_RCC_PLLSAI1_IsReady>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d1f0      	bne.n	8003144 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8003162:	7bfb      	ldrb	r3, [r7, #15]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d137      	bne.n	80031d8 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003168:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800316c:	691b      	ldr	r3, [r3, #16]
 800316e:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	021b      	lsls	r3, r3, #8
 8003178:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800317c:	4313      	orrs	r3, r2
 800317e:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8003180:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003184:	691b      	ldr	r3, [r3, #16]
 8003186:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003192:	4313      	orrs	r3, r2
 8003194:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003196:	f7ff fe1d 	bl	8002dd4 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800319a:	f7fd fe45 	bl	8000e28 <HAL_GetTick>
 800319e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80031a0:	e009      	b.n	80031b6 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80031a2:	f7fd fe41 	bl	8000e28 <HAL_GetTick>
 80031a6:	4602      	mov	r2, r0
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	1ad3      	subs	r3, r2, r3
 80031ac:	2b02      	cmp	r3, #2
 80031ae:	d902      	bls.n	80031b6 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80031b0:	2303      	movs	r3, #3
 80031b2:	73fb      	strb	r3, [r7, #15]
        break;
 80031b4:	e004      	b.n	80031c0 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80031b6:	f7ff fe2b 	bl	8002e10 <LL_RCC_PLLSAI1_IsReady>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d1f0      	bne.n	80031a2 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80031c0:	7bfb      	ldrb	r3, [r7, #15]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d108      	bne.n	80031d8 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80031c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031ca:	691a      	ldr	r2, [r3, #16]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	691b      	ldr	r3, [r3, #16]
 80031d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031d4:	4313      	orrs	r3, r2
 80031d6:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80031d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3710      	adds	r7, #16
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}

080031e2 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80031e2:	b580      	push	{r7, lr}
 80031e4:	b084      	sub	sp, #16
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80031ea:	2300      	movs	r3, #0
 80031ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80031ee:	f7ff fe00 	bl	8002df2 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80031f2:	f7fd fe19 	bl	8000e28 <HAL_GetTick>
 80031f6:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80031f8:	e009      	b.n	800320e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80031fa:	f7fd fe15 	bl	8000e28 <HAL_GetTick>
 80031fe:	4602      	mov	r2, r0
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	2b02      	cmp	r3, #2
 8003206:	d902      	bls.n	800320e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8003208:	2303      	movs	r3, #3
 800320a:	73fb      	strb	r3, [r7, #15]
      break;
 800320c:	e004      	b.n	8003218 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800320e:	f7ff fdff 	bl	8002e10 <LL_RCC_PLLSAI1_IsReady>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d1f0      	bne.n	80031fa <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8003218:	7bfb      	ldrb	r3, [r7, #15]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d137      	bne.n	800328e <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800321e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003222:	691b      	ldr	r3, [r3, #16]
 8003224:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	021b      	lsls	r3, r3, #8
 800322e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003232:	4313      	orrs	r3, r2
 8003234:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8003236:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800323a:	691b      	ldr	r3, [r3, #16]
 800323c:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003248:	4313      	orrs	r3, r2
 800324a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800324c:	f7ff fdc2 	bl	8002dd4 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003250:	f7fd fdea 	bl	8000e28 <HAL_GetTick>
 8003254:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003256:	e009      	b.n	800326c <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003258:	f7fd fde6 	bl	8000e28 <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	2b02      	cmp	r3, #2
 8003264:	d902      	bls.n	800326c <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	73fb      	strb	r3, [r7, #15]
        break;
 800326a:	e004      	b.n	8003276 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800326c:	f7ff fdd0 	bl	8002e10 <LL_RCC_PLLSAI1_IsReady>
 8003270:	4603      	mov	r3, r0
 8003272:	2b01      	cmp	r3, #1
 8003274:	d1f0      	bne.n	8003258 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8003276:	7bfb      	ldrb	r3, [r7, #15]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d108      	bne.n	800328e <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800327c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003280:	691a      	ldr	r2, [r3, #16]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	691b      	ldr	r3, [r3, #16]
 8003286:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800328a:	4313      	orrs	r3, r2
 800328c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800328e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003290:	4618      	mov	r0, r3
 8003292:	3710      	adds	r7, #16
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}

08003298 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b084      	sub	sp, #16
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80032a0:	2300      	movs	r3, #0
 80032a2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80032a4:	f7ff fda5 	bl	8002df2 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80032a8:	f7fd fdbe 	bl	8000e28 <HAL_GetTick>
 80032ac:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80032ae:	e009      	b.n	80032c4 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80032b0:	f7fd fdba 	bl	8000e28 <HAL_GetTick>
 80032b4:	4602      	mov	r2, r0
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d902      	bls.n	80032c4 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	73fb      	strb	r3, [r7, #15]
      break;
 80032c2:	e004      	b.n	80032ce <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80032c4:	f7ff fda4 	bl	8002e10 <LL_RCC_PLLSAI1_IsReady>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d1f0      	bne.n	80032b0 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80032ce:	7bfb      	ldrb	r3, [r7, #15]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d137      	bne.n	8003344 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80032d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032d8:	691b      	ldr	r3, [r3, #16]
 80032da:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	021b      	lsls	r3, r3, #8
 80032e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032e8:	4313      	orrs	r3, r2
 80032ea:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80032ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032f0:	691b      	ldr	r3, [r3, #16]
 80032f2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032fe:	4313      	orrs	r3, r2
 8003300:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003302:	f7ff fd67 	bl	8002dd4 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003306:	f7fd fd8f 	bl	8000e28 <HAL_GetTick>
 800330a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800330c:	e009      	b.n	8003322 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800330e:	f7fd fd8b 	bl	8000e28 <HAL_GetTick>
 8003312:	4602      	mov	r2, r0
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	2b02      	cmp	r3, #2
 800331a:	d902      	bls.n	8003322 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800331c:	2303      	movs	r3, #3
 800331e:	73fb      	strb	r3, [r7, #15]
        break;
 8003320:	e004      	b.n	800332c <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003322:	f7ff fd75 	bl	8002e10 <LL_RCC_PLLSAI1_IsReady>
 8003326:	4603      	mov	r3, r0
 8003328:	2b01      	cmp	r3, #1
 800332a:	d1f0      	bne.n	800330e <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800332c:	7bfb      	ldrb	r3, [r7, #15]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d108      	bne.n	8003344 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003332:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003336:	691a      	ldr	r2, [r3, #16]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	691b      	ldr	r3, [r3, #16]
 800333c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003340:	4313      	orrs	r3, r2
 8003342:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003344:	7bfb      	ldrb	r3, [r7, #15]
}
 8003346:	4618      	mov	r0, r3
 8003348:	3710      	adds	r7, #16
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}

0800334e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800334e:	b580      	push	{r7, lr}
 8003350:	b082      	sub	sp, #8
 8003352:	af00      	add	r7, sp, #0
 8003354:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d101      	bne.n	8003360 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e049      	b.n	80033f4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003366:	b2db      	uxtb	r3, r3
 8003368:	2b00      	cmp	r3, #0
 800336a:	d106      	bne.n	800337a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2200      	movs	r2, #0
 8003370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	f000 f841 	bl	80033fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2202      	movs	r2, #2
 800337e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	3304      	adds	r3, #4
 800338a:	4619      	mov	r1, r3
 800338c:	4610      	mov	r0, r2
 800338e:	f000 f9d5 	bl	800373c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2201      	movs	r2, #1
 8003396:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2201      	movs	r2, #1
 800339e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2201      	movs	r2, #1
 80033a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2201      	movs	r2, #1
 80033ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2201      	movs	r2, #1
 80033b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2201      	movs	r2, #1
 80033be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2201      	movs	r2, #1
 80033c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2201      	movs	r2, #1
 80033ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2201      	movs	r2, #1
 80033d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2201      	movs	r2, #1
 80033de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2201      	movs	r2, #1
 80033e6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2201      	movs	r2, #1
 80033ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033f2:	2300      	movs	r3, #0
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3708      	adds	r7, #8
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}

080033fc <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b083      	sub	sp, #12
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003404:	bf00      	nop
 8003406:	370c      	adds	r7, #12
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr

08003410 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003410:	b480      	push	{r7}
 8003412:	b085      	sub	sp, #20
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800341e:	b2db      	uxtb	r3, r3
 8003420:	2b01      	cmp	r3, #1
 8003422:	d001      	beq.n	8003428 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e036      	b.n	8003496 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2202      	movs	r2, #2
 800342c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	68da      	ldr	r2, [r3, #12]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f042 0201 	orr.w	r2, r2, #1
 800343e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a17      	ldr	r2, [pc, #92]	; (80034a4 <HAL_TIM_Base_Start_IT+0x94>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d004      	beq.n	8003454 <HAL_TIM_Base_Start_IT+0x44>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003452:	d115      	bne.n	8003480 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	689a      	ldr	r2, [r3, #8]
 800345a:	4b13      	ldr	r3, [pc, #76]	; (80034a8 <HAL_TIM_Base_Start_IT+0x98>)
 800345c:	4013      	ands	r3, r2
 800345e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2b06      	cmp	r3, #6
 8003464:	d015      	beq.n	8003492 <HAL_TIM_Base_Start_IT+0x82>
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800346c:	d011      	beq.n	8003492 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f042 0201 	orr.w	r2, r2, #1
 800347c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800347e:	e008      	b.n	8003492 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f042 0201 	orr.w	r2, r2, #1
 800348e:	601a      	str	r2, [r3, #0]
 8003490:	e000      	b.n	8003494 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003492:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003494:	2300      	movs	r3, #0
}
 8003496:	4618      	mov	r0, r3
 8003498:	3714      	adds	r7, #20
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr
 80034a2:	bf00      	nop
 80034a4:	40012c00 	.word	0x40012c00
 80034a8:	00010007 	.word	0x00010007

080034ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b082      	sub	sp, #8
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	f003 0302 	and.w	r3, r3, #2
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d122      	bne.n	8003508 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	f003 0302 	and.w	r3, r3, #2
 80034cc:	2b02      	cmp	r3, #2
 80034ce:	d11b      	bne.n	8003508 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f06f 0202 	mvn.w	r2, #2
 80034d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2201      	movs	r2, #1
 80034de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	699b      	ldr	r3, [r3, #24]
 80034e6:	f003 0303 	and.w	r3, r3, #3
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d003      	beq.n	80034f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f000 f905 	bl	80036fe <HAL_TIM_IC_CaptureCallback>
 80034f4:	e005      	b.n	8003502 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f000 f8f7 	bl	80036ea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f000 f908 	bl	8003712 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	691b      	ldr	r3, [r3, #16]
 800350e:	f003 0304 	and.w	r3, r3, #4
 8003512:	2b04      	cmp	r3, #4
 8003514:	d122      	bne.n	800355c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	f003 0304 	and.w	r3, r3, #4
 8003520:	2b04      	cmp	r3, #4
 8003522:	d11b      	bne.n	800355c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f06f 0204 	mvn.w	r2, #4
 800352c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2202      	movs	r2, #2
 8003532:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	699b      	ldr	r3, [r3, #24]
 800353a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800353e:	2b00      	cmp	r3, #0
 8003540:	d003      	beq.n	800354a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f000 f8db 	bl	80036fe <HAL_TIM_IC_CaptureCallback>
 8003548:	e005      	b.n	8003556 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f000 f8cd 	bl	80036ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f000 f8de 	bl	8003712 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	691b      	ldr	r3, [r3, #16]
 8003562:	f003 0308 	and.w	r3, r3, #8
 8003566:	2b08      	cmp	r3, #8
 8003568:	d122      	bne.n	80035b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	f003 0308 	and.w	r3, r3, #8
 8003574:	2b08      	cmp	r3, #8
 8003576:	d11b      	bne.n	80035b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f06f 0208 	mvn.w	r2, #8
 8003580:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2204      	movs	r2, #4
 8003586:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	69db      	ldr	r3, [r3, #28]
 800358e:	f003 0303 	and.w	r3, r3, #3
 8003592:	2b00      	cmp	r3, #0
 8003594:	d003      	beq.n	800359e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f000 f8b1 	bl	80036fe <HAL_TIM_IC_CaptureCallback>
 800359c:	e005      	b.n	80035aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f000 f8a3 	bl	80036ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f000 f8b4 	bl	8003712 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	691b      	ldr	r3, [r3, #16]
 80035b6:	f003 0310 	and.w	r3, r3, #16
 80035ba:	2b10      	cmp	r3, #16
 80035bc:	d122      	bne.n	8003604 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	f003 0310 	and.w	r3, r3, #16
 80035c8:	2b10      	cmp	r3, #16
 80035ca:	d11b      	bne.n	8003604 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f06f 0210 	mvn.w	r2, #16
 80035d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2208      	movs	r2, #8
 80035da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	69db      	ldr	r3, [r3, #28]
 80035e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d003      	beq.n	80035f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f000 f887 	bl	80036fe <HAL_TIM_IC_CaptureCallback>
 80035f0:	e005      	b.n	80035fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f000 f879 	bl	80036ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f000 f88a 	bl	8003712 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2200      	movs	r2, #0
 8003602:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	691b      	ldr	r3, [r3, #16]
 800360a:	f003 0301 	and.w	r3, r3, #1
 800360e:	2b01      	cmp	r3, #1
 8003610:	d10e      	bne.n	8003630 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	f003 0301 	and.w	r3, r3, #1
 800361c:	2b01      	cmp	r3, #1
 800361e:	d107      	bne.n	8003630 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f06f 0201 	mvn.w	r2, #1
 8003628:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f7fd f9a0 	bl	8000970 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	691b      	ldr	r3, [r3, #16]
 8003636:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800363a:	2b80      	cmp	r3, #128	; 0x80
 800363c:	d10e      	bne.n	800365c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003648:	2b80      	cmp	r3, #128	; 0x80
 800364a:	d107      	bne.n	800365c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003654:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f000 f8de 	bl	8003818 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	691b      	ldr	r3, [r3, #16]
 8003662:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003666:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800366a:	d10e      	bne.n	800368a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003676:	2b80      	cmp	r3, #128	; 0x80
 8003678:	d107      	bne.n	800368a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003682:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	f000 f8d1 	bl	800382c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	691b      	ldr	r3, [r3, #16]
 8003690:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003694:	2b40      	cmp	r3, #64	; 0x40
 8003696:	d10e      	bne.n	80036b6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	68db      	ldr	r3, [r3, #12]
 800369e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036a2:	2b40      	cmp	r3, #64	; 0x40
 80036a4:	d107      	bne.n	80036b6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80036ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f000 f838 	bl	8003726 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	691b      	ldr	r3, [r3, #16]
 80036bc:	f003 0320 	and.w	r3, r3, #32
 80036c0:	2b20      	cmp	r3, #32
 80036c2:	d10e      	bne.n	80036e2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	f003 0320 	and.w	r3, r3, #32
 80036ce:	2b20      	cmp	r3, #32
 80036d0:	d107      	bne.n	80036e2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f06f 0220 	mvn.w	r2, #32
 80036da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f000 f891 	bl	8003804 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80036e2:	bf00      	nop
 80036e4:	3708      	adds	r7, #8
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}

080036ea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036ea:	b480      	push	{r7}
 80036ec:	b083      	sub	sp, #12
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80036f2:	bf00      	nop
 80036f4:	370c      	adds	r7, #12
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr

080036fe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80036fe:	b480      	push	{r7}
 8003700:	b083      	sub	sp, #12
 8003702:	af00      	add	r7, sp, #0
 8003704:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003706:	bf00      	nop
 8003708:	370c      	adds	r7, #12
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr

08003712 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003712:	b480      	push	{r7}
 8003714:	b083      	sub	sp, #12
 8003716:	af00      	add	r7, sp, #0
 8003718:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800371a:	bf00      	nop
 800371c:	370c      	adds	r7, #12
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr

08003726 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003726:	b480      	push	{r7}
 8003728:	b083      	sub	sp, #12
 800372a:	af00      	add	r7, sp, #0
 800372c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800372e:	bf00      	nop
 8003730:	370c      	adds	r7, #12
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr
	...

0800373c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800373c:	b480      	push	{r7}
 800373e:	b085      	sub	sp, #20
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
 8003744:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	4a2a      	ldr	r2, [pc, #168]	; (80037f8 <TIM_Base_SetConfig+0xbc>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d003      	beq.n	800375c <TIM_Base_SetConfig+0x20>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800375a:	d108      	bne.n	800376e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003762:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	68fa      	ldr	r2, [r7, #12]
 800376a:	4313      	orrs	r3, r2
 800376c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4a21      	ldr	r2, [pc, #132]	; (80037f8 <TIM_Base_SetConfig+0xbc>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d00b      	beq.n	800378e <TIM_Base_SetConfig+0x52>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800377c:	d007      	beq.n	800378e <TIM_Base_SetConfig+0x52>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4a1e      	ldr	r2, [pc, #120]	; (80037fc <TIM_Base_SetConfig+0xc0>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d003      	beq.n	800378e <TIM_Base_SetConfig+0x52>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4a1d      	ldr	r2, [pc, #116]	; (8003800 <TIM_Base_SetConfig+0xc4>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d108      	bne.n	80037a0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003794:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	68db      	ldr	r3, [r3, #12]
 800379a:	68fa      	ldr	r2, [r7, #12]
 800379c:	4313      	orrs	r3, r2
 800379e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	695b      	ldr	r3, [r3, #20]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	68fa      	ldr	r2, [r7, #12]
 80037b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	689a      	ldr	r2, [r3, #8]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	4a0c      	ldr	r2, [pc, #48]	; (80037f8 <TIM_Base_SetConfig+0xbc>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d007      	beq.n	80037dc <TIM_Base_SetConfig+0xa0>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	4a0b      	ldr	r2, [pc, #44]	; (80037fc <TIM_Base_SetConfig+0xc0>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d003      	beq.n	80037dc <TIM_Base_SetConfig+0xa0>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	4a0a      	ldr	r2, [pc, #40]	; (8003800 <TIM_Base_SetConfig+0xc4>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d103      	bne.n	80037e4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	691a      	ldr	r2, [r3, #16]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2201      	movs	r2, #1
 80037e8:	615a      	str	r2, [r3, #20]
}
 80037ea:	bf00      	nop
 80037ec:	3714      	adds	r7, #20
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr
 80037f6:	bf00      	nop
 80037f8:	40012c00 	.word	0x40012c00
 80037fc:	40014400 	.word	0x40014400
 8003800:	40014800 	.word	0x40014800

08003804 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003804:	b480      	push	{r7}
 8003806:	b083      	sub	sp, #12
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800380c:	bf00      	nop
 800380e:	370c      	adds	r7, #12
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr

08003818 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003818:	b480      	push	{r7}
 800381a:	b083      	sub	sp, #12
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003820:	bf00      	nop
 8003822:	370c      	adds	r7, #12
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr

0800382c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800382c:	b480      	push	{r7}
 800382e:	b083      	sub	sp, #12
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003834:	bf00      	nop
 8003836:	370c      	adds	r7, #12
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr

08003840 <LL_RCC_GetUSARTClockSource>:
{
 8003840:	b480      	push	{r7}
 8003842:	b083      	sub	sp, #12
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8003848:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800384c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	4013      	ands	r3, r2
}
 8003854:	4618      	mov	r0, r3
 8003856:	370c      	adds	r7, #12
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr

08003860 <LL_RCC_GetLPUARTClockSource>:
{
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8003868:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800386c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	4013      	ands	r3, r2
}
 8003874:	4618      	mov	r0, r3
 8003876:	370c      	adds	r7, #12
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr

08003880 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b082      	sub	sp, #8
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d101      	bne.n	8003892 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e042      	b.n	8003918 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003898:	2b00      	cmp	r3, #0
 800389a:	d106      	bne.n	80038aa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f7fd f8e1 	bl	8000a6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2224      	movs	r2, #36	; 0x24
 80038ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f022 0201 	bic.w	r2, r2, #1
 80038c0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f000 f82c 	bl	8003920 <UART_SetConfig>
 80038c8:	4603      	mov	r3, r0
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d101      	bne.n	80038d2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e022      	b.n	8003918 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d002      	beq.n	80038e0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f000 fa46 	bl	8003d6c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	685a      	ldr	r2, [r3, #4]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	689a      	ldr	r2, [r3, #8]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f042 0201 	orr.w	r2, r2, #1
 800390e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	f000 facd 	bl	8003eb0 <UART_CheckIdleState>
 8003916:	4603      	mov	r3, r0
}
 8003918:	4618      	mov	r0, r3
 800391a:	3708      	adds	r7, #8
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}

08003920 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003920:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003924:	b08c      	sub	sp, #48	; 0x30
 8003926:	af00      	add	r7, sp, #0
 8003928:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800392a:	2300      	movs	r3, #0
 800392c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	689a      	ldr	r2, [r3, #8]
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	691b      	ldr	r3, [r3, #16]
 8003938:	431a      	orrs	r2, r3
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	695b      	ldr	r3, [r3, #20]
 800393e:	431a      	orrs	r2, r3
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	69db      	ldr	r3, [r3, #28]
 8003944:	4313      	orrs	r3, r2
 8003946:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	4baf      	ldr	r3, [pc, #700]	; (8003c0c <UART_SetConfig+0x2ec>)
 8003950:	4013      	ands	r3, r2
 8003952:	697a      	ldr	r2, [r7, #20]
 8003954:	6812      	ldr	r2, [r2, #0]
 8003956:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003958:	430b      	orrs	r3, r1
 800395a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	68da      	ldr	r2, [r3, #12]
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	430a      	orrs	r2, r1
 8003970:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	699b      	ldr	r3, [r3, #24]
 8003976:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4aa4      	ldr	r2, [pc, #656]	; (8003c10 <UART_SetConfig+0x2f0>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d004      	beq.n	800398c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	6a1b      	ldr	r3, [r3, #32]
 8003986:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003988:	4313      	orrs	r3, r2
 800398a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003996:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800399a:	697a      	ldr	r2, [r7, #20]
 800399c:	6812      	ldr	r2, [r2, #0]
 800399e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80039a0:	430b      	orrs	r3, r1
 80039a2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039aa:	f023 010f 	bic.w	r1, r3, #15
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	430a      	orrs	r2, r1
 80039b8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a95      	ldr	r2, [pc, #596]	; (8003c14 <UART_SetConfig+0x2f4>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d125      	bne.n	8003a10 <UART_SetConfig+0xf0>
 80039c4:	2003      	movs	r0, #3
 80039c6:	f7ff ff3b 	bl	8003840 <LL_RCC_GetUSARTClockSource>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b03      	cmp	r3, #3
 80039ce:	d81b      	bhi.n	8003a08 <UART_SetConfig+0xe8>
 80039d0:	a201      	add	r2, pc, #4	; (adr r2, 80039d8 <UART_SetConfig+0xb8>)
 80039d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039d6:	bf00      	nop
 80039d8:	080039e9 	.word	0x080039e9
 80039dc:	080039f9 	.word	0x080039f9
 80039e0:	080039f1 	.word	0x080039f1
 80039e4:	08003a01 	.word	0x08003a01
 80039e8:	2301      	movs	r3, #1
 80039ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039ee:	e042      	b.n	8003a76 <UART_SetConfig+0x156>
 80039f0:	2302      	movs	r3, #2
 80039f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039f6:	e03e      	b.n	8003a76 <UART_SetConfig+0x156>
 80039f8:	2304      	movs	r3, #4
 80039fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039fe:	e03a      	b.n	8003a76 <UART_SetConfig+0x156>
 8003a00:	2308      	movs	r3, #8
 8003a02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a06:	e036      	b.n	8003a76 <UART_SetConfig+0x156>
 8003a08:	2310      	movs	r3, #16
 8003a0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a0e:	e032      	b.n	8003a76 <UART_SetConfig+0x156>
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a7e      	ldr	r2, [pc, #504]	; (8003c10 <UART_SetConfig+0x2f0>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d12a      	bne.n	8003a70 <UART_SetConfig+0x150>
 8003a1a:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8003a1e:	f7ff ff1f 	bl	8003860 <LL_RCC_GetLPUARTClockSource>
 8003a22:	4603      	mov	r3, r0
 8003a24:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a28:	d01a      	beq.n	8003a60 <UART_SetConfig+0x140>
 8003a2a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a2e:	d81b      	bhi.n	8003a68 <UART_SetConfig+0x148>
 8003a30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a34:	d00c      	beq.n	8003a50 <UART_SetConfig+0x130>
 8003a36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a3a:	d815      	bhi.n	8003a68 <UART_SetConfig+0x148>
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d003      	beq.n	8003a48 <UART_SetConfig+0x128>
 8003a40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a44:	d008      	beq.n	8003a58 <UART_SetConfig+0x138>
 8003a46:	e00f      	b.n	8003a68 <UART_SetConfig+0x148>
 8003a48:	2300      	movs	r3, #0
 8003a4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a4e:	e012      	b.n	8003a76 <UART_SetConfig+0x156>
 8003a50:	2302      	movs	r3, #2
 8003a52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a56:	e00e      	b.n	8003a76 <UART_SetConfig+0x156>
 8003a58:	2304      	movs	r3, #4
 8003a5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a5e:	e00a      	b.n	8003a76 <UART_SetConfig+0x156>
 8003a60:	2308      	movs	r3, #8
 8003a62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a66:	e006      	b.n	8003a76 <UART_SetConfig+0x156>
 8003a68:	2310      	movs	r3, #16
 8003a6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a6e:	e002      	b.n	8003a76 <UART_SetConfig+0x156>
 8003a70:	2310      	movs	r3, #16
 8003a72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a65      	ldr	r2, [pc, #404]	; (8003c10 <UART_SetConfig+0x2f0>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	f040 8097 	bne.w	8003bb0 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003a82:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003a86:	2b08      	cmp	r3, #8
 8003a88:	d823      	bhi.n	8003ad2 <UART_SetConfig+0x1b2>
 8003a8a:	a201      	add	r2, pc, #4	; (adr r2, 8003a90 <UART_SetConfig+0x170>)
 8003a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a90:	08003ab5 	.word	0x08003ab5
 8003a94:	08003ad3 	.word	0x08003ad3
 8003a98:	08003abd 	.word	0x08003abd
 8003a9c:	08003ad3 	.word	0x08003ad3
 8003aa0:	08003ac3 	.word	0x08003ac3
 8003aa4:	08003ad3 	.word	0x08003ad3
 8003aa8:	08003ad3 	.word	0x08003ad3
 8003aac:	08003ad3 	.word	0x08003ad3
 8003ab0:	08003acb 	.word	0x08003acb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ab4:	f7fe ff00 	bl	80028b8 <HAL_RCC_GetPCLK1Freq>
 8003ab8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003aba:	e010      	b.n	8003ade <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003abc:	4b56      	ldr	r3, [pc, #344]	; (8003c18 <UART_SetConfig+0x2f8>)
 8003abe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003ac0:	e00d      	b.n	8003ade <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ac2:	f7fe fe79 	bl	80027b8 <HAL_RCC_GetSysClockFreq>
 8003ac6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003ac8:	e009      	b.n	8003ade <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003aca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ace:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003ad0:	e005      	b.n	8003ade <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003adc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	f000 812a 	beq.w	8003d3a <UART_SetConfig+0x41a>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aea:	4a4c      	ldr	r2, [pc, #304]	; (8003c1c <UART_SetConfig+0x2fc>)
 8003aec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003af0:	461a      	mov	r2, r3
 8003af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af4:	fbb3 f3f2 	udiv	r3, r3, r2
 8003af8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	685a      	ldr	r2, [r3, #4]
 8003afe:	4613      	mov	r3, r2
 8003b00:	005b      	lsls	r3, r3, #1
 8003b02:	4413      	add	r3, r2
 8003b04:	69ba      	ldr	r2, [r7, #24]
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d305      	bcc.n	8003b16 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003b10:	69ba      	ldr	r2, [r7, #24]
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d903      	bls.n	8003b1e <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003b1c:	e10d      	b.n	8003d3a <UART_SetConfig+0x41a>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b20:	2200      	movs	r2, #0
 8003b22:	60bb      	str	r3, [r7, #8]
 8003b24:	60fa      	str	r2, [r7, #12]
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2a:	4a3c      	ldr	r2, [pc, #240]	; (8003c1c <UART_SetConfig+0x2fc>)
 8003b2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003b30:	b29b      	uxth	r3, r3
 8003b32:	2200      	movs	r2, #0
 8003b34:	603b      	str	r3, [r7, #0]
 8003b36:	607a      	str	r2, [r7, #4]
 8003b38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b3c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003b40:	f7fc fb1e 	bl	8000180 <__aeabi_uldivmod>
 8003b44:	4602      	mov	r2, r0
 8003b46:	460b      	mov	r3, r1
 8003b48:	4610      	mov	r0, r2
 8003b4a:	4619      	mov	r1, r3
 8003b4c:	f04f 0200 	mov.w	r2, #0
 8003b50:	f04f 0300 	mov.w	r3, #0
 8003b54:	020b      	lsls	r3, r1, #8
 8003b56:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003b5a:	0202      	lsls	r2, r0, #8
 8003b5c:	6979      	ldr	r1, [r7, #20]
 8003b5e:	6849      	ldr	r1, [r1, #4]
 8003b60:	0849      	lsrs	r1, r1, #1
 8003b62:	2000      	movs	r0, #0
 8003b64:	460c      	mov	r4, r1
 8003b66:	4605      	mov	r5, r0
 8003b68:	eb12 0804 	adds.w	r8, r2, r4
 8003b6c:	eb43 0905 	adc.w	r9, r3, r5
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	2200      	movs	r2, #0
 8003b76:	469a      	mov	sl, r3
 8003b78:	4693      	mov	fp, r2
 8003b7a:	4652      	mov	r2, sl
 8003b7c:	465b      	mov	r3, fp
 8003b7e:	4640      	mov	r0, r8
 8003b80:	4649      	mov	r1, r9
 8003b82:	f7fc fafd 	bl	8000180 <__aeabi_uldivmod>
 8003b86:	4602      	mov	r2, r0
 8003b88:	460b      	mov	r3, r1
 8003b8a:	4613      	mov	r3, r2
 8003b8c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003b8e:	6a3b      	ldr	r3, [r7, #32]
 8003b90:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b94:	d308      	bcc.n	8003ba8 <UART_SetConfig+0x288>
 8003b96:	6a3b      	ldr	r3, [r7, #32]
 8003b98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b9c:	d204      	bcs.n	8003ba8 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	6a3a      	ldr	r2, [r7, #32]
 8003ba4:	60da      	str	r2, [r3, #12]
 8003ba6:	e0c8      	b.n	8003d3a <UART_SetConfig+0x41a>
        }
        else
        {
          ret = HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003bae:	e0c4      	b.n	8003d3a <UART_SetConfig+0x41a>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	69db      	ldr	r3, [r3, #28]
 8003bb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bb8:	d16d      	bne.n	8003c96 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8003bba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003bbe:	3b01      	subs	r3, #1
 8003bc0:	2b07      	cmp	r3, #7
 8003bc2:	d82d      	bhi.n	8003c20 <UART_SetConfig+0x300>
 8003bc4:	a201      	add	r2, pc, #4	; (adr r2, 8003bcc <UART_SetConfig+0x2ac>)
 8003bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bca:	bf00      	nop
 8003bcc:	08003bed 	.word	0x08003bed
 8003bd0:	08003bf5 	.word	0x08003bf5
 8003bd4:	08003c21 	.word	0x08003c21
 8003bd8:	08003bfb 	.word	0x08003bfb
 8003bdc:	08003c21 	.word	0x08003c21
 8003be0:	08003c21 	.word	0x08003c21
 8003be4:	08003c21 	.word	0x08003c21
 8003be8:	08003c03 	.word	0x08003c03
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003bec:	f7fe fe7a 	bl	80028e4 <HAL_RCC_GetPCLK2Freq>
 8003bf0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003bf2:	e01b      	b.n	8003c2c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003bf4:	4b08      	ldr	r3, [pc, #32]	; (8003c18 <UART_SetConfig+0x2f8>)
 8003bf6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003bf8:	e018      	b.n	8003c2c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bfa:	f7fe fddd 	bl	80027b8 <HAL_RCC_GetSysClockFreq>
 8003bfe:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003c00:	e014      	b.n	8003c2c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c06:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003c08:	e010      	b.n	8003c2c <UART_SetConfig+0x30c>
 8003c0a:	bf00      	nop
 8003c0c:	cfff69f3 	.word	0xcfff69f3
 8003c10:	40008000 	.word	0x40008000
 8003c14:	40013800 	.word	0x40013800
 8003c18:	00f42400 	.word	0x00f42400
 8003c1c:	08007364 	.word	0x08007364
      default:
        pclk = 0U;
 8003c20:	2300      	movs	r3, #0
 8003c22:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003c2a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	f000 8083 	beq.w	8003d3a <UART_SetConfig+0x41a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c38:	4a4a      	ldr	r2, [pc, #296]	; (8003d64 <UART_SetConfig+0x444>)
 8003c3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003c3e:	461a      	mov	r2, r3
 8003c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c42:	fbb3 f3f2 	udiv	r3, r3, r2
 8003c46:	005a      	lsls	r2, r3, #1
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	085b      	lsrs	r3, r3, #1
 8003c4e:	441a      	add	r2, r3
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c58:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c5a:	6a3b      	ldr	r3, [r7, #32]
 8003c5c:	2b0f      	cmp	r3, #15
 8003c5e:	d916      	bls.n	8003c8e <UART_SetConfig+0x36e>
 8003c60:	6a3b      	ldr	r3, [r7, #32]
 8003c62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c66:	d212      	bcs.n	8003c8e <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c68:	6a3b      	ldr	r3, [r7, #32]
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	f023 030f 	bic.w	r3, r3, #15
 8003c70:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c72:	6a3b      	ldr	r3, [r7, #32]
 8003c74:	085b      	lsrs	r3, r3, #1
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	f003 0307 	and.w	r3, r3, #7
 8003c7c:	b29a      	uxth	r2, r3
 8003c7e:	8bfb      	ldrh	r3, [r7, #30]
 8003c80:	4313      	orrs	r3, r2
 8003c82:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	8bfa      	ldrh	r2, [r7, #30]
 8003c8a:	60da      	str	r2, [r3, #12]
 8003c8c:	e055      	b.n	8003d3a <UART_SetConfig+0x41a>
      }
      else
      {
        ret = HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003c94:	e051      	b.n	8003d3a <UART_SetConfig+0x41a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003c96:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003c9a:	3b01      	subs	r3, #1
 8003c9c:	2b07      	cmp	r3, #7
 8003c9e:	d822      	bhi.n	8003ce6 <UART_SetConfig+0x3c6>
 8003ca0:	a201      	add	r2, pc, #4	; (adr r2, 8003ca8 <UART_SetConfig+0x388>)
 8003ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ca6:	bf00      	nop
 8003ca8:	08003cc9 	.word	0x08003cc9
 8003cac:	08003cd1 	.word	0x08003cd1
 8003cb0:	08003ce7 	.word	0x08003ce7
 8003cb4:	08003cd7 	.word	0x08003cd7
 8003cb8:	08003ce7 	.word	0x08003ce7
 8003cbc:	08003ce7 	.word	0x08003ce7
 8003cc0:	08003ce7 	.word	0x08003ce7
 8003cc4:	08003cdf 	.word	0x08003cdf
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003cc8:	f7fe fe0c 	bl	80028e4 <HAL_RCC_GetPCLK2Freq>
 8003ccc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003cce:	e010      	b.n	8003cf2 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003cd0:	4b25      	ldr	r3, [pc, #148]	; (8003d68 <UART_SetConfig+0x448>)
 8003cd2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003cd4:	e00d      	b.n	8003cf2 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cd6:	f7fe fd6f 	bl	80027b8 <HAL_RCC_GetSysClockFreq>
 8003cda:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003cdc:	e009      	b.n	8003cf2 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003cde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ce2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003ce4:	e005      	b.n	8003cf2 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003cf0:	bf00      	nop
    }

    if (pclk != 0U)
 8003cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d020      	beq.n	8003d3a <UART_SetConfig+0x41a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfc:	4a19      	ldr	r2, [pc, #100]	; (8003d64 <UART_SetConfig+0x444>)
 8003cfe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003d02:	461a      	mov	r2, r3
 8003d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d06:	fbb3 f2f2 	udiv	r2, r3, r2
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	085b      	lsrs	r3, r3, #1
 8003d10:	441a      	add	r2, r3
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d1a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d1c:	6a3b      	ldr	r3, [r7, #32]
 8003d1e:	2b0f      	cmp	r3, #15
 8003d20:	d908      	bls.n	8003d34 <UART_SetConfig+0x414>
 8003d22:	6a3b      	ldr	r3, [r7, #32]
 8003d24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d28:	d204      	bcs.n	8003d34 <UART_SetConfig+0x414>
      {
        huart->Instance->BRR = usartdiv;
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	6a3a      	ldr	r2, [r7, #32]
 8003d30:	60da      	str	r2, [r3, #12]
 8003d32:	e002      	b.n	8003d3a <UART_SetConfig+0x41a>
      }
      else
      {
        ret = HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	2201      	movs	r2, #1
 8003d46:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	2200      	movs	r2, #0
 8003d54:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003d56:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3730      	adds	r7, #48	; 0x30
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d64:	08007364 	.word	0x08007364
 8003d68:	00f42400 	.word	0x00f42400

08003d6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d78:	f003 0301 	and.w	r3, r3, #1
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d00a      	beq.n	8003d96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	430a      	orrs	r2, r1
 8003d94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d9a:	f003 0302 	and.w	r3, r3, #2
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d00a      	beq.n	8003db8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	430a      	orrs	r2, r1
 8003db6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dbc:	f003 0304 	and.w	r3, r3, #4
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d00a      	beq.n	8003dda <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	430a      	orrs	r2, r1
 8003dd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dde:	f003 0308 	and.w	r3, r3, #8
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d00a      	beq.n	8003dfc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	430a      	orrs	r2, r1
 8003dfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e00:	f003 0310 	and.w	r3, r3, #16
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d00a      	beq.n	8003e1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	430a      	orrs	r2, r1
 8003e1c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e22:	f003 0320 	and.w	r3, r3, #32
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d00a      	beq.n	8003e40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	430a      	orrs	r2, r1
 8003e3e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d01a      	beq.n	8003e82 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	430a      	orrs	r2, r1
 8003e60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e6a:	d10a      	bne.n	8003e82 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	430a      	orrs	r2, r1
 8003e80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d00a      	beq.n	8003ea4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	430a      	orrs	r2, r1
 8003ea2:	605a      	str	r2, [r3, #4]
  }
}
 8003ea4:	bf00      	nop
 8003ea6:	370c      	adds	r7, #12
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr

08003eb0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b086      	sub	sp, #24
 8003eb4:	af02      	add	r7, sp, #8
 8003eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003ec0:	f7fc ffb2 	bl	8000e28 <HAL_GetTick>
 8003ec4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 0308 	and.w	r3, r3, #8
 8003ed0:	2b08      	cmp	r3, #8
 8003ed2:	d10e      	bne.n	8003ef2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ed4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ed8:	9300      	str	r3, [sp, #0]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2200      	movs	r2, #0
 8003ede:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f000 f82f 	bl	8003f46 <UART_WaitOnFlagUntilTimeout>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d001      	beq.n	8003ef2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003eee:	2303      	movs	r3, #3
 8003ef0:	e025      	b.n	8003f3e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 0304 	and.w	r3, r3, #4
 8003efc:	2b04      	cmp	r3, #4
 8003efe:	d10e      	bne.n	8003f1e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f00:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003f04:	9300      	str	r3, [sp, #0]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f000 f819 	bl	8003f46 <UART_WaitOnFlagUntilTimeout>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d001      	beq.n	8003f1e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f1a:	2303      	movs	r3, #3
 8003f1c:	e00f      	b.n	8003f3e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2220      	movs	r2, #32
 8003f22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2220      	movs	r2, #32
 8003f2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2200      	movs	r2, #0
 8003f38:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003f3c:	2300      	movs	r3, #0
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3710      	adds	r7, #16
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}

08003f46 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003f46:	b580      	push	{r7, lr}
 8003f48:	b09c      	sub	sp, #112	; 0x70
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	60f8      	str	r0, [r7, #12]
 8003f4e:	60b9      	str	r1, [r7, #8]
 8003f50:	603b      	str	r3, [r7, #0]
 8003f52:	4613      	mov	r3, r2
 8003f54:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f56:	e0a9      	b.n	80040ac <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f5e:	f000 80a5 	beq.w	80040ac <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f62:	f7fc ff61 	bl	8000e28 <HAL_GetTick>
 8003f66:	4602      	mov	r2, r0
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d302      	bcc.n	8003f78 <UART_WaitOnFlagUntilTimeout+0x32>
 8003f72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d140      	bne.n	8003ffa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f80:	e853 3f00 	ldrex	r3, [r3]
 8003f84:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003f86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f88:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f8c:	667b      	str	r3, [r7, #100]	; 0x64
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	461a      	mov	r2, r3
 8003f94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f96:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f98:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f9a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003f9c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003f9e:	e841 2300 	strex	r3, r2, [r1]
 8003fa2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003fa4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d1e6      	bne.n	8003f78 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	3308      	adds	r3, #8
 8003fb0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fb4:	e853 3f00 	ldrex	r3, [r3]
 8003fb8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fbc:	f023 0301 	bic.w	r3, r3, #1
 8003fc0:	663b      	str	r3, [r7, #96]	; 0x60
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	3308      	adds	r3, #8
 8003fc8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003fca:	64ba      	str	r2, [r7, #72]	; 0x48
 8003fcc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003fd0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003fd2:	e841 2300 	strex	r3, r2, [r1]
 8003fd6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003fd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d1e5      	bne.n	8003faa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2220      	movs	r2, #32
 8003fe2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2220      	movs	r2, #32
 8003fea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	e069      	b.n	80040ce <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0304 	and.w	r3, r3, #4
 8004004:	2b00      	cmp	r3, #0
 8004006:	d051      	beq.n	80040ac <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	69db      	ldr	r3, [r3, #28]
 800400e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004012:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004016:	d149      	bne.n	80040ac <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004020:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800402a:	e853 3f00 	ldrex	r3, [r3]
 800402e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004032:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004036:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	461a      	mov	r2, r3
 800403e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004040:	637b      	str	r3, [r7, #52]	; 0x34
 8004042:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004044:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004046:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004048:	e841 2300 	strex	r3, r2, [r1]
 800404c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800404e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004050:	2b00      	cmp	r3, #0
 8004052:	d1e6      	bne.n	8004022 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	3308      	adds	r3, #8
 800405a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	e853 3f00 	ldrex	r3, [r3]
 8004062:	613b      	str	r3, [r7, #16]
   return(result);
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	f023 0301 	bic.w	r3, r3, #1
 800406a:	66bb      	str	r3, [r7, #104]	; 0x68
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	3308      	adds	r3, #8
 8004072:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004074:	623a      	str	r2, [r7, #32]
 8004076:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004078:	69f9      	ldr	r1, [r7, #28]
 800407a:	6a3a      	ldr	r2, [r7, #32]
 800407c:	e841 2300 	strex	r3, r2, [r1]
 8004080:	61bb      	str	r3, [r7, #24]
   return(result);
 8004082:	69bb      	ldr	r3, [r7, #24]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d1e5      	bne.n	8004054 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2220      	movs	r2, #32
 800408c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2220      	movs	r2, #32
 8004094:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2220      	movs	r2, #32
 800409c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2200      	movs	r2, #0
 80040a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80040a8:	2303      	movs	r3, #3
 80040aa:	e010      	b.n	80040ce <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	69da      	ldr	r2, [r3, #28]
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	4013      	ands	r3, r2
 80040b6:	68ba      	ldr	r2, [r7, #8]
 80040b8:	429a      	cmp	r2, r3
 80040ba:	bf0c      	ite	eq
 80040bc:	2301      	moveq	r3, #1
 80040be:	2300      	movne	r3, #0
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	461a      	mov	r2, r3
 80040c4:	79fb      	ldrb	r3, [r7, #7]
 80040c6:	429a      	cmp	r2, r3
 80040c8:	f43f af46 	beq.w	8003f58 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80040cc:	2300      	movs	r3, #0
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3770      	adds	r7, #112	; 0x70
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}

080040d6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80040d6:	b480      	push	{r7}
 80040d8:	b085      	sub	sp, #20
 80040da:	af00      	add	r7, sp, #0
 80040dc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d101      	bne.n	80040ec <HAL_UARTEx_DisableFifoMode+0x16>
 80040e8:	2302      	movs	r3, #2
 80040ea:	e027      	b.n	800413c <HAL_UARTEx_DisableFifoMode+0x66>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2224      	movs	r2, #36	; 0x24
 80040f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f022 0201 	bic.w	r2, r2, #1
 8004112:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800411a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	68fa      	ldr	r2, [r7, #12]
 8004128:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2220      	movs	r2, #32
 800412e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800413a:	2300      	movs	r3, #0
}
 800413c:	4618      	mov	r0, r3
 800413e:	3714      	adds	r7, #20
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr

08004148 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b084      	sub	sp, #16
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004158:	2b01      	cmp	r3, #1
 800415a:	d101      	bne.n	8004160 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800415c:	2302      	movs	r3, #2
 800415e:	e02d      	b.n	80041bc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2201      	movs	r2, #1
 8004164:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2224      	movs	r2, #36	; 0x24
 800416c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f022 0201 	bic.w	r2, r2, #1
 8004186:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	683a      	ldr	r2, [r7, #0]
 8004198:	430a      	orrs	r2, r1
 800419a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f000 f84f 	bl	8004240 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	68fa      	ldr	r2, [r7, #12]
 80041a8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2220      	movs	r2, #32
 80041ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2200      	movs	r2, #0
 80041b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80041ba:	2300      	movs	r3, #0
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3710      	adds	r7, #16
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}

080041c4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b084      	sub	sp, #16
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d101      	bne.n	80041dc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80041d8:	2302      	movs	r3, #2
 80041da:	e02d      	b.n	8004238 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2224      	movs	r2, #36	; 0x24
 80041e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f022 0201 	bic.w	r2, r2, #1
 8004202:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	683a      	ldr	r2, [r7, #0]
 8004214:	430a      	orrs	r2, r1
 8004216:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f000 f811 	bl	8004240 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	68fa      	ldr	r2, [r7, #12]
 8004224:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2220      	movs	r2, #32
 800422a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2200      	movs	r2, #0
 8004232:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004236:	2300      	movs	r3, #0
}
 8004238:	4618      	mov	r0, r3
 800423a:	3710      	adds	r7, #16
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}

08004240 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004240:	b480      	push	{r7}
 8004242:	b085      	sub	sp, #20
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800424c:	2b00      	cmp	r3, #0
 800424e:	d108      	bne.n	8004262 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2201      	movs	r2, #1
 8004254:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2201      	movs	r2, #1
 800425c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004260:	e031      	b.n	80042c6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004262:	2308      	movs	r3, #8
 8004264:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004266:	2308      	movs	r3, #8
 8004268:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	0e5b      	lsrs	r3, r3, #25
 8004272:	b2db      	uxtb	r3, r3
 8004274:	f003 0307 	and.w	r3, r3, #7
 8004278:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	0f5b      	lsrs	r3, r3, #29
 8004282:	b2db      	uxtb	r3, r3
 8004284:	f003 0307 	and.w	r3, r3, #7
 8004288:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800428a:	7bbb      	ldrb	r3, [r7, #14]
 800428c:	7b3a      	ldrb	r2, [r7, #12]
 800428e:	4911      	ldr	r1, [pc, #68]	; (80042d4 <UARTEx_SetNbDataToProcess+0x94>)
 8004290:	5c8a      	ldrb	r2, [r1, r2]
 8004292:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004296:	7b3a      	ldrb	r2, [r7, #12]
 8004298:	490f      	ldr	r1, [pc, #60]	; (80042d8 <UARTEx_SetNbDataToProcess+0x98>)
 800429a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800429c:	fb93 f3f2 	sdiv	r3, r3, r2
 80042a0:	b29a      	uxth	r2, r3
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80042a8:	7bfb      	ldrb	r3, [r7, #15]
 80042aa:	7b7a      	ldrb	r2, [r7, #13]
 80042ac:	4909      	ldr	r1, [pc, #36]	; (80042d4 <UARTEx_SetNbDataToProcess+0x94>)
 80042ae:	5c8a      	ldrb	r2, [r1, r2]
 80042b0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80042b4:	7b7a      	ldrb	r2, [r7, #13]
 80042b6:	4908      	ldr	r1, [pc, #32]	; (80042d8 <UARTEx_SetNbDataToProcess+0x98>)
 80042b8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80042ba:	fb93 f3f2 	sdiv	r3, r3, r2
 80042be:	b29a      	uxth	r2, r3
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80042c6:	bf00      	nop
 80042c8:	3714      	adds	r7, #20
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr
 80042d2:	bf00      	nop
 80042d4:	0800737c 	.word	0x0800737c
 80042d8:	08007384 	.word	0x08007384

080042dc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80042dc:	b480      	push	{r7}
 80042de:	b085      	sub	sp, #20
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80042e4:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80042e8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80042f0:	b29a      	uxth	r2, r3
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	43db      	mvns	r3, r3
 80042f8:	b29b      	uxth	r3, r3
 80042fa:	4013      	ands	r3, r2
 80042fc:	b29a      	uxth	r2, r3
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004304:	2300      	movs	r3, #0
}
 8004306:	4618      	mov	r0, r3
 8004308:	3714      	adds	r7, #20
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr

08004312 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004312:	b084      	sub	sp, #16
 8004314:	b480      	push	{r7}
 8004316:	b083      	sub	sp, #12
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	f107 0014 	add.w	r0, r7, #20
 8004320:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2201      	movs	r2, #1
 8004328:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2200      	movs	r2, #0
 8004330:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2200      	movs	r2, #0
 8004338:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2200      	movs	r2, #0
 8004340:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004344:	2300      	movs	r3, #0
}
 8004346:	4618      	mov	r0, r3
 8004348:	370c      	adds	r7, #12
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	b004      	add	sp, #16
 8004352:	4770      	bx	lr

08004354 <__NVIC_SetPriority>:
{
 8004354:	b480      	push	{r7}
 8004356:	b083      	sub	sp, #12
 8004358:	af00      	add	r7, sp, #0
 800435a:	4603      	mov	r3, r0
 800435c:	6039      	str	r1, [r7, #0]
 800435e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004360:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004364:	2b00      	cmp	r3, #0
 8004366:	db0a      	blt.n	800437e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	b2da      	uxtb	r2, r3
 800436c:	490c      	ldr	r1, [pc, #48]	; (80043a0 <__NVIC_SetPriority+0x4c>)
 800436e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004372:	0112      	lsls	r2, r2, #4
 8004374:	b2d2      	uxtb	r2, r2
 8004376:	440b      	add	r3, r1
 8004378:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800437c:	e00a      	b.n	8004394 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	b2da      	uxtb	r2, r3
 8004382:	4908      	ldr	r1, [pc, #32]	; (80043a4 <__NVIC_SetPriority+0x50>)
 8004384:	79fb      	ldrb	r3, [r7, #7]
 8004386:	f003 030f 	and.w	r3, r3, #15
 800438a:	3b04      	subs	r3, #4
 800438c:	0112      	lsls	r2, r2, #4
 800438e:	b2d2      	uxtb	r2, r2
 8004390:	440b      	add	r3, r1
 8004392:	761a      	strb	r2, [r3, #24]
}
 8004394:	bf00      	nop
 8004396:	370c      	adds	r7, #12
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr
 80043a0:	e000e100 	.word	0xe000e100
 80043a4:	e000ed00 	.word	0xe000ed00

080043a8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80043a8:	b580      	push	{r7, lr}
 80043aa:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80043ac:	4b05      	ldr	r3, [pc, #20]	; (80043c4 <SysTick_Handler+0x1c>)
 80043ae:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80043b0:	f001 fdde 	bl	8005f70 <xTaskGetSchedulerState>
 80043b4:	4603      	mov	r3, r0
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d001      	beq.n	80043be <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80043ba:	f002 fbc5 	bl	8006b48 <xPortSysTickHandler>
  }
}
 80043be:	bf00      	nop
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop
 80043c4:	e000e010 	.word	0xe000e010

080043c8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80043c8:	b580      	push	{r7, lr}
 80043ca:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80043cc:	2100      	movs	r1, #0
 80043ce:	f06f 0004 	mvn.w	r0, #4
 80043d2:	f7ff ffbf 	bl	8004354 <__NVIC_SetPriority>
#endif
}
 80043d6:	bf00      	nop
 80043d8:	bd80      	pop	{r7, pc}
	...

080043dc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80043dc:	b480      	push	{r7}
 80043de:	b083      	sub	sp, #12
 80043e0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80043e2:	f3ef 8305 	mrs	r3, IPSR
 80043e6:	603b      	str	r3, [r7, #0]
  return(result);
 80043e8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d003      	beq.n	80043f6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80043ee:	f06f 0305 	mvn.w	r3, #5
 80043f2:	607b      	str	r3, [r7, #4]
 80043f4:	e00c      	b.n	8004410 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80043f6:	4b0a      	ldr	r3, [pc, #40]	; (8004420 <osKernelInitialize+0x44>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d105      	bne.n	800440a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80043fe:	4b08      	ldr	r3, [pc, #32]	; (8004420 <osKernelInitialize+0x44>)
 8004400:	2201      	movs	r2, #1
 8004402:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004404:	2300      	movs	r3, #0
 8004406:	607b      	str	r3, [r7, #4]
 8004408:	e002      	b.n	8004410 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800440a:	f04f 33ff 	mov.w	r3, #4294967295
 800440e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004410:	687b      	ldr	r3, [r7, #4]
}
 8004412:	4618      	mov	r0, r3
 8004414:	370c      	adds	r7, #12
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr
 800441e:	bf00      	nop
 8004420:	20000494 	.word	0x20000494

08004424 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004424:	b580      	push	{r7, lr}
 8004426:	b082      	sub	sp, #8
 8004428:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800442a:	f3ef 8305 	mrs	r3, IPSR
 800442e:	603b      	str	r3, [r7, #0]
  return(result);
 8004430:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004432:	2b00      	cmp	r3, #0
 8004434:	d003      	beq.n	800443e <osKernelStart+0x1a>
    stat = osErrorISR;
 8004436:	f06f 0305 	mvn.w	r3, #5
 800443a:	607b      	str	r3, [r7, #4]
 800443c:	e010      	b.n	8004460 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800443e:	4b0b      	ldr	r3, [pc, #44]	; (800446c <osKernelStart+0x48>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	2b01      	cmp	r3, #1
 8004444:	d109      	bne.n	800445a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004446:	f7ff ffbf 	bl	80043c8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800444a:	4b08      	ldr	r3, [pc, #32]	; (800446c <osKernelStart+0x48>)
 800444c:	2202      	movs	r2, #2
 800444e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004450:	f001 f932 	bl	80056b8 <vTaskStartScheduler>
      stat = osOK;
 8004454:	2300      	movs	r3, #0
 8004456:	607b      	str	r3, [r7, #4]
 8004458:	e002      	b.n	8004460 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800445a:	f04f 33ff 	mov.w	r3, #4294967295
 800445e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004460:	687b      	ldr	r3, [r7, #4]
}
 8004462:	4618      	mov	r0, r3
 8004464:	3708      	adds	r7, #8
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}
 800446a:	bf00      	nop
 800446c:	20000494 	.word	0x20000494

08004470 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004470:	b580      	push	{r7, lr}
 8004472:	b08e      	sub	sp, #56	; 0x38
 8004474:	af04      	add	r7, sp, #16
 8004476:	60f8      	str	r0, [r7, #12]
 8004478:	60b9      	str	r1, [r7, #8]
 800447a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800447c:	2300      	movs	r3, #0
 800447e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004480:	f3ef 8305 	mrs	r3, IPSR
 8004484:	617b      	str	r3, [r7, #20]
  return(result);
 8004486:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004488:	2b00      	cmp	r3, #0
 800448a:	d17e      	bne.n	800458a <osThreadNew+0x11a>
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d07b      	beq.n	800458a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004492:	2380      	movs	r3, #128	; 0x80
 8004494:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004496:	2318      	movs	r3, #24
 8004498:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800449a:	2300      	movs	r3, #0
 800449c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800449e:	f04f 33ff 	mov.w	r3, #4294967295
 80044a2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d045      	beq.n	8004536 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d002      	beq.n	80044b8 <osThreadNew+0x48>
        name = attr->name;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	699b      	ldr	r3, [r3, #24]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d002      	beq.n	80044c6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	699b      	ldr	r3, [r3, #24]
 80044c4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80044c6:	69fb      	ldr	r3, [r7, #28]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d008      	beq.n	80044de <osThreadNew+0x6e>
 80044cc:	69fb      	ldr	r3, [r7, #28]
 80044ce:	2b38      	cmp	r3, #56	; 0x38
 80044d0:	d805      	bhi.n	80044de <osThreadNew+0x6e>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	f003 0301 	and.w	r3, r3, #1
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d001      	beq.n	80044e2 <osThreadNew+0x72>
        return (NULL);
 80044de:	2300      	movs	r3, #0
 80044e0:	e054      	b.n	800458c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	695b      	ldr	r3, [r3, #20]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d003      	beq.n	80044f2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	695b      	ldr	r3, [r3, #20]
 80044ee:	089b      	lsrs	r3, r3, #2
 80044f0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d00e      	beq.n	8004518 <osThreadNew+0xa8>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	68db      	ldr	r3, [r3, #12]
 80044fe:	2bbb      	cmp	r3, #187	; 0xbb
 8004500:	d90a      	bls.n	8004518 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004506:	2b00      	cmp	r3, #0
 8004508:	d006      	beq.n	8004518 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	695b      	ldr	r3, [r3, #20]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d002      	beq.n	8004518 <osThreadNew+0xa8>
        mem = 1;
 8004512:	2301      	movs	r3, #1
 8004514:	61bb      	str	r3, [r7, #24]
 8004516:	e010      	b.n	800453a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d10c      	bne.n	800453a <osThreadNew+0xca>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d108      	bne.n	800453a <osThreadNew+0xca>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	691b      	ldr	r3, [r3, #16]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d104      	bne.n	800453a <osThreadNew+0xca>
          mem = 0;
 8004530:	2300      	movs	r3, #0
 8004532:	61bb      	str	r3, [r7, #24]
 8004534:	e001      	b.n	800453a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004536:	2300      	movs	r3, #0
 8004538:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800453a:	69bb      	ldr	r3, [r7, #24]
 800453c:	2b01      	cmp	r3, #1
 800453e:	d110      	bne.n	8004562 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004544:	687a      	ldr	r2, [r7, #4]
 8004546:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004548:	9202      	str	r2, [sp, #8]
 800454a:	9301      	str	r3, [sp, #4]
 800454c:	69fb      	ldr	r3, [r7, #28]
 800454e:	9300      	str	r3, [sp, #0]
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	6a3a      	ldr	r2, [r7, #32]
 8004554:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004556:	68f8      	ldr	r0, [r7, #12]
 8004558:	f000 fe1e 	bl	8005198 <xTaskCreateStatic>
 800455c:	4603      	mov	r3, r0
 800455e:	613b      	str	r3, [r7, #16]
 8004560:	e013      	b.n	800458a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004562:	69bb      	ldr	r3, [r7, #24]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d110      	bne.n	800458a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004568:	6a3b      	ldr	r3, [r7, #32]
 800456a:	b29a      	uxth	r2, r3
 800456c:	f107 0310 	add.w	r3, r7, #16
 8004570:	9301      	str	r3, [sp, #4]
 8004572:	69fb      	ldr	r3, [r7, #28]
 8004574:	9300      	str	r3, [sp, #0]
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800457a:	68f8      	ldr	r0, [r7, #12]
 800457c:	f000 fe69 	bl	8005252 <xTaskCreate>
 8004580:	4603      	mov	r3, r0
 8004582:	2b01      	cmp	r3, #1
 8004584:	d001      	beq.n	800458a <osThreadNew+0x11a>
            hTask = NULL;
 8004586:	2300      	movs	r3, #0
 8004588:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800458a:	693b      	ldr	r3, [r7, #16]
}
 800458c:	4618      	mov	r0, r3
 800458e:	3728      	adds	r7, #40	; 0x28
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}

08004594 <osThreadTerminate>:
  vTaskDelete (NULL);
#endif
  for (;;);
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 8004594:	b580      	push	{r7, lr}
 8004596:	b086      	sub	sp, #24
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80045a0:	f3ef 8305 	mrs	r3, IPSR
 80045a4:	60bb      	str	r3, [r7, #8]
  return(result);
 80045a6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d003      	beq.n	80045b4 <osThreadTerminate+0x20>
    stat = osErrorISR;
 80045ac:	f06f 0305 	mvn.w	r3, #5
 80045b0:	617b      	str	r3, [r7, #20]
 80045b2:	e017      	b.n	80045e4 <osThreadTerminate+0x50>
  }
  else if (hTask == NULL) {
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d103      	bne.n	80045c2 <osThreadTerminate+0x2e>
    stat = osErrorParameter;
 80045ba:	f06f 0303 	mvn.w	r3, #3
 80045be:	617b      	str	r3, [r7, #20]
 80045c0:	e010      	b.n	80045e4 <osThreadTerminate+0x50>
  }
  else {
    tstate = eTaskGetState (hTask);
 80045c2:	6938      	ldr	r0, [r7, #16]
 80045c4:	f001 f812 	bl	80055ec <eTaskGetState>
 80045c8:	4603      	mov	r3, r0
 80045ca:	73fb      	strb	r3, [r7, #15]

    if (tstate != eDeleted) {
 80045cc:	7bfb      	ldrb	r3, [r7, #15]
 80045ce:	2b04      	cmp	r3, #4
 80045d0:	d005      	beq.n	80045de <osThreadTerminate+0x4a>
      stat = osOK;
 80045d2:	2300      	movs	r3, #0
 80045d4:	617b      	str	r3, [r7, #20]
      vTaskDelete (hTask);
 80045d6:	6938      	ldr	r0, [r7, #16]
 80045d8:	f000 ff96 	bl	8005508 <vTaskDelete>
 80045dc:	e002      	b.n	80045e4 <osThreadTerminate+0x50>
    } else {
      stat = osErrorResource;
 80045de:	f06f 0302 	mvn.w	r3, #2
 80045e2:	617b      	str	r3, [r7, #20]
  }
#else
  stat = osError;
#endif

  return (stat);
 80045e4:	697b      	ldr	r3, [r7, #20]
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3718      	adds	r7, #24
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
	...

080045f0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80045f0:	b480      	push	{r7}
 80045f2:	b085      	sub	sp, #20
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	60f8      	str	r0, [r7, #12]
 80045f8:	60b9      	str	r1, [r7, #8]
 80045fa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	4a07      	ldr	r2, [pc, #28]	; (800461c <vApplicationGetIdleTaskMemory+0x2c>)
 8004600:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	4a06      	ldr	r2, [pc, #24]	; (8004620 <vApplicationGetIdleTaskMemory+0x30>)
 8004606:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2280      	movs	r2, #128	; 0x80
 800460c:	601a      	str	r2, [r3, #0]
}
 800460e:	bf00      	nop
 8004610:	3714      	adds	r7, #20
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr
 800461a:	bf00      	nop
 800461c:	20000498 	.word	0x20000498
 8004620:	20000554 	.word	0x20000554

08004624 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004624:	b480      	push	{r7}
 8004626:	b085      	sub	sp, #20
 8004628:	af00      	add	r7, sp, #0
 800462a:	60f8      	str	r0, [r7, #12]
 800462c:	60b9      	str	r1, [r7, #8]
 800462e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	4a07      	ldr	r2, [pc, #28]	; (8004650 <vApplicationGetTimerTaskMemory+0x2c>)
 8004634:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	4a06      	ldr	r2, [pc, #24]	; (8004654 <vApplicationGetTimerTaskMemory+0x30>)
 800463a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004642:	601a      	str	r2, [r3, #0]
}
 8004644:	bf00      	nop
 8004646:	3714      	adds	r7, #20
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr
 8004650:	20000754 	.word	0x20000754
 8004654:	20000810 	.word	0x20000810

08004658 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004658:	b480      	push	{r7}
 800465a:	b083      	sub	sp, #12
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f103 0208 	add.w	r2, r3, #8
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f04f 32ff 	mov.w	r2, #4294967295
 8004670:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f103 0208 	add.w	r2, r3, #8
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	f103 0208 	add.w	r2, r3, #8
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800468c:	bf00      	nop
 800468e:	370c      	adds	r7, #12
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr

08004698 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004698:	b480      	push	{r7}
 800469a:	b083      	sub	sp, #12
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80046a6:	bf00      	nop
 80046a8:	370c      	adds	r7, #12
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr

080046b2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80046b2:	b480      	push	{r7}
 80046b4:	b085      	sub	sp, #20
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	6078      	str	r0, [r7, #4]
 80046ba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	68fa      	ldr	r2, [r7, #12]
 80046c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	689a      	ldr	r2, [r3, #8]
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	683a      	ldr	r2, [r7, #0]
 80046d6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	683a      	ldr	r2, [r7, #0]
 80046dc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	1c5a      	adds	r2, r3, #1
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	601a      	str	r2, [r3, #0]
}
 80046ee:	bf00      	nop
 80046f0:	3714      	adds	r7, #20
 80046f2:	46bd      	mov	sp, r7
 80046f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f8:	4770      	bx	lr

080046fa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80046fa:	b480      	push	{r7}
 80046fc:	b085      	sub	sp, #20
 80046fe:	af00      	add	r7, sp, #0
 8004700:	6078      	str	r0, [r7, #4]
 8004702:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004710:	d103      	bne.n	800471a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	691b      	ldr	r3, [r3, #16]
 8004716:	60fb      	str	r3, [r7, #12]
 8004718:	e00c      	b.n	8004734 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	3308      	adds	r3, #8
 800471e:	60fb      	str	r3, [r7, #12]
 8004720:	e002      	b.n	8004728 <vListInsert+0x2e>
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	60fb      	str	r3, [r7, #12]
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	68ba      	ldr	r2, [r7, #8]
 8004730:	429a      	cmp	r2, r3
 8004732:	d2f6      	bcs.n	8004722 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	685a      	ldr	r2, [r3, #4]
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	683a      	ldr	r2, [r7, #0]
 8004742:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	68fa      	ldr	r2, [r7, #12]
 8004748:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	683a      	ldr	r2, [r7, #0]
 800474e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	1c5a      	adds	r2, r3, #1
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	601a      	str	r2, [r3, #0]
}
 8004760:	bf00      	nop
 8004762:	3714      	adds	r7, #20
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr

0800476c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800476c:	b480      	push	{r7}
 800476e:	b085      	sub	sp, #20
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	691b      	ldr	r3, [r3, #16]
 8004778:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	6892      	ldr	r2, [r2, #8]
 8004782:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	687a      	ldr	r2, [r7, #4]
 800478a:	6852      	ldr	r2, [r2, #4]
 800478c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	429a      	cmp	r2, r3
 8004796:	d103      	bne.n	80047a0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	689a      	ldr	r2, [r3, #8]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2200      	movs	r2, #0
 80047a4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	1e5a      	subs	r2, r3, #1
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3714      	adds	r7, #20
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr

080047c0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b084      	sub	sp, #16
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d10a      	bne.n	80047ea <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80047d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047d8:	f383 8811 	msr	BASEPRI, r3
 80047dc:	f3bf 8f6f 	isb	sy
 80047e0:	f3bf 8f4f 	dsb	sy
 80047e4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80047e6:	bf00      	nop
 80047e8:	e7fe      	b.n	80047e8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80047ea:	f002 f91b 	bl	8006a24 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047f6:	68f9      	ldr	r1, [r7, #12]
 80047f8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80047fa:	fb01 f303 	mul.w	r3, r1, r3
 80047fe:	441a      	add	r2, r3
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2200      	movs	r2, #0
 8004808:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800481a:	3b01      	subs	r3, #1
 800481c:	68f9      	ldr	r1, [r7, #12]
 800481e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004820:	fb01 f303 	mul.w	r3, r1, r3
 8004824:	441a      	add	r2, r3
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	22ff      	movs	r2, #255	; 0xff
 800482e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	22ff      	movs	r2, #255	; 0xff
 8004836:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d114      	bne.n	800486a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	691b      	ldr	r3, [r3, #16]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d01a      	beq.n	800487e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	3310      	adds	r3, #16
 800484c:	4618      	mov	r0, r3
 800484e:	f001 f9cd 	bl	8005bec <xTaskRemoveFromEventList>
 8004852:	4603      	mov	r3, r0
 8004854:	2b00      	cmp	r3, #0
 8004856:	d012      	beq.n	800487e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004858:	4b0c      	ldr	r3, [pc, #48]	; (800488c <xQueueGenericReset+0xcc>)
 800485a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800485e:	601a      	str	r2, [r3, #0]
 8004860:	f3bf 8f4f 	dsb	sy
 8004864:	f3bf 8f6f 	isb	sy
 8004868:	e009      	b.n	800487e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	3310      	adds	r3, #16
 800486e:	4618      	mov	r0, r3
 8004870:	f7ff fef2 	bl	8004658 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	3324      	adds	r3, #36	; 0x24
 8004878:	4618      	mov	r0, r3
 800487a:	f7ff feed 	bl	8004658 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800487e:	f002 f901 	bl	8006a84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004882:	2301      	movs	r3, #1
}
 8004884:	4618      	mov	r0, r3
 8004886:	3710      	adds	r7, #16
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}
 800488c:	e000ed04 	.word	0xe000ed04

08004890 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004890:	b580      	push	{r7, lr}
 8004892:	b08e      	sub	sp, #56	; 0x38
 8004894:	af02      	add	r7, sp, #8
 8004896:	60f8      	str	r0, [r7, #12]
 8004898:	60b9      	str	r1, [r7, #8]
 800489a:	607a      	str	r2, [r7, #4]
 800489c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d10a      	bne.n	80048ba <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80048a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048a8:	f383 8811 	msr	BASEPRI, r3
 80048ac:	f3bf 8f6f 	isb	sy
 80048b0:	f3bf 8f4f 	dsb	sy
 80048b4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80048b6:	bf00      	nop
 80048b8:	e7fe      	b.n	80048b8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d10a      	bne.n	80048d6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80048c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c4:	f383 8811 	msr	BASEPRI, r3
 80048c8:	f3bf 8f6f 	isb	sy
 80048cc:	f3bf 8f4f 	dsb	sy
 80048d0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80048d2:	bf00      	nop
 80048d4:	e7fe      	b.n	80048d4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d002      	beq.n	80048e2 <xQueueGenericCreateStatic+0x52>
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d001      	beq.n	80048e6 <xQueueGenericCreateStatic+0x56>
 80048e2:	2301      	movs	r3, #1
 80048e4:	e000      	b.n	80048e8 <xQueueGenericCreateStatic+0x58>
 80048e6:	2300      	movs	r3, #0
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d10a      	bne.n	8004902 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80048ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f0:	f383 8811 	msr	BASEPRI, r3
 80048f4:	f3bf 8f6f 	isb	sy
 80048f8:	f3bf 8f4f 	dsb	sy
 80048fc:	623b      	str	r3, [r7, #32]
}
 80048fe:	bf00      	nop
 8004900:	e7fe      	b.n	8004900 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d102      	bne.n	800490e <xQueueGenericCreateStatic+0x7e>
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d101      	bne.n	8004912 <xQueueGenericCreateStatic+0x82>
 800490e:	2301      	movs	r3, #1
 8004910:	e000      	b.n	8004914 <xQueueGenericCreateStatic+0x84>
 8004912:	2300      	movs	r3, #0
 8004914:	2b00      	cmp	r3, #0
 8004916:	d10a      	bne.n	800492e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800491c:	f383 8811 	msr	BASEPRI, r3
 8004920:	f3bf 8f6f 	isb	sy
 8004924:	f3bf 8f4f 	dsb	sy
 8004928:	61fb      	str	r3, [r7, #28]
}
 800492a:	bf00      	nop
 800492c:	e7fe      	b.n	800492c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800492e:	2350      	movs	r3, #80	; 0x50
 8004930:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	2b50      	cmp	r3, #80	; 0x50
 8004936:	d00a      	beq.n	800494e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800493c:	f383 8811 	msr	BASEPRI, r3
 8004940:	f3bf 8f6f 	isb	sy
 8004944:	f3bf 8f4f 	dsb	sy
 8004948:	61bb      	str	r3, [r7, #24]
}
 800494a:	bf00      	nop
 800494c:	e7fe      	b.n	800494c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800494e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004956:	2b00      	cmp	r3, #0
 8004958:	d00d      	beq.n	8004976 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800495a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800495c:	2201      	movs	r2, #1
 800495e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004962:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004968:	9300      	str	r3, [sp, #0]
 800496a:	4613      	mov	r3, r2
 800496c:	687a      	ldr	r2, [r7, #4]
 800496e:	68b9      	ldr	r1, [r7, #8]
 8004970:	68f8      	ldr	r0, [r7, #12]
 8004972:	f000 f805 	bl	8004980 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004978:	4618      	mov	r0, r3
 800497a:	3730      	adds	r7, #48	; 0x30
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}

08004980 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b084      	sub	sp, #16
 8004984:	af00      	add	r7, sp, #0
 8004986:	60f8      	str	r0, [r7, #12]
 8004988:	60b9      	str	r1, [r7, #8]
 800498a:	607a      	str	r2, [r7, #4]
 800498c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d103      	bne.n	800499c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004994:	69bb      	ldr	r3, [r7, #24]
 8004996:	69ba      	ldr	r2, [r7, #24]
 8004998:	601a      	str	r2, [r3, #0]
 800499a:	e002      	b.n	80049a2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800499c:	69bb      	ldr	r3, [r7, #24]
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80049a2:	69bb      	ldr	r3, [r7, #24]
 80049a4:	68fa      	ldr	r2, [r7, #12]
 80049a6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80049a8:	69bb      	ldr	r3, [r7, #24]
 80049aa:	68ba      	ldr	r2, [r7, #8]
 80049ac:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80049ae:	2101      	movs	r1, #1
 80049b0:	69b8      	ldr	r0, [r7, #24]
 80049b2:	f7ff ff05 	bl	80047c0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80049b6:	69bb      	ldr	r3, [r7, #24]
 80049b8:	78fa      	ldrb	r2, [r7, #3]
 80049ba:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80049be:	bf00      	nop
 80049c0:	3710      	adds	r7, #16
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}
	...

080049c8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b08e      	sub	sp, #56	; 0x38
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	60f8      	str	r0, [r7, #12]
 80049d0:	60b9      	str	r1, [r7, #8]
 80049d2:	607a      	str	r2, [r7, #4]
 80049d4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80049d6:	2300      	movs	r3, #0
 80049d8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80049de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d10a      	bne.n	80049fa <xQueueGenericSend+0x32>
	__asm volatile
 80049e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049e8:	f383 8811 	msr	BASEPRI, r3
 80049ec:	f3bf 8f6f 	isb	sy
 80049f0:	f3bf 8f4f 	dsb	sy
 80049f4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80049f6:	bf00      	nop
 80049f8:	e7fe      	b.n	80049f8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d103      	bne.n	8004a08 <xQueueGenericSend+0x40>
 8004a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d101      	bne.n	8004a0c <xQueueGenericSend+0x44>
 8004a08:	2301      	movs	r3, #1
 8004a0a:	e000      	b.n	8004a0e <xQueueGenericSend+0x46>
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d10a      	bne.n	8004a28 <xQueueGenericSend+0x60>
	__asm volatile
 8004a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a16:	f383 8811 	msr	BASEPRI, r3
 8004a1a:	f3bf 8f6f 	isb	sy
 8004a1e:	f3bf 8f4f 	dsb	sy
 8004a22:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004a24:	bf00      	nop
 8004a26:	e7fe      	b.n	8004a26 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	2b02      	cmp	r3, #2
 8004a2c:	d103      	bne.n	8004a36 <xQueueGenericSend+0x6e>
 8004a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	d101      	bne.n	8004a3a <xQueueGenericSend+0x72>
 8004a36:	2301      	movs	r3, #1
 8004a38:	e000      	b.n	8004a3c <xQueueGenericSend+0x74>
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d10a      	bne.n	8004a56 <xQueueGenericSend+0x8e>
	__asm volatile
 8004a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a44:	f383 8811 	msr	BASEPRI, r3
 8004a48:	f3bf 8f6f 	isb	sy
 8004a4c:	f3bf 8f4f 	dsb	sy
 8004a50:	623b      	str	r3, [r7, #32]
}
 8004a52:	bf00      	nop
 8004a54:	e7fe      	b.n	8004a54 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004a56:	f001 fa8b 	bl	8005f70 <xTaskGetSchedulerState>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d102      	bne.n	8004a66 <xQueueGenericSend+0x9e>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d101      	bne.n	8004a6a <xQueueGenericSend+0xa2>
 8004a66:	2301      	movs	r3, #1
 8004a68:	e000      	b.n	8004a6c <xQueueGenericSend+0xa4>
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d10a      	bne.n	8004a86 <xQueueGenericSend+0xbe>
	__asm volatile
 8004a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a74:	f383 8811 	msr	BASEPRI, r3
 8004a78:	f3bf 8f6f 	isb	sy
 8004a7c:	f3bf 8f4f 	dsb	sy
 8004a80:	61fb      	str	r3, [r7, #28]
}
 8004a82:	bf00      	nop
 8004a84:	e7fe      	b.n	8004a84 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004a86:	f001 ffcd 	bl	8006a24 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d302      	bcc.n	8004a9c <xQueueGenericSend+0xd4>
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	2b02      	cmp	r3, #2
 8004a9a:	d129      	bne.n	8004af0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004a9c:	683a      	ldr	r2, [r7, #0]
 8004a9e:	68b9      	ldr	r1, [r7, #8]
 8004aa0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004aa2:	f000 fa0b 	bl	8004ebc <prvCopyDataToQueue>
 8004aa6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d010      	beq.n	8004ad2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ab2:	3324      	adds	r3, #36	; 0x24
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f001 f899 	bl	8005bec <xTaskRemoveFromEventList>
 8004aba:	4603      	mov	r3, r0
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d013      	beq.n	8004ae8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004ac0:	4b3f      	ldr	r3, [pc, #252]	; (8004bc0 <xQueueGenericSend+0x1f8>)
 8004ac2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ac6:	601a      	str	r2, [r3, #0]
 8004ac8:	f3bf 8f4f 	dsb	sy
 8004acc:	f3bf 8f6f 	isb	sy
 8004ad0:	e00a      	b.n	8004ae8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d007      	beq.n	8004ae8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004ad8:	4b39      	ldr	r3, [pc, #228]	; (8004bc0 <xQueueGenericSend+0x1f8>)
 8004ada:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ade:	601a      	str	r2, [r3, #0]
 8004ae0:	f3bf 8f4f 	dsb	sy
 8004ae4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004ae8:	f001 ffcc 	bl	8006a84 <vPortExitCritical>
				return pdPASS;
 8004aec:	2301      	movs	r3, #1
 8004aee:	e063      	b.n	8004bb8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d103      	bne.n	8004afe <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004af6:	f001 ffc5 	bl	8006a84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004afa:	2300      	movs	r3, #0
 8004afc:	e05c      	b.n	8004bb8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004afe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d106      	bne.n	8004b12 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004b04:	f107 0314 	add.w	r3, r7, #20
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f001 f8d3 	bl	8005cb4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004b12:	f001 ffb7 	bl	8006a84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004b16:	f000 fe3f 	bl	8005798 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004b1a:	f001 ff83 	bl	8006a24 <vPortEnterCritical>
 8004b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b20:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b24:	b25b      	sxtb	r3, r3
 8004b26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b2a:	d103      	bne.n	8004b34 <xQueueGenericSend+0x16c>
 8004b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b2e:	2200      	movs	r2, #0
 8004b30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b36:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b3a:	b25b      	sxtb	r3, r3
 8004b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b40:	d103      	bne.n	8004b4a <xQueueGenericSend+0x182>
 8004b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b44:	2200      	movs	r2, #0
 8004b46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b4a:	f001 ff9b 	bl	8006a84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004b4e:	1d3a      	adds	r2, r7, #4
 8004b50:	f107 0314 	add.w	r3, r7, #20
 8004b54:	4611      	mov	r1, r2
 8004b56:	4618      	mov	r0, r3
 8004b58:	f001 f8c2 	bl	8005ce0 <xTaskCheckForTimeOut>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d124      	bne.n	8004bac <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004b62:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b64:	f000 faa2 	bl	80050ac <prvIsQueueFull>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d018      	beq.n	8004ba0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b70:	3310      	adds	r3, #16
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	4611      	mov	r1, r2
 8004b76:	4618      	mov	r0, r3
 8004b78:	f000 ffe8 	bl	8005b4c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004b7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b7e:	f000 fa2d 	bl	8004fdc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004b82:	f000 fe17 	bl	80057b4 <xTaskResumeAll>
 8004b86:	4603      	mov	r3, r0
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	f47f af7c 	bne.w	8004a86 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004b8e:	4b0c      	ldr	r3, [pc, #48]	; (8004bc0 <xQueueGenericSend+0x1f8>)
 8004b90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b94:	601a      	str	r2, [r3, #0]
 8004b96:	f3bf 8f4f 	dsb	sy
 8004b9a:	f3bf 8f6f 	isb	sy
 8004b9e:	e772      	b.n	8004a86 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004ba0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ba2:	f000 fa1b 	bl	8004fdc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004ba6:	f000 fe05 	bl	80057b4 <xTaskResumeAll>
 8004baa:	e76c      	b.n	8004a86 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004bac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004bae:	f000 fa15 	bl	8004fdc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004bb2:	f000 fdff 	bl	80057b4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004bb6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	3738      	adds	r7, #56	; 0x38
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}
 8004bc0:	e000ed04 	.word	0xe000ed04

08004bc4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b090      	sub	sp, #64	; 0x40
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	60f8      	str	r0, [r7, #12]
 8004bcc:	60b9      	str	r1, [r7, #8]
 8004bce:	607a      	str	r2, [r7, #4]
 8004bd0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d10a      	bne.n	8004bf2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004be0:	f383 8811 	msr	BASEPRI, r3
 8004be4:	f3bf 8f6f 	isb	sy
 8004be8:	f3bf 8f4f 	dsb	sy
 8004bec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004bee:	bf00      	nop
 8004bf0:	e7fe      	b.n	8004bf0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d103      	bne.n	8004c00 <xQueueGenericSendFromISR+0x3c>
 8004bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d101      	bne.n	8004c04 <xQueueGenericSendFromISR+0x40>
 8004c00:	2301      	movs	r3, #1
 8004c02:	e000      	b.n	8004c06 <xQueueGenericSendFromISR+0x42>
 8004c04:	2300      	movs	r3, #0
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d10a      	bne.n	8004c20 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c0e:	f383 8811 	msr	BASEPRI, r3
 8004c12:	f3bf 8f6f 	isb	sy
 8004c16:	f3bf 8f4f 	dsb	sy
 8004c1a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004c1c:	bf00      	nop
 8004c1e:	e7fe      	b.n	8004c1e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	2b02      	cmp	r3, #2
 8004c24:	d103      	bne.n	8004c2e <xQueueGenericSendFromISR+0x6a>
 8004c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d101      	bne.n	8004c32 <xQueueGenericSendFromISR+0x6e>
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e000      	b.n	8004c34 <xQueueGenericSendFromISR+0x70>
 8004c32:	2300      	movs	r3, #0
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d10a      	bne.n	8004c4e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c3c:	f383 8811 	msr	BASEPRI, r3
 8004c40:	f3bf 8f6f 	isb	sy
 8004c44:	f3bf 8f4f 	dsb	sy
 8004c48:	623b      	str	r3, [r7, #32]
}
 8004c4a:	bf00      	nop
 8004c4c:	e7fe      	b.n	8004c4c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004c4e:	f001 ffcb 	bl	8006be8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004c52:	f3ef 8211 	mrs	r2, BASEPRI
 8004c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c5a:	f383 8811 	msr	BASEPRI, r3
 8004c5e:	f3bf 8f6f 	isb	sy
 8004c62:	f3bf 8f4f 	dsb	sy
 8004c66:	61fa      	str	r2, [r7, #28]
 8004c68:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004c6a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004c6c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c76:	429a      	cmp	r2, r3
 8004c78:	d302      	bcc.n	8004c80 <xQueueGenericSendFromISR+0xbc>
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	2b02      	cmp	r3, #2
 8004c7e:	d12f      	bne.n	8004ce0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c82:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004c90:	683a      	ldr	r2, [r7, #0]
 8004c92:	68b9      	ldr	r1, [r7, #8]
 8004c94:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004c96:	f000 f911 	bl	8004ebc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004c9a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ca2:	d112      	bne.n	8004cca <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d016      	beq.n	8004cda <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cae:	3324      	adds	r3, #36	; 0x24
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f000 ff9b 	bl	8005bec <xTaskRemoveFromEventList>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d00e      	beq.n	8004cda <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d00b      	beq.n	8004cda <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	601a      	str	r2, [r3, #0]
 8004cc8:	e007      	b.n	8004cda <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004cca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004cce:	3301      	adds	r3, #1
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	b25a      	sxtb	r2, r3
 8004cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004cde:	e001      	b.n	8004ce4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ce4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ce6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004cee:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004cf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3740      	adds	r7, #64	; 0x40
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}
	...

08004cfc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b08c      	sub	sp, #48	; 0x30
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	60f8      	str	r0, [r7, #12]
 8004d04:	60b9      	str	r1, [r7, #8]
 8004d06:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d10a      	bne.n	8004d2c <xQueueReceive+0x30>
	__asm volatile
 8004d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d1a:	f383 8811 	msr	BASEPRI, r3
 8004d1e:	f3bf 8f6f 	isb	sy
 8004d22:	f3bf 8f4f 	dsb	sy
 8004d26:	623b      	str	r3, [r7, #32]
}
 8004d28:	bf00      	nop
 8004d2a:	e7fe      	b.n	8004d2a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d103      	bne.n	8004d3a <xQueueReceive+0x3e>
 8004d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d101      	bne.n	8004d3e <xQueueReceive+0x42>
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e000      	b.n	8004d40 <xQueueReceive+0x44>
 8004d3e:	2300      	movs	r3, #0
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d10a      	bne.n	8004d5a <xQueueReceive+0x5e>
	__asm volatile
 8004d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d48:	f383 8811 	msr	BASEPRI, r3
 8004d4c:	f3bf 8f6f 	isb	sy
 8004d50:	f3bf 8f4f 	dsb	sy
 8004d54:	61fb      	str	r3, [r7, #28]
}
 8004d56:	bf00      	nop
 8004d58:	e7fe      	b.n	8004d58 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004d5a:	f001 f909 	bl	8005f70 <xTaskGetSchedulerState>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d102      	bne.n	8004d6a <xQueueReceive+0x6e>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d101      	bne.n	8004d6e <xQueueReceive+0x72>
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e000      	b.n	8004d70 <xQueueReceive+0x74>
 8004d6e:	2300      	movs	r3, #0
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d10a      	bne.n	8004d8a <xQueueReceive+0x8e>
	__asm volatile
 8004d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d78:	f383 8811 	msr	BASEPRI, r3
 8004d7c:	f3bf 8f6f 	isb	sy
 8004d80:	f3bf 8f4f 	dsb	sy
 8004d84:	61bb      	str	r3, [r7, #24]
}
 8004d86:	bf00      	nop
 8004d88:	e7fe      	b.n	8004d88 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004d8a:	f001 fe4b 	bl	8006a24 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d92:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d01f      	beq.n	8004dda <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004d9a:	68b9      	ldr	r1, [r7, #8]
 8004d9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d9e:	f000 f8f7 	bl	8004f90 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da4:	1e5a      	subs	r2, r3, #1
 8004da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004da8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dac:	691b      	ldr	r3, [r3, #16]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d00f      	beq.n	8004dd2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004db4:	3310      	adds	r3, #16
 8004db6:	4618      	mov	r0, r3
 8004db8:	f000 ff18 	bl	8005bec <xTaskRemoveFromEventList>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d007      	beq.n	8004dd2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004dc2:	4b3d      	ldr	r3, [pc, #244]	; (8004eb8 <xQueueReceive+0x1bc>)
 8004dc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dc8:	601a      	str	r2, [r3, #0]
 8004dca:	f3bf 8f4f 	dsb	sy
 8004dce:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004dd2:	f001 fe57 	bl	8006a84 <vPortExitCritical>
				return pdPASS;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e069      	b.n	8004eae <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d103      	bne.n	8004de8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004de0:	f001 fe50 	bl	8006a84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004de4:	2300      	movs	r3, #0
 8004de6:	e062      	b.n	8004eae <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d106      	bne.n	8004dfc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004dee:	f107 0310 	add.w	r3, r7, #16
 8004df2:	4618      	mov	r0, r3
 8004df4:	f000 ff5e 	bl	8005cb4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004dfc:	f001 fe42 	bl	8006a84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004e00:	f000 fcca 	bl	8005798 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004e04:	f001 fe0e 	bl	8006a24 <vPortEnterCritical>
 8004e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e0a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e0e:	b25b      	sxtb	r3, r3
 8004e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e14:	d103      	bne.n	8004e1e <xQueueReceive+0x122>
 8004e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e18:	2200      	movs	r2, #0
 8004e1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e24:	b25b      	sxtb	r3, r3
 8004e26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e2a:	d103      	bne.n	8004e34 <xQueueReceive+0x138>
 8004e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e2e:	2200      	movs	r2, #0
 8004e30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e34:	f001 fe26 	bl	8006a84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004e38:	1d3a      	adds	r2, r7, #4
 8004e3a:	f107 0310 	add.w	r3, r7, #16
 8004e3e:	4611      	mov	r1, r2
 8004e40:	4618      	mov	r0, r3
 8004e42:	f000 ff4d 	bl	8005ce0 <xTaskCheckForTimeOut>
 8004e46:	4603      	mov	r3, r0
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d123      	bne.n	8004e94 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004e4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e4e:	f000 f917 	bl	8005080 <prvIsQueueEmpty>
 8004e52:	4603      	mov	r3, r0
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d017      	beq.n	8004e88 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e5a:	3324      	adds	r3, #36	; 0x24
 8004e5c:	687a      	ldr	r2, [r7, #4]
 8004e5e:	4611      	mov	r1, r2
 8004e60:	4618      	mov	r0, r3
 8004e62:	f000 fe73 	bl	8005b4c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004e66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e68:	f000 f8b8 	bl	8004fdc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004e6c:	f000 fca2 	bl	80057b4 <xTaskResumeAll>
 8004e70:	4603      	mov	r3, r0
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d189      	bne.n	8004d8a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004e76:	4b10      	ldr	r3, [pc, #64]	; (8004eb8 <xQueueReceive+0x1bc>)
 8004e78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e7c:	601a      	str	r2, [r3, #0]
 8004e7e:	f3bf 8f4f 	dsb	sy
 8004e82:	f3bf 8f6f 	isb	sy
 8004e86:	e780      	b.n	8004d8a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004e88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e8a:	f000 f8a7 	bl	8004fdc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004e8e:	f000 fc91 	bl	80057b4 <xTaskResumeAll>
 8004e92:	e77a      	b.n	8004d8a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004e94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e96:	f000 f8a1 	bl	8004fdc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004e9a:	f000 fc8b 	bl	80057b4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004e9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ea0:	f000 f8ee 	bl	8005080 <prvIsQueueEmpty>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	f43f af6f 	beq.w	8004d8a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004eac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3730      	adds	r7, #48	; 0x30
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}
 8004eb6:	bf00      	nop
 8004eb8:	e000ed04 	.word	0xe000ed04

08004ebc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b086      	sub	sp, #24
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	60f8      	str	r0, [r7, #12]
 8004ec4:	60b9      	str	r1, [r7, #8]
 8004ec6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ed0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d10d      	bne.n	8004ef6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d14d      	bne.n	8004f7e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f001 f860 	bl	8005fac <xTaskPriorityDisinherit>
 8004eec:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	609a      	str	r2, [r3, #8]
 8004ef4:	e043      	b.n	8004f7e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d119      	bne.n	8004f30 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	6858      	ldr	r0, [r3, #4]
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f04:	461a      	mov	r2, r3
 8004f06:	68b9      	ldr	r1, [r7, #8]
 8004f08:	f002 f8be 	bl	8007088 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	685a      	ldr	r2, [r3, #4]
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f14:	441a      	add	r2, r3
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	685a      	ldr	r2, [r3, #4]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	429a      	cmp	r2, r3
 8004f24:	d32b      	bcc.n	8004f7e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	605a      	str	r2, [r3, #4]
 8004f2e:	e026      	b.n	8004f7e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	68d8      	ldr	r0, [r3, #12]
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f38:	461a      	mov	r2, r3
 8004f3a:	68b9      	ldr	r1, [r7, #8]
 8004f3c:	f002 f8a4 	bl	8007088 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	68da      	ldr	r2, [r3, #12]
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f48:	425b      	negs	r3, r3
 8004f4a:	441a      	add	r2, r3
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	68da      	ldr	r2, [r3, #12]
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d207      	bcs.n	8004f6c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	689a      	ldr	r2, [r3, #8]
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f64:	425b      	negs	r3, r3
 8004f66:	441a      	add	r2, r3
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2b02      	cmp	r3, #2
 8004f70:	d105      	bne.n	8004f7e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d002      	beq.n	8004f7e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	3b01      	subs	r3, #1
 8004f7c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	1c5a      	adds	r2, r3, #1
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004f86:	697b      	ldr	r3, [r7, #20]
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	3718      	adds	r7, #24
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}

08004f90 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b082      	sub	sp, #8
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d018      	beq.n	8004fd4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	68da      	ldr	r2, [r3, #12]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004faa:	441a      	add	r2, r3
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	68da      	ldr	r2, [r3, #12]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d303      	bcc.n	8004fc4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681a      	ldr	r2, [r3, #0]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	68d9      	ldr	r1, [r3, #12]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fcc:	461a      	mov	r2, r3
 8004fce:	6838      	ldr	r0, [r7, #0]
 8004fd0:	f002 f85a 	bl	8007088 <memcpy>
	}
}
 8004fd4:	bf00      	nop
 8004fd6:	3708      	adds	r7, #8
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}

08004fdc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b084      	sub	sp, #16
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004fe4:	f001 fd1e 	bl	8006a24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004fee:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004ff0:	e011      	b.n	8005016 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d012      	beq.n	8005020 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	3324      	adds	r3, #36	; 0x24
 8004ffe:	4618      	mov	r0, r3
 8005000:	f000 fdf4 	bl	8005bec <xTaskRemoveFromEventList>
 8005004:	4603      	mov	r3, r0
 8005006:	2b00      	cmp	r3, #0
 8005008:	d001      	beq.n	800500e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800500a:	f000 fecb 	bl	8005da4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800500e:	7bfb      	ldrb	r3, [r7, #15]
 8005010:	3b01      	subs	r3, #1
 8005012:	b2db      	uxtb	r3, r3
 8005014:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005016:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800501a:	2b00      	cmp	r3, #0
 800501c:	dce9      	bgt.n	8004ff2 <prvUnlockQueue+0x16>
 800501e:	e000      	b.n	8005022 <prvUnlockQueue+0x46>
					break;
 8005020:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	22ff      	movs	r2, #255	; 0xff
 8005026:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800502a:	f001 fd2b 	bl	8006a84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800502e:	f001 fcf9 	bl	8006a24 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005038:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800503a:	e011      	b.n	8005060 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	691b      	ldr	r3, [r3, #16]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d012      	beq.n	800506a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	3310      	adds	r3, #16
 8005048:	4618      	mov	r0, r3
 800504a:	f000 fdcf 	bl	8005bec <xTaskRemoveFromEventList>
 800504e:	4603      	mov	r3, r0
 8005050:	2b00      	cmp	r3, #0
 8005052:	d001      	beq.n	8005058 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005054:	f000 fea6 	bl	8005da4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005058:	7bbb      	ldrb	r3, [r7, #14]
 800505a:	3b01      	subs	r3, #1
 800505c:	b2db      	uxtb	r3, r3
 800505e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005060:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005064:	2b00      	cmp	r3, #0
 8005066:	dce9      	bgt.n	800503c <prvUnlockQueue+0x60>
 8005068:	e000      	b.n	800506c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800506a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	22ff      	movs	r2, #255	; 0xff
 8005070:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005074:	f001 fd06 	bl	8006a84 <vPortExitCritical>
}
 8005078:	bf00      	nop
 800507a:	3710      	adds	r7, #16
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}

08005080 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b084      	sub	sp, #16
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005088:	f001 fccc 	bl	8006a24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005090:	2b00      	cmp	r3, #0
 8005092:	d102      	bne.n	800509a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005094:	2301      	movs	r3, #1
 8005096:	60fb      	str	r3, [r7, #12]
 8005098:	e001      	b.n	800509e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800509a:	2300      	movs	r3, #0
 800509c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800509e:	f001 fcf1 	bl	8006a84 <vPortExitCritical>

	return xReturn;
 80050a2:	68fb      	ldr	r3, [r7, #12]
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3710      	adds	r7, #16
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}

080050ac <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b084      	sub	sp, #16
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80050b4:	f001 fcb6 	bl	8006a24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d102      	bne.n	80050ca <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80050c4:	2301      	movs	r3, #1
 80050c6:	60fb      	str	r3, [r7, #12]
 80050c8:	e001      	b.n	80050ce <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80050ca:	2300      	movs	r3, #0
 80050cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80050ce:	f001 fcd9 	bl	8006a84 <vPortExitCritical>

	return xReturn;
 80050d2:	68fb      	ldr	r3, [r7, #12]
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	3710      	adds	r7, #16
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}

080050dc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80050dc:	b480      	push	{r7}
 80050de:	b085      	sub	sp, #20
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
 80050e4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80050e6:	2300      	movs	r3, #0
 80050e8:	60fb      	str	r3, [r7, #12]
 80050ea:	e014      	b.n	8005116 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80050ec:	4a0f      	ldr	r2, [pc, #60]	; (800512c <vQueueAddToRegistry+0x50>)
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d10b      	bne.n	8005110 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80050f8:	490c      	ldr	r1, [pc, #48]	; (800512c <vQueueAddToRegistry+0x50>)
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	683a      	ldr	r2, [r7, #0]
 80050fe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005102:	4a0a      	ldr	r2, [pc, #40]	; (800512c <vQueueAddToRegistry+0x50>)
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	00db      	lsls	r3, r3, #3
 8005108:	4413      	add	r3, r2
 800510a:	687a      	ldr	r2, [r7, #4]
 800510c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800510e:	e006      	b.n	800511e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	3301      	adds	r3, #1
 8005114:	60fb      	str	r3, [r7, #12]
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2b07      	cmp	r3, #7
 800511a:	d9e7      	bls.n	80050ec <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800511c:	bf00      	nop
 800511e:	bf00      	nop
 8005120:	3714      	adds	r7, #20
 8005122:	46bd      	mov	sp, r7
 8005124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005128:	4770      	bx	lr
 800512a:	bf00      	nop
 800512c:	20000c10 	.word	0x20000c10

08005130 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005130:	b580      	push	{r7, lr}
 8005132:	b086      	sub	sp, #24
 8005134:	af00      	add	r7, sp, #0
 8005136:	60f8      	str	r0, [r7, #12]
 8005138:	60b9      	str	r1, [r7, #8]
 800513a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005140:	f001 fc70 	bl	8006a24 <vPortEnterCritical>
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800514a:	b25b      	sxtb	r3, r3
 800514c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005150:	d103      	bne.n	800515a <vQueueWaitForMessageRestricted+0x2a>
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	2200      	movs	r2, #0
 8005156:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005160:	b25b      	sxtb	r3, r3
 8005162:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005166:	d103      	bne.n	8005170 <vQueueWaitForMessageRestricted+0x40>
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	2200      	movs	r2, #0
 800516c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005170:	f001 fc88 	bl	8006a84 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005178:	2b00      	cmp	r3, #0
 800517a:	d106      	bne.n	800518a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	3324      	adds	r3, #36	; 0x24
 8005180:	687a      	ldr	r2, [r7, #4]
 8005182:	68b9      	ldr	r1, [r7, #8]
 8005184:	4618      	mov	r0, r3
 8005186:	f000 fd05 	bl	8005b94 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800518a:	6978      	ldr	r0, [r7, #20]
 800518c:	f7ff ff26 	bl	8004fdc <prvUnlockQueue>
	}
 8005190:	bf00      	nop
 8005192:	3718      	adds	r7, #24
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}

08005198 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005198:	b580      	push	{r7, lr}
 800519a:	b08e      	sub	sp, #56	; 0x38
 800519c:	af04      	add	r7, sp, #16
 800519e:	60f8      	str	r0, [r7, #12]
 80051a0:	60b9      	str	r1, [r7, #8]
 80051a2:	607a      	str	r2, [r7, #4]
 80051a4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80051a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d10a      	bne.n	80051c2 <xTaskCreateStatic+0x2a>
	__asm volatile
 80051ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b0:	f383 8811 	msr	BASEPRI, r3
 80051b4:	f3bf 8f6f 	isb	sy
 80051b8:	f3bf 8f4f 	dsb	sy
 80051bc:	623b      	str	r3, [r7, #32]
}
 80051be:	bf00      	nop
 80051c0:	e7fe      	b.n	80051c0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80051c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d10a      	bne.n	80051de <xTaskCreateStatic+0x46>
	__asm volatile
 80051c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051cc:	f383 8811 	msr	BASEPRI, r3
 80051d0:	f3bf 8f6f 	isb	sy
 80051d4:	f3bf 8f4f 	dsb	sy
 80051d8:	61fb      	str	r3, [r7, #28]
}
 80051da:	bf00      	nop
 80051dc:	e7fe      	b.n	80051dc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80051de:	23bc      	movs	r3, #188	; 0xbc
 80051e0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	2bbc      	cmp	r3, #188	; 0xbc
 80051e6:	d00a      	beq.n	80051fe <xTaskCreateStatic+0x66>
	__asm volatile
 80051e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ec:	f383 8811 	msr	BASEPRI, r3
 80051f0:	f3bf 8f6f 	isb	sy
 80051f4:	f3bf 8f4f 	dsb	sy
 80051f8:	61bb      	str	r3, [r7, #24]
}
 80051fa:	bf00      	nop
 80051fc:	e7fe      	b.n	80051fc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80051fe:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005202:	2b00      	cmp	r3, #0
 8005204:	d01e      	beq.n	8005244 <xTaskCreateStatic+0xac>
 8005206:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005208:	2b00      	cmp	r3, #0
 800520a:	d01b      	beq.n	8005244 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800520c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800520e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005212:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005214:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005218:	2202      	movs	r2, #2
 800521a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800521e:	2300      	movs	r3, #0
 8005220:	9303      	str	r3, [sp, #12]
 8005222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005224:	9302      	str	r3, [sp, #8]
 8005226:	f107 0314 	add.w	r3, r7, #20
 800522a:	9301      	str	r3, [sp, #4]
 800522c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800522e:	9300      	str	r3, [sp, #0]
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	687a      	ldr	r2, [r7, #4]
 8005234:	68b9      	ldr	r1, [r7, #8]
 8005236:	68f8      	ldr	r0, [r7, #12]
 8005238:	f000 f850 	bl	80052dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800523c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800523e:	f000 f8f3 	bl	8005428 <prvAddNewTaskToReadyList>
 8005242:	e001      	b.n	8005248 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005244:	2300      	movs	r3, #0
 8005246:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005248:	697b      	ldr	r3, [r7, #20]
	}
 800524a:	4618      	mov	r0, r3
 800524c:	3728      	adds	r7, #40	; 0x28
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}

08005252 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005252:	b580      	push	{r7, lr}
 8005254:	b08c      	sub	sp, #48	; 0x30
 8005256:	af04      	add	r7, sp, #16
 8005258:	60f8      	str	r0, [r7, #12]
 800525a:	60b9      	str	r1, [r7, #8]
 800525c:	603b      	str	r3, [r7, #0]
 800525e:	4613      	mov	r3, r2
 8005260:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005262:	88fb      	ldrh	r3, [r7, #6]
 8005264:	009b      	lsls	r3, r3, #2
 8005266:	4618      	mov	r0, r3
 8005268:	f001 fcfe 	bl	8006c68 <pvPortMalloc>
 800526c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d00e      	beq.n	8005292 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005274:	20bc      	movs	r0, #188	; 0xbc
 8005276:	f001 fcf7 	bl	8006c68 <pvPortMalloc>
 800527a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800527c:	69fb      	ldr	r3, [r7, #28]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d003      	beq.n	800528a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005282:	69fb      	ldr	r3, [r7, #28]
 8005284:	697a      	ldr	r2, [r7, #20]
 8005286:	631a      	str	r2, [r3, #48]	; 0x30
 8005288:	e005      	b.n	8005296 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800528a:	6978      	ldr	r0, [r7, #20]
 800528c:	f001 fdb8 	bl	8006e00 <vPortFree>
 8005290:	e001      	b.n	8005296 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005292:	2300      	movs	r3, #0
 8005294:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005296:	69fb      	ldr	r3, [r7, #28]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d017      	beq.n	80052cc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800529c:	69fb      	ldr	r3, [r7, #28]
 800529e:	2200      	movs	r2, #0
 80052a0:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80052a4:	88fa      	ldrh	r2, [r7, #6]
 80052a6:	2300      	movs	r3, #0
 80052a8:	9303      	str	r3, [sp, #12]
 80052aa:	69fb      	ldr	r3, [r7, #28]
 80052ac:	9302      	str	r3, [sp, #8]
 80052ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052b0:	9301      	str	r3, [sp, #4]
 80052b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b4:	9300      	str	r3, [sp, #0]
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	68b9      	ldr	r1, [r7, #8]
 80052ba:	68f8      	ldr	r0, [r7, #12]
 80052bc:	f000 f80e 	bl	80052dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80052c0:	69f8      	ldr	r0, [r7, #28]
 80052c2:	f000 f8b1 	bl	8005428 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80052c6:	2301      	movs	r3, #1
 80052c8:	61bb      	str	r3, [r7, #24]
 80052ca:	e002      	b.n	80052d2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80052cc:	f04f 33ff 	mov.w	r3, #4294967295
 80052d0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80052d2:	69bb      	ldr	r3, [r7, #24]
	}
 80052d4:	4618      	mov	r0, r3
 80052d6:	3720      	adds	r7, #32
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}

080052dc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b088      	sub	sp, #32
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	60f8      	str	r0, [r7, #12]
 80052e4:	60b9      	str	r1, [r7, #8]
 80052e6:	607a      	str	r2, [r7, #4]
 80052e8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80052ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ec:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	009b      	lsls	r3, r3, #2
 80052f2:	461a      	mov	r2, r3
 80052f4:	21a5      	movs	r1, #165	; 0xa5
 80052f6:	f001 fed5 	bl	80070a4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80052fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005304:	3b01      	subs	r3, #1
 8005306:	009b      	lsls	r3, r3, #2
 8005308:	4413      	add	r3, r2
 800530a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800530c:	69bb      	ldr	r3, [r7, #24]
 800530e:	f023 0307 	bic.w	r3, r3, #7
 8005312:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005314:	69bb      	ldr	r3, [r7, #24]
 8005316:	f003 0307 	and.w	r3, r3, #7
 800531a:	2b00      	cmp	r3, #0
 800531c:	d00a      	beq.n	8005334 <prvInitialiseNewTask+0x58>
	__asm volatile
 800531e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005322:	f383 8811 	msr	BASEPRI, r3
 8005326:	f3bf 8f6f 	isb	sy
 800532a:	f3bf 8f4f 	dsb	sy
 800532e:	617b      	str	r3, [r7, #20]
}
 8005330:	bf00      	nop
 8005332:	e7fe      	b.n	8005332 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d01f      	beq.n	800537a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800533a:	2300      	movs	r3, #0
 800533c:	61fb      	str	r3, [r7, #28]
 800533e:	e012      	b.n	8005366 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005340:	68ba      	ldr	r2, [r7, #8]
 8005342:	69fb      	ldr	r3, [r7, #28]
 8005344:	4413      	add	r3, r2
 8005346:	7819      	ldrb	r1, [r3, #0]
 8005348:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800534a:	69fb      	ldr	r3, [r7, #28]
 800534c:	4413      	add	r3, r2
 800534e:	3334      	adds	r3, #52	; 0x34
 8005350:	460a      	mov	r2, r1
 8005352:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005354:	68ba      	ldr	r2, [r7, #8]
 8005356:	69fb      	ldr	r3, [r7, #28]
 8005358:	4413      	add	r3, r2
 800535a:	781b      	ldrb	r3, [r3, #0]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d006      	beq.n	800536e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005360:	69fb      	ldr	r3, [r7, #28]
 8005362:	3301      	adds	r3, #1
 8005364:	61fb      	str	r3, [r7, #28]
 8005366:	69fb      	ldr	r3, [r7, #28]
 8005368:	2b0f      	cmp	r3, #15
 800536a:	d9e9      	bls.n	8005340 <prvInitialiseNewTask+0x64>
 800536c:	e000      	b.n	8005370 <prvInitialiseNewTask+0x94>
			{
				break;
 800536e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005372:	2200      	movs	r2, #0
 8005374:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005378:	e003      	b.n	8005382 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800537a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800537c:	2200      	movs	r2, #0
 800537e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005384:	2b37      	cmp	r3, #55	; 0x37
 8005386:	d901      	bls.n	800538c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005388:	2337      	movs	r3, #55	; 0x37
 800538a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800538c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800538e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005390:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005394:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005396:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800539a:	2200      	movs	r2, #0
 800539c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800539e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053a0:	3304      	adds	r3, #4
 80053a2:	4618      	mov	r0, r3
 80053a4:	f7ff f978 	bl	8004698 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80053a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053aa:	3318      	adds	r3, #24
 80053ac:	4618      	mov	r0, r3
 80053ae:	f7ff f973 	bl	8004698 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80053b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053b6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ba:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80053be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80053c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053c6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80053c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ca:	2200      	movs	r2, #0
 80053cc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80053d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d2:	2200      	movs	r2, #0
 80053d4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80053d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053da:	3354      	adds	r3, #84	; 0x54
 80053dc:	2260      	movs	r2, #96	; 0x60
 80053de:	2100      	movs	r1, #0
 80053e0:	4618      	mov	r0, r3
 80053e2:	f001 fe5f 	bl	80070a4 <memset>
 80053e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053e8:	4a0c      	ldr	r2, [pc, #48]	; (800541c <prvInitialiseNewTask+0x140>)
 80053ea:	659a      	str	r2, [r3, #88]	; 0x58
 80053ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ee:	4a0c      	ldr	r2, [pc, #48]	; (8005420 <prvInitialiseNewTask+0x144>)
 80053f0:	65da      	str	r2, [r3, #92]	; 0x5c
 80053f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f4:	4a0b      	ldr	r2, [pc, #44]	; (8005424 <prvInitialiseNewTask+0x148>)
 80053f6:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80053f8:	683a      	ldr	r2, [r7, #0]
 80053fa:	68f9      	ldr	r1, [r7, #12]
 80053fc:	69b8      	ldr	r0, [r7, #24]
 80053fe:	f001 f9e5 	bl	80067cc <pxPortInitialiseStack>
 8005402:	4602      	mov	r2, r0
 8005404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005406:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800540a:	2b00      	cmp	r3, #0
 800540c:	d002      	beq.n	8005414 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800540e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005410:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005412:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005414:	bf00      	nop
 8005416:	3720      	adds	r7, #32
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}
 800541c:	080073ac 	.word	0x080073ac
 8005420:	080073cc 	.word	0x080073cc
 8005424:	0800738c 	.word	0x0800738c

08005428 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b082      	sub	sp, #8
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005430:	f001 faf8 	bl	8006a24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005434:	4b2d      	ldr	r3, [pc, #180]	; (80054ec <prvAddNewTaskToReadyList+0xc4>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	3301      	adds	r3, #1
 800543a:	4a2c      	ldr	r2, [pc, #176]	; (80054ec <prvAddNewTaskToReadyList+0xc4>)
 800543c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800543e:	4b2c      	ldr	r3, [pc, #176]	; (80054f0 <prvAddNewTaskToReadyList+0xc8>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d109      	bne.n	800545a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005446:	4a2a      	ldr	r2, [pc, #168]	; (80054f0 <prvAddNewTaskToReadyList+0xc8>)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800544c:	4b27      	ldr	r3, [pc, #156]	; (80054ec <prvAddNewTaskToReadyList+0xc4>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	2b01      	cmp	r3, #1
 8005452:	d110      	bne.n	8005476 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005454:	f000 fcca 	bl	8005dec <prvInitialiseTaskLists>
 8005458:	e00d      	b.n	8005476 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800545a:	4b26      	ldr	r3, [pc, #152]	; (80054f4 <prvAddNewTaskToReadyList+0xcc>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d109      	bne.n	8005476 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005462:	4b23      	ldr	r3, [pc, #140]	; (80054f0 <prvAddNewTaskToReadyList+0xc8>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800546c:	429a      	cmp	r2, r3
 800546e:	d802      	bhi.n	8005476 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005470:	4a1f      	ldr	r2, [pc, #124]	; (80054f0 <prvAddNewTaskToReadyList+0xc8>)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005476:	4b20      	ldr	r3, [pc, #128]	; (80054f8 <prvAddNewTaskToReadyList+0xd0>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	3301      	adds	r3, #1
 800547c:	4a1e      	ldr	r2, [pc, #120]	; (80054f8 <prvAddNewTaskToReadyList+0xd0>)
 800547e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005480:	4b1d      	ldr	r3, [pc, #116]	; (80054f8 <prvAddNewTaskToReadyList+0xd0>)
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800548c:	4b1b      	ldr	r3, [pc, #108]	; (80054fc <prvAddNewTaskToReadyList+0xd4>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	429a      	cmp	r2, r3
 8005492:	d903      	bls.n	800549c <prvAddNewTaskToReadyList+0x74>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005498:	4a18      	ldr	r2, [pc, #96]	; (80054fc <prvAddNewTaskToReadyList+0xd4>)
 800549a:	6013      	str	r3, [r2, #0]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054a0:	4613      	mov	r3, r2
 80054a2:	009b      	lsls	r3, r3, #2
 80054a4:	4413      	add	r3, r2
 80054a6:	009b      	lsls	r3, r3, #2
 80054a8:	4a15      	ldr	r2, [pc, #84]	; (8005500 <prvAddNewTaskToReadyList+0xd8>)
 80054aa:	441a      	add	r2, r3
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	3304      	adds	r3, #4
 80054b0:	4619      	mov	r1, r3
 80054b2:	4610      	mov	r0, r2
 80054b4:	f7ff f8fd 	bl	80046b2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80054b8:	f001 fae4 	bl	8006a84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80054bc:	4b0d      	ldr	r3, [pc, #52]	; (80054f4 <prvAddNewTaskToReadyList+0xcc>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d00e      	beq.n	80054e2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80054c4:	4b0a      	ldr	r3, [pc, #40]	; (80054f0 <prvAddNewTaskToReadyList+0xc8>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ce:	429a      	cmp	r2, r3
 80054d0:	d207      	bcs.n	80054e2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80054d2:	4b0c      	ldr	r3, [pc, #48]	; (8005504 <prvAddNewTaskToReadyList+0xdc>)
 80054d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054d8:	601a      	str	r2, [r3, #0]
 80054da:	f3bf 8f4f 	dsb	sy
 80054de:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80054e2:	bf00      	nop
 80054e4:	3708      	adds	r7, #8
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}
 80054ea:	bf00      	nop
 80054ec:	20001124 	.word	0x20001124
 80054f0:	20000c50 	.word	0x20000c50
 80054f4:	20001130 	.word	0x20001130
 80054f8:	20001140 	.word	0x20001140
 80054fc:	2000112c 	.word	0x2000112c
 8005500:	20000c54 	.word	0x20000c54
 8005504:	e000ed04 	.word	0xe000ed04

08005508 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8005508:	b580      	push	{r7, lr}
 800550a:	b084      	sub	sp, #16
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8005510:	f001 fa88 	bl	8006a24 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d102      	bne.n	8005520 <vTaskDelete+0x18>
 800551a:	4b2c      	ldr	r3, [pc, #176]	; (80055cc <vTaskDelete+0xc4>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	e000      	b.n	8005522 <vTaskDelete+0x1a>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	3304      	adds	r3, #4
 8005528:	4618      	mov	r0, r3
 800552a:	f7ff f91f 	bl	800476c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005532:	2b00      	cmp	r3, #0
 8005534:	d004      	beq.n	8005540 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	3318      	adds	r3, #24
 800553a:	4618      	mov	r0, r3
 800553c:	f7ff f916 	bl	800476c <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8005540:	4b23      	ldr	r3, [pc, #140]	; (80055d0 <vTaskDelete+0xc8>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	3301      	adds	r3, #1
 8005546:	4a22      	ldr	r2, [pc, #136]	; (80055d0 <vTaskDelete+0xc8>)
 8005548:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800554a:	4b20      	ldr	r3, [pc, #128]	; (80055cc <vTaskDelete+0xc4>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	68fa      	ldr	r2, [r7, #12]
 8005550:	429a      	cmp	r2, r3
 8005552:	d10b      	bne.n	800556c <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	3304      	adds	r3, #4
 8005558:	4619      	mov	r1, r3
 800555a:	481e      	ldr	r0, [pc, #120]	; (80055d4 <vTaskDelete+0xcc>)
 800555c:	f7ff f8a9 	bl	80046b2 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8005560:	4b1d      	ldr	r3, [pc, #116]	; (80055d8 <vTaskDelete+0xd0>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	3301      	adds	r3, #1
 8005566:	4a1c      	ldr	r2, [pc, #112]	; (80055d8 <vTaskDelete+0xd0>)
 8005568:	6013      	str	r3, [r2, #0]
 800556a:	e009      	b.n	8005580 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800556c:	4b1b      	ldr	r3, [pc, #108]	; (80055dc <vTaskDelete+0xd4>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	3b01      	subs	r3, #1
 8005572:	4a1a      	ldr	r2, [pc, #104]	; (80055dc <vTaskDelete+0xd4>)
 8005574:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8005576:	68f8      	ldr	r0, [r7, #12]
 8005578:	f000 fca6 	bl	8005ec8 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800557c:	f000 fcd8 	bl	8005f30 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8005580:	f001 fa80 	bl	8006a84 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8005584:	4b16      	ldr	r3, [pc, #88]	; (80055e0 <vTaskDelete+0xd8>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d01b      	beq.n	80055c4 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 800558c:	4b0f      	ldr	r3, [pc, #60]	; (80055cc <vTaskDelete+0xc4>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	68fa      	ldr	r2, [r7, #12]
 8005592:	429a      	cmp	r2, r3
 8005594:	d116      	bne.n	80055c4 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8005596:	4b13      	ldr	r3, [pc, #76]	; (80055e4 <vTaskDelete+0xdc>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d00a      	beq.n	80055b4 <vTaskDelete+0xac>
	__asm volatile
 800559e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055a2:	f383 8811 	msr	BASEPRI, r3
 80055a6:	f3bf 8f6f 	isb	sy
 80055aa:	f3bf 8f4f 	dsb	sy
 80055ae:	60bb      	str	r3, [r7, #8]
}
 80055b0:	bf00      	nop
 80055b2:	e7fe      	b.n	80055b2 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 80055b4:	4b0c      	ldr	r3, [pc, #48]	; (80055e8 <vTaskDelete+0xe0>)
 80055b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055ba:	601a      	str	r2, [r3, #0]
 80055bc:	f3bf 8f4f 	dsb	sy
 80055c0:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80055c4:	bf00      	nop
 80055c6:	3710      	adds	r7, #16
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}
 80055cc:	20000c50 	.word	0x20000c50
 80055d0:	20001140 	.word	0x20001140
 80055d4:	200010f8 	.word	0x200010f8
 80055d8:	2000110c 	.word	0x2000110c
 80055dc:	20001124 	.word	0x20001124
 80055e0:	20001130 	.word	0x20001130
 80055e4:	2000114c 	.word	0x2000114c
 80055e8:	e000ed04 	.word	0xe000ed04

080055ec <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b088      	sub	sp, #32
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 80055f8:	69bb      	ldr	r3, [r7, #24]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d10a      	bne.n	8005614 <eTaskGetState+0x28>
	__asm volatile
 80055fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005602:	f383 8811 	msr	BASEPRI, r3
 8005606:	f3bf 8f6f 	isb	sy
 800560a:	f3bf 8f4f 	dsb	sy
 800560e:	60bb      	str	r3, [r7, #8]
}
 8005610:	bf00      	nop
 8005612:	e7fe      	b.n	8005612 <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 8005614:	4b23      	ldr	r3, [pc, #140]	; (80056a4 <eTaskGetState+0xb8>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	69ba      	ldr	r2, [r7, #24]
 800561a:	429a      	cmp	r2, r3
 800561c:	d102      	bne.n	8005624 <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 800561e:	2300      	movs	r3, #0
 8005620:	77fb      	strb	r3, [r7, #31]
 8005622:	e03a      	b.n	800569a <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 8005624:	f001 f9fe 	bl	8006a24 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8005628:	69bb      	ldr	r3, [r7, #24]
 800562a:	695b      	ldr	r3, [r3, #20]
 800562c:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 800562e:	4b1e      	ldr	r3, [pc, #120]	; (80056a8 <eTaskGetState+0xbc>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8005634:	4b1d      	ldr	r3, [pc, #116]	; (80056ac <eTaskGetState+0xc0>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 800563a:	f001 fa23 	bl	8006a84 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 800563e:	697a      	ldr	r2, [r7, #20]
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	429a      	cmp	r2, r3
 8005644:	d003      	beq.n	800564e <eTaskGetState+0x62>
 8005646:	697a      	ldr	r2, [r7, #20]
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	429a      	cmp	r2, r3
 800564c:	d102      	bne.n	8005654 <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 800564e:	2302      	movs	r3, #2
 8005650:	77fb      	strb	r3, [r7, #31]
 8005652:	e022      	b.n	800569a <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	4a16      	ldr	r2, [pc, #88]	; (80056b0 <eTaskGetState+0xc4>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d112      	bne.n	8005682 <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 800565c:	69bb      	ldr	r3, [r7, #24]
 800565e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005660:	2b00      	cmp	r3, #0
 8005662:	d10b      	bne.n	800567c <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8005664:	69bb      	ldr	r3, [r7, #24]
 8005666:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800566a:	b2db      	uxtb	r3, r3
 800566c:	2b01      	cmp	r3, #1
 800566e:	d102      	bne.n	8005676 <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 8005670:	2302      	movs	r3, #2
 8005672:	77fb      	strb	r3, [r7, #31]
 8005674:	e011      	b.n	800569a <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 8005676:	2303      	movs	r3, #3
 8005678:	77fb      	strb	r3, [r7, #31]
 800567a:	e00e      	b.n	800569a <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 800567c:	2302      	movs	r3, #2
 800567e:	77fb      	strb	r3, [r7, #31]
 8005680:	e00b      	b.n	800569a <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	4a0b      	ldr	r2, [pc, #44]	; (80056b4 <eTaskGetState+0xc8>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d002      	beq.n	8005690 <eTaskGetState+0xa4>
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d102      	bne.n	8005696 <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8005690:	2304      	movs	r3, #4
 8005692:	77fb      	strb	r3, [r7, #31]
 8005694:	e001      	b.n	800569a <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8005696:	2301      	movs	r3, #1
 8005698:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 800569a:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800569c:	4618      	mov	r0, r3
 800569e:	3720      	adds	r7, #32
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}
 80056a4:	20000c50 	.word	0x20000c50
 80056a8:	200010dc 	.word	0x200010dc
 80056ac:	200010e0 	.word	0x200010e0
 80056b0:	20001110 	.word	0x20001110
 80056b4:	200010f8 	.word	0x200010f8

080056b8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b08a      	sub	sp, #40	; 0x28
 80056bc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80056be:	2300      	movs	r3, #0
 80056c0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80056c2:	2300      	movs	r3, #0
 80056c4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80056c6:	463a      	mov	r2, r7
 80056c8:	1d39      	adds	r1, r7, #4
 80056ca:	f107 0308 	add.w	r3, r7, #8
 80056ce:	4618      	mov	r0, r3
 80056d0:	f7fe ff8e 	bl	80045f0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80056d4:	6839      	ldr	r1, [r7, #0]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	68ba      	ldr	r2, [r7, #8]
 80056da:	9202      	str	r2, [sp, #8]
 80056dc:	9301      	str	r3, [sp, #4]
 80056de:	2300      	movs	r3, #0
 80056e0:	9300      	str	r3, [sp, #0]
 80056e2:	2300      	movs	r3, #0
 80056e4:	460a      	mov	r2, r1
 80056e6:	4924      	ldr	r1, [pc, #144]	; (8005778 <vTaskStartScheduler+0xc0>)
 80056e8:	4824      	ldr	r0, [pc, #144]	; (800577c <vTaskStartScheduler+0xc4>)
 80056ea:	f7ff fd55 	bl	8005198 <xTaskCreateStatic>
 80056ee:	4603      	mov	r3, r0
 80056f0:	4a23      	ldr	r2, [pc, #140]	; (8005780 <vTaskStartScheduler+0xc8>)
 80056f2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80056f4:	4b22      	ldr	r3, [pc, #136]	; (8005780 <vTaskStartScheduler+0xc8>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d002      	beq.n	8005702 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80056fc:	2301      	movs	r3, #1
 80056fe:	617b      	str	r3, [r7, #20]
 8005700:	e001      	b.n	8005706 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005702:	2300      	movs	r3, #0
 8005704:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	2b01      	cmp	r3, #1
 800570a:	d102      	bne.n	8005712 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800570c:	f000 fd10 	bl	8006130 <xTimerCreateTimerTask>
 8005710:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	2b01      	cmp	r3, #1
 8005716:	d11b      	bne.n	8005750 <vTaskStartScheduler+0x98>
	__asm volatile
 8005718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800571c:	f383 8811 	msr	BASEPRI, r3
 8005720:	f3bf 8f6f 	isb	sy
 8005724:	f3bf 8f4f 	dsb	sy
 8005728:	613b      	str	r3, [r7, #16]
}
 800572a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800572c:	4b15      	ldr	r3, [pc, #84]	; (8005784 <vTaskStartScheduler+0xcc>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	3354      	adds	r3, #84	; 0x54
 8005732:	4a15      	ldr	r2, [pc, #84]	; (8005788 <vTaskStartScheduler+0xd0>)
 8005734:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005736:	4b15      	ldr	r3, [pc, #84]	; (800578c <vTaskStartScheduler+0xd4>)
 8005738:	f04f 32ff 	mov.w	r2, #4294967295
 800573c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800573e:	4b14      	ldr	r3, [pc, #80]	; (8005790 <vTaskStartScheduler+0xd8>)
 8005740:	2201      	movs	r2, #1
 8005742:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005744:	4b13      	ldr	r3, [pc, #76]	; (8005794 <vTaskStartScheduler+0xdc>)
 8005746:	2200      	movs	r2, #0
 8005748:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800574a:	f001 f8c9 	bl	80068e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800574e:	e00e      	b.n	800576e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005756:	d10a      	bne.n	800576e <vTaskStartScheduler+0xb6>
	__asm volatile
 8005758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800575c:	f383 8811 	msr	BASEPRI, r3
 8005760:	f3bf 8f6f 	isb	sy
 8005764:	f3bf 8f4f 	dsb	sy
 8005768:	60fb      	str	r3, [r7, #12]
}
 800576a:	bf00      	nop
 800576c:	e7fe      	b.n	800576c <vTaskStartScheduler+0xb4>
}
 800576e:	bf00      	nop
 8005770:	3718      	adds	r7, #24
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}
 8005776:	bf00      	nop
 8005778:	080072ac 	.word	0x080072ac
 800577c:	08005dbd 	.word	0x08005dbd
 8005780:	20001148 	.word	0x20001148
 8005784:	20000c50 	.word	0x20000c50
 8005788:	20000014 	.word	0x20000014
 800578c:	20001144 	.word	0x20001144
 8005790:	20001130 	.word	0x20001130
 8005794:	20001128 	.word	0x20001128

08005798 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005798:	b480      	push	{r7}
 800579a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800579c:	4b04      	ldr	r3, [pc, #16]	; (80057b0 <vTaskSuspendAll+0x18>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	3301      	adds	r3, #1
 80057a2:	4a03      	ldr	r2, [pc, #12]	; (80057b0 <vTaskSuspendAll+0x18>)
 80057a4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80057a6:	bf00      	nop
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr
 80057b0:	2000114c 	.word	0x2000114c

080057b4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b084      	sub	sp, #16
 80057b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80057ba:	2300      	movs	r3, #0
 80057bc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80057be:	2300      	movs	r3, #0
 80057c0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80057c2:	4b42      	ldr	r3, [pc, #264]	; (80058cc <xTaskResumeAll+0x118>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d10a      	bne.n	80057e0 <xTaskResumeAll+0x2c>
	__asm volatile
 80057ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ce:	f383 8811 	msr	BASEPRI, r3
 80057d2:	f3bf 8f6f 	isb	sy
 80057d6:	f3bf 8f4f 	dsb	sy
 80057da:	603b      	str	r3, [r7, #0]
}
 80057dc:	bf00      	nop
 80057de:	e7fe      	b.n	80057de <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80057e0:	f001 f920 	bl	8006a24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80057e4:	4b39      	ldr	r3, [pc, #228]	; (80058cc <xTaskResumeAll+0x118>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	3b01      	subs	r3, #1
 80057ea:	4a38      	ldr	r2, [pc, #224]	; (80058cc <xTaskResumeAll+0x118>)
 80057ec:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80057ee:	4b37      	ldr	r3, [pc, #220]	; (80058cc <xTaskResumeAll+0x118>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d162      	bne.n	80058bc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80057f6:	4b36      	ldr	r3, [pc, #216]	; (80058d0 <xTaskResumeAll+0x11c>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d05e      	beq.n	80058bc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80057fe:	e02f      	b.n	8005860 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005800:	4b34      	ldr	r3, [pc, #208]	; (80058d4 <xTaskResumeAll+0x120>)
 8005802:	68db      	ldr	r3, [r3, #12]
 8005804:	68db      	ldr	r3, [r3, #12]
 8005806:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	3318      	adds	r3, #24
 800580c:	4618      	mov	r0, r3
 800580e:	f7fe ffad 	bl	800476c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	3304      	adds	r3, #4
 8005816:	4618      	mov	r0, r3
 8005818:	f7fe ffa8 	bl	800476c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005820:	4b2d      	ldr	r3, [pc, #180]	; (80058d8 <xTaskResumeAll+0x124>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	429a      	cmp	r2, r3
 8005826:	d903      	bls.n	8005830 <xTaskResumeAll+0x7c>
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800582c:	4a2a      	ldr	r2, [pc, #168]	; (80058d8 <xTaskResumeAll+0x124>)
 800582e:	6013      	str	r3, [r2, #0]
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005834:	4613      	mov	r3, r2
 8005836:	009b      	lsls	r3, r3, #2
 8005838:	4413      	add	r3, r2
 800583a:	009b      	lsls	r3, r3, #2
 800583c:	4a27      	ldr	r2, [pc, #156]	; (80058dc <xTaskResumeAll+0x128>)
 800583e:	441a      	add	r2, r3
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	3304      	adds	r3, #4
 8005844:	4619      	mov	r1, r3
 8005846:	4610      	mov	r0, r2
 8005848:	f7fe ff33 	bl	80046b2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005850:	4b23      	ldr	r3, [pc, #140]	; (80058e0 <xTaskResumeAll+0x12c>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005856:	429a      	cmp	r2, r3
 8005858:	d302      	bcc.n	8005860 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800585a:	4b22      	ldr	r3, [pc, #136]	; (80058e4 <xTaskResumeAll+0x130>)
 800585c:	2201      	movs	r2, #1
 800585e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005860:	4b1c      	ldr	r3, [pc, #112]	; (80058d4 <xTaskResumeAll+0x120>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d1cb      	bne.n	8005800 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d001      	beq.n	8005872 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800586e:	f000 fb5f 	bl	8005f30 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005872:	4b1d      	ldr	r3, [pc, #116]	; (80058e8 <xTaskResumeAll+0x134>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d010      	beq.n	80058a0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800587e:	f000 f847 	bl	8005910 <xTaskIncrementTick>
 8005882:	4603      	mov	r3, r0
 8005884:	2b00      	cmp	r3, #0
 8005886:	d002      	beq.n	800588e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005888:	4b16      	ldr	r3, [pc, #88]	; (80058e4 <xTaskResumeAll+0x130>)
 800588a:	2201      	movs	r2, #1
 800588c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	3b01      	subs	r3, #1
 8005892:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d1f1      	bne.n	800587e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800589a:	4b13      	ldr	r3, [pc, #76]	; (80058e8 <xTaskResumeAll+0x134>)
 800589c:	2200      	movs	r2, #0
 800589e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80058a0:	4b10      	ldr	r3, [pc, #64]	; (80058e4 <xTaskResumeAll+0x130>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d009      	beq.n	80058bc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80058a8:	2301      	movs	r3, #1
 80058aa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80058ac:	4b0f      	ldr	r3, [pc, #60]	; (80058ec <xTaskResumeAll+0x138>)
 80058ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058b2:	601a      	str	r2, [r3, #0]
 80058b4:	f3bf 8f4f 	dsb	sy
 80058b8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80058bc:	f001 f8e2 	bl	8006a84 <vPortExitCritical>

	return xAlreadyYielded;
 80058c0:	68bb      	ldr	r3, [r7, #8]
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3710      	adds	r7, #16
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}
 80058ca:	bf00      	nop
 80058cc:	2000114c 	.word	0x2000114c
 80058d0:	20001124 	.word	0x20001124
 80058d4:	200010e4 	.word	0x200010e4
 80058d8:	2000112c 	.word	0x2000112c
 80058dc:	20000c54 	.word	0x20000c54
 80058e0:	20000c50 	.word	0x20000c50
 80058e4:	20001138 	.word	0x20001138
 80058e8:	20001134 	.word	0x20001134
 80058ec:	e000ed04 	.word	0xe000ed04

080058f0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80058f0:	b480      	push	{r7}
 80058f2:	b083      	sub	sp, #12
 80058f4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80058f6:	4b05      	ldr	r3, [pc, #20]	; (800590c <xTaskGetTickCount+0x1c>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80058fc:	687b      	ldr	r3, [r7, #4]
}
 80058fe:	4618      	mov	r0, r3
 8005900:	370c      	adds	r7, #12
 8005902:	46bd      	mov	sp, r7
 8005904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005908:	4770      	bx	lr
 800590a:	bf00      	nop
 800590c:	20001128 	.word	0x20001128

08005910 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b086      	sub	sp, #24
 8005914:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005916:	2300      	movs	r3, #0
 8005918:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800591a:	4b4f      	ldr	r3, [pc, #316]	; (8005a58 <xTaskIncrementTick+0x148>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	2b00      	cmp	r3, #0
 8005920:	f040 808f 	bne.w	8005a42 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005924:	4b4d      	ldr	r3, [pc, #308]	; (8005a5c <xTaskIncrementTick+0x14c>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	3301      	adds	r3, #1
 800592a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800592c:	4a4b      	ldr	r2, [pc, #300]	; (8005a5c <xTaskIncrementTick+0x14c>)
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d120      	bne.n	800597a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005938:	4b49      	ldr	r3, [pc, #292]	; (8005a60 <xTaskIncrementTick+0x150>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d00a      	beq.n	8005958 <xTaskIncrementTick+0x48>
	__asm volatile
 8005942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005946:	f383 8811 	msr	BASEPRI, r3
 800594a:	f3bf 8f6f 	isb	sy
 800594e:	f3bf 8f4f 	dsb	sy
 8005952:	603b      	str	r3, [r7, #0]
}
 8005954:	bf00      	nop
 8005956:	e7fe      	b.n	8005956 <xTaskIncrementTick+0x46>
 8005958:	4b41      	ldr	r3, [pc, #260]	; (8005a60 <xTaskIncrementTick+0x150>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	60fb      	str	r3, [r7, #12]
 800595e:	4b41      	ldr	r3, [pc, #260]	; (8005a64 <xTaskIncrementTick+0x154>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a3f      	ldr	r2, [pc, #252]	; (8005a60 <xTaskIncrementTick+0x150>)
 8005964:	6013      	str	r3, [r2, #0]
 8005966:	4a3f      	ldr	r2, [pc, #252]	; (8005a64 <xTaskIncrementTick+0x154>)
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	6013      	str	r3, [r2, #0]
 800596c:	4b3e      	ldr	r3, [pc, #248]	; (8005a68 <xTaskIncrementTick+0x158>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	3301      	adds	r3, #1
 8005972:	4a3d      	ldr	r2, [pc, #244]	; (8005a68 <xTaskIncrementTick+0x158>)
 8005974:	6013      	str	r3, [r2, #0]
 8005976:	f000 fadb 	bl	8005f30 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800597a:	4b3c      	ldr	r3, [pc, #240]	; (8005a6c <xTaskIncrementTick+0x15c>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	693a      	ldr	r2, [r7, #16]
 8005980:	429a      	cmp	r2, r3
 8005982:	d349      	bcc.n	8005a18 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005984:	4b36      	ldr	r3, [pc, #216]	; (8005a60 <xTaskIncrementTick+0x150>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d104      	bne.n	8005998 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800598e:	4b37      	ldr	r3, [pc, #220]	; (8005a6c <xTaskIncrementTick+0x15c>)
 8005990:	f04f 32ff 	mov.w	r2, #4294967295
 8005994:	601a      	str	r2, [r3, #0]
					break;
 8005996:	e03f      	b.n	8005a18 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005998:	4b31      	ldr	r3, [pc, #196]	; (8005a60 <xTaskIncrementTick+0x150>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	68db      	ldr	r3, [r3, #12]
 800599e:	68db      	ldr	r3, [r3, #12]
 80059a0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80059a8:	693a      	ldr	r2, [r7, #16]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	429a      	cmp	r2, r3
 80059ae:	d203      	bcs.n	80059b8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80059b0:	4a2e      	ldr	r2, [pc, #184]	; (8005a6c <xTaskIncrementTick+0x15c>)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80059b6:	e02f      	b.n	8005a18 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	3304      	adds	r3, #4
 80059bc:	4618      	mov	r0, r3
 80059be:	f7fe fed5 	bl	800476c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d004      	beq.n	80059d4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	3318      	adds	r3, #24
 80059ce:	4618      	mov	r0, r3
 80059d0:	f7fe fecc 	bl	800476c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059d8:	4b25      	ldr	r3, [pc, #148]	; (8005a70 <xTaskIncrementTick+0x160>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	429a      	cmp	r2, r3
 80059de:	d903      	bls.n	80059e8 <xTaskIncrementTick+0xd8>
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e4:	4a22      	ldr	r2, [pc, #136]	; (8005a70 <xTaskIncrementTick+0x160>)
 80059e6:	6013      	str	r3, [r2, #0]
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059ec:	4613      	mov	r3, r2
 80059ee:	009b      	lsls	r3, r3, #2
 80059f0:	4413      	add	r3, r2
 80059f2:	009b      	lsls	r3, r3, #2
 80059f4:	4a1f      	ldr	r2, [pc, #124]	; (8005a74 <xTaskIncrementTick+0x164>)
 80059f6:	441a      	add	r2, r3
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	3304      	adds	r3, #4
 80059fc:	4619      	mov	r1, r3
 80059fe:	4610      	mov	r0, r2
 8005a00:	f7fe fe57 	bl	80046b2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a08:	4b1b      	ldr	r3, [pc, #108]	; (8005a78 <xTaskIncrementTick+0x168>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a0e:	429a      	cmp	r2, r3
 8005a10:	d3b8      	bcc.n	8005984 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005a12:	2301      	movs	r3, #1
 8005a14:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a16:	e7b5      	b.n	8005984 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005a18:	4b17      	ldr	r3, [pc, #92]	; (8005a78 <xTaskIncrementTick+0x168>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a1e:	4915      	ldr	r1, [pc, #84]	; (8005a74 <xTaskIncrementTick+0x164>)
 8005a20:	4613      	mov	r3, r2
 8005a22:	009b      	lsls	r3, r3, #2
 8005a24:	4413      	add	r3, r2
 8005a26:	009b      	lsls	r3, r3, #2
 8005a28:	440b      	add	r3, r1
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d901      	bls.n	8005a34 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005a30:	2301      	movs	r3, #1
 8005a32:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005a34:	4b11      	ldr	r3, [pc, #68]	; (8005a7c <xTaskIncrementTick+0x16c>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d007      	beq.n	8005a4c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	617b      	str	r3, [r7, #20]
 8005a40:	e004      	b.n	8005a4c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005a42:	4b0f      	ldr	r3, [pc, #60]	; (8005a80 <xTaskIncrementTick+0x170>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	3301      	adds	r3, #1
 8005a48:	4a0d      	ldr	r2, [pc, #52]	; (8005a80 <xTaskIncrementTick+0x170>)
 8005a4a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005a4c:	697b      	ldr	r3, [r7, #20]
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3718      	adds	r7, #24
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}
 8005a56:	bf00      	nop
 8005a58:	2000114c 	.word	0x2000114c
 8005a5c:	20001128 	.word	0x20001128
 8005a60:	200010dc 	.word	0x200010dc
 8005a64:	200010e0 	.word	0x200010e0
 8005a68:	2000113c 	.word	0x2000113c
 8005a6c:	20001144 	.word	0x20001144
 8005a70:	2000112c 	.word	0x2000112c
 8005a74:	20000c54 	.word	0x20000c54
 8005a78:	20000c50 	.word	0x20000c50
 8005a7c:	20001138 	.word	0x20001138
 8005a80:	20001134 	.word	0x20001134

08005a84 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005a84:	b480      	push	{r7}
 8005a86:	b085      	sub	sp, #20
 8005a88:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005a8a:	4b2a      	ldr	r3, [pc, #168]	; (8005b34 <vTaskSwitchContext+0xb0>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d003      	beq.n	8005a9a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005a92:	4b29      	ldr	r3, [pc, #164]	; (8005b38 <vTaskSwitchContext+0xb4>)
 8005a94:	2201      	movs	r2, #1
 8005a96:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005a98:	e046      	b.n	8005b28 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8005a9a:	4b27      	ldr	r3, [pc, #156]	; (8005b38 <vTaskSwitchContext+0xb4>)
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005aa0:	4b26      	ldr	r3, [pc, #152]	; (8005b3c <vTaskSwitchContext+0xb8>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	60fb      	str	r3, [r7, #12]
 8005aa6:	e010      	b.n	8005aca <vTaskSwitchContext+0x46>
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d10a      	bne.n	8005ac4 <vTaskSwitchContext+0x40>
	__asm volatile
 8005aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ab2:	f383 8811 	msr	BASEPRI, r3
 8005ab6:	f3bf 8f6f 	isb	sy
 8005aba:	f3bf 8f4f 	dsb	sy
 8005abe:	607b      	str	r3, [r7, #4]
}
 8005ac0:	bf00      	nop
 8005ac2:	e7fe      	b.n	8005ac2 <vTaskSwitchContext+0x3e>
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	3b01      	subs	r3, #1
 8005ac8:	60fb      	str	r3, [r7, #12]
 8005aca:	491d      	ldr	r1, [pc, #116]	; (8005b40 <vTaskSwitchContext+0xbc>)
 8005acc:	68fa      	ldr	r2, [r7, #12]
 8005ace:	4613      	mov	r3, r2
 8005ad0:	009b      	lsls	r3, r3, #2
 8005ad2:	4413      	add	r3, r2
 8005ad4:	009b      	lsls	r3, r3, #2
 8005ad6:	440b      	add	r3, r1
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d0e4      	beq.n	8005aa8 <vTaskSwitchContext+0x24>
 8005ade:	68fa      	ldr	r2, [r7, #12]
 8005ae0:	4613      	mov	r3, r2
 8005ae2:	009b      	lsls	r3, r3, #2
 8005ae4:	4413      	add	r3, r2
 8005ae6:	009b      	lsls	r3, r3, #2
 8005ae8:	4a15      	ldr	r2, [pc, #84]	; (8005b40 <vTaskSwitchContext+0xbc>)
 8005aea:	4413      	add	r3, r2
 8005aec:	60bb      	str	r3, [r7, #8]
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	685a      	ldr	r2, [r3, #4]
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	605a      	str	r2, [r3, #4]
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	685a      	ldr	r2, [r3, #4]
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	3308      	adds	r3, #8
 8005b00:	429a      	cmp	r2, r3
 8005b02:	d104      	bne.n	8005b0e <vTaskSwitchContext+0x8a>
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	685a      	ldr	r2, [r3, #4]
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	605a      	str	r2, [r3, #4]
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	68db      	ldr	r3, [r3, #12]
 8005b14:	4a0b      	ldr	r2, [pc, #44]	; (8005b44 <vTaskSwitchContext+0xc0>)
 8005b16:	6013      	str	r3, [r2, #0]
 8005b18:	4a08      	ldr	r2, [pc, #32]	; (8005b3c <vTaskSwitchContext+0xb8>)
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005b1e:	4b09      	ldr	r3, [pc, #36]	; (8005b44 <vTaskSwitchContext+0xc0>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	3354      	adds	r3, #84	; 0x54
 8005b24:	4a08      	ldr	r2, [pc, #32]	; (8005b48 <vTaskSwitchContext+0xc4>)
 8005b26:	6013      	str	r3, [r2, #0]
}
 8005b28:	bf00      	nop
 8005b2a:	3714      	adds	r7, #20
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr
 8005b34:	2000114c 	.word	0x2000114c
 8005b38:	20001138 	.word	0x20001138
 8005b3c:	2000112c 	.word	0x2000112c
 8005b40:	20000c54 	.word	0x20000c54
 8005b44:	20000c50 	.word	0x20000c50
 8005b48:	20000014 	.word	0x20000014

08005b4c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b084      	sub	sp, #16
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
 8005b54:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d10a      	bne.n	8005b72 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b60:	f383 8811 	msr	BASEPRI, r3
 8005b64:	f3bf 8f6f 	isb	sy
 8005b68:	f3bf 8f4f 	dsb	sy
 8005b6c:	60fb      	str	r3, [r7, #12]
}
 8005b6e:	bf00      	nop
 8005b70:	e7fe      	b.n	8005b70 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005b72:	4b07      	ldr	r3, [pc, #28]	; (8005b90 <vTaskPlaceOnEventList+0x44>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	3318      	adds	r3, #24
 8005b78:	4619      	mov	r1, r3
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f7fe fdbd 	bl	80046fa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005b80:	2101      	movs	r1, #1
 8005b82:	6838      	ldr	r0, [r7, #0]
 8005b84:	f000 fa80 	bl	8006088 <prvAddCurrentTaskToDelayedList>
}
 8005b88:	bf00      	nop
 8005b8a:	3710      	adds	r7, #16
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}
 8005b90:	20000c50 	.word	0x20000c50

08005b94 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b086      	sub	sp, #24
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	60f8      	str	r0, [r7, #12]
 8005b9c:	60b9      	str	r1, [r7, #8]
 8005b9e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d10a      	bne.n	8005bbc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005baa:	f383 8811 	msr	BASEPRI, r3
 8005bae:	f3bf 8f6f 	isb	sy
 8005bb2:	f3bf 8f4f 	dsb	sy
 8005bb6:	617b      	str	r3, [r7, #20]
}
 8005bb8:	bf00      	nop
 8005bba:	e7fe      	b.n	8005bba <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005bbc:	4b0a      	ldr	r3, [pc, #40]	; (8005be8 <vTaskPlaceOnEventListRestricted+0x54>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	3318      	adds	r3, #24
 8005bc2:	4619      	mov	r1, r3
 8005bc4:	68f8      	ldr	r0, [r7, #12]
 8005bc6:	f7fe fd74 	bl	80046b2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d002      	beq.n	8005bd6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005bd0:	f04f 33ff 	mov.w	r3, #4294967295
 8005bd4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005bd6:	6879      	ldr	r1, [r7, #4]
 8005bd8:	68b8      	ldr	r0, [r7, #8]
 8005bda:	f000 fa55 	bl	8006088 <prvAddCurrentTaskToDelayedList>
	}
 8005bde:	bf00      	nop
 8005be0:	3718      	adds	r7, #24
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}
 8005be6:	bf00      	nop
 8005be8:	20000c50 	.word	0x20000c50

08005bec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b086      	sub	sp, #24
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	68db      	ldr	r3, [r3, #12]
 8005bf8:	68db      	ldr	r3, [r3, #12]
 8005bfa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d10a      	bne.n	8005c18 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c06:	f383 8811 	msr	BASEPRI, r3
 8005c0a:	f3bf 8f6f 	isb	sy
 8005c0e:	f3bf 8f4f 	dsb	sy
 8005c12:	60fb      	str	r3, [r7, #12]
}
 8005c14:	bf00      	nop
 8005c16:	e7fe      	b.n	8005c16 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	3318      	adds	r3, #24
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	f7fe fda5 	bl	800476c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c22:	4b1e      	ldr	r3, [pc, #120]	; (8005c9c <xTaskRemoveFromEventList+0xb0>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d11d      	bne.n	8005c66 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	3304      	adds	r3, #4
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f7fe fd9c 	bl	800476c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c38:	4b19      	ldr	r3, [pc, #100]	; (8005ca0 <xTaskRemoveFromEventList+0xb4>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d903      	bls.n	8005c48 <xTaskRemoveFromEventList+0x5c>
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c44:	4a16      	ldr	r2, [pc, #88]	; (8005ca0 <xTaskRemoveFromEventList+0xb4>)
 8005c46:	6013      	str	r3, [r2, #0]
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c4c:	4613      	mov	r3, r2
 8005c4e:	009b      	lsls	r3, r3, #2
 8005c50:	4413      	add	r3, r2
 8005c52:	009b      	lsls	r3, r3, #2
 8005c54:	4a13      	ldr	r2, [pc, #76]	; (8005ca4 <xTaskRemoveFromEventList+0xb8>)
 8005c56:	441a      	add	r2, r3
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	3304      	adds	r3, #4
 8005c5c:	4619      	mov	r1, r3
 8005c5e:	4610      	mov	r0, r2
 8005c60:	f7fe fd27 	bl	80046b2 <vListInsertEnd>
 8005c64:	e005      	b.n	8005c72 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	3318      	adds	r3, #24
 8005c6a:	4619      	mov	r1, r3
 8005c6c:	480e      	ldr	r0, [pc, #56]	; (8005ca8 <xTaskRemoveFromEventList+0xbc>)
 8005c6e:	f7fe fd20 	bl	80046b2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c76:	4b0d      	ldr	r3, [pc, #52]	; (8005cac <xTaskRemoveFromEventList+0xc0>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	d905      	bls.n	8005c8c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005c80:	2301      	movs	r3, #1
 8005c82:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005c84:	4b0a      	ldr	r3, [pc, #40]	; (8005cb0 <xTaskRemoveFromEventList+0xc4>)
 8005c86:	2201      	movs	r2, #1
 8005c88:	601a      	str	r2, [r3, #0]
 8005c8a:	e001      	b.n	8005c90 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005c90:	697b      	ldr	r3, [r7, #20]
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3718      	adds	r7, #24
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}
 8005c9a:	bf00      	nop
 8005c9c:	2000114c 	.word	0x2000114c
 8005ca0:	2000112c 	.word	0x2000112c
 8005ca4:	20000c54 	.word	0x20000c54
 8005ca8:	200010e4 	.word	0x200010e4
 8005cac:	20000c50 	.word	0x20000c50
 8005cb0:	20001138 	.word	0x20001138

08005cb4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b083      	sub	sp, #12
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005cbc:	4b06      	ldr	r3, [pc, #24]	; (8005cd8 <vTaskInternalSetTimeOutState+0x24>)
 8005cbe:	681a      	ldr	r2, [r3, #0]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005cc4:	4b05      	ldr	r3, [pc, #20]	; (8005cdc <vTaskInternalSetTimeOutState+0x28>)
 8005cc6:	681a      	ldr	r2, [r3, #0]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	605a      	str	r2, [r3, #4]
}
 8005ccc:	bf00      	nop
 8005cce:	370c      	adds	r7, #12
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd6:	4770      	bx	lr
 8005cd8:	2000113c 	.word	0x2000113c
 8005cdc:	20001128 	.word	0x20001128

08005ce0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b088      	sub	sp, #32
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
 8005ce8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d10a      	bne.n	8005d06 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cf4:	f383 8811 	msr	BASEPRI, r3
 8005cf8:	f3bf 8f6f 	isb	sy
 8005cfc:	f3bf 8f4f 	dsb	sy
 8005d00:	613b      	str	r3, [r7, #16]
}
 8005d02:	bf00      	nop
 8005d04:	e7fe      	b.n	8005d04 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d10a      	bne.n	8005d22 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d10:	f383 8811 	msr	BASEPRI, r3
 8005d14:	f3bf 8f6f 	isb	sy
 8005d18:	f3bf 8f4f 	dsb	sy
 8005d1c:	60fb      	str	r3, [r7, #12]
}
 8005d1e:	bf00      	nop
 8005d20:	e7fe      	b.n	8005d20 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005d22:	f000 fe7f 	bl	8006a24 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005d26:	4b1d      	ldr	r3, [pc, #116]	; (8005d9c <xTaskCheckForTimeOut+0xbc>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	69ba      	ldr	r2, [r7, #24]
 8005d32:	1ad3      	subs	r3, r2, r3
 8005d34:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d3e:	d102      	bne.n	8005d46 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005d40:	2300      	movs	r3, #0
 8005d42:	61fb      	str	r3, [r7, #28]
 8005d44:	e023      	b.n	8005d8e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681a      	ldr	r2, [r3, #0]
 8005d4a:	4b15      	ldr	r3, [pc, #84]	; (8005da0 <xTaskCheckForTimeOut+0xc0>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	429a      	cmp	r2, r3
 8005d50:	d007      	beq.n	8005d62 <xTaskCheckForTimeOut+0x82>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	69ba      	ldr	r2, [r7, #24]
 8005d58:	429a      	cmp	r2, r3
 8005d5a:	d302      	bcc.n	8005d62 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	61fb      	str	r3, [r7, #28]
 8005d60:	e015      	b.n	8005d8e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	697a      	ldr	r2, [r7, #20]
 8005d68:	429a      	cmp	r2, r3
 8005d6a:	d20b      	bcs.n	8005d84 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	681a      	ldr	r2, [r3, #0]
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	1ad2      	subs	r2, r2, r3
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	f7ff ff9b 	bl	8005cb4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	61fb      	str	r3, [r7, #28]
 8005d82:	e004      	b.n	8005d8e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	2200      	movs	r2, #0
 8005d88:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005d8e:	f000 fe79 	bl	8006a84 <vPortExitCritical>

	return xReturn;
 8005d92:	69fb      	ldr	r3, [r7, #28]
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	3720      	adds	r7, #32
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}
 8005d9c:	20001128 	.word	0x20001128
 8005da0:	2000113c 	.word	0x2000113c

08005da4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005da4:	b480      	push	{r7}
 8005da6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005da8:	4b03      	ldr	r3, [pc, #12]	; (8005db8 <vTaskMissedYield+0x14>)
 8005daa:	2201      	movs	r2, #1
 8005dac:	601a      	str	r2, [r3, #0]
}
 8005dae:	bf00      	nop
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr
 8005db8:	20001138 	.word	0x20001138

08005dbc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b082      	sub	sp, #8
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005dc4:	f000 f852 	bl	8005e6c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005dc8:	4b06      	ldr	r3, [pc, #24]	; (8005de4 <prvIdleTask+0x28>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	d9f9      	bls.n	8005dc4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005dd0:	4b05      	ldr	r3, [pc, #20]	; (8005de8 <prvIdleTask+0x2c>)
 8005dd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005dd6:	601a      	str	r2, [r3, #0]
 8005dd8:	f3bf 8f4f 	dsb	sy
 8005ddc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005de0:	e7f0      	b.n	8005dc4 <prvIdleTask+0x8>
 8005de2:	bf00      	nop
 8005de4:	20000c54 	.word	0x20000c54
 8005de8:	e000ed04 	.word	0xe000ed04

08005dec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b082      	sub	sp, #8
 8005df0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005df2:	2300      	movs	r3, #0
 8005df4:	607b      	str	r3, [r7, #4]
 8005df6:	e00c      	b.n	8005e12 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005df8:	687a      	ldr	r2, [r7, #4]
 8005dfa:	4613      	mov	r3, r2
 8005dfc:	009b      	lsls	r3, r3, #2
 8005dfe:	4413      	add	r3, r2
 8005e00:	009b      	lsls	r3, r3, #2
 8005e02:	4a12      	ldr	r2, [pc, #72]	; (8005e4c <prvInitialiseTaskLists+0x60>)
 8005e04:	4413      	add	r3, r2
 8005e06:	4618      	mov	r0, r3
 8005e08:	f7fe fc26 	bl	8004658 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	3301      	adds	r3, #1
 8005e10:	607b      	str	r3, [r7, #4]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2b37      	cmp	r3, #55	; 0x37
 8005e16:	d9ef      	bls.n	8005df8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005e18:	480d      	ldr	r0, [pc, #52]	; (8005e50 <prvInitialiseTaskLists+0x64>)
 8005e1a:	f7fe fc1d 	bl	8004658 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005e1e:	480d      	ldr	r0, [pc, #52]	; (8005e54 <prvInitialiseTaskLists+0x68>)
 8005e20:	f7fe fc1a 	bl	8004658 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005e24:	480c      	ldr	r0, [pc, #48]	; (8005e58 <prvInitialiseTaskLists+0x6c>)
 8005e26:	f7fe fc17 	bl	8004658 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005e2a:	480c      	ldr	r0, [pc, #48]	; (8005e5c <prvInitialiseTaskLists+0x70>)
 8005e2c:	f7fe fc14 	bl	8004658 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005e30:	480b      	ldr	r0, [pc, #44]	; (8005e60 <prvInitialiseTaskLists+0x74>)
 8005e32:	f7fe fc11 	bl	8004658 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005e36:	4b0b      	ldr	r3, [pc, #44]	; (8005e64 <prvInitialiseTaskLists+0x78>)
 8005e38:	4a05      	ldr	r2, [pc, #20]	; (8005e50 <prvInitialiseTaskLists+0x64>)
 8005e3a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005e3c:	4b0a      	ldr	r3, [pc, #40]	; (8005e68 <prvInitialiseTaskLists+0x7c>)
 8005e3e:	4a05      	ldr	r2, [pc, #20]	; (8005e54 <prvInitialiseTaskLists+0x68>)
 8005e40:	601a      	str	r2, [r3, #0]
}
 8005e42:	bf00      	nop
 8005e44:	3708      	adds	r7, #8
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}
 8005e4a:	bf00      	nop
 8005e4c:	20000c54 	.word	0x20000c54
 8005e50:	200010b4 	.word	0x200010b4
 8005e54:	200010c8 	.word	0x200010c8
 8005e58:	200010e4 	.word	0x200010e4
 8005e5c:	200010f8 	.word	0x200010f8
 8005e60:	20001110 	.word	0x20001110
 8005e64:	200010dc 	.word	0x200010dc
 8005e68:	200010e0 	.word	0x200010e0

08005e6c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b082      	sub	sp, #8
 8005e70:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005e72:	e019      	b.n	8005ea8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005e74:	f000 fdd6 	bl	8006a24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e78:	4b10      	ldr	r3, [pc, #64]	; (8005ebc <prvCheckTasksWaitingTermination+0x50>)
 8005e7a:	68db      	ldr	r3, [r3, #12]
 8005e7c:	68db      	ldr	r3, [r3, #12]
 8005e7e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	3304      	adds	r3, #4
 8005e84:	4618      	mov	r0, r3
 8005e86:	f7fe fc71 	bl	800476c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005e8a:	4b0d      	ldr	r3, [pc, #52]	; (8005ec0 <prvCheckTasksWaitingTermination+0x54>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	3b01      	subs	r3, #1
 8005e90:	4a0b      	ldr	r2, [pc, #44]	; (8005ec0 <prvCheckTasksWaitingTermination+0x54>)
 8005e92:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005e94:	4b0b      	ldr	r3, [pc, #44]	; (8005ec4 <prvCheckTasksWaitingTermination+0x58>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	3b01      	subs	r3, #1
 8005e9a:	4a0a      	ldr	r2, [pc, #40]	; (8005ec4 <prvCheckTasksWaitingTermination+0x58>)
 8005e9c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005e9e:	f000 fdf1 	bl	8006a84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f000 f810 	bl	8005ec8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005ea8:	4b06      	ldr	r3, [pc, #24]	; (8005ec4 <prvCheckTasksWaitingTermination+0x58>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d1e1      	bne.n	8005e74 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005eb0:	bf00      	nop
 8005eb2:	bf00      	nop
 8005eb4:	3708      	adds	r7, #8
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}
 8005eba:	bf00      	nop
 8005ebc:	200010f8 	.word	0x200010f8
 8005ec0:	20001124 	.word	0x20001124
 8005ec4:	2000110c 	.word	0x2000110c

08005ec8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b084      	sub	sp, #16
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	3354      	adds	r3, #84	; 0x54
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	f001 f8fb 	bl	80070d0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d108      	bne.n	8005ef6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ee8:	4618      	mov	r0, r3
 8005eea:	f000 ff89 	bl	8006e00 <vPortFree>
				vPortFree( pxTCB );
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f000 ff86 	bl	8006e00 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005ef4:	e018      	b.n	8005f28 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	d103      	bne.n	8005f08 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	f000 ff7d 	bl	8006e00 <vPortFree>
	}
 8005f06:	e00f      	b.n	8005f28 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005f0e:	2b02      	cmp	r3, #2
 8005f10:	d00a      	beq.n	8005f28 <prvDeleteTCB+0x60>
	__asm volatile
 8005f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f16:	f383 8811 	msr	BASEPRI, r3
 8005f1a:	f3bf 8f6f 	isb	sy
 8005f1e:	f3bf 8f4f 	dsb	sy
 8005f22:	60fb      	str	r3, [r7, #12]
}
 8005f24:	bf00      	nop
 8005f26:	e7fe      	b.n	8005f26 <prvDeleteTCB+0x5e>
	}
 8005f28:	bf00      	nop
 8005f2a:	3710      	adds	r7, #16
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}

08005f30 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005f30:	b480      	push	{r7}
 8005f32:	b083      	sub	sp, #12
 8005f34:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f36:	4b0c      	ldr	r3, [pc, #48]	; (8005f68 <prvResetNextTaskUnblockTime+0x38>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d104      	bne.n	8005f4a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005f40:	4b0a      	ldr	r3, [pc, #40]	; (8005f6c <prvResetNextTaskUnblockTime+0x3c>)
 8005f42:	f04f 32ff 	mov.w	r2, #4294967295
 8005f46:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005f48:	e008      	b.n	8005f5c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f4a:	4b07      	ldr	r3, [pc, #28]	; (8005f68 <prvResetNextTaskUnblockTime+0x38>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	68db      	ldr	r3, [r3, #12]
 8005f50:	68db      	ldr	r3, [r3, #12]
 8005f52:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	4a04      	ldr	r2, [pc, #16]	; (8005f6c <prvResetNextTaskUnblockTime+0x3c>)
 8005f5a:	6013      	str	r3, [r2, #0]
}
 8005f5c:	bf00      	nop
 8005f5e:	370c      	adds	r7, #12
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	4770      	bx	lr
 8005f68:	200010dc 	.word	0x200010dc
 8005f6c:	20001144 	.word	0x20001144

08005f70 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005f70:	b480      	push	{r7}
 8005f72:	b083      	sub	sp, #12
 8005f74:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005f76:	4b0b      	ldr	r3, [pc, #44]	; (8005fa4 <xTaskGetSchedulerState+0x34>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d102      	bne.n	8005f84 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	607b      	str	r3, [r7, #4]
 8005f82:	e008      	b.n	8005f96 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f84:	4b08      	ldr	r3, [pc, #32]	; (8005fa8 <xTaskGetSchedulerState+0x38>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d102      	bne.n	8005f92 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005f8c:	2302      	movs	r3, #2
 8005f8e:	607b      	str	r3, [r7, #4]
 8005f90:	e001      	b.n	8005f96 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005f92:	2300      	movs	r3, #0
 8005f94:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005f96:	687b      	ldr	r3, [r7, #4]
	}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	370c      	adds	r7, #12
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa2:	4770      	bx	lr
 8005fa4:	20001130 	.word	0x20001130
 8005fa8:	2000114c 	.word	0x2000114c

08005fac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b086      	sub	sp, #24
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d056      	beq.n	8006070 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005fc2:	4b2e      	ldr	r3, [pc, #184]	; (800607c <xTaskPriorityDisinherit+0xd0>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	693a      	ldr	r2, [r7, #16]
 8005fc8:	429a      	cmp	r2, r3
 8005fca:	d00a      	beq.n	8005fe2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fd0:	f383 8811 	msr	BASEPRI, r3
 8005fd4:	f3bf 8f6f 	isb	sy
 8005fd8:	f3bf 8f4f 	dsb	sy
 8005fdc:	60fb      	str	r3, [r7, #12]
}
 8005fde:	bf00      	nop
 8005fe0:	e7fe      	b.n	8005fe0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d10a      	bne.n	8006000 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fee:	f383 8811 	msr	BASEPRI, r3
 8005ff2:	f3bf 8f6f 	isb	sy
 8005ff6:	f3bf 8f4f 	dsb	sy
 8005ffa:	60bb      	str	r3, [r7, #8]
}
 8005ffc:	bf00      	nop
 8005ffe:	e7fe      	b.n	8005ffe <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006004:	1e5a      	subs	r2, r3, #1
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006012:	429a      	cmp	r2, r3
 8006014:	d02c      	beq.n	8006070 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800601a:	2b00      	cmp	r3, #0
 800601c:	d128      	bne.n	8006070 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	3304      	adds	r3, #4
 8006022:	4618      	mov	r0, r3
 8006024:	f7fe fba2 	bl	800476c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006034:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006040:	4b0f      	ldr	r3, [pc, #60]	; (8006080 <xTaskPriorityDisinherit+0xd4>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	429a      	cmp	r2, r3
 8006046:	d903      	bls.n	8006050 <xTaskPriorityDisinherit+0xa4>
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800604c:	4a0c      	ldr	r2, [pc, #48]	; (8006080 <xTaskPriorityDisinherit+0xd4>)
 800604e:	6013      	str	r3, [r2, #0]
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006054:	4613      	mov	r3, r2
 8006056:	009b      	lsls	r3, r3, #2
 8006058:	4413      	add	r3, r2
 800605a:	009b      	lsls	r3, r3, #2
 800605c:	4a09      	ldr	r2, [pc, #36]	; (8006084 <xTaskPriorityDisinherit+0xd8>)
 800605e:	441a      	add	r2, r3
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	3304      	adds	r3, #4
 8006064:	4619      	mov	r1, r3
 8006066:	4610      	mov	r0, r2
 8006068:	f7fe fb23 	bl	80046b2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800606c:	2301      	movs	r3, #1
 800606e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006070:	697b      	ldr	r3, [r7, #20]
	}
 8006072:	4618      	mov	r0, r3
 8006074:	3718      	adds	r7, #24
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}
 800607a:	bf00      	nop
 800607c:	20000c50 	.word	0x20000c50
 8006080:	2000112c 	.word	0x2000112c
 8006084:	20000c54 	.word	0x20000c54

08006088 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b084      	sub	sp, #16
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
 8006090:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006092:	4b21      	ldr	r3, [pc, #132]	; (8006118 <prvAddCurrentTaskToDelayedList+0x90>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006098:	4b20      	ldr	r3, [pc, #128]	; (800611c <prvAddCurrentTaskToDelayedList+0x94>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	3304      	adds	r3, #4
 800609e:	4618      	mov	r0, r3
 80060a0:	f7fe fb64 	bl	800476c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060aa:	d10a      	bne.n	80060c2 <prvAddCurrentTaskToDelayedList+0x3a>
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d007      	beq.n	80060c2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80060b2:	4b1a      	ldr	r3, [pc, #104]	; (800611c <prvAddCurrentTaskToDelayedList+0x94>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	3304      	adds	r3, #4
 80060b8:	4619      	mov	r1, r3
 80060ba:	4819      	ldr	r0, [pc, #100]	; (8006120 <prvAddCurrentTaskToDelayedList+0x98>)
 80060bc:	f7fe faf9 	bl	80046b2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80060c0:	e026      	b.n	8006110 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80060c2:	68fa      	ldr	r2, [r7, #12]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	4413      	add	r3, r2
 80060c8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80060ca:	4b14      	ldr	r3, [pc, #80]	; (800611c <prvAddCurrentTaskToDelayedList+0x94>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	68ba      	ldr	r2, [r7, #8]
 80060d0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80060d2:	68ba      	ldr	r2, [r7, #8]
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	429a      	cmp	r2, r3
 80060d8:	d209      	bcs.n	80060ee <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80060da:	4b12      	ldr	r3, [pc, #72]	; (8006124 <prvAddCurrentTaskToDelayedList+0x9c>)
 80060dc:	681a      	ldr	r2, [r3, #0]
 80060de:	4b0f      	ldr	r3, [pc, #60]	; (800611c <prvAddCurrentTaskToDelayedList+0x94>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	3304      	adds	r3, #4
 80060e4:	4619      	mov	r1, r3
 80060e6:	4610      	mov	r0, r2
 80060e8:	f7fe fb07 	bl	80046fa <vListInsert>
}
 80060ec:	e010      	b.n	8006110 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80060ee:	4b0e      	ldr	r3, [pc, #56]	; (8006128 <prvAddCurrentTaskToDelayedList+0xa0>)
 80060f0:	681a      	ldr	r2, [r3, #0]
 80060f2:	4b0a      	ldr	r3, [pc, #40]	; (800611c <prvAddCurrentTaskToDelayedList+0x94>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	3304      	adds	r3, #4
 80060f8:	4619      	mov	r1, r3
 80060fa:	4610      	mov	r0, r2
 80060fc:	f7fe fafd 	bl	80046fa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006100:	4b0a      	ldr	r3, [pc, #40]	; (800612c <prvAddCurrentTaskToDelayedList+0xa4>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	68ba      	ldr	r2, [r7, #8]
 8006106:	429a      	cmp	r2, r3
 8006108:	d202      	bcs.n	8006110 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800610a:	4a08      	ldr	r2, [pc, #32]	; (800612c <prvAddCurrentTaskToDelayedList+0xa4>)
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	6013      	str	r3, [r2, #0]
}
 8006110:	bf00      	nop
 8006112:	3710      	adds	r7, #16
 8006114:	46bd      	mov	sp, r7
 8006116:	bd80      	pop	{r7, pc}
 8006118:	20001128 	.word	0x20001128
 800611c:	20000c50 	.word	0x20000c50
 8006120:	20001110 	.word	0x20001110
 8006124:	200010e0 	.word	0x200010e0
 8006128:	200010dc 	.word	0x200010dc
 800612c:	20001144 	.word	0x20001144

08006130 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b08a      	sub	sp, #40	; 0x28
 8006134:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006136:	2300      	movs	r3, #0
 8006138:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800613a:	f000 fb07 	bl	800674c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800613e:	4b1c      	ldr	r3, [pc, #112]	; (80061b0 <xTimerCreateTimerTask+0x80>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d021      	beq.n	800618a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006146:	2300      	movs	r3, #0
 8006148:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800614a:	2300      	movs	r3, #0
 800614c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800614e:	1d3a      	adds	r2, r7, #4
 8006150:	f107 0108 	add.w	r1, r7, #8
 8006154:	f107 030c 	add.w	r3, r7, #12
 8006158:	4618      	mov	r0, r3
 800615a:	f7fe fa63 	bl	8004624 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800615e:	6879      	ldr	r1, [r7, #4]
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	68fa      	ldr	r2, [r7, #12]
 8006164:	9202      	str	r2, [sp, #8]
 8006166:	9301      	str	r3, [sp, #4]
 8006168:	2302      	movs	r3, #2
 800616a:	9300      	str	r3, [sp, #0]
 800616c:	2300      	movs	r3, #0
 800616e:	460a      	mov	r2, r1
 8006170:	4910      	ldr	r1, [pc, #64]	; (80061b4 <xTimerCreateTimerTask+0x84>)
 8006172:	4811      	ldr	r0, [pc, #68]	; (80061b8 <xTimerCreateTimerTask+0x88>)
 8006174:	f7ff f810 	bl	8005198 <xTaskCreateStatic>
 8006178:	4603      	mov	r3, r0
 800617a:	4a10      	ldr	r2, [pc, #64]	; (80061bc <xTimerCreateTimerTask+0x8c>)
 800617c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800617e:	4b0f      	ldr	r3, [pc, #60]	; (80061bc <xTimerCreateTimerTask+0x8c>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d001      	beq.n	800618a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006186:	2301      	movs	r3, #1
 8006188:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d10a      	bne.n	80061a6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006194:	f383 8811 	msr	BASEPRI, r3
 8006198:	f3bf 8f6f 	isb	sy
 800619c:	f3bf 8f4f 	dsb	sy
 80061a0:	613b      	str	r3, [r7, #16]
}
 80061a2:	bf00      	nop
 80061a4:	e7fe      	b.n	80061a4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80061a6:	697b      	ldr	r3, [r7, #20]
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3718      	adds	r7, #24
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}
 80061b0:	20001180 	.word	0x20001180
 80061b4:	080072b4 	.word	0x080072b4
 80061b8:	080062f5 	.word	0x080062f5
 80061bc:	20001184 	.word	0x20001184

080061c0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b08a      	sub	sp, #40	; 0x28
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	60f8      	str	r0, [r7, #12]
 80061c8:	60b9      	str	r1, [r7, #8]
 80061ca:	607a      	str	r2, [r7, #4]
 80061cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80061ce:	2300      	movs	r3, #0
 80061d0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d10a      	bne.n	80061ee <xTimerGenericCommand+0x2e>
	__asm volatile
 80061d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061dc:	f383 8811 	msr	BASEPRI, r3
 80061e0:	f3bf 8f6f 	isb	sy
 80061e4:	f3bf 8f4f 	dsb	sy
 80061e8:	623b      	str	r3, [r7, #32]
}
 80061ea:	bf00      	nop
 80061ec:	e7fe      	b.n	80061ec <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80061ee:	4b1a      	ldr	r3, [pc, #104]	; (8006258 <xTimerGenericCommand+0x98>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d02a      	beq.n	800624c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	2b05      	cmp	r3, #5
 8006206:	dc18      	bgt.n	800623a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006208:	f7ff feb2 	bl	8005f70 <xTaskGetSchedulerState>
 800620c:	4603      	mov	r3, r0
 800620e:	2b02      	cmp	r3, #2
 8006210:	d109      	bne.n	8006226 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006212:	4b11      	ldr	r3, [pc, #68]	; (8006258 <xTimerGenericCommand+0x98>)
 8006214:	6818      	ldr	r0, [r3, #0]
 8006216:	f107 0110 	add.w	r1, r7, #16
 800621a:	2300      	movs	r3, #0
 800621c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800621e:	f7fe fbd3 	bl	80049c8 <xQueueGenericSend>
 8006222:	6278      	str	r0, [r7, #36]	; 0x24
 8006224:	e012      	b.n	800624c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006226:	4b0c      	ldr	r3, [pc, #48]	; (8006258 <xTimerGenericCommand+0x98>)
 8006228:	6818      	ldr	r0, [r3, #0]
 800622a:	f107 0110 	add.w	r1, r7, #16
 800622e:	2300      	movs	r3, #0
 8006230:	2200      	movs	r2, #0
 8006232:	f7fe fbc9 	bl	80049c8 <xQueueGenericSend>
 8006236:	6278      	str	r0, [r7, #36]	; 0x24
 8006238:	e008      	b.n	800624c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800623a:	4b07      	ldr	r3, [pc, #28]	; (8006258 <xTimerGenericCommand+0x98>)
 800623c:	6818      	ldr	r0, [r3, #0]
 800623e:	f107 0110 	add.w	r1, r7, #16
 8006242:	2300      	movs	r3, #0
 8006244:	683a      	ldr	r2, [r7, #0]
 8006246:	f7fe fcbd 	bl	8004bc4 <xQueueGenericSendFromISR>
 800624a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800624c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800624e:	4618      	mov	r0, r3
 8006250:	3728      	adds	r7, #40	; 0x28
 8006252:	46bd      	mov	sp, r7
 8006254:	bd80      	pop	{r7, pc}
 8006256:	bf00      	nop
 8006258:	20001180 	.word	0x20001180

0800625c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b088      	sub	sp, #32
 8006260:	af02      	add	r7, sp, #8
 8006262:	6078      	str	r0, [r7, #4]
 8006264:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006266:	4b22      	ldr	r3, [pc, #136]	; (80062f0 <prvProcessExpiredTimer+0x94>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	68db      	ldr	r3, [r3, #12]
 800626c:	68db      	ldr	r3, [r3, #12]
 800626e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	3304      	adds	r3, #4
 8006274:	4618      	mov	r0, r3
 8006276:	f7fe fa79 	bl	800476c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006280:	f003 0304 	and.w	r3, r3, #4
 8006284:	2b00      	cmp	r3, #0
 8006286:	d022      	beq.n	80062ce <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	699a      	ldr	r2, [r3, #24]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	18d1      	adds	r1, r2, r3
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	683a      	ldr	r2, [r7, #0]
 8006294:	6978      	ldr	r0, [r7, #20]
 8006296:	f000 f8d1 	bl	800643c <prvInsertTimerInActiveList>
 800629a:	4603      	mov	r3, r0
 800629c:	2b00      	cmp	r3, #0
 800629e:	d01f      	beq.n	80062e0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80062a0:	2300      	movs	r3, #0
 80062a2:	9300      	str	r3, [sp, #0]
 80062a4:	2300      	movs	r3, #0
 80062a6:	687a      	ldr	r2, [r7, #4]
 80062a8:	2100      	movs	r1, #0
 80062aa:	6978      	ldr	r0, [r7, #20]
 80062ac:	f7ff ff88 	bl	80061c0 <xTimerGenericCommand>
 80062b0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d113      	bne.n	80062e0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80062b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062bc:	f383 8811 	msr	BASEPRI, r3
 80062c0:	f3bf 8f6f 	isb	sy
 80062c4:	f3bf 8f4f 	dsb	sy
 80062c8:	60fb      	str	r3, [r7, #12]
}
 80062ca:	bf00      	nop
 80062cc:	e7fe      	b.n	80062cc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80062d4:	f023 0301 	bic.w	r3, r3, #1
 80062d8:	b2da      	uxtb	r2, r3
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	6a1b      	ldr	r3, [r3, #32]
 80062e4:	6978      	ldr	r0, [r7, #20]
 80062e6:	4798      	blx	r3
}
 80062e8:	bf00      	nop
 80062ea:	3718      	adds	r7, #24
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}
 80062f0:	20001178 	.word	0x20001178

080062f4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b084      	sub	sp, #16
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80062fc:	f107 0308 	add.w	r3, r7, #8
 8006300:	4618      	mov	r0, r3
 8006302:	f000 f857 	bl	80063b4 <prvGetNextExpireTime>
 8006306:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	4619      	mov	r1, r3
 800630c:	68f8      	ldr	r0, [r7, #12]
 800630e:	f000 f803 	bl	8006318 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006312:	f000 f8d5 	bl	80064c0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006316:	e7f1      	b.n	80062fc <prvTimerTask+0x8>

08006318 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b084      	sub	sp, #16
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
 8006320:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006322:	f7ff fa39 	bl	8005798 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006326:	f107 0308 	add.w	r3, r7, #8
 800632a:	4618      	mov	r0, r3
 800632c:	f000 f866 	bl	80063fc <prvSampleTimeNow>
 8006330:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d130      	bne.n	800639a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d10a      	bne.n	8006354 <prvProcessTimerOrBlockTask+0x3c>
 800633e:	687a      	ldr	r2, [r7, #4]
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	429a      	cmp	r2, r3
 8006344:	d806      	bhi.n	8006354 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006346:	f7ff fa35 	bl	80057b4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800634a:	68f9      	ldr	r1, [r7, #12]
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f7ff ff85 	bl	800625c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006352:	e024      	b.n	800639e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d008      	beq.n	800636c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800635a:	4b13      	ldr	r3, [pc, #76]	; (80063a8 <prvProcessTimerOrBlockTask+0x90>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d101      	bne.n	8006368 <prvProcessTimerOrBlockTask+0x50>
 8006364:	2301      	movs	r3, #1
 8006366:	e000      	b.n	800636a <prvProcessTimerOrBlockTask+0x52>
 8006368:	2300      	movs	r3, #0
 800636a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800636c:	4b0f      	ldr	r3, [pc, #60]	; (80063ac <prvProcessTimerOrBlockTask+0x94>)
 800636e:	6818      	ldr	r0, [r3, #0]
 8006370:	687a      	ldr	r2, [r7, #4]
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	1ad3      	subs	r3, r2, r3
 8006376:	683a      	ldr	r2, [r7, #0]
 8006378:	4619      	mov	r1, r3
 800637a:	f7fe fed9 	bl	8005130 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800637e:	f7ff fa19 	bl	80057b4 <xTaskResumeAll>
 8006382:	4603      	mov	r3, r0
 8006384:	2b00      	cmp	r3, #0
 8006386:	d10a      	bne.n	800639e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006388:	4b09      	ldr	r3, [pc, #36]	; (80063b0 <prvProcessTimerOrBlockTask+0x98>)
 800638a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800638e:	601a      	str	r2, [r3, #0]
 8006390:	f3bf 8f4f 	dsb	sy
 8006394:	f3bf 8f6f 	isb	sy
}
 8006398:	e001      	b.n	800639e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800639a:	f7ff fa0b 	bl	80057b4 <xTaskResumeAll>
}
 800639e:	bf00      	nop
 80063a0:	3710      	adds	r7, #16
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}
 80063a6:	bf00      	nop
 80063a8:	2000117c 	.word	0x2000117c
 80063ac:	20001180 	.word	0x20001180
 80063b0:	e000ed04 	.word	0xe000ed04

080063b4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80063b4:	b480      	push	{r7}
 80063b6:	b085      	sub	sp, #20
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80063bc:	4b0e      	ldr	r3, [pc, #56]	; (80063f8 <prvGetNextExpireTime+0x44>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d101      	bne.n	80063ca <prvGetNextExpireTime+0x16>
 80063c6:	2201      	movs	r2, #1
 80063c8:	e000      	b.n	80063cc <prvGetNextExpireTime+0x18>
 80063ca:	2200      	movs	r2, #0
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d105      	bne.n	80063e4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80063d8:	4b07      	ldr	r3, [pc, #28]	; (80063f8 <prvGetNextExpireTime+0x44>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	68db      	ldr	r3, [r3, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	60fb      	str	r3, [r7, #12]
 80063e2:	e001      	b.n	80063e8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80063e4:	2300      	movs	r3, #0
 80063e6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80063e8:	68fb      	ldr	r3, [r7, #12]
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3714      	adds	r7, #20
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr
 80063f6:	bf00      	nop
 80063f8:	20001178 	.word	0x20001178

080063fc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b084      	sub	sp, #16
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006404:	f7ff fa74 	bl	80058f0 <xTaskGetTickCount>
 8006408:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800640a:	4b0b      	ldr	r3, [pc, #44]	; (8006438 <prvSampleTimeNow+0x3c>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	68fa      	ldr	r2, [r7, #12]
 8006410:	429a      	cmp	r2, r3
 8006412:	d205      	bcs.n	8006420 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006414:	f000 f936 	bl	8006684 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2201      	movs	r2, #1
 800641c:	601a      	str	r2, [r3, #0]
 800641e:	e002      	b.n	8006426 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2200      	movs	r2, #0
 8006424:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006426:	4a04      	ldr	r2, [pc, #16]	; (8006438 <prvSampleTimeNow+0x3c>)
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800642c:	68fb      	ldr	r3, [r7, #12]
}
 800642e:	4618      	mov	r0, r3
 8006430:	3710      	adds	r7, #16
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}
 8006436:	bf00      	nop
 8006438:	20001188 	.word	0x20001188

0800643c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b086      	sub	sp, #24
 8006440:	af00      	add	r7, sp, #0
 8006442:	60f8      	str	r0, [r7, #12]
 8006444:	60b9      	str	r1, [r7, #8]
 8006446:	607a      	str	r2, [r7, #4]
 8006448:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800644a:	2300      	movs	r3, #0
 800644c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	68ba      	ldr	r2, [r7, #8]
 8006452:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	68fa      	ldr	r2, [r7, #12]
 8006458:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800645a:	68ba      	ldr	r2, [r7, #8]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	429a      	cmp	r2, r3
 8006460:	d812      	bhi.n	8006488 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006462:	687a      	ldr	r2, [r7, #4]
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	1ad2      	subs	r2, r2, r3
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	699b      	ldr	r3, [r3, #24]
 800646c:	429a      	cmp	r2, r3
 800646e:	d302      	bcc.n	8006476 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006470:	2301      	movs	r3, #1
 8006472:	617b      	str	r3, [r7, #20]
 8006474:	e01b      	b.n	80064ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006476:	4b10      	ldr	r3, [pc, #64]	; (80064b8 <prvInsertTimerInActiveList+0x7c>)
 8006478:	681a      	ldr	r2, [r3, #0]
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	3304      	adds	r3, #4
 800647e:	4619      	mov	r1, r3
 8006480:	4610      	mov	r0, r2
 8006482:	f7fe f93a 	bl	80046fa <vListInsert>
 8006486:	e012      	b.n	80064ae <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006488:	687a      	ldr	r2, [r7, #4]
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	429a      	cmp	r2, r3
 800648e:	d206      	bcs.n	800649e <prvInsertTimerInActiveList+0x62>
 8006490:	68ba      	ldr	r2, [r7, #8]
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	429a      	cmp	r2, r3
 8006496:	d302      	bcc.n	800649e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006498:	2301      	movs	r3, #1
 800649a:	617b      	str	r3, [r7, #20]
 800649c:	e007      	b.n	80064ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800649e:	4b07      	ldr	r3, [pc, #28]	; (80064bc <prvInsertTimerInActiveList+0x80>)
 80064a0:	681a      	ldr	r2, [r3, #0]
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	3304      	adds	r3, #4
 80064a6:	4619      	mov	r1, r3
 80064a8:	4610      	mov	r0, r2
 80064aa:	f7fe f926 	bl	80046fa <vListInsert>
		}
	}

	return xProcessTimerNow;
 80064ae:	697b      	ldr	r3, [r7, #20]
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3718      	adds	r7, #24
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}
 80064b8:	2000117c 	.word	0x2000117c
 80064bc:	20001178 	.word	0x20001178

080064c0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b08e      	sub	sp, #56	; 0x38
 80064c4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80064c6:	e0ca      	b.n	800665e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	da18      	bge.n	8006500 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80064ce:	1d3b      	adds	r3, r7, #4
 80064d0:	3304      	adds	r3, #4
 80064d2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80064d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d10a      	bne.n	80064f0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80064da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064de:	f383 8811 	msr	BASEPRI, r3
 80064e2:	f3bf 8f6f 	isb	sy
 80064e6:	f3bf 8f4f 	dsb	sy
 80064ea:	61fb      	str	r3, [r7, #28]
}
 80064ec:	bf00      	nop
 80064ee:	e7fe      	b.n	80064ee <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80064f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064f6:	6850      	ldr	r0, [r2, #4]
 80064f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064fa:	6892      	ldr	r2, [r2, #8]
 80064fc:	4611      	mov	r1, r2
 80064fe:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2b00      	cmp	r3, #0
 8006504:	f2c0 80aa 	blt.w	800665c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800650c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800650e:	695b      	ldr	r3, [r3, #20]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d004      	beq.n	800651e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006516:	3304      	adds	r3, #4
 8006518:	4618      	mov	r0, r3
 800651a:	f7fe f927 	bl	800476c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800651e:	463b      	mov	r3, r7
 8006520:	4618      	mov	r0, r3
 8006522:	f7ff ff6b 	bl	80063fc <prvSampleTimeNow>
 8006526:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2b09      	cmp	r3, #9
 800652c:	f200 8097 	bhi.w	800665e <prvProcessReceivedCommands+0x19e>
 8006530:	a201      	add	r2, pc, #4	; (adr r2, 8006538 <prvProcessReceivedCommands+0x78>)
 8006532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006536:	bf00      	nop
 8006538:	08006561 	.word	0x08006561
 800653c:	08006561 	.word	0x08006561
 8006540:	08006561 	.word	0x08006561
 8006544:	080065d5 	.word	0x080065d5
 8006548:	080065e9 	.word	0x080065e9
 800654c:	08006633 	.word	0x08006633
 8006550:	08006561 	.word	0x08006561
 8006554:	08006561 	.word	0x08006561
 8006558:	080065d5 	.word	0x080065d5
 800655c:	080065e9 	.word	0x080065e9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006562:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006566:	f043 0301 	orr.w	r3, r3, #1
 800656a:	b2da      	uxtb	r2, r3
 800656c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800656e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006572:	68ba      	ldr	r2, [r7, #8]
 8006574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006576:	699b      	ldr	r3, [r3, #24]
 8006578:	18d1      	adds	r1, r2, r3
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800657e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006580:	f7ff ff5c 	bl	800643c <prvInsertTimerInActiveList>
 8006584:	4603      	mov	r3, r0
 8006586:	2b00      	cmp	r3, #0
 8006588:	d069      	beq.n	800665e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800658a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800658c:	6a1b      	ldr	r3, [r3, #32]
 800658e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006590:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006594:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006598:	f003 0304 	and.w	r3, r3, #4
 800659c:	2b00      	cmp	r3, #0
 800659e:	d05e      	beq.n	800665e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80065a0:	68ba      	ldr	r2, [r7, #8]
 80065a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a4:	699b      	ldr	r3, [r3, #24]
 80065a6:	441a      	add	r2, r3
 80065a8:	2300      	movs	r3, #0
 80065aa:	9300      	str	r3, [sp, #0]
 80065ac:	2300      	movs	r3, #0
 80065ae:	2100      	movs	r1, #0
 80065b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065b2:	f7ff fe05 	bl	80061c0 <xTimerGenericCommand>
 80065b6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80065b8:	6a3b      	ldr	r3, [r7, #32]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d14f      	bne.n	800665e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80065be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065c2:	f383 8811 	msr	BASEPRI, r3
 80065c6:	f3bf 8f6f 	isb	sy
 80065ca:	f3bf 8f4f 	dsb	sy
 80065ce:	61bb      	str	r3, [r7, #24]
}
 80065d0:	bf00      	nop
 80065d2:	e7fe      	b.n	80065d2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80065d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065da:	f023 0301 	bic.w	r3, r3, #1
 80065de:	b2da      	uxtb	r2, r3
 80065e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80065e6:	e03a      	b.n	800665e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80065e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065ee:	f043 0301 	orr.w	r3, r3, #1
 80065f2:	b2da      	uxtb	r2, r3
 80065f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80065fa:	68ba      	ldr	r2, [r7, #8]
 80065fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065fe:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006602:	699b      	ldr	r3, [r3, #24]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d10a      	bne.n	800661e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800660c:	f383 8811 	msr	BASEPRI, r3
 8006610:	f3bf 8f6f 	isb	sy
 8006614:	f3bf 8f4f 	dsb	sy
 8006618:	617b      	str	r3, [r7, #20]
}
 800661a:	bf00      	nop
 800661c:	e7fe      	b.n	800661c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800661e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006620:	699a      	ldr	r2, [r3, #24]
 8006622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006624:	18d1      	adds	r1, r2, r3
 8006626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006628:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800662a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800662c:	f7ff ff06 	bl	800643c <prvInsertTimerInActiveList>
					break;
 8006630:	e015      	b.n	800665e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006634:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006638:	f003 0302 	and.w	r3, r3, #2
 800663c:	2b00      	cmp	r3, #0
 800663e:	d103      	bne.n	8006648 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006640:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006642:	f000 fbdd 	bl	8006e00 <vPortFree>
 8006646:	e00a      	b.n	800665e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800664a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800664e:	f023 0301 	bic.w	r3, r3, #1
 8006652:	b2da      	uxtb	r2, r3
 8006654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006656:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800665a:	e000      	b.n	800665e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800665c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800665e:	4b08      	ldr	r3, [pc, #32]	; (8006680 <prvProcessReceivedCommands+0x1c0>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	1d39      	adds	r1, r7, #4
 8006664:	2200      	movs	r2, #0
 8006666:	4618      	mov	r0, r3
 8006668:	f7fe fb48 	bl	8004cfc <xQueueReceive>
 800666c:	4603      	mov	r3, r0
 800666e:	2b00      	cmp	r3, #0
 8006670:	f47f af2a 	bne.w	80064c8 <prvProcessReceivedCommands+0x8>
	}
}
 8006674:	bf00      	nop
 8006676:	bf00      	nop
 8006678:	3730      	adds	r7, #48	; 0x30
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}
 800667e:	bf00      	nop
 8006680:	20001180 	.word	0x20001180

08006684 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b088      	sub	sp, #32
 8006688:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800668a:	e048      	b.n	800671e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800668c:	4b2d      	ldr	r3, [pc, #180]	; (8006744 <prvSwitchTimerLists+0xc0>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	68db      	ldr	r3, [r3, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006696:	4b2b      	ldr	r3, [pc, #172]	; (8006744 <prvSwitchTimerLists+0xc0>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	68db      	ldr	r3, [r3, #12]
 800669c:	68db      	ldr	r3, [r3, #12]
 800669e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	3304      	adds	r3, #4
 80066a4:	4618      	mov	r0, r3
 80066a6:	f7fe f861 	bl	800476c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	6a1b      	ldr	r3, [r3, #32]
 80066ae:	68f8      	ldr	r0, [r7, #12]
 80066b0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80066b8:	f003 0304 	and.w	r3, r3, #4
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d02e      	beq.n	800671e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	699b      	ldr	r3, [r3, #24]
 80066c4:	693a      	ldr	r2, [r7, #16]
 80066c6:	4413      	add	r3, r2
 80066c8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80066ca:	68ba      	ldr	r2, [r7, #8]
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	429a      	cmp	r2, r3
 80066d0:	d90e      	bls.n	80066f0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	68ba      	ldr	r2, [r7, #8]
 80066d6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	68fa      	ldr	r2, [r7, #12]
 80066dc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80066de:	4b19      	ldr	r3, [pc, #100]	; (8006744 <prvSwitchTimerLists+0xc0>)
 80066e0:	681a      	ldr	r2, [r3, #0]
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	3304      	adds	r3, #4
 80066e6:	4619      	mov	r1, r3
 80066e8:	4610      	mov	r0, r2
 80066ea:	f7fe f806 	bl	80046fa <vListInsert>
 80066ee:	e016      	b.n	800671e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80066f0:	2300      	movs	r3, #0
 80066f2:	9300      	str	r3, [sp, #0]
 80066f4:	2300      	movs	r3, #0
 80066f6:	693a      	ldr	r2, [r7, #16]
 80066f8:	2100      	movs	r1, #0
 80066fa:	68f8      	ldr	r0, [r7, #12]
 80066fc:	f7ff fd60 	bl	80061c0 <xTimerGenericCommand>
 8006700:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d10a      	bne.n	800671e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800670c:	f383 8811 	msr	BASEPRI, r3
 8006710:	f3bf 8f6f 	isb	sy
 8006714:	f3bf 8f4f 	dsb	sy
 8006718:	603b      	str	r3, [r7, #0]
}
 800671a:	bf00      	nop
 800671c:	e7fe      	b.n	800671c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800671e:	4b09      	ldr	r3, [pc, #36]	; (8006744 <prvSwitchTimerLists+0xc0>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d1b1      	bne.n	800668c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006728:	4b06      	ldr	r3, [pc, #24]	; (8006744 <prvSwitchTimerLists+0xc0>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800672e:	4b06      	ldr	r3, [pc, #24]	; (8006748 <prvSwitchTimerLists+0xc4>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4a04      	ldr	r2, [pc, #16]	; (8006744 <prvSwitchTimerLists+0xc0>)
 8006734:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006736:	4a04      	ldr	r2, [pc, #16]	; (8006748 <prvSwitchTimerLists+0xc4>)
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	6013      	str	r3, [r2, #0]
}
 800673c:	bf00      	nop
 800673e:	3718      	adds	r7, #24
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}
 8006744:	20001178 	.word	0x20001178
 8006748:	2000117c 	.word	0x2000117c

0800674c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b082      	sub	sp, #8
 8006750:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006752:	f000 f967 	bl	8006a24 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006756:	4b15      	ldr	r3, [pc, #84]	; (80067ac <prvCheckForValidListAndQueue+0x60>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d120      	bne.n	80067a0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800675e:	4814      	ldr	r0, [pc, #80]	; (80067b0 <prvCheckForValidListAndQueue+0x64>)
 8006760:	f7fd ff7a 	bl	8004658 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006764:	4813      	ldr	r0, [pc, #76]	; (80067b4 <prvCheckForValidListAndQueue+0x68>)
 8006766:	f7fd ff77 	bl	8004658 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800676a:	4b13      	ldr	r3, [pc, #76]	; (80067b8 <prvCheckForValidListAndQueue+0x6c>)
 800676c:	4a10      	ldr	r2, [pc, #64]	; (80067b0 <prvCheckForValidListAndQueue+0x64>)
 800676e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006770:	4b12      	ldr	r3, [pc, #72]	; (80067bc <prvCheckForValidListAndQueue+0x70>)
 8006772:	4a10      	ldr	r2, [pc, #64]	; (80067b4 <prvCheckForValidListAndQueue+0x68>)
 8006774:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006776:	2300      	movs	r3, #0
 8006778:	9300      	str	r3, [sp, #0]
 800677a:	4b11      	ldr	r3, [pc, #68]	; (80067c0 <prvCheckForValidListAndQueue+0x74>)
 800677c:	4a11      	ldr	r2, [pc, #68]	; (80067c4 <prvCheckForValidListAndQueue+0x78>)
 800677e:	2110      	movs	r1, #16
 8006780:	200a      	movs	r0, #10
 8006782:	f7fe f885 	bl	8004890 <xQueueGenericCreateStatic>
 8006786:	4603      	mov	r3, r0
 8006788:	4a08      	ldr	r2, [pc, #32]	; (80067ac <prvCheckForValidListAndQueue+0x60>)
 800678a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800678c:	4b07      	ldr	r3, [pc, #28]	; (80067ac <prvCheckForValidListAndQueue+0x60>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d005      	beq.n	80067a0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006794:	4b05      	ldr	r3, [pc, #20]	; (80067ac <prvCheckForValidListAndQueue+0x60>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	490b      	ldr	r1, [pc, #44]	; (80067c8 <prvCheckForValidListAndQueue+0x7c>)
 800679a:	4618      	mov	r0, r3
 800679c:	f7fe fc9e 	bl	80050dc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80067a0:	f000 f970 	bl	8006a84 <vPortExitCritical>
}
 80067a4:	bf00      	nop
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}
 80067aa:	bf00      	nop
 80067ac:	20001180 	.word	0x20001180
 80067b0:	20001150 	.word	0x20001150
 80067b4:	20001164 	.word	0x20001164
 80067b8:	20001178 	.word	0x20001178
 80067bc:	2000117c 	.word	0x2000117c
 80067c0:	2000122c 	.word	0x2000122c
 80067c4:	2000118c 	.word	0x2000118c
 80067c8:	080072bc 	.word	0x080072bc

080067cc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80067cc:	b480      	push	{r7}
 80067ce:	b085      	sub	sp, #20
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	60f8      	str	r0, [r7, #12]
 80067d4:	60b9      	str	r1, [r7, #8]
 80067d6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	3b04      	subs	r3, #4
 80067dc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80067e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	3b04      	subs	r3, #4
 80067ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	f023 0201 	bic.w	r2, r3, #1
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	3b04      	subs	r3, #4
 80067fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80067fc:	4a0c      	ldr	r2, [pc, #48]	; (8006830 <pxPortInitialiseStack+0x64>)
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	3b14      	subs	r3, #20
 8006806:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006808:	687a      	ldr	r2, [r7, #4]
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	3b04      	subs	r3, #4
 8006812:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	f06f 0202 	mvn.w	r2, #2
 800681a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	3b20      	subs	r3, #32
 8006820:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006822:	68fb      	ldr	r3, [r7, #12]
}
 8006824:	4618      	mov	r0, r3
 8006826:	3714      	adds	r7, #20
 8006828:	46bd      	mov	sp, r7
 800682a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682e:	4770      	bx	lr
 8006830:	08006835 	.word	0x08006835

08006834 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006834:	b480      	push	{r7}
 8006836:	b085      	sub	sp, #20
 8006838:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800683a:	2300      	movs	r3, #0
 800683c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800683e:	4b12      	ldr	r3, [pc, #72]	; (8006888 <prvTaskExitError+0x54>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006846:	d00a      	beq.n	800685e <prvTaskExitError+0x2a>
	__asm volatile
 8006848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800684c:	f383 8811 	msr	BASEPRI, r3
 8006850:	f3bf 8f6f 	isb	sy
 8006854:	f3bf 8f4f 	dsb	sy
 8006858:	60fb      	str	r3, [r7, #12]
}
 800685a:	bf00      	nop
 800685c:	e7fe      	b.n	800685c <prvTaskExitError+0x28>
	__asm volatile
 800685e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006862:	f383 8811 	msr	BASEPRI, r3
 8006866:	f3bf 8f6f 	isb	sy
 800686a:	f3bf 8f4f 	dsb	sy
 800686e:	60bb      	str	r3, [r7, #8]
}
 8006870:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006872:	bf00      	nop
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d0fc      	beq.n	8006874 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800687a:	bf00      	nop
 800687c:	bf00      	nop
 800687e:	3714      	adds	r7, #20
 8006880:	46bd      	mov	sp, r7
 8006882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006886:	4770      	bx	lr
 8006888:	20000010 	.word	0x20000010
 800688c:	00000000 	.word	0x00000000

08006890 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006890:	4b07      	ldr	r3, [pc, #28]	; (80068b0 <pxCurrentTCBConst2>)
 8006892:	6819      	ldr	r1, [r3, #0]
 8006894:	6808      	ldr	r0, [r1, #0]
 8006896:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800689a:	f380 8809 	msr	PSP, r0
 800689e:	f3bf 8f6f 	isb	sy
 80068a2:	f04f 0000 	mov.w	r0, #0
 80068a6:	f380 8811 	msr	BASEPRI, r0
 80068aa:	4770      	bx	lr
 80068ac:	f3af 8000 	nop.w

080068b0 <pxCurrentTCBConst2>:
 80068b0:	20000c50 	.word	0x20000c50
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80068b4:	bf00      	nop
 80068b6:	bf00      	nop

080068b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80068b8:	4808      	ldr	r0, [pc, #32]	; (80068dc <prvPortStartFirstTask+0x24>)
 80068ba:	6800      	ldr	r0, [r0, #0]
 80068bc:	6800      	ldr	r0, [r0, #0]
 80068be:	f380 8808 	msr	MSP, r0
 80068c2:	f04f 0000 	mov.w	r0, #0
 80068c6:	f380 8814 	msr	CONTROL, r0
 80068ca:	b662      	cpsie	i
 80068cc:	b661      	cpsie	f
 80068ce:	f3bf 8f4f 	dsb	sy
 80068d2:	f3bf 8f6f 	isb	sy
 80068d6:	df00      	svc	0
 80068d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80068da:	bf00      	nop
 80068dc:	e000ed08 	.word	0xe000ed08

080068e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b086      	sub	sp, #24
 80068e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80068e6:	4b46      	ldr	r3, [pc, #280]	; (8006a00 <xPortStartScheduler+0x120>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a46      	ldr	r2, [pc, #280]	; (8006a04 <xPortStartScheduler+0x124>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d10a      	bne.n	8006906 <xPortStartScheduler+0x26>
	__asm volatile
 80068f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068f4:	f383 8811 	msr	BASEPRI, r3
 80068f8:	f3bf 8f6f 	isb	sy
 80068fc:	f3bf 8f4f 	dsb	sy
 8006900:	613b      	str	r3, [r7, #16]
}
 8006902:	bf00      	nop
 8006904:	e7fe      	b.n	8006904 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006906:	4b3e      	ldr	r3, [pc, #248]	; (8006a00 <xPortStartScheduler+0x120>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4a3f      	ldr	r2, [pc, #252]	; (8006a08 <xPortStartScheduler+0x128>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d10a      	bne.n	8006926 <xPortStartScheduler+0x46>
	__asm volatile
 8006910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006914:	f383 8811 	msr	BASEPRI, r3
 8006918:	f3bf 8f6f 	isb	sy
 800691c:	f3bf 8f4f 	dsb	sy
 8006920:	60fb      	str	r3, [r7, #12]
}
 8006922:	bf00      	nop
 8006924:	e7fe      	b.n	8006924 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006926:	4b39      	ldr	r3, [pc, #228]	; (8006a0c <xPortStartScheduler+0x12c>)
 8006928:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	781b      	ldrb	r3, [r3, #0]
 800692e:	b2db      	uxtb	r3, r3
 8006930:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	22ff      	movs	r2, #255	; 0xff
 8006936:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	781b      	ldrb	r3, [r3, #0]
 800693c:	b2db      	uxtb	r3, r3
 800693e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006940:	78fb      	ldrb	r3, [r7, #3]
 8006942:	b2db      	uxtb	r3, r3
 8006944:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006948:	b2da      	uxtb	r2, r3
 800694a:	4b31      	ldr	r3, [pc, #196]	; (8006a10 <xPortStartScheduler+0x130>)
 800694c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800694e:	4b31      	ldr	r3, [pc, #196]	; (8006a14 <xPortStartScheduler+0x134>)
 8006950:	2207      	movs	r2, #7
 8006952:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006954:	e009      	b.n	800696a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006956:	4b2f      	ldr	r3, [pc, #188]	; (8006a14 <xPortStartScheduler+0x134>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	3b01      	subs	r3, #1
 800695c:	4a2d      	ldr	r2, [pc, #180]	; (8006a14 <xPortStartScheduler+0x134>)
 800695e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006960:	78fb      	ldrb	r3, [r7, #3]
 8006962:	b2db      	uxtb	r3, r3
 8006964:	005b      	lsls	r3, r3, #1
 8006966:	b2db      	uxtb	r3, r3
 8006968:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800696a:	78fb      	ldrb	r3, [r7, #3]
 800696c:	b2db      	uxtb	r3, r3
 800696e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006972:	2b80      	cmp	r3, #128	; 0x80
 8006974:	d0ef      	beq.n	8006956 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006976:	4b27      	ldr	r3, [pc, #156]	; (8006a14 <xPortStartScheduler+0x134>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f1c3 0307 	rsb	r3, r3, #7
 800697e:	2b04      	cmp	r3, #4
 8006980:	d00a      	beq.n	8006998 <xPortStartScheduler+0xb8>
	__asm volatile
 8006982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006986:	f383 8811 	msr	BASEPRI, r3
 800698a:	f3bf 8f6f 	isb	sy
 800698e:	f3bf 8f4f 	dsb	sy
 8006992:	60bb      	str	r3, [r7, #8]
}
 8006994:	bf00      	nop
 8006996:	e7fe      	b.n	8006996 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006998:	4b1e      	ldr	r3, [pc, #120]	; (8006a14 <xPortStartScheduler+0x134>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	021b      	lsls	r3, r3, #8
 800699e:	4a1d      	ldr	r2, [pc, #116]	; (8006a14 <xPortStartScheduler+0x134>)
 80069a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80069a2:	4b1c      	ldr	r3, [pc, #112]	; (8006a14 <xPortStartScheduler+0x134>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80069aa:	4a1a      	ldr	r2, [pc, #104]	; (8006a14 <xPortStartScheduler+0x134>)
 80069ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	b2da      	uxtb	r2, r3
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80069b6:	4b18      	ldr	r3, [pc, #96]	; (8006a18 <xPortStartScheduler+0x138>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4a17      	ldr	r2, [pc, #92]	; (8006a18 <xPortStartScheduler+0x138>)
 80069bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80069c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80069c2:	4b15      	ldr	r3, [pc, #84]	; (8006a18 <xPortStartScheduler+0x138>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a14      	ldr	r2, [pc, #80]	; (8006a18 <xPortStartScheduler+0x138>)
 80069c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80069cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80069ce:	f000 f8dd 	bl	8006b8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80069d2:	4b12      	ldr	r3, [pc, #72]	; (8006a1c <xPortStartScheduler+0x13c>)
 80069d4:	2200      	movs	r2, #0
 80069d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80069d8:	f000 f8fc 	bl	8006bd4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80069dc:	4b10      	ldr	r3, [pc, #64]	; (8006a20 <xPortStartScheduler+0x140>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a0f      	ldr	r2, [pc, #60]	; (8006a20 <xPortStartScheduler+0x140>)
 80069e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80069e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80069e8:	f7ff ff66 	bl	80068b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80069ec:	f7ff f84a 	bl	8005a84 <vTaskSwitchContext>
	prvTaskExitError();
 80069f0:	f7ff ff20 	bl	8006834 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80069f4:	2300      	movs	r3, #0
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	3718      	adds	r7, #24
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd80      	pop	{r7, pc}
 80069fe:	bf00      	nop
 8006a00:	e000ed00 	.word	0xe000ed00
 8006a04:	410fc271 	.word	0x410fc271
 8006a08:	410fc270 	.word	0x410fc270
 8006a0c:	e000e400 	.word	0xe000e400
 8006a10:	2000127c 	.word	0x2000127c
 8006a14:	20001280 	.word	0x20001280
 8006a18:	e000ed20 	.word	0xe000ed20
 8006a1c:	20000010 	.word	0x20000010
 8006a20:	e000ef34 	.word	0xe000ef34

08006a24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006a24:	b480      	push	{r7}
 8006a26:	b083      	sub	sp, #12
 8006a28:	af00      	add	r7, sp, #0
	__asm volatile
 8006a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a2e:	f383 8811 	msr	BASEPRI, r3
 8006a32:	f3bf 8f6f 	isb	sy
 8006a36:	f3bf 8f4f 	dsb	sy
 8006a3a:	607b      	str	r3, [r7, #4]
}
 8006a3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006a3e:	4b0f      	ldr	r3, [pc, #60]	; (8006a7c <vPortEnterCritical+0x58>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	3301      	adds	r3, #1
 8006a44:	4a0d      	ldr	r2, [pc, #52]	; (8006a7c <vPortEnterCritical+0x58>)
 8006a46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006a48:	4b0c      	ldr	r3, [pc, #48]	; (8006a7c <vPortEnterCritical+0x58>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	2b01      	cmp	r3, #1
 8006a4e:	d10f      	bne.n	8006a70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006a50:	4b0b      	ldr	r3, [pc, #44]	; (8006a80 <vPortEnterCritical+0x5c>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	b2db      	uxtb	r3, r3
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d00a      	beq.n	8006a70 <vPortEnterCritical+0x4c>
	__asm volatile
 8006a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a5e:	f383 8811 	msr	BASEPRI, r3
 8006a62:	f3bf 8f6f 	isb	sy
 8006a66:	f3bf 8f4f 	dsb	sy
 8006a6a:	603b      	str	r3, [r7, #0]
}
 8006a6c:	bf00      	nop
 8006a6e:	e7fe      	b.n	8006a6e <vPortEnterCritical+0x4a>
	}
}
 8006a70:	bf00      	nop
 8006a72:	370c      	adds	r7, #12
 8006a74:	46bd      	mov	sp, r7
 8006a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7a:	4770      	bx	lr
 8006a7c:	20000010 	.word	0x20000010
 8006a80:	e000ed04 	.word	0xe000ed04

08006a84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006a84:	b480      	push	{r7}
 8006a86:	b083      	sub	sp, #12
 8006a88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006a8a:	4b12      	ldr	r3, [pc, #72]	; (8006ad4 <vPortExitCritical+0x50>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d10a      	bne.n	8006aa8 <vPortExitCritical+0x24>
	__asm volatile
 8006a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a96:	f383 8811 	msr	BASEPRI, r3
 8006a9a:	f3bf 8f6f 	isb	sy
 8006a9e:	f3bf 8f4f 	dsb	sy
 8006aa2:	607b      	str	r3, [r7, #4]
}
 8006aa4:	bf00      	nop
 8006aa6:	e7fe      	b.n	8006aa6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006aa8:	4b0a      	ldr	r3, [pc, #40]	; (8006ad4 <vPortExitCritical+0x50>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	3b01      	subs	r3, #1
 8006aae:	4a09      	ldr	r2, [pc, #36]	; (8006ad4 <vPortExitCritical+0x50>)
 8006ab0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006ab2:	4b08      	ldr	r3, [pc, #32]	; (8006ad4 <vPortExitCritical+0x50>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d105      	bne.n	8006ac6 <vPortExitCritical+0x42>
 8006aba:	2300      	movs	r3, #0
 8006abc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	f383 8811 	msr	BASEPRI, r3
}
 8006ac4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006ac6:	bf00      	nop
 8006ac8:	370c      	adds	r7, #12
 8006aca:	46bd      	mov	sp, r7
 8006acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad0:	4770      	bx	lr
 8006ad2:	bf00      	nop
 8006ad4:	20000010 	.word	0x20000010
	...

08006ae0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006ae0:	f3ef 8009 	mrs	r0, PSP
 8006ae4:	f3bf 8f6f 	isb	sy
 8006ae8:	4b15      	ldr	r3, [pc, #84]	; (8006b40 <pxCurrentTCBConst>)
 8006aea:	681a      	ldr	r2, [r3, #0]
 8006aec:	f01e 0f10 	tst.w	lr, #16
 8006af0:	bf08      	it	eq
 8006af2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006af6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006afa:	6010      	str	r0, [r2, #0]
 8006afc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006b00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006b04:	f380 8811 	msr	BASEPRI, r0
 8006b08:	f3bf 8f4f 	dsb	sy
 8006b0c:	f3bf 8f6f 	isb	sy
 8006b10:	f7fe ffb8 	bl	8005a84 <vTaskSwitchContext>
 8006b14:	f04f 0000 	mov.w	r0, #0
 8006b18:	f380 8811 	msr	BASEPRI, r0
 8006b1c:	bc09      	pop	{r0, r3}
 8006b1e:	6819      	ldr	r1, [r3, #0]
 8006b20:	6808      	ldr	r0, [r1, #0]
 8006b22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b26:	f01e 0f10 	tst.w	lr, #16
 8006b2a:	bf08      	it	eq
 8006b2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006b30:	f380 8809 	msr	PSP, r0
 8006b34:	f3bf 8f6f 	isb	sy
 8006b38:	4770      	bx	lr
 8006b3a:	bf00      	nop
 8006b3c:	f3af 8000 	nop.w

08006b40 <pxCurrentTCBConst>:
 8006b40:	20000c50 	.word	0x20000c50
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006b44:	bf00      	nop
 8006b46:	bf00      	nop

08006b48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b082      	sub	sp, #8
 8006b4c:	af00      	add	r7, sp, #0
	__asm volatile
 8006b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b52:	f383 8811 	msr	BASEPRI, r3
 8006b56:	f3bf 8f6f 	isb	sy
 8006b5a:	f3bf 8f4f 	dsb	sy
 8006b5e:	607b      	str	r3, [r7, #4]
}
 8006b60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006b62:	f7fe fed5 	bl	8005910 <xTaskIncrementTick>
 8006b66:	4603      	mov	r3, r0
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d003      	beq.n	8006b74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006b6c:	4b06      	ldr	r3, [pc, #24]	; (8006b88 <xPortSysTickHandler+0x40>)
 8006b6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b72:	601a      	str	r2, [r3, #0]
 8006b74:	2300      	movs	r3, #0
 8006b76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	f383 8811 	msr	BASEPRI, r3
}
 8006b7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006b80:	bf00      	nop
 8006b82:	3708      	adds	r7, #8
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}
 8006b88:	e000ed04 	.word	0xe000ed04

08006b8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006b90:	4b0b      	ldr	r3, [pc, #44]	; (8006bc0 <vPortSetupTimerInterrupt+0x34>)
 8006b92:	2200      	movs	r2, #0
 8006b94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006b96:	4b0b      	ldr	r3, [pc, #44]	; (8006bc4 <vPortSetupTimerInterrupt+0x38>)
 8006b98:	2200      	movs	r2, #0
 8006b9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006b9c:	4b0a      	ldr	r3, [pc, #40]	; (8006bc8 <vPortSetupTimerInterrupt+0x3c>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a0a      	ldr	r2, [pc, #40]	; (8006bcc <vPortSetupTimerInterrupt+0x40>)
 8006ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ba6:	099b      	lsrs	r3, r3, #6
 8006ba8:	4a09      	ldr	r2, [pc, #36]	; (8006bd0 <vPortSetupTimerInterrupt+0x44>)
 8006baa:	3b01      	subs	r3, #1
 8006bac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006bae:	4b04      	ldr	r3, [pc, #16]	; (8006bc0 <vPortSetupTimerInterrupt+0x34>)
 8006bb0:	2207      	movs	r2, #7
 8006bb2:	601a      	str	r2, [r3, #0]
}
 8006bb4:	bf00      	nop
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbc:	4770      	bx	lr
 8006bbe:	bf00      	nop
 8006bc0:	e000e010 	.word	0xe000e010
 8006bc4:	e000e018 	.word	0xe000e018
 8006bc8:	20000004 	.word	0x20000004
 8006bcc:	10624dd3 	.word	0x10624dd3
 8006bd0:	e000e014 	.word	0xe000e014

08006bd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006bd4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006be4 <vPortEnableVFP+0x10>
 8006bd8:	6801      	ldr	r1, [r0, #0]
 8006bda:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006bde:	6001      	str	r1, [r0, #0]
 8006be0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006be2:	bf00      	nop
 8006be4:	e000ed88 	.word	0xe000ed88

08006be8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006be8:	b480      	push	{r7}
 8006bea:	b085      	sub	sp, #20
 8006bec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006bee:	f3ef 8305 	mrs	r3, IPSR
 8006bf2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	2b0f      	cmp	r3, #15
 8006bf8:	d914      	bls.n	8006c24 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006bfa:	4a17      	ldr	r2, [pc, #92]	; (8006c58 <vPortValidateInterruptPriority+0x70>)
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	4413      	add	r3, r2
 8006c00:	781b      	ldrb	r3, [r3, #0]
 8006c02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006c04:	4b15      	ldr	r3, [pc, #84]	; (8006c5c <vPortValidateInterruptPriority+0x74>)
 8006c06:	781b      	ldrb	r3, [r3, #0]
 8006c08:	7afa      	ldrb	r2, [r7, #11]
 8006c0a:	429a      	cmp	r2, r3
 8006c0c:	d20a      	bcs.n	8006c24 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c12:	f383 8811 	msr	BASEPRI, r3
 8006c16:	f3bf 8f6f 	isb	sy
 8006c1a:	f3bf 8f4f 	dsb	sy
 8006c1e:	607b      	str	r3, [r7, #4]
}
 8006c20:	bf00      	nop
 8006c22:	e7fe      	b.n	8006c22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006c24:	4b0e      	ldr	r3, [pc, #56]	; (8006c60 <vPortValidateInterruptPriority+0x78>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006c2c:	4b0d      	ldr	r3, [pc, #52]	; (8006c64 <vPortValidateInterruptPriority+0x7c>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	429a      	cmp	r2, r3
 8006c32:	d90a      	bls.n	8006c4a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c38:	f383 8811 	msr	BASEPRI, r3
 8006c3c:	f3bf 8f6f 	isb	sy
 8006c40:	f3bf 8f4f 	dsb	sy
 8006c44:	603b      	str	r3, [r7, #0]
}
 8006c46:	bf00      	nop
 8006c48:	e7fe      	b.n	8006c48 <vPortValidateInterruptPriority+0x60>
	}
 8006c4a:	bf00      	nop
 8006c4c:	3714      	adds	r7, #20
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c54:	4770      	bx	lr
 8006c56:	bf00      	nop
 8006c58:	e000e3f0 	.word	0xe000e3f0
 8006c5c:	2000127c 	.word	0x2000127c
 8006c60:	e000ed0c 	.word	0xe000ed0c
 8006c64:	20001280 	.word	0x20001280

08006c68 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b08a      	sub	sp, #40	; 0x28
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006c70:	2300      	movs	r3, #0
 8006c72:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006c74:	f7fe fd90 	bl	8005798 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006c78:	4b5b      	ldr	r3, [pc, #364]	; (8006de8 <pvPortMalloc+0x180>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d101      	bne.n	8006c84 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006c80:	f000 f920 	bl	8006ec4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006c84:	4b59      	ldr	r3, [pc, #356]	; (8006dec <pvPortMalloc+0x184>)
 8006c86:	681a      	ldr	r2, [r3, #0]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	4013      	ands	r3, r2
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	f040 8093 	bne.w	8006db8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d01d      	beq.n	8006cd4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006c98:	2208      	movs	r2, #8
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	4413      	add	r3, r2
 8006c9e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f003 0307 	and.w	r3, r3, #7
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d014      	beq.n	8006cd4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f023 0307 	bic.w	r3, r3, #7
 8006cb0:	3308      	adds	r3, #8
 8006cb2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f003 0307 	and.w	r3, r3, #7
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d00a      	beq.n	8006cd4 <pvPortMalloc+0x6c>
	__asm volatile
 8006cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cc2:	f383 8811 	msr	BASEPRI, r3
 8006cc6:	f3bf 8f6f 	isb	sy
 8006cca:	f3bf 8f4f 	dsb	sy
 8006cce:	617b      	str	r3, [r7, #20]
}
 8006cd0:	bf00      	nop
 8006cd2:	e7fe      	b.n	8006cd2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d06e      	beq.n	8006db8 <pvPortMalloc+0x150>
 8006cda:	4b45      	ldr	r3, [pc, #276]	; (8006df0 <pvPortMalloc+0x188>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	687a      	ldr	r2, [r7, #4]
 8006ce0:	429a      	cmp	r2, r3
 8006ce2:	d869      	bhi.n	8006db8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006ce4:	4b43      	ldr	r3, [pc, #268]	; (8006df4 <pvPortMalloc+0x18c>)
 8006ce6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006ce8:	4b42      	ldr	r3, [pc, #264]	; (8006df4 <pvPortMalloc+0x18c>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006cee:	e004      	b.n	8006cfa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cfc:	685b      	ldr	r3, [r3, #4]
 8006cfe:	687a      	ldr	r2, [r7, #4]
 8006d00:	429a      	cmp	r2, r3
 8006d02:	d903      	bls.n	8006d0c <pvPortMalloc+0xa4>
 8006d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d1f1      	bne.n	8006cf0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006d0c:	4b36      	ldr	r3, [pc, #216]	; (8006de8 <pvPortMalloc+0x180>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d12:	429a      	cmp	r2, r3
 8006d14:	d050      	beq.n	8006db8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006d16:	6a3b      	ldr	r3, [r7, #32]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	2208      	movs	r2, #8
 8006d1c:	4413      	add	r3, r2
 8006d1e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d22:	681a      	ldr	r2, [r3, #0]
 8006d24:	6a3b      	ldr	r3, [r7, #32]
 8006d26:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d2a:	685a      	ldr	r2, [r3, #4]
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	1ad2      	subs	r2, r2, r3
 8006d30:	2308      	movs	r3, #8
 8006d32:	005b      	lsls	r3, r3, #1
 8006d34:	429a      	cmp	r2, r3
 8006d36:	d91f      	bls.n	8006d78 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006d38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	4413      	add	r3, r2
 8006d3e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d40:	69bb      	ldr	r3, [r7, #24]
 8006d42:	f003 0307 	and.w	r3, r3, #7
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d00a      	beq.n	8006d60 <pvPortMalloc+0xf8>
	__asm volatile
 8006d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d4e:	f383 8811 	msr	BASEPRI, r3
 8006d52:	f3bf 8f6f 	isb	sy
 8006d56:	f3bf 8f4f 	dsb	sy
 8006d5a:	613b      	str	r3, [r7, #16]
}
 8006d5c:	bf00      	nop
 8006d5e:	e7fe      	b.n	8006d5e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d62:	685a      	ldr	r2, [r3, #4]
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	1ad2      	subs	r2, r2, r3
 8006d68:	69bb      	ldr	r3, [r7, #24]
 8006d6a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d6e:	687a      	ldr	r2, [r7, #4]
 8006d70:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006d72:	69b8      	ldr	r0, [r7, #24]
 8006d74:	f000 f908 	bl	8006f88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006d78:	4b1d      	ldr	r3, [pc, #116]	; (8006df0 <pvPortMalloc+0x188>)
 8006d7a:	681a      	ldr	r2, [r3, #0]
 8006d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	1ad3      	subs	r3, r2, r3
 8006d82:	4a1b      	ldr	r2, [pc, #108]	; (8006df0 <pvPortMalloc+0x188>)
 8006d84:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006d86:	4b1a      	ldr	r3, [pc, #104]	; (8006df0 <pvPortMalloc+0x188>)
 8006d88:	681a      	ldr	r2, [r3, #0]
 8006d8a:	4b1b      	ldr	r3, [pc, #108]	; (8006df8 <pvPortMalloc+0x190>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	429a      	cmp	r2, r3
 8006d90:	d203      	bcs.n	8006d9a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006d92:	4b17      	ldr	r3, [pc, #92]	; (8006df0 <pvPortMalloc+0x188>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a18      	ldr	r2, [pc, #96]	; (8006df8 <pvPortMalloc+0x190>)
 8006d98:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d9c:	685a      	ldr	r2, [r3, #4]
 8006d9e:	4b13      	ldr	r3, [pc, #76]	; (8006dec <pvPortMalloc+0x184>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	431a      	orrs	r2, r3
 8006da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006daa:	2200      	movs	r2, #0
 8006dac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006dae:	4b13      	ldr	r3, [pc, #76]	; (8006dfc <pvPortMalloc+0x194>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	3301      	adds	r3, #1
 8006db4:	4a11      	ldr	r2, [pc, #68]	; (8006dfc <pvPortMalloc+0x194>)
 8006db6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006db8:	f7fe fcfc 	bl	80057b4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006dbc:	69fb      	ldr	r3, [r7, #28]
 8006dbe:	f003 0307 	and.w	r3, r3, #7
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d00a      	beq.n	8006ddc <pvPortMalloc+0x174>
	__asm volatile
 8006dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dca:	f383 8811 	msr	BASEPRI, r3
 8006dce:	f3bf 8f6f 	isb	sy
 8006dd2:	f3bf 8f4f 	dsb	sy
 8006dd6:	60fb      	str	r3, [r7, #12]
}
 8006dd8:	bf00      	nop
 8006dda:	e7fe      	b.n	8006dda <pvPortMalloc+0x172>
	return pvReturn;
 8006ddc:	69fb      	ldr	r3, [r7, #28]
}
 8006dde:	4618      	mov	r0, r3
 8006de0:	3728      	adds	r7, #40	; 0x28
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}
 8006de6:	bf00      	nop
 8006de8:	20001e8c 	.word	0x20001e8c
 8006dec:	20001ea0 	.word	0x20001ea0
 8006df0:	20001e90 	.word	0x20001e90
 8006df4:	20001e84 	.word	0x20001e84
 8006df8:	20001e94 	.word	0x20001e94
 8006dfc:	20001e98 	.word	0x20001e98

08006e00 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b086      	sub	sp, #24
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d04d      	beq.n	8006eae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006e12:	2308      	movs	r3, #8
 8006e14:	425b      	negs	r3, r3
 8006e16:	697a      	ldr	r2, [r7, #20]
 8006e18:	4413      	add	r3, r2
 8006e1a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006e1c:	697b      	ldr	r3, [r7, #20]
 8006e1e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	685a      	ldr	r2, [r3, #4]
 8006e24:	4b24      	ldr	r3, [pc, #144]	; (8006eb8 <vPortFree+0xb8>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4013      	ands	r3, r2
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d10a      	bne.n	8006e44 <vPortFree+0x44>
	__asm volatile
 8006e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e32:	f383 8811 	msr	BASEPRI, r3
 8006e36:	f3bf 8f6f 	isb	sy
 8006e3a:	f3bf 8f4f 	dsb	sy
 8006e3e:	60fb      	str	r3, [r7, #12]
}
 8006e40:	bf00      	nop
 8006e42:	e7fe      	b.n	8006e42 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d00a      	beq.n	8006e62 <vPortFree+0x62>
	__asm volatile
 8006e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e50:	f383 8811 	msr	BASEPRI, r3
 8006e54:	f3bf 8f6f 	isb	sy
 8006e58:	f3bf 8f4f 	dsb	sy
 8006e5c:	60bb      	str	r3, [r7, #8]
}
 8006e5e:	bf00      	nop
 8006e60:	e7fe      	b.n	8006e60 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006e62:	693b      	ldr	r3, [r7, #16]
 8006e64:	685a      	ldr	r2, [r3, #4]
 8006e66:	4b14      	ldr	r3, [pc, #80]	; (8006eb8 <vPortFree+0xb8>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4013      	ands	r3, r2
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d01e      	beq.n	8006eae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006e70:	693b      	ldr	r3, [r7, #16]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d11a      	bne.n	8006eae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	685a      	ldr	r2, [r3, #4]
 8006e7c:	4b0e      	ldr	r3, [pc, #56]	; (8006eb8 <vPortFree+0xb8>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	43db      	mvns	r3, r3
 8006e82:	401a      	ands	r2, r3
 8006e84:	693b      	ldr	r3, [r7, #16]
 8006e86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006e88:	f7fe fc86 	bl	8005798 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006e8c:	693b      	ldr	r3, [r7, #16]
 8006e8e:	685a      	ldr	r2, [r3, #4]
 8006e90:	4b0a      	ldr	r3, [pc, #40]	; (8006ebc <vPortFree+0xbc>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4413      	add	r3, r2
 8006e96:	4a09      	ldr	r2, [pc, #36]	; (8006ebc <vPortFree+0xbc>)
 8006e98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006e9a:	6938      	ldr	r0, [r7, #16]
 8006e9c:	f000 f874 	bl	8006f88 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006ea0:	4b07      	ldr	r3, [pc, #28]	; (8006ec0 <vPortFree+0xc0>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	3301      	adds	r3, #1
 8006ea6:	4a06      	ldr	r2, [pc, #24]	; (8006ec0 <vPortFree+0xc0>)
 8006ea8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006eaa:	f7fe fc83 	bl	80057b4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006eae:	bf00      	nop
 8006eb0:	3718      	adds	r7, #24
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}
 8006eb6:	bf00      	nop
 8006eb8:	20001ea0 	.word	0x20001ea0
 8006ebc:	20001e90 	.word	0x20001e90
 8006ec0:	20001e9c 	.word	0x20001e9c

08006ec4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b085      	sub	sp, #20
 8006ec8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006eca:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006ece:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006ed0:	4b27      	ldr	r3, [pc, #156]	; (8006f70 <prvHeapInit+0xac>)
 8006ed2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	f003 0307 	and.w	r3, r3, #7
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d00c      	beq.n	8006ef8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	3307      	adds	r3, #7
 8006ee2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	f023 0307 	bic.w	r3, r3, #7
 8006eea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006eec:	68ba      	ldr	r2, [r7, #8]
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	1ad3      	subs	r3, r2, r3
 8006ef2:	4a1f      	ldr	r2, [pc, #124]	; (8006f70 <prvHeapInit+0xac>)
 8006ef4:	4413      	add	r3, r2
 8006ef6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006efc:	4a1d      	ldr	r2, [pc, #116]	; (8006f74 <prvHeapInit+0xb0>)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006f02:	4b1c      	ldr	r3, [pc, #112]	; (8006f74 <prvHeapInit+0xb0>)
 8006f04:	2200      	movs	r2, #0
 8006f06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	68ba      	ldr	r2, [r7, #8]
 8006f0c:	4413      	add	r3, r2
 8006f0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006f10:	2208      	movs	r2, #8
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	1a9b      	subs	r3, r3, r2
 8006f16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	f023 0307 	bic.w	r3, r3, #7
 8006f1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	4a15      	ldr	r2, [pc, #84]	; (8006f78 <prvHeapInit+0xb4>)
 8006f24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006f26:	4b14      	ldr	r3, [pc, #80]	; (8006f78 <prvHeapInit+0xb4>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006f2e:	4b12      	ldr	r3, [pc, #72]	; (8006f78 <prvHeapInit+0xb4>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	2200      	movs	r2, #0
 8006f34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	68fa      	ldr	r2, [r7, #12]
 8006f3e:	1ad2      	subs	r2, r2, r3
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006f44:	4b0c      	ldr	r3, [pc, #48]	; (8006f78 <prvHeapInit+0xb4>)
 8006f46:	681a      	ldr	r2, [r3, #0]
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	685b      	ldr	r3, [r3, #4]
 8006f50:	4a0a      	ldr	r2, [pc, #40]	; (8006f7c <prvHeapInit+0xb8>)
 8006f52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	685b      	ldr	r3, [r3, #4]
 8006f58:	4a09      	ldr	r2, [pc, #36]	; (8006f80 <prvHeapInit+0xbc>)
 8006f5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006f5c:	4b09      	ldr	r3, [pc, #36]	; (8006f84 <prvHeapInit+0xc0>)
 8006f5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006f62:	601a      	str	r2, [r3, #0]
}
 8006f64:	bf00      	nop
 8006f66:	3714      	adds	r7, #20
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6e:	4770      	bx	lr
 8006f70:	20001284 	.word	0x20001284
 8006f74:	20001e84 	.word	0x20001e84
 8006f78:	20001e8c 	.word	0x20001e8c
 8006f7c:	20001e94 	.word	0x20001e94
 8006f80:	20001e90 	.word	0x20001e90
 8006f84:	20001ea0 	.word	0x20001ea0

08006f88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b085      	sub	sp, #20
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006f90:	4b28      	ldr	r3, [pc, #160]	; (8007034 <prvInsertBlockIntoFreeList+0xac>)
 8006f92:	60fb      	str	r3, [r7, #12]
 8006f94:	e002      	b.n	8006f9c <prvInsertBlockIntoFreeList+0x14>
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	60fb      	str	r3, [r7, #12]
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	687a      	ldr	r2, [r7, #4]
 8006fa2:	429a      	cmp	r2, r3
 8006fa4:	d8f7      	bhi.n	8006f96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	685b      	ldr	r3, [r3, #4]
 8006fae:	68ba      	ldr	r2, [r7, #8]
 8006fb0:	4413      	add	r3, r2
 8006fb2:	687a      	ldr	r2, [r7, #4]
 8006fb4:	429a      	cmp	r2, r3
 8006fb6:	d108      	bne.n	8006fca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	685a      	ldr	r2, [r3, #4]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	441a      	add	r2, r3
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	685b      	ldr	r3, [r3, #4]
 8006fd2:	68ba      	ldr	r2, [r7, #8]
 8006fd4:	441a      	add	r2, r3
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	429a      	cmp	r2, r3
 8006fdc:	d118      	bne.n	8007010 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681a      	ldr	r2, [r3, #0]
 8006fe2:	4b15      	ldr	r3, [pc, #84]	; (8007038 <prvInsertBlockIntoFreeList+0xb0>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	429a      	cmp	r2, r3
 8006fe8:	d00d      	beq.n	8007006 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	685a      	ldr	r2, [r3, #4]
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	441a      	add	r2, r3
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	681a      	ldr	r2, [r3, #0]
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	601a      	str	r2, [r3, #0]
 8007004:	e008      	b.n	8007018 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007006:	4b0c      	ldr	r3, [pc, #48]	; (8007038 <prvInsertBlockIntoFreeList+0xb0>)
 8007008:	681a      	ldr	r2, [r3, #0]
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	601a      	str	r2, [r3, #0]
 800700e:	e003      	b.n	8007018 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681a      	ldr	r2, [r3, #0]
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007018:	68fa      	ldr	r2, [r7, #12]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	429a      	cmp	r2, r3
 800701e:	d002      	beq.n	8007026 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	687a      	ldr	r2, [r7, #4]
 8007024:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007026:	bf00      	nop
 8007028:	3714      	adds	r7, #20
 800702a:	46bd      	mov	sp, r7
 800702c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007030:	4770      	bx	lr
 8007032:	bf00      	nop
 8007034:	20001e84 	.word	0x20001e84
 8007038:	20001e8c 	.word	0x20001e8c

0800703c <__libc_init_array>:
 800703c:	b570      	push	{r4, r5, r6, lr}
 800703e:	4d0d      	ldr	r5, [pc, #52]	; (8007074 <__libc_init_array+0x38>)
 8007040:	4c0d      	ldr	r4, [pc, #52]	; (8007078 <__libc_init_array+0x3c>)
 8007042:	1b64      	subs	r4, r4, r5
 8007044:	10a4      	asrs	r4, r4, #2
 8007046:	2600      	movs	r6, #0
 8007048:	42a6      	cmp	r6, r4
 800704a:	d109      	bne.n	8007060 <__libc_init_array+0x24>
 800704c:	4d0b      	ldr	r5, [pc, #44]	; (800707c <__libc_init_array+0x40>)
 800704e:	4c0c      	ldr	r4, [pc, #48]	; (8007080 <__libc_init_array+0x44>)
 8007050:	f000 f8f2 	bl	8007238 <_init>
 8007054:	1b64      	subs	r4, r4, r5
 8007056:	10a4      	asrs	r4, r4, #2
 8007058:	2600      	movs	r6, #0
 800705a:	42a6      	cmp	r6, r4
 800705c:	d105      	bne.n	800706a <__libc_init_array+0x2e>
 800705e:	bd70      	pop	{r4, r5, r6, pc}
 8007060:	f855 3b04 	ldr.w	r3, [r5], #4
 8007064:	4798      	blx	r3
 8007066:	3601      	adds	r6, #1
 8007068:	e7ee      	b.n	8007048 <__libc_init_array+0xc>
 800706a:	f855 3b04 	ldr.w	r3, [r5], #4
 800706e:	4798      	blx	r3
 8007070:	3601      	adds	r6, #1
 8007072:	e7f2      	b.n	800705a <__libc_init_array+0x1e>
 8007074:	080073f4 	.word	0x080073f4
 8007078:	080073f4 	.word	0x080073f4
 800707c:	080073f4 	.word	0x080073f4
 8007080:	080073f8 	.word	0x080073f8

08007084 <__retarget_lock_acquire_recursive>:
 8007084:	4770      	bx	lr

08007086 <__retarget_lock_release_recursive>:
 8007086:	4770      	bx	lr

08007088 <memcpy>:
 8007088:	440a      	add	r2, r1
 800708a:	4291      	cmp	r1, r2
 800708c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007090:	d100      	bne.n	8007094 <memcpy+0xc>
 8007092:	4770      	bx	lr
 8007094:	b510      	push	{r4, lr}
 8007096:	f811 4b01 	ldrb.w	r4, [r1], #1
 800709a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800709e:	4291      	cmp	r1, r2
 80070a0:	d1f9      	bne.n	8007096 <memcpy+0xe>
 80070a2:	bd10      	pop	{r4, pc}

080070a4 <memset>:
 80070a4:	4402      	add	r2, r0
 80070a6:	4603      	mov	r3, r0
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d100      	bne.n	80070ae <memset+0xa>
 80070ac:	4770      	bx	lr
 80070ae:	f803 1b01 	strb.w	r1, [r3], #1
 80070b2:	e7f9      	b.n	80070a8 <memset+0x4>

080070b4 <cleanup_glue>:
 80070b4:	b538      	push	{r3, r4, r5, lr}
 80070b6:	460c      	mov	r4, r1
 80070b8:	6809      	ldr	r1, [r1, #0]
 80070ba:	4605      	mov	r5, r0
 80070bc:	b109      	cbz	r1, 80070c2 <cleanup_glue+0xe>
 80070be:	f7ff fff9 	bl	80070b4 <cleanup_glue>
 80070c2:	4621      	mov	r1, r4
 80070c4:	4628      	mov	r0, r5
 80070c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80070ca:	f000 b869 	b.w	80071a0 <_free_r>
	...

080070d0 <_reclaim_reent>:
 80070d0:	4b2c      	ldr	r3, [pc, #176]	; (8007184 <_reclaim_reent+0xb4>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4283      	cmp	r3, r0
 80070d6:	b570      	push	{r4, r5, r6, lr}
 80070d8:	4604      	mov	r4, r0
 80070da:	d051      	beq.n	8007180 <_reclaim_reent+0xb0>
 80070dc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80070de:	b143      	cbz	r3, 80070f2 <_reclaim_reent+0x22>
 80070e0:	68db      	ldr	r3, [r3, #12]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d14a      	bne.n	800717c <_reclaim_reent+0xac>
 80070e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80070e8:	6819      	ldr	r1, [r3, #0]
 80070ea:	b111      	cbz	r1, 80070f2 <_reclaim_reent+0x22>
 80070ec:	4620      	mov	r0, r4
 80070ee:	f000 f857 	bl	80071a0 <_free_r>
 80070f2:	6961      	ldr	r1, [r4, #20]
 80070f4:	b111      	cbz	r1, 80070fc <_reclaim_reent+0x2c>
 80070f6:	4620      	mov	r0, r4
 80070f8:	f000 f852 	bl	80071a0 <_free_r>
 80070fc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80070fe:	b111      	cbz	r1, 8007106 <_reclaim_reent+0x36>
 8007100:	4620      	mov	r0, r4
 8007102:	f000 f84d 	bl	80071a0 <_free_r>
 8007106:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007108:	b111      	cbz	r1, 8007110 <_reclaim_reent+0x40>
 800710a:	4620      	mov	r0, r4
 800710c:	f000 f848 	bl	80071a0 <_free_r>
 8007110:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007112:	b111      	cbz	r1, 800711a <_reclaim_reent+0x4a>
 8007114:	4620      	mov	r0, r4
 8007116:	f000 f843 	bl	80071a0 <_free_r>
 800711a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800711c:	b111      	cbz	r1, 8007124 <_reclaim_reent+0x54>
 800711e:	4620      	mov	r0, r4
 8007120:	f000 f83e 	bl	80071a0 <_free_r>
 8007124:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007126:	b111      	cbz	r1, 800712e <_reclaim_reent+0x5e>
 8007128:	4620      	mov	r0, r4
 800712a:	f000 f839 	bl	80071a0 <_free_r>
 800712e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007130:	b111      	cbz	r1, 8007138 <_reclaim_reent+0x68>
 8007132:	4620      	mov	r0, r4
 8007134:	f000 f834 	bl	80071a0 <_free_r>
 8007138:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800713a:	b111      	cbz	r1, 8007142 <_reclaim_reent+0x72>
 800713c:	4620      	mov	r0, r4
 800713e:	f000 f82f 	bl	80071a0 <_free_r>
 8007142:	69a3      	ldr	r3, [r4, #24]
 8007144:	b1e3      	cbz	r3, 8007180 <_reclaim_reent+0xb0>
 8007146:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007148:	4620      	mov	r0, r4
 800714a:	4798      	blx	r3
 800714c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800714e:	b1b9      	cbz	r1, 8007180 <_reclaim_reent+0xb0>
 8007150:	4620      	mov	r0, r4
 8007152:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007156:	f7ff bfad 	b.w	80070b4 <cleanup_glue>
 800715a:	5949      	ldr	r1, [r1, r5]
 800715c:	b941      	cbnz	r1, 8007170 <_reclaim_reent+0xa0>
 800715e:	3504      	adds	r5, #4
 8007160:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007162:	2d80      	cmp	r5, #128	; 0x80
 8007164:	68d9      	ldr	r1, [r3, #12]
 8007166:	d1f8      	bne.n	800715a <_reclaim_reent+0x8a>
 8007168:	4620      	mov	r0, r4
 800716a:	f000 f819 	bl	80071a0 <_free_r>
 800716e:	e7ba      	b.n	80070e6 <_reclaim_reent+0x16>
 8007170:	680e      	ldr	r6, [r1, #0]
 8007172:	4620      	mov	r0, r4
 8007174:	f000 f814 	bl	80071a0 <_free_r>
 8007178:	4631      	mov	r1, r6
 800717a:	e7ef      	b.n	800715c <_reclaim_reent+0x8c>
 800717c:	2500      	movs	r5, #0
 800717e:	e7ef      	b.n	8007160 <_reclaim_reent+0x90>
 8007180:	bd70      	pop	{r4, r5, r6, pc}
 8007182:	bf00      	nop
 8007184:	20000014 	.word	0x20000014

08007188 <__malloc_lock>:
 8007188:	4801      	ldr	r0, [pc, #4]	; (8007190 <__malloc_lock+0x8>)
 800718a:	f7ff bf7b 	b.w	8007084 <__retarget_lock_acquire_recursive>
 800718e:	bf00      	nop
 8007190:	20001ea4 	.word	0x20001ea4

08007194 <__malloc_unlock>:
 8007194:	4801      	ldr	r0, [pc, #4]	; (800719c <__malloc_unlock+0x8>)
 8007196:	f7ff bf76 	b.w	8007086 <__retarget_lock_release_recursive>
 800719a:	bf00      	nop
 800719c:	20001ea4 	.word	0x20001ea4

080071a0 <_free_r>:
 80071a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80071a2:	2900      	cmp	r1, #0
 80071a4:	d044      	beq.n	8007230 <_free_r+0x90>
 80071a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071aa:	9001      	str	r0, [sp, #4]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	f1a1 0404 	sub.w	r4, r1, #4
 80071b2:	bfb8      	it	lt
 80071b4:	18e4      	addlt	r4, r4, r3
 80071b6:	f7ff ffe7 	bl	8007188 <__malloc_lock>
 80071ba:	4a1e      	ldr	r2, [pc, #120]	; (8007234 <_free_r+0x94>)
 80071bc:	9801      	ldr	r0, [sp, #4]
 80071be:	6813      	ldr	r3, [r2, #0]
 80071c0:	b933      	cbnz	r3, 80071d0 <_free_r+0x30>
 80071c2:	6063      	str	r3, [r4, #4]
 80071c4:	6014      	str	r4, [r2, #0]
 80071c6:	b003      	add	sp, #12
 80071c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80071cc:	f7ff bfe2 	b.w	8007194 <__malloc_unlock>
 80071d0:	42a3      	cmp	r3, r4
 80071d2:	d908      	bls.n	80071e6 <_free_r+0x46>
 80071d4:	6825      	ldr	r5, [r4, #0]
 80071d6:	1961      	adds	r1, r4, r5
 80071d8:	428b      	cmp	r3, r1
 80071da:	bf01      	itttt	eq
 80071dc:	6819      	ldreq	r1, [r3, #0]
 80071de:	685b      	ldreq	r3, [r3, #4]
 80071e0:	1949      	addeq	r1, r1, r5
 80071e2:	6021      	streq	r1, [r4, #0]
 80071e4:	e7ed      	b.n	80071c2 <_free_r+0x22>
 80071e6:	461a      	mov	r2, r3
 80071e8:	685b      	ldr	r3, [r3, #4]
 80071ea:	b10b      	cbz	r3, 80071f0 <_free_r+0x50>
 80071ec:	42a3      	cmp	r3, r4
 80071ee:	d9fa      	bls.n	80071e6 <_free_r+0x46>
 80071f0:	6811      	ldr	r1, [r2, #0]
 80071f2:	1855      	adds	r5, r2, r1
 80071f4:	42a5      	cmp	r5, r4
 80071f6:	d10b      	bne.n	8007210 <_free_r+0x70>
 80071f8:	6824      	ldr	r4, [r4, #0]
 80071fa:	4421      	add	r1, r4
 80071fc:	1854      	adds	r4, r2, r1
 80071fe:	42a3      	cmp	r3, r4
 8007200:	6011      	str	r1, [r2, #0]
 8007202:	d1e0      	bne.n	80071c6 <_free_r+0x26>
 8007204:	681c      	ldr	r4, [r3, #0]
 8007206:	685b      	ldr	r3, [r3, #4]
 8007208:	6053      	str	r3, [r2, #4]
 800720a:	4421      	add	r1, r4
 800720c:	6011      	str	r1, [r2, #0]
 800720e:	e7da      	b.n	80071c6 <_free_r+0x26>
 8007210:	d902      	bls.n	8007218 <_free_r+0x78>
 8007212:	230c      	movs	r3, #12
 8007214:	6003      	str	r3, [r0, #0]
 8007216:	e7d6      	b.n	80071c6 <_free_r+0x26>
 8007218:	6825      	ldr	r5, [r4, #0]
 800721a:	1961      	adds	r1, r4, r5
 800721c:	428b      	cmp	r3, r1
 800721e:	bf04      	itt	eq
 8007220:	6819      	ldreq	r1, [r3, #0]
 8007222:	685b      	ldreq	r3, [r3, #4]
 8007224:	6063      	str	r3, [r4, #4]
 8007226:	bf04      	itt	eq
 8007228:	1949      	addeq	r1, r1, r5
 800722a:	6021      	streq	r1, [r4, #0]
 800722c:	6054      	str	r4, [r2, #4]
 800722e:	e7ca      	b.n	80071c6 <_free_r+0x26>
 8007230:	b003      	add	sp, #12
 8007232:	bd30      	pop	{r4, r5, pc}
 8007234:	20001ea8 	.word	0x20001ea8

08007238 <_init>:
 8007238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800723a:	bf00      	nop
 800723c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800723e:	bc08      	pop	{r3}
 8007240:	469e      	mov	lr, r3
 8007242:	4770      	bx	lr

08007244 <_fini>:
 8007244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007246:	bf00      	nop
 8007248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800724a:	bc08      	pop	{r3}
 800724c:	469e      	mov	lr, r3
 800724e:	4770      	bx	lr
